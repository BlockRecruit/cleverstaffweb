var directive = angular.module('RecruitingApp.directives', []).
    directive('appVersion', ['version', function(version) {
        return function(scope, elm, attrs) {
            elm.text(version);
        };
    }]).value('ZeroClipboardPath', '//cdnjs.cloudflare.com/ajax/libs/zeroclipboard/1.1.7/ZeroClipboard.swf')
    .directive('appendHtml', function() {
        return {
            restrict: 'AE',
            scope: {
                text: "@text"
            },
            link: function(scope, element) {
                element.append(scope.text)
            }
        }
    })
    .directive('clipCopy', ['$window', 'ZeroClipboardPath', function($window, ZeroClipboardPath) {
        return {
            scope: {
                clipCopy: '&',
                clipClick: '&'
            },
            restrict: 'A',
            link: function(scope, element, attrs) {
                // Create the clip object
                var clip = new ZeroClipboard(element, {
                    moviePath: ZeroClipboardPath,
                    trustedDomains: ['*'],
                    allowScriptAccess: "always"
                });

                clip.on('mousedown', function(client) {
                    client.setText(scope.$eval(scope.clipCopy));
                    if (angular.isDefined(attrs.clipClick)) {
                        scope.$apply(scope.clipClick);
                    }
                });
            }
        }
    }]
).directive('phoneInfoInCandidateTable', ['$window', function($window) {
        return {
            scope: {
                contact: '='
            },
            restrict: 'A',
            link: function(scope, element, attrs) {
                angular.forEach(scope.contact, function(val) {
                    if (val.type == 'mphone') {
                        element.attr('title', val.value);
                        if (val.value != undefined) {
                            var s = val.value.split(',');
                            if (s.length == 1) {
                                element.text(val.value);
                            } else {
                                element.text(s[0] + ', ...');
                            }
                        }
                    }
                });
            }
        }
    }]
).directive('pulsar', ['$window', 'Candidate', '$rootScope', function($window, Candidate, $rootScope) {
        return {
            restrict: 'AE',
            scope: {
                left: "@",
                top: "@",
                typem: "@"
            },
            templateUrl: "partials/pulsar.html",
            link: function(scope, element, attrs) {
                element.find(".pulsar").css({
                    left: scope.left,
                    top: scope.top
                });
                element.mouseover(function(event) {

                    var left = element.find('.pulsar').css("left").replace('px', '');
                    var top = element.find('.pulsar').css("top").replace('px', '');
                    if (scope.typem == 'open_cv') {
                        scope.$parent.$parent.showResumeUploadInfoPop = true;
                        if (!scope.$parent.$parent.$$phase) {
                            scope.$parent.$parent.$apply();
                        }
                    } else if (scope.typem == 'networking') {
                        element.find('.bubble').css({
                            "top": '69px',
                            "left": Number($(this).css("left").replace('px', '')) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                        element.find('.bubble-arrow').css({
                            "background-position": "right top",
                            "left": "-63px"
                        });
                        element.find('.bubble-info').css({
                            left: 810 - Number(element.find('.bubble-info').width()) - 900,
                            "display": "block",
                            "visibility": "visible"
                        });
                    } else if (scope.typem == 'candidate_add') {
                        element.find('.bubble-arrow').css({
                            "background-position": "left bottom"
                        });
                        element.find('.bubble-info').css({
                            "display": "block",
                            "visibility": "visible",
                            top: "0px"
                        });

                        element.find('.bubble').css({
                            "top": (Number(top.replace('px', '')) - 10) + 'px',
                            "left": (Number(left.replace('px', '')) + 17) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                    } else if (scope.typem == 'recommended_candidates') {
                        element.find('.bubble-info').css({
                            "display": "block",
                            "visibility": "visible"
                        });

                        element.find('.bubble').css({
                            "top": (Number(top.replace('px', '')) - 44) + 'px',
                            "left": (Number(left.replace('px', '')) + 17) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                    } else if (scope.typem == 'search_vk_ws') {
                        element.find('.bubble-info').css({
                            "display": "block",
                            "visibility": "visible"
                        });

                        element.find('.bubble').css({
                            "top": (Number(top.replace('px', '')) - 44) + 'px',
                            "left": (Number(left.replace('px', '')) + 17) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                    } else if (scope.typem == 'scope_descr') {

                        element.find('.bubble-info').css({
                            "display": "block",
                            "visibility": "visible",
                            left: "-192px",
                            top: "-83px",
                            height: "215px"
                        });
                        element.find('.bubble-arrow').css({
                            "background-position": "right bottom",
                            left: "171px",
                            top: "-108px"

                        });

                        element.find('.bubble').css({
                            "top": (Number(top.replace('px', '')) ) + 100 + 'px',
                            "left": (Number(left.replace('px', '')) - $(this).width() - element.find('.bubble-arrow').width() - 150) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                    }
                    else if (scope.typem == 'invite_user') {
                        element.find('.bubble-arrow').css({
                            "background-position": "left bottom",
                            top: "35px"
                        });
                        element.find('.bubble-info').css({
                            "display": "block",
                            "visibility": "visible",
                            top: "54px"
                        });

                        element.find('.bubble').css({
                            "top": (Number(top.replace('px', '')) - 44) + 'px',
                            "left": (Number(left.replace('px', '')) + 17) + 'px',
                            "display": "block",
                            "visibility": "visible"
                        });
                    }
                });
                element.mouseleave(function(event) {
                    element.find('.bubble-info').css({
                        "display": "block",
                        "visibility": "visible"
                    });
                    element.find('.bubble').css({
                        "display": "none",
                        "visibility": "hidden"
                    });
                    if (scope.typem == 'open_cv') {
                        scope.$parent.$parent.showResumeUploadInfoPop = false;
                        if (!scope.$parent.$parent.$$phase) {
                            scope.$parent.$parent.$apply();
                        }

                    }
                });
            }
        };
    }]
).directive('statisticsDir', ["Statistic", "$filter", "$translate", function(Statistic, $filter, $translate) {
        return {
            restrict: 'AE',
            scope: {
                statisticObj: "="
            },
            templateUrl: "partials/notices/statistics.html",
            link: function(scope, element, attrs) {
                element.find('.button_open').click(function() {
                    Statistic.getSalesFunnel(scope.statisticObj.requestObj, function(resp) {
                        scope.hasFunnelChart = false;
                        console.log("create diagram");
                        if (resp['longlist'] != 0) {
                            scope.hasFunnelChart = true;
                            var myChart = {};
                            if (resp.funnelMap) {
                                var series = [];
                                var values = [];
                                var values2 = [];
                                var values3 = [];
                                var lastCount = null;
                                angular.forEach(resp.funnelMap, function(i, s) {
                                    series.push({
                                        "values": [i]
                                    });
                                    values.push($filter('translate')("interview_status_assoc" + "." + s));
                                    values2.push(i.toString());
                                    if (lastCount == null) {
                                        values3.push('100%');
                                    } else {
                                        values3.push((i != 0 ? Math.round(i / lastCount * 100) : 0) + '%');
                                    }
                                    lastCount = i;
                                });
                                myChart = {
                                    "type": "funnel",
                                    "series": series,
                                    tooltip: {
                                        visible: true,
                                        shadow: 0
                                    },

                                    "scale-y": {
                                        "values": values,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 50
                                        }
                                    },
                                    "scale-y-2": {
                                        "values": values2,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -40
                                        }
                                    },
                                    "scale-y-3": {
                                        "values": values3,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -10
                                        }
                                    },
                                    "scale-x": {
                                        "values": [""]
                                    },
                                    labels: [
                                        {
                                            text: $filter('translate')('Relative conversion'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 670,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('Candidates'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: $translate.use() != 'en' ? 580 : 605,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('status'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 100,
                                            offsetY: 20
                                        }
                                    ],
                                    "backgroundColor": "white",
                                    "gui": {
                                        "behaviors": [
                                            {
                                                "id": "DownloadPDF",
                                                "enabled": "none"
                                            }, {
                                                "id": "Reload",
                                                "enabled": "none"
                                            }, {
                                                "id": "Print",
                                                "enabled": "none"
                                            }, {
                                                "id": "DownloadSVG",
                                                "enabled": "none"
                                            }, {
                                                "id": "LogScale",
                                                "enabled": "none"
                                            }, {
                                                "id": "About",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "BugReport",
                                                "enabled": "none"
                                            }, {
                                                "id": "ViewSource",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }
                                        ]
                                    }
                                };
                            } else {
                                myChart = {
                                    "type": "funnel",
                                    "width":'610px',
                                    "series": [
                                        {
                                            "values": [resp['longlist']]
                                        }, {
                                            "values": [resp['shortlist']]
                                        }, {
                                            "values": [resp['interview']]
                                        }, {
                                            "values": [resp['approved']]
                                        }
                                    ],
                                    "tooltip": {
                                        "visible": true
                                    },
                                    "scale-y": {
                                        "values": [$filter('translate')('long_list'),
                                            $filter('translate')('short_list'),
                                            $filter('translate')('interview'),
                                            $filter('translate')('approved')],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 35
                                        }
                                    },
                                    "scale-y-2": {
                                        "values": [resp['longlist'] + '',
                                            resp['shortlist'] + '',
                                            resp['interview'] + '',
                                            resp['approved'] + ''],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 0
                                        }
                                    },
                                    "scale-y-3": {
                                        "values": ['100%',
                                            Math.round(resp['shortlist'] / resp['longlist'] * 100) + '%',
                                            (resp['shortlist'] != 0 ? Math.round(resp['interview'] / resp['shortlist'] * 100) : 0) + '%',
                                            (resp['interview'] != 0 ? Math.round(resp['approved'] / resp['interview'] * 100) : 0) + '%'],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 55
                                        }
                                    },
                                    "scale-y-4": {
                                        "values": ['100%',
                                            Math.round(resp['shortlist'] / resp['longlist'] * 100) + '%',
                                            (resp['interview'] != 0 ? Math.round(resp['interview'] / resp['longlist'] * 100) : 0) + '%',
                                            (resp['approved'] != 0 ? Math.round(resp['approved'] / resp['longlist'] * 100) : 0) + '%'],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 115
                                        }
                                    },
                                    "scale-x": {
                                        "values": [""]
                                    },
                                    labels: [
                                        {
                                            text: $filter('translate')('Relative conversion'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 570,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('Absolute conversion'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 670,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('Candidates'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: $translate.use() != 'en' ? 485 : 505,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('status'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 80,
                                            offsetY: 20
                                        }
                                    ],
                                    "backgroundColor": "white",
                                    "gui": {
                                        "behaviors": [
                                            {
                                                "id": "DownloadPDF",
                                                "enabled": "none"
                                            }, {
                                                "id": "Reload",
                                                "enabled": "none"
                                            }, {
                                                "id": "Print",
                                                "enabled": "none"
                                            }, {
                                                "id": "DownloadSVG",
                                                "enabled": "none"
                                            }, {
                                                "id": "LogScale",
                                                "enabled": "none"
                                            }, {
                                                "id": "About",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "BugReport",
                                                "enabled": "none"
                                            }, {
                                                "id": "ViewSource",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }
                                        ]
                                    }
                                };
                            }
                            zingchart.render({
                                id: "myChartDiv",
                                data: myChart,
                                height: 350,
                                width: 750,
                                output: "html5"
                            });
                        }
                    });
                    var statPanel = element.find('#statistic_panel');
                    statPanel.css({left: Number(element.find("#buttonPanel").width()) + 14});
                    if (statPanel.css('display') == 'none') {
                        statPanel.toggle('slide', {direction: 'left'}, 400);
                        $(document).mouseup(function(e) {
                            var statElement = $("#statistic_panel");
                            if ($("#statistic_panel").has(e.target) && !$('.button_open').is(e.target)) {
                                element.find("#statistic_panel").hide();
                                $(document).off('mouseup');
                            }
                        });
                    } else {
                        statPanel.hide();
                        $(document).off('mouseup')
                    }
                });
            }
        }
    }]
).directive('userStatisticsDir', ["Statistic", "$filter", "$translate", function(Statistic, $filter, $translate) {
        return {
            restrict: 'AE',
            scope: {
                user: "@userId",
                name: "@userName"
            },
            templateUrl: "partials/notices/userSalesFunnel.html",
            link: function(scope, element, attrs) {
                element.find('.button_open').click(function() {
                    var chartId = scope.user + "_chartDiv";
                    Statistic.getSalesFunnel({creator: scope.user}, function(resp) {
                        scope.hasFunnelChart = false;
                        if (resp['longlist'] != 0) {
                            scope.hasFunnelChart = true;
                            var myChart = {};
                            if (resp.funnelMap) {
                                var series = [];
                                var values = [];
                                var values2 = [];
                                var values3 = [];
                                var lastCount = null;
                                angular.forEach(resp.funnelMap, function(i, s) {
                                    series.push({
                                        "values": [i]
                                    });
                                    values.push($filter('translate')("interview_status_assoc" + "." + s));
                                    values2.push(i.toString());
                                    if (lastCount == null) {
                                        values3.push('100%');
                                    } else {
                                        values3.push((i != 0 ? Math.round(i / lastCount * 100) : 0) + '%');
                                    }
                                    lastCount = i;
                                });
                                myChart = {
                                    "type": "funnel",
                                    "series": series,
                                    tooltip: {
                                        visible: true,
                                        shadow: 0
                                    },

                                    "scale-y": {
                                        "values": values,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 50
                                        }
                                    },
                                    "scale-y-2": {
                                        "values": values2,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -40
                                        }
                                    },
                                    "scale-y-3": {
                                        "values": values3,
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -10
                                        }
                                    },
                                    "scale-x": {
                                        "values": [""]
                                    },
                                    labels: [
                                        {
                                            text: $filter('translate')('Conversion'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 670,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('Count'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: $translate.use() != 'en' ? 580 : 605,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('status'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 100,
                                            offsetY: 20
                                        }
                                    ],
                                    "backgroundColor": "white",
                                    "gui": {
                                        "behaviors": [
                                            {
                                                "id": "DownloadPDF",
                                                "enabled": "none"
                                            }, {
                                                "id": "Reload",
                                                "enabled": "none"
                                            }, {
                                                "id": "Print",
                                                "enabled": "none"
                                            }, {
                                                "id": "DownloadSVG",
                                                "enabled": "none"
                                            }, {
                                                "id": "LogScale",
                                                "enabled": "none"
                                            }, {
                                                "id": "About",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "BugReport",
                                                "enabled": "none"
                                            }, {
                                                "id": "ViewSource",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }
                                        ]
                                    }
                                };
                            } else {
                                myChart = {
                                    "type": "funnel",
                                    "series": [
                                        {
                                            "values": [resp['longlist']]
                                        }, {
                                            "values": [resp['shortlist']]
                                        }, {
                                            "values": [resp['interview']]
                                        }, {
                                            "values": [resp['approved']]
                                        },
                                    ],
                                    "tooltip": {
                                        "visible": true
                                    },
                                    "scale-y": {
                                        "values": [$filter('translate')('long_list'),
                                            $filter('translate')('short_list'),
                                            $filter('translate')('interview'),
                                            $filter('translate')('approved')],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": 60
                                        }
                                    },
                                    "scale-y-2": {
                                        "values": [resp['longlist'] + '',
                                            resp['shortlist'] + '',
                                            resp['interview'] + '',
                                            resp['approved'] + ''],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -40
                                        }
                                    },
                                    "scale-y-3": {
                                        "values": ['100%',
                                            Math.round(resp['shortlist'] / resp['longlist'] * 100) + '%',
                                            (resp['shortlist'] != 0 ? Math.round(resp['interview'] / resp['shortlist'] * 100) : 0) + '%',
                                            (resp['interview'] != 0 ? Math.round(resp['approved'] / resp['interview'] * 100) : 0) + '%'],
                                        "item": {
                                            fontSize: 12,
                                            "offset-x": -10
                                        }
                                    },
                                    "scale-x": {
                                        "values": [""]
                                    },
                                    labels: [
                                        {
                                            text: $filter('translate')('Conversion'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 670,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('Count'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: $translate.use() != 'en' ? 580 : 605,
                                            offsetY: 20
                                        },
                                        {
                                            text: $filter('translate')('status'),
                                            fontWeight: "bold",
                                            fontSize: 12,
                                            offsetX: 100,
                                            offsetY: 20
                                        }
                                    ],
                                    "backgroundColor": "white",
                                    "gui": {
                                        "behaviors": [
                                            {
                                                "id": "DownloadPDF",
                                                "enabled": "none"
                                            }, {
                                                "id": "Reload",
                                                "enabled": "none"
                                            }, {
                                                "id": "Print",
                                                "enabled": "none"
                                            }, {
                                                "id": "DownloadSVG",
                                                "enabled": "none"
                                            }, {
                                                "id": "LogScale",
                                                "enabled": "none"
                                            }, {
                                                "id": "About",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "BugReport",
                                                "enabled": "none"
                                            }, {
                                                "id": "ViewSource",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }, {
                                                "id": "FullScreen",
                                                "enabled": "none"
                                            }
                                        ]
                                    }
                                };
                            }
                            zingchart.render({
                                id: chartId,
                                data: myChart,
                                height: 350,
                                width: 750,
                                output: "html5"
                            });
                        }
                    });
                    var salesFunnelId = '#' + scope.user + '_panel';
                    var statPanel = element.find(salesFunnelId);
                    statPanel.css({left: $(window).width() / 2 - statPanel.width() / 2});
                    if (statPanel.css('display') == 'none') {
                        statPanel.toggle('slide', {direction: 'left'}, 400);
                        $(document).mouseup(function(e) {
                            if ($(salesFunnelId).has(e.target) && !$('.button_open').is(e.target)) {
                                element.find(salesFunnelId).hide();
                                $(document).off('mouseup');
                            }
                        });
                    } else {
                        statPanel.hide();
                        $(document).off('mouseup')
                    }
                });
            }
        }
    }]
).directive('noticesDir', ["$window", "Candidate", "CacheCandidates", "$rootScope", "Person", "$location",
        "Service", "Notice", "$translate", "$filter", "tmhDynamicLocale",
        function($window, Candidate, CacheCandidates, $rootScope, Person, $location, Service, Notice, $translate,
                 $filter, tmhDynamicLocale) {
            return {
                scope: {},
                restrict: 'AE',
                templateUrl: "partials/notices/notice.html",
                link: function(scope, element, attrs) {
                    var sendReadRequest = [];
                    var favicon = new Favico({
                        animation:'none',
                        position : 'up'
                    });
                    scope.noticeObj = {tariffPlanType: null, notices: null, read: 0};
                    scope.sync = {withEmail: false, withGoogle: false};
                    var check = 0;
                    //Candidate.getParseEmailData(function(resp) {
                    //    if (resp.status && resp.status === "ok") {
                    //        angular.forEach(resp.objects, function(val) {
                    //            if (val.validHost) {
                    //                scope.sync.withEmail = "active";
                    //            } else if (scope.sync.withEmail === false) {
                    //                scope.sync.withEmail = "processing";
                    //            }
                    //        });
                    //
                    //    }
                    //}, function(resp) {
                    //});
                    scope.toCandidateAddEmail = function() {
                        closePopUp();
                        $location.path('/candidate/add/email');
                    };

                    Notice.registerNoticeView(function(id) {
                        $rootScope.newNoticeCount = $rootScope.newNoticeCount - 1;
                        favicon.badge($rootScope.newNoticeCount);
                        angular.forEach(scope.noticeObj.notices, function(val) {
                            if (val.noticeId == id) {
                                val.read = true;
                                scope.noticeObj.read++;
                            }
                        });
                    }, "noticesDir");

                    scope.toVacancy=function(val){
                        $location.path('/vacancies/'+val);
                    };
                    scope.readNotice = function(n) {
                        if (!n.read && sendReadRequest.indexOf(n.noticeId) == -1) {
                            Notice.updateNoticesView(n.noticeId, "noticesDir");
                            sendReadRequest.push(n.noticeId);
                            var index = sendReadRequest.indexOf(n.noticeId);
                            Service.readNotice(n.noticeIds, function(resp) {
                                if (resp.status && resp.status == "ok") {
                                    n.read = true;
                                    scope.noticeObj.read++;
                                    $rootScope.newNoticeCount = $rootScope.newNoticeCount - 1;
                                    favicon.badge($rootScope.newNoticeCount);
                                    document.dispatchEvent(new CustomEvent('cleverstaffExtensionReloadCountUnreadNotice'));
                                } else if (resp.message) {
                                }
                                sendReadRequest.splice(index, 1);
                            }, function(resp) {
                                sendReadRequest.splice(index, 1);
                            });
                        } else {
                        }
                    };
                    scope.toPage = function(notice) {
                        if (notice.type == 'parserEmailIncorrectPassword') {
                            closePopUp();
                            $location.path("/candidate/add/email")
                        }
                    };
                    scope.toCandidate = function(id) {
                        closePopUp();
                        $location.path('/candidates/' + id);
                    };
                    $rootScope.updateNoticesNav = function(){
                        var interval = setInterval(function(){
                            if($rootScope.globalNotice){
                                clearInterval(interval);
                                if($rootScope.me !== undefined) {
                                    scope.sync.withGoogle = $rootScope.me.googleMail != undefined;
                                } else {
                                    scope.sync.withGoogle = false;
                                }
                                if ($rootScope.globalNotice.notices != undefined && $rootScope.globalNotice.notices.length > 0) {
                                    scope.noticeObj.notices = $rootScope.globalNotice.notices;
                                    $rootScope.newNoticeCount = $rootScope.globalNotice.countUnreadNotice;
                                    favicon.badge($rootScope.newNoticeCount);
                                    $rootScope.$apply()
                                }
                            }
                        },500);
                        //Person.getMe(function(resp) {
                        //    scope.sync.withGoogle = resp.googleMail != undefined;
                        //    if (resp.notices != undefined && resp.notices.length > 0) {
                        //        scope.noticeObj.notices = resp.notices;
                        //        $rootScope.newNoticeCount = resp.countUnreadNotice;
                        //        favicon.badge($rootScope.newNoticeCount);
                        //    }
                        //});
                    };
                    $rootScope.updateNoticesNav();
                    Person.getAllPersons(function(resp) {
                        scope.associativePerson = resp.object;
                        angular.forEach(scope.associativePerson, function(element, key) {
                            if (element.userId != undefined && resp.status == 'ok') {
                                check++;
                            }
                            scope.noticeObj.tariffPlanType = check > 1 ? "company" : "freelancer";
                            if (check > 1) {

                            }
                        })
                    });
                    function closePopUp() {
                        $("#notices").hide();
                        $("#notice_element_icon").css({"background-color": "rgba(0, 0, 0, 0)"});
                        $(document).off('mouseup');
                    }

                    scope.toUser = function() {
                        closePopUp();
                        $location.path('/users/' + $rootScope.me.userId);
                    };
                    scope.toCheckout = function() {
                        closePopUp();
                        $location.path('/pay');
                    };
                    scope.toListNotices = function() {
                        closePopUp();
                        $location.path('/notices');
                    };
                    scope.toAddEmail = function() {
                        closePopUp();
                        $location.path('/email-integration');
                    };
                    scope.checkEverythingRead = function(){
                        Notice.readAll(function(resp){
                           if(resp.status == 'ok'){
                               Notice.getMy(function(resp) {
                                   scope.sync.withGoogle = resp.googleMail != undefined;
                                   if (resp.object.notices != undefined && resp.object.notices.length > 0) {
                                       scope.noticeObj.notices = resp.object.notices;
                                       $rootScope.newNoticeCount = resp.object.countUnreadNotice;
                                       favicon.badge($rootScope.newNoticeCount);
                                   }
                               });
                           }
                        })
                    };
                    $rootScope.changeFaviconNumber = function(number){
                        $rootScope.newNoticeCount = number;
                        favicon.badge($rootScope.newNoticeCount);
                    };
                    scope.changeLanguage = function(key) {
                        $translate.use(key);
                        tmhDynamicLocale.set(key);
                        Person.setLang({lang: key});
                    };
                    scope.getPlugin = function() {
                        if (navigator.saysWho.indexOf("Chrome") != -1) {
                            $window.open("https://chrome.google.com/webstore/detail/cleverstaff-extension/mefmhdnojajocbdcpcajdjnbccggbnha");
                        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
                            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
                            $window.open("/extension/CleverstaffExtension4Firefox.xpi");
                        } else {
                            $("#bad-browser-modal").modal("show");
                        }
                    };
                    scope.getBrowser = function() {
                        if (navigator.saysWho.indexOf("Chrome") != -1) {
                            return "Chrome";
                        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
                            return "Firefox";
                        } else {
                            return $filter("translate")("browser");
                        }
                    };
                    scope.isGoodBrowser = function() {
                        return scope.getBrowser() === "Chrome" || scope.getBrowser() === "Firefox";
                    };

                    navigator.saysWho = (function() {
                        var ua = navigator.userAgent, tem,
                            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                        if (/trident/i.test(M[1])) {
                            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                            return 'IE ' + (tem[1] || '');
                        }
                        if (M[1] === 'Chrome') {
                            tem = ua.match(/\bOPR\/(\d+)/);
                            if (tem != null) return 'Opera ' + tem[1];
                        }
                        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                        if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
                        return M.join(' ');
                    })();

                    scope.extensionHas = false;
                    if ($rootScope.eventListenerPing) {
                        document.removeEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
                    }
                    $rootScope.eventListenerPing = function(event) {
                        console.log('extension has');
                        scope.extensionHas = true;
                        $rootScope.extensionHas = true;
                        Service.saveBrowserWithPlugin({browser: scope.getBrowser()});
                    };
                    document.addEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
                    document.dispatchEvent(new CustomEvent('cleverstaffExtensionPing'));

                }
            }
        }]
).directive('helpZip1', ["$window", "Candidate", "CacheCandidates", "$rootScope", "Person", "$location", "Service", "Notice", "$translate", "$filter", "tmhDynamicLocale","Vacancy",
        function($window, Candidate, CacheCandidates, $rootScope, Person,Vacancy, $location, Service, Notice, $translate, $filter, tmhDynamicLocale) {
            return {
                scope: {},
                restrict: 'AE',
                templateUrl: "partials/notices/helpWindowZip1.html",
                link: function(scope, element, attrs) {

                    //function closePopUp() {
                    //    $("#noticesQuestion").hide();
                    //    $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"})
                    //    $(document).off('mouseup');
                    //}
                }
            }
        }]
).directive('helpZip2', ["$window", "Candidate", "CacheCandidates", "$rootScope", "Person", "$location", "Service", "Notice", "$translate", "$filter", "tmhDynamicLocale","Vacancy",
        function($window, Candidate, CacheCandidates, $rootScope, Person,Vacancy, $location, Service, Notice, $translate, $filter, tmhDynamicLocale) {
            return {
                scope: {},
                restrict: 'AE',
                templateUrl: "partials/notices/helpWindowZip2.html",
                link: function(scope, element, attrs) {

                    //function closePopUp() {
                    //    $("#noticesQuestion").hide();
                    //    $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"})
                    //    $(document).off('mouseup');
                    //}
                }
            }
        }]
).directive('helpZip3', ["$window", "Candidate", "CacheCandidates", "$rootScope", "Person", "$location", "Service", "Notice", "$translate", "$filter", "tmhDynamicLocale","Vacancy",
        function($window, Candidate, CacheCandidates, $rootScope, Person,Vacancy, $location, Service, Notice, $translate, $filter, tmhDynamicLocale) {
            return {
                scope: {},
                restrict: 'AE',
                templateUrl: "partials/notices/helpWindowZip3.html",
                link: function(scope, element, attrs) {

                    //function closePopUp() {
                    //    $("#noticesQuestion").hide();
                    //    $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"})
                    //    $(document).off('mouseup');
                    //}
                }
            }
        }]
).directive('priview', ["$window", "Candidate", "CacheCandidates", "$rootScope","$location","$sce", function($window, Candidate, CacheCandidates, $rootScope, $location, $sce) {
        return {
            scope: {
                candidate: '=',
                pageid: "@"
            },
            restrict: 'A',
            link: function(scope, element, attrs) {
                var checkShow = false;
                var isOpen = false;
                element.click(function(event) {
                    if (!isOpen) {
                        $rootScope.loadingPriview = true;
                        timeToOPen(event);
                        setTimeout(function(){
                            $rootScope.loadingPriview = false;
                        },0)
                    }
                });
                element.mouseup(function() {
                    checkShow = false;
                    isOpen = false;
                });
                function setPosition() {
                    var pos = findPos(element.find('.text_change')[0]);
                    var preview_top = pos[0] + 5 - $('#candidate_preview').height() / 2;
                    var checkLessThenNull = false;
                    if (preview_top < 0) {
                        checkLessThenNull = true
                    }
                    $('#candidate_preview').css({
                        "top": !checkLessThenNull ? preview_top : "41px",
                        "left": pos[1] + 50
                    });
                    $('#arrow_preview').css({
                        "top": !checkLessThenNull ? $('#candidate_preview').height() / 2 - 57 : "50px",
                        "left": "-28px"
                    });
                    $('#' + scope.pageid).click(function() {
                        $('#candidate_preview').css({
                            "top": 0,
                            "left": 0
                        });
                        $('#candidate_preview').hide();
                        $('#vacancy').off('click');
                        $rootScope.candidatePreview = null;
                        isOpen = false;
                    });
                    //$("#candidate_preview").toggle('slide', {direction: 'left'}, 300);
                    $("#candidate_preview").css('display', 'block');
                    isOpen = true;
                }
                function timeToOPen(event) {
                    openCandidate(event);
                    if (!checkShow) {
                        checkShow = true;
                        setTimeout(function() {
                            if (checkShow && !isOpen) {
                                if ($rootScope.candidatePreview) {
                                    $('#candidate_preview').hide();
                                    $rootScope.candidatePreview = null;
                                    $rootScope.previewHistory = null;
                                    $rootScope.$apply();
                                    setTimeout(function() {
                                        setPosition()
                                    }, 50)
                                } else {
                                    setTimeout(function() {
                                        setPosition()
                                    }, 0);
                                }
                            }
                        }, 100);
                    }
                }

                function findPos(obj) {
                    var obj2 = obj;
                    var curtop = 0;
                    var curleft = 0;
                    if (document.getElementById || document.all) {
                        do {
                            curleft += obj.offsetLeft - obj.scrollLeft;
                            curtop += obj.offsetTop - obj.scrollTop;
                            obj = obj.offsetParent;
                            obj2 = obj2.parentNode;
                            while (obj2 != obj) {
                                curleft -= obj2.scrollLeft;
                                curtop -= obj2.scrollTop;
                                obj2 = obj2.parentNode;
                            }
                        } while (obj.offsetParent)
                    } else if (document.layers) {
                        curtop += obj.y;
                        curleft += obj.x;
                    }
                    return [curtop, curleft];
                }

                function open(resp) {
                    $rootScope.setDocCounter();
                    $(document).click(function(e) {
                        var container = $("#candidate_preview");
                        if (!container.is(e.target) && container.has(e.target).length === 0) {
                            container.hide();
                            $rootScope.candidatePreview = null;
                            $rootScope.previewHistory = null;
                            $rootScope.$apply();
                            $(document).unbind("click")
                        }
                    });

                    $rootScope.candidatePreview = resp;
                    $rootScope.previewHistory = resp.actions.objects ? resp.actions.objects : null;
                    $rootScope.lastCandidatePreview = resp.candidateId;
                    $rootScope.imgWidthPreviewFunc = function(){
                        var img = new Image();
                        img.onload = function() {
                            var width = this.width;
                            var height = this.height;
                            console.log(width);
                            console.log(height);
                            var minus = width - height;
                            if(width >= height && minus > 30 && minus <=100){
                                $('#photo-preview').css('width', '23%');
                            }else if(width >= 300 && width <= 349 && width != height){
                                $('#photo-preview').css('height', '385px');
                            }else if(width >= 350 && width != height){
                                $('#photo-preview').css('width', '33%');
                            }else if(width >= 266 && width != height){
                                $('#photo-preview').css('width', '33%');
                            }else if(width == height){
                                $('#photo-preview').css('width', '33%');
                            }else{
                                $('#photo-preview').css('width', 'inherit');
                            }
                        };
                        if($location.$$host == '127.0.0.1'){
                            img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $rootScope.serverAddress + '/getapp?id=' + $rootScope.candidatePreview.photo + '&d=' + $rootScope.me.personId;
                        }else{
                            img.src = $location.$$protocol + '://' + $location.$$host + $rootScope.serverAddress + '/getapp?id=' + $rootScope.candidatePreview.photo + '&d=' + $rootScope.me.personId;
                        }
                    };
                    $rootScope.imgWidthPreviewFunc();
                    if (!$rootScope.candidatePreview.db && !$rootScope.candidatePreview.expirence && !$rootScope.candidatePreview.languages && !$rootScope.candidatePreview.employmentType && !$rootScope.candidatePreview.salary && !$rootScope.candidatePreview.contacts) {
                        $rootScope.previewInfoIsMissing = true;
                    }
                    if (!$rootScope.$$phase) {
                        $rootScope.$apply();
                    }
                }

                //$rootScope.hideCandidatePreviewModal = function() {
                //    $('#candidate_preview').hide();
                //};


                function openCandidate(event) {
                    $rootScope.previewInfoIsMissing = false;
                        Candidate.one({"localId": scope.candidate.localId}, function(resp) {
                            var array = [];
                            angular.forEach(resp.object.files,function(res){
                                initDocuments(res);
                                if(res.showGDocs && ($(element).hasClass("preview-docs"))){
                                    resp.object.showDocument = true;
                                    res.linkFileForShow = "https://docs.google.com/viewer?embedded=true&url=http://" + $location.$$host + "/hr/showFile/" + res.fileId + "/" + encodeURI(res.fileName) + '?decache=' + Math.random();
                                    res.linkFileForShow = $sce.trustAsResourceUrl(res.linkFileForShow);
                                    array.push(res);
                                }
                            });
                            resp.object.files = array;
                            open(resp.object);
                            CacheCandidates.add(resp.object);
                        });
                }
            }
        }
    }]
).directive('ngEnterSearch', function() {
        return function(scope, element, attrs) {
            element.bind("keypress", function(event) {
                if (event.which === 13) {
                    scope.clickSearch();
                }
            });
        }
    }
)
    .directive('recommendation', function() {
        return {
            restrict: "EA",
            link: function(scope, element, attr) {
                var buttonAdd = element.next(".recommendationAdd");
                element.hover(function() {
                    var buttonAdd = element.next(".recommendationAdd");
                    buttonAdd.removeClass("blockDisplay");
                    var position = getPosition(buttonAdd[0]);
                    if (element[0].getAttribute("isOfset") == undefined) {
                        buttonAdd.offset({
                            top: (buttonAdd.offset().top - element[0].scrollHeight / 2) - 13,
                            left: (element[0].scrollWidth / 2) - 6
                        });
                        element[0].setAttribute("isOfset", "true");
                    }
                });
                element.mouseleave(function(event) {
                    var buttonAdd = element.next('.recommendationAdd');
                    buttonAdd.addClass("blockDisplay");
                });
            }
        }
    }
).directive('recbutton', function() {
            return {
                restrict: "EA",
                link: function(scope, element, attr) {
                    element.hover(function() {
                        element.removeClass("blockDisplay");
                    });
                    element.mouseleave(function() {
                        element.addClass("blockDisplay");
                    })
                }
            }
        }
)
    .directive('modalAddFile', ["$filter", function($filter) {
        return {
            restrict: "EA",
            templateUrl: "partials/modal/add-photo-candidate.html",
            link: function(scope, element, attr) {
                scope.loader = true;
                scope.modalAddPhoto = true;
                scope.showErrorAddPhotoMessage = false;
                if (attr.page == "candidate") {
                    scope.headerFile = $filter('translate')('You can select a photo on your computer');
                    scope.headerLink = $filter('translate')('Or provide a link to photos on the internet');
                } else if (attr.page == "client") {
                    scope.headerFile = $filter('translate')('You can select a logo on your computer');
                    scope.headerLink = $filter('translate')('Or provide a link to logo on the internet');
                }
                scope.showModalAddPhoto = function(headerText) {
                    scope.modalAddPhotoHeaderText = $filter('translate')(headerText);
                    scope.modalAddPhoto = true;
                    element.children().addClass("active");
                    element.children().removeClass("hide");
                    element.children().children().addClass("active");
                };
                scope.hideModalAddPhoto = function() {
                    if (scope.modalAddPhoto) {
                        element.children().addClass("hide");
                        element.children().removeClass("active");
                        element.children().children().removeClass("active");
                        scope.modalAddPhoto = false;
                        scope.photoUrl = "";
                    }
                };
            }
        }
    }]
).directive('statusColorNew', ["$filter", function($filter) {
        return {
            restrict: "EA",
            scope: {
                old: "=",
                new: "=",
                icon: "=",
                statusarr: "@"
            },
            link: function(scope, element) {
                if(!scope.statusarr){
                    scope.statusarr = '';
                }
                if (scope.new) {
                    element.append(createSpanForInterviewStatusHistory(scope.statusarr,scope.old, $filter)+
                        "<i class='fa fa-angle-right' aria-hidden='true' style='color: black;padding-right: 6px;'></i>"
                    + createSpanForInterviewStatusHistory(scope.statusarr, scope.new, $filter))
                } else {
                    scope.$watch("old", function() {
                        element.html(createSpanForInterviewStatusHistory(scope.statusarr, scope.old, $filter, true));
                        if (scope.icon) {
                            $(element).find("span").append('<i style="margin: 0px 0px 0px 5px;" class="caret small down icon"></i>');
                        }
                    });
                }
            }
        }
    }]
).directive('statusColorDiv', ["$filter", function($filter) {
        return {
            restrict: "EA",
            scope: {
                old: "="
            },
            link: function(scope, element) {
                element.html(createDivForInterviewStatusHistory(scope.old, $filter));
            }
        }
    }]
).directive('statusColor', ["$filter", function($filter) {
        return {
            restrict: "EA",
            scope: {
                old: "=",
                new: "="
            },
            link: function(scope, element) {
                scope.one = true;
                var retText;
                var span;

                function translate(value) {
                    return $filter('translate')(value);
                }

                function name(status, scope) {
                    var checkLast = false;
                    var span = "<span style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:";
                    if (status === 'longlist') {
                        span = span + "#9eacc3'>" + translate("long_list") + "</span>"
                    } else if (status === 'shortlist') {
                        span = span + "#b5c3da;'>" + translate("short_list") + "</span>"
                    } else if (status === 'interview') {
                        span = span + "#f09c99'>" + translate("interview") + "</span>"
                    } else if (status === 'notafit') {
                        span = span + "#71a6b1'>" + translate("not_a_fit") + "</span>"
                    } else if (status === 'approved') {
                        span = span + "#b5d6a8'>" + translate("approved") + "</span>"
                    } else if (status === 'declinedoffer') {
                        span = span + "#d9a9bf'>" + translate("declined_offer") + "</span>"
                    } else {
                        span = span + "#9B4F9B'>";
                        if (scope.old === 'not_searching') {
                            span = span + translate(scope.old);
                        } else if (scope.old === 'passive_search') {
                            span = span + translate(scope.old);
                        } else if (scope.old === 'active_search') {
                            span = span + translate(scope.old);
                        } else if (scope.old === 'employed') {
                            span = span + translate(scope.old);
                        } else {
                            span = span + translate(scope.old);
                        }
                        span = span + "</span>" + "<i class='right icon' style='color: black;padding-right: 6px;'></i>" + "<span style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:#E45454'>";
                        if (scope.new === 'not_searching') {
                            span = span + translate(scope.new);
                        } else if (scope.new === 'passive_search') {
                            span = span + translate(scope.new);
                        } else if (scope.new === 'active_search') {
                            span = span + translate(scope.new);
                        } else if (scope.new === 'employed') {
                            span = span + translate(scope.new);
                        } else {
                            span = span + translate(scope.new)
                        }
                        span = span + "</span>";
                        checkLast = true;
                    }
                    if (!checkLast)
                        scope.one = false;
                    return span;
                }

                if (scope.new == undefined || scope.one) {
                    span = "<span style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:";
                    retText = name(scope.old, scope);
                }
                if (scope.new != undefined && !scope.one) {
                    retText = "<span style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:";
                    retText = name(scope.old, scope) + "<i class='right icon' style='color: black;padding-right: 6px;'></i>" + name(scope.new, scope);
                }
                element.append(retText);
            }
        }
    }]
)
//    .directive('popoverClose', function($timeout){
//        console.log('1');
//    return{
//        scope: {
//            excludeClass: '@'
//        },
//        link: function(scope, element, attrs) {
//            console.log('2');
//            var trigger = document.getElementsByClassName('trigger');
//            console.log(trigger);
//            function closeTrigger(i) {
//                $timeout(function(){
//                    console.log(i);
//                    $('.popover').css({display: 'none'});
//                    //angular.element(trigger[0]).triggerHandler('click').removeClass('trigger');
//                    console.log(angular.element);
//                });
//            }
//
//            element.on('click', function(event){
//                console.log('5');
//                $('.popover').hide({display: 'none!important'}, 0);
//            });
//        }
//    };
//}).directive('popoverElem', function(){
//    return{
//        link: function(scope, element, attrs) {
//            element.on('click', function(){
//                element.addClass('trigger');
//            });
//            console.log('qwerty');
//        }
//    };
//})
    .directive('highlights', ["$location", function($location) {
        return {
            restrict: 'EA',
            scope: {
                hgobject: "=",
                hgtablecollspan: "@",
                hglocationOfOneObject: "="
            },
            link: function(scope, element) {
                if (scope.hgobject === undefined) {
                    return;
                }
                if (scope.hgobject.highlights !== undefined && scope.hgobject.highlights.length > 0) {
                    var reg = /<highlight>|<\/highlight>/g;
                    var withoutHighlitedString = scope.hgobject.highlights[0].replace(reg, '');
                    if(withoutHighlitedString == scope.hgobject.position){
                        scope.hgobject.position = scope.hgobject.highlights[0];
                    }else if(withoutHighlitedString == scope.hgobject.fullName){
                        scope.hgobject.fullName = scope.hgobject.highlights[0];
                    }else{
                        $("<tr><td style='padding-left: 4%;' colspan='" + scope.hgtablecollspan + 1 + "'>" + scope.hgobject.highlights + "</td></tr>").insertAfter(element).on('click', function() {
                            $location.path(scope.hglocationOfOneObject + scope.hgobject.localId);
                            scope.$apply();
                        });
                    }
                }
                if (scope.hgobject.files !== undefined) {
                    angular.forEach(scope.hgobject.files, function(value) {
                        angular.forEach(value.highlights, function(highlight) {
                            $("<tr><td style='padding-left: 4%;' title='" + value.fileName + "' colspan='" + scope.hgtablecollspan + "'>" + "<i style='padding-right: 10px' class='fa fa-paperclip'></i>" + highlight + "</td></tr>").insertAfter(element).on('click', function() {
                                $location.path(scope.hglocationOfOneObject + scope.hgobject.localId);
                                scope.$apply();
                            });
                        });
                    });
                }
            }
        };
    }]
).directive('ngContacts', function() {
        return function(scope, element, attrs) {
            var contact = scope.contact.contacts;
            if (contact == undefined)
                return;
            var phone = "";
            var skype = "";
            var email = "";
            angular.forEach(contact, function(val) {
                if (angular.equals(val.type, "mphone")) {
                    phone = val.value
                }
                if (angular.equals(val.type, "email")) {
                    email = '<a href="mailto:' + val.value + '" class="ng-binding">' + val.value + '</a>';
                }
                if (angular.equals(val.type, "skype")) {
                    skype = val.value;
                }
            });
            element.append('<span>' + email + " " + phone + " " + skype + '</span>')

        }
    }
).directive("tofullinformation", ["$location", "$window", "frontMode", function($location, $window, frontMode) {
        return {
            restrict: 'EA',
            link: function(scope, element, atrr) {
                var page = frontMode == "war" ? "/!#/" : "/!#/";
                ///home.html#/ /hdemo.html#/
                $(element.find('.clickable')).mousedown(function(e) {
                    switch (e.which) {
                        case 1:
                            $location.path(atrr.tofullinformation);
                            scope.$apply();
                            break;
                        case 2:
                            $window.open($location.$$protocol + "://" + $location.$$host + page + atrr.tofullinformation);
                            break;
                    }
                })
            }
        }
    }]
).directive('checkbox', function() {
        return {
            restrict: 'EAC',
            link: function(scope, element) {
                element.checkbox();
            }
        };
    }
).directive('ngSelectColor', function() {
        return {
            restrict: 'EA',
            link: function(scope, element) {
                if (element.find(":selected")) {
                    $(element).css("color", "#999");
                } else {
                    $(element).css("color", "black");
                }
                element.on('change', function() {
                    $.each(element.children(), function() {
                        if (!$(this).is(element.find(":first"))) {
                            $(this).css("color", "black");
                        }
                    });
                    if (element.find(":selected").is(element.find(":first"))) {
                        $(this).css("color", "#999");
                    } else {
                        $(this).css("color", "black");
                    }
                });
            }
        };
    }
).directive('isNumber', function() {
        return {
            require: 'ngModel',
            scope: {
                model: "="
            },
            link: function(scope) {

                scope.$watch('model', function(newValue, oldValue) {
                    var arr = String(newValue).split("");
                    if (arr.length === 0)
                        return;
                    if (arr.length === 1 && (arr[0] == '-' || arr[0] === '.'))
                        return;
                    if (arr.length === 2 && newValue === '-.')
                        return;
                    if (isNaN(newValue)) {
                        scope.model = oldValue;
                    }
                });
            }
        };
    }
).directive('optionsClass', ["$parse", function($parse) {
        return {
            require: 'select',
            link: function(scope, elem, attrs, ngSelect) {
                var optionsSourceStr = attrs.ngOptions.split(' ').pop(),
                    getOptionsClass = $parse(attrs.optionsClass);

                scope.$watch(optionsSourceStr, function(items) {
                    angular.forEach(items, function(item, index) {
                        var classes = getOptionsClass(item),
                            option = elem.find('option[value=' + index + ']');
                        angular.forEach(classes, function(add, className) {
                            if (add) {
                                angular.element(option).addClass(className);
                            }
                        });
                    });
                });
            }
        };
    }]
).directive('googleplace', function() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, model) {
                var options = {
                    types: ['(regions)']
                };
                var gPlace = new google.maps.places.Autocomplete(element[0], options);
                google.maps.event.addListener(gPlace, 'place_changed', function(val) {
                    var place = gPlace.getPlace();
                    if (place) {
                        place.formatted_address = $('#pac-input').val();
                        var fullNameAr = place.formatted_address.split(',');

                        if (similar_text(fullNameAr[1], fullNameAr[0]) == fullNameAr[0].length || (similar_text(fullNameAr[0], fullNameAr[1]) / fullNameAr[0].length) * 100 > 80) {
                            place.formatted_address = fullNameAr[0] + "," + fullNameAr[2];
                        }
                        var lat = place.geometry.location.k;
                        var lng = place.geometry.location.D;
                        if (scope.mapObject != null) {
                            var location = new google.maps.LatLng(lat, lng);
                            scope.mapObject.marker.setPosition(location);
                            scope.mapObject.map.setCenter(location);
                        }
                        scope.$apply(function() {
                            scope.region = convertToRegionObject(place, scope);
                            if (scope.region != undefined && scope.region.country == null) {
                                scope.region.country = scope.region.city != null ? scope.region.city : scope.region.area != null ? scope.region.area : " ";
                                if (scope.region.fullName != undefined) {
                                    scope.region.fullName = scope.region.fullName.replace(",undefined", "");
                                }
                            }
                            model.$setViewValue(place.formatted_address);
                        });
                        if (scope.progressUpdate != undefined) {
                            scope.progressUpdate();
                        }

                    } else {
                        scope.regionInputOk = false;
                        scope.region = null;
                    }
                });
            }
        };
    }
).directive('googleplacerelocate', function() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, model) {
                var options = {
                    types: ['(regions)']
                };
                var gPlace = new google.maps.places.Autocomplete(element[0], options);
                google.maps.event.addListener(gPlace, 'place_changed', function(val) {
                    var place = gPlace.getPlace();
                    place.formatted_address = $('#pac-input2').val();
                    var fullNameAr = place.formatted_address.split(',');
                    if (similar_text(fullNameAr[1], fullNameAr[0]) == fullNameAr[0].length || (similar_text(fullNameAr[0], fullNameAr[1]) / fullNameAr[0].length) * 100 > 80) {
                        place.formatted_address = fullNameAr[0] + "," + fullNameAr[2];
                    }
                    scope.$apply(function() {
                        scope.regionToRelocate.push(convertToRegionObject(place, scope));
                        model.$setViewValue("");
                        $('#pac-input2').val("");
                    });
                });
            }
        };
    }
).directive('googleplacezip', function() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, model) {
                var options = {
                    types: ['(regions)']
                };
                var gPlace = new google.maps.places.Autocomplete(element[0], options);
                google.maps.event.addListener(gPlace, 'place_changed', function(val) {
                    var place = gPlace.getPlace();
                    if(place.address_components) {
                        place.formatted_address = $('#pac-input3').val();
                        var fullNameAr = place.formatted_address.split(',');
                        if (similar_text(fullNameAr[1], fullNameAr[0]) == fullNameAr[0].length || (similar_text(fullNameAr[0], fullNameAr[1]) / fullNameAr[0].length) * 100 > 80) {
                            place.formatted_address = fullNameAr[2];
                        }
                        scope.$apply(function () {
                            scope.regionzip.push(convertToRegionObject(place, scope));
                            model.$setViewValue("");
                            $('#pac-input3').val("");
                            console.log(scope.regionzip);
                        });
                    }
                });
            }
        };
    }
).directive('googlePlaces', function() {
        return {
            restrict: 'E',
            replace: true,
            scope: {location: '='},
            template: '<input id="google_places_ac" name="google_places_ac" type="text" class="input-block-level"/>',
            link: function($scope, elm, attrs) {
                var autocomplete = new google.maps.places.Autocomplete($("#google_places_ac")[0], {});
                google.maps.event.addListener(autocomplete, 'place_changed', function() {
                    var place = autocomplete.getPlace();
                    $scope.location = place.geometry.location.lat() + ',' + place.geometry.location.lng();
                    $scope.$apply();
                });
            }
        }
    }
).directive('vacancyAutocompleter', ["$filter", "serverAddress", "$rootScope", "Vacancy", function($filter, serverAddress, $rootScope, Vacancy) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $(element[0]).select2({
                    placeholder: $filter('translate')('enter job title'),
                    minimumInputLength: 0,
                    ajax: {
                        url: serverAddress + "/vacancy/autocompleter",
                        dataType: 'json',
                        crossDomain: true,
                        type: "POST",
                        data: function(term, page) {
                            return {
                                name: term.trim(),
                                candidateId: $rootScope.candidateIdForVacancyId
                            };
                        },
                        results: function(data, page) {
                            var results = [];
                            if (data['objects'] !== undefined) {
                                $.each(data['objects'], function(index, item) {
                                    var clientName = "";
                                    if (item.clientId.name.length > 20) {
                                        clientName = item.clientId.name.substring(0, 20);
                                    } else {
                                        clientName = item.clientId.name;
                                    }
                                    var inVacancy = false;
                                    var interviewStatus;
                                    if (item.interviewStatus == undefined) {
                                        item.interviewStatus = 'longlist,shortlist,interview,approved,notafit,declinedoffer';
                                    }
                                    var extraText = "";
                                    if (item.interviews != null) {
                                        interviewStatus = item.interviews[0].state;
                                        angular.forEach($rootScope.customStages, function(resp){
                                            if(interviewStatus == resp.customInterviewStateId){
                                                interviewStatus = resp.name
                                            }
                                        });
                                        extraText = " [ " + $filter('translate')(interviewStatus) + " ]";
                                        inVacancy = true;
                                    }
                                    results.push({
                                        vacancy: item,
                                        id: item.vacancyId,
                                        status: interviewStatus,
                                        text: item.position + " (" + clientName + ")" + extraText,
                                        interviewStatus: item.interviewStatus,
                                        inVacancy: inVacancy
                                    });
                                });
                            }
                            return {
                                results: results
                            };
                        }
                    },
                    dropdownCssClass: "bigdrop"
                }).on("change", function(e) {
                    if (e.added != undefined && e.added.inVacancy){
                        $rootScope.addCandidateInVacancySelect2Obj = {
                            status: e.added.status
                        };
                        $rootScope.candidateAddedInVacancy = true;
                    }else{
                        $rootScope.candidateAddedInVacancy = false;
                    }
                    $rootScope.VacancyAddedInCandidate = e.added.vacancy;
                    var sortedStages = [];
                    var array = e.added.interviewStatus.split(',');
                    var VacancyStatus = Vacancy.interviewStatusNew();
                    var candidate = $rootScope.candidateForUpdateResume;
                    $rootScope.vacancyForAddCandidate = e.added.vacancy.localId;
                    var i = 0;
                    console.log(candidate);
                    if(candidate){
                        angular.forEach(candidate.interviews, function(resp) {
                            if(e.added.id == resp.vacancy){
                                angular.forEach(array, function(res) {
                                    if(resp.state == res || resp.customInterviewStateId == res){
                                        array.splice(array.indexOf(res), 1);
                                    }
                                });
                            }
                        });
                    }
                    angular.forEach(array, function(resp) {
                        angular.forEach(VacancyStatus, function(vStatus) {
                            if (vStatus.used) {
                                if(i == 0){
                                    angular.forEach($rootScope.customStages, function(res) {
                                        res.value = res.name;
                                        res.movable = true;
                                        res.added = false;
                                        res.count = 0;
                                        vStatus.status.push(res);
                                        i = i+1;
                                    });
                                }
                                angular.forEach(vStatus.status, function(vStatusIn) {
                                    if(resp == vStatusIn.value){
                                        vStatusIn.added = true;
                                        sortedStages.push(vStatusIn);
                                    } else if(resp == vStatusIn.customInterviewStateId){
                                        vStatusIn.added = true;
                                        sortedStages.push(vStatusIn);
                                    }
                                })
                            }
                        })
                    });
                    $rootScope.VacancyStatusFiltered = sortedStages;
                    if(candidate){
                        $rootScope.changeTemplateInAddCandidate($rootScope.VacancyStatusFiltered[0]);
                    }
                    $scope.$apply();
                })
            }
        }
    }]
).directive('candidateAutocompleter', ["$filter", "serverAddress", "$rootScope","vacancyStages", function($filter, serverAddress, $rootScope, vacancyStages) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                if ($(element[0])) {
                    element.select2({
                        placeholder: $filter('translate')('select candidate'),
                        minimumInputLength: 0,
                        ajax: {
                            url: serverAddress + "/candidate/autocompleate",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    name: term.trim(),
                                    vacancyId: $scope.vacancy.vacancyId,
                                    withPersonalContacts: true
                                };
                            },
                            results: function(data, page) {
                                var customStages = [];
                                var results = [];
                                var check = $scope.$parent.autocomplete.interviews != undefined;
                                var inVacancy = false;
                                var status = "";
                                var realName = "";
                                var text;
                                if (data['objects'] !== undefined) {
                                    angular.forEach(data['objects'], function(item) {
                                        //inVacancy = false;
                                        //if (item.position !== undefined || item.position !== '') {
                                        //    item.fullName = item.fullName + ', ' + item.position;
                                        //}
                                        if(item.interviews){
                                            angular.forEach($rootScope.customStages,function(customStage){
                                                if(customStage.customInterviewStateId == item.interviews[0].state){
                                                    item.interviews[0].state = customStage.name;
                                                }
                                            });
                                        }
                                        //if (check) {
                                        //    angular.forEach($scope.$parent.autocomplete.interviews, function(interItem) {
                                        //        if (interItem.candidateId.candidateId == item.candidateId) {
                                        //            realName = item.fullName;
                                        //            if(interItem.customStage){
                                        //                item.fullName = item.fullName + " [ "+ interItem.state + " ]";
                                        //            }else{
                                        //                item.fullName = item.fullName + " [ " + $filter('translate')('interview_status_assoc.' + interItem.state) + " ]";
                                        //            }
                                        //            inVacancy = true;
                                        //            status = interItem.state;
                                        //        }
                                        //    })
                                        //}
                                        results.push({
                                            id: item.candidateId,
                                            text: item.interviews ? item.fullName + " [" + item.interviews[0].state + "]": item.fullName,
                                            inVacancy: inVacancy,
                                            status: status,
                                            name: realName
                                        });
                                    });
                                }
                                return {
                                    results: results
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("change", function(e) {
                        if (!$rootScope.withoutChangeStatusInVacancyAutocopleater) {
                            if (e.added != undefined && e.added.inVacancy) {
                                $rootScope.addCandidateInInterview.addedInVacancy = true;
                                $rootScope.addCandidateInInterview.select2Obj = {
                                    name: e.added.name,
                                    status: e.added.status
                                };
                                if (e.added.status == "interview") {
                                    $rootScope.addCandidateInInterview.status = $rootScope.addCandidateInInterview.statusObject[0]
                                } else if (e.added.status == 'longlist') {
                                    $rootScope.addCandidateInInterview.status = $rootScope.addCandidateInInterview.statusObject[1]
                                } else {
                                    $rootScope.addCandidateInInterview.status = $rootScope.addCandidateInInterview.statusObject[0]
                                }
                            } else {
                                $rootScope.errorMessageForAddCandidate.show = false;
                                $rootScope.addCandidateInInterview.addedInVacancy = false;
                                $rootScope.addCandidateInInterview.select2Obj = null;
                                $rootScope.addCandidateInInterview.status = $rootScope.addCandidateInInterview.statusObject[0]
                            }
                            $rootScope.addCandidateInInterview.showSelect = true;
                            $rootScope.$apply();
                        }
                    })
                }
            }
        }
    }]).directive('testCandidateAutocompleter', ["$filter", "serverAddress", "$rootScope", "$localStorage", function($filter, serverAddress, $rootScope, $localStorage) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                function formData (data) {
                    markup = "<span style='font-weight: 600;color: #ccc'>" + data.fullName + ", " + "</span>" + "<span style='color: #ccc'>" + data.position  + "</span>";
                    return markup;
                }
                $scope.groupNameList = [];
                $(element[0]).select2({
                        placeholder: $filter('translate')('select candidate'),
                        tags: $scope.groupNameList,
                        tokenSeparators: [","],
                        ajax: {
                            url: serverAddress + "/candidate/autocompleate",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    name: term.trim(),
                                    withPersonalContacts: true
                                };
                            },
                            results: function(data, page) {
                                var results = [];
                                if (data['objects'] !== undefined) {
                                    angular.forEach(data['objects'], function(item) {
                                        if(item.contacts != undefined) {
                                            var contacts = item.contacts;
                                            if(contacts[0].value.length > 0 && (contacts[0].value).search(/ /) !== -1) {
                                                contacts[0].value = (contacts[0].value).split(/ /)[0];
                                            }
                                            results.push({
                                                id: item.candidateId,
                                                text: item.fullName + ', ' + item.position,
                                                fullName: item.fullName,
                                                position: item.position,
                                                localId: item.localId,
                                                email: contacts
                                            });
                                        }
                                    });
                                }
                                return {
                                    results: results
                                };
                            }
                        },
                        formatResult: formData,
                        dropdownCssClass: "bigdrop"
                    }).on("change", function(e) {
                    $scope.groupNameList.push(e.added);
                    console.log($scope.groupNameList);
                    $rootScope.$broadcast('groupNameList', $scope.groupNameList);
                    if (e.removed) {
                        angular.forEach($scope.groupNameList, function(nval) {
                            if(e.removed.id == nval.id){
                                var deleteFromArray = $scope.groupNameList.indexOf(nval);
                                if (deleteFromArray > -1) {
                                    $scope.groupNameList.splice(deleteFromArray, 1);
                                }
                                for (var i = $scope.groupNameList.length - 1; i >= 0; i--) {
                                    if ($scope.groupNameList[i] == undefined)  {
                                        $scope.groupNameList.splice(i, 1);
                                    }
                                }
                                $rootScope.$broadcast('groupNameList', $scope.groupNameList);
                                return $scope.groupNameList;
                            }
                        });
                    }
                    $rootScope.$apply();
                    });
            }
        }
    }]).directive('mergeAutocompleter', ["$filter", "serverAddress", "$rootScope", "$localStorage", function($filter, serverAddress, $rootScope, $localStorage) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                if ($(element[0])) {
                    element.select2({
                        placeholder: $filter('translate')('select candidate'),
                        minimumInputLength: 0,
                        ajax: {
                            url: serverAddress + "/candidate/autocompleate",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    name: term.trim(),
                                };
                            },
                            results: function(data, page) {
                                var results = [];
                                if (data['objects'] !== undefined) {
                                    angular.forEach(data['objects'], function(item) {
                                        if(item.localId != $rootScope.localIdOfMerged) {
                                            results.push({
                                                id: item.candidateId,
                                                text: item.fullName + ', ' + item.position,
                                                fullName: item.fullName,
                                                position: item.position,
                                                localId: item.localId
                                            });
                                        }
                                    });
                                }
                                return {
                                    results: results
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("change", function(e) {
                        $rootScope.candidateForMerge = e.added;
                        $localStorage.set("candidateForMerge", $rootScope.candidateForMerge);
                        console.log($rootScope.candidateForMerge);
                        $rootScope.$apply();
                    })
                }
            }
        }
    }]).directive('clientAutocompleter', ["$filter", "serverAddress", "$rootScope","vacancyStages", function($filter, serverAddress, $rootScope, vacancyStages) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $scope.setClientAutocompleterValue = function(val,id) { //переимновтаь
                    console.log(val);
                    if (val != undefined) {
                        $(element[0]).select2("data", {id: id, text: val});
                    }
                };
                if ($(element[0])) {
                    element.select2({
                        placeholder: $filter('translate')('client'),
                        minimumInputLength: 0,
                        allowClear: true,
                        ajax: {
                            url: serverAddress + "/client/autocompleteClients",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    text: term.trim()
                                };
                            },
                            results: function(data, page) {
                                var results = [];
                                var inVacancy = false;
                                var status = "";
                                var realName = "";
                                if (data['objects'] !== undefined) {
                                    console.log(data['objects']);
                                    angular.forEach(data['objects'], function(item) {
                                        results.push({
                                            id: item.clientId,
                                            text: item.name,
                                            name: item.name
                                        });
                                    });
                                }
                                return {
                                    results: results
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("change", function(e) {

                    })
                }
            }
        }
    }])
    .directive('industryAutocomplete', ["$filter", "$rootScope", "$translate", "Service", function($filter, $rootScope, $translate, Service) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element) {

                let industries = Service.getIndustries(),
                    translatedIndustries = [];

                $rootScope.$on('$translateChangeSuccess', function () {
                        initSelect2();
                });
                if(translatedIndustries.length == 0) {
                    initSelect2();
                }

                function initSelect2 (){
                    translatedIndustries = industries.map(function (oneIndustry) {
                        return {
                            id: oneIndustry.value,
                            text: $translate.instant( 'industries_assoc.' + oneIndustry.value)
                        }
                    });
                    translatedIndustries = _.sortBy(translatedIndustries, 'text');
                    element.select2({
                        minimumInputLength: 0,
                        placeholder: ' ',
                        allowClear: true,
                        data: translatedIndustries,
                        dropdownCssClass: "bigdrop"
                    }).unbind("change").on("change", function(e) {

                        if(e.added) {
                            if($scope.candidate) {
                                $scope.candidate.industry = e.added.id;
                                $scope.progressUpdate();
                            } else {
                                if($scope.client) {
                                    $scope.client.industry = e.added.id;
                                }
                            }
                        } else {
                            if($scope.candidate) {
                                $scope.candidate.industry = '';
                            } else {
                                if($scope.client) {
                                    $scope.client.industry = '';
                                }
                            }

                        }
                    })
                }
                $scope.getSelect2Industry = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2Industry = function(val) {
                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }

                };
            }
        }
    }])
    .directive('industryAutocompleteSearch', ["$filter", "$rootScope", "$translate", "Service", function($filter, $rootScope, $translate, Service) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element) {

                let industries = Service.getIndustries(),
                    translatedIndustries = [];

                $rootScope.$on('$translateChangeSuccess', function () {
                    initSelect2();
                });
                if(translatedIndustries.length == 0) {
                    initSelect2();
                }

                function initSelect2 (){
                    translatedIndustries = industries.map(function (oneIndustry) {
                        return {
                            id: oneIndustry.value,
                            text: $translate.instant( 'industries_assoc.' + oneIndustry.value)
                        }
                    });
                    translatedIndustries = _.sortBy(translatedIndustries, 'text');
                    element.select2({
                        minimumInputLength: 0,
                        placeholder: $translate.instant('industry'),
                        allowClear: true,
                        data: translatedIndustries,
                        dropdownCssClass: "bigdrop"
                    }).unbind("change").on("change", function(e) {

                        if(e.added) {
                            if($scope.searchParam) {
                                $scope.searchParam.industry = e.added.id
                            }
                        } else {
                             if($scope.closeSearchTags) {
                                 $scope.closeSearchTags('industry')
                            } else if($scope.searchParam['industry']) {
                                 $scope.searchParam['industry'] = null;
                             }
                        }
                    })
                }
                $scope.getSelect2Industry = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2Industry = function(val) {
                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }

                };
            }
        }
    }])
    .directive('addLogo', ["$rootScope", "Company", "notificationService", "$filter", function ($rootScope, Company, notificationService, $filter) {
        return {
            restrict: 'AE',
            link: function ($scope, elem, attr, ctrl) {

                elem.on('click', function () {
                    if ($rootScope.me.recrutRole == 'admin') {
                        $("#the-file-input").click();
                    } else {
                        notificationService.error($filter('translate')('Only admin can set logo'));
                    }
                });

                var Cropper = window.Cropper;

                $("#the-file-input").unbind('change').change(function() {
                    renderImage(this.files[0]);
                });

                renderImage = function (file) {
                var reader = new FileReader();
                    reader.onload = function (event) {
                        var the_url = event.target.result;
                        var logoImg = new Image();
                        logoImg.src = the_url;
                        logoImg.onload = function () {
                            $('#logo-button').hide();
                            if(logoImg.width > 290 && logoImg.height > 290){
                                if($("#cropper-wrap").length == 0) {
                                    $("#owner_photo_wrap").prepend('<div id="cropper-wrap"> <div id="img-wrapper"> </div> <button id="close">' + $filter("translate")("Close") + '</button> <button id="cropp">' + $filter("translate")("Accept_1") + '</button> <div id="wrapper"></div>  </div> <div id="wrapperForPng"></div>');
                                    $("#owner_photo_wrap").find('img').hide();
                                    $("#owner_photo_bubble_wrap").hide();
                                    $('#wrapperForPng').hide();
                                }
                                $('#img-wrapper').html("<img id='image' src='" + the_url + "'>");
                                cropperFunc();
                            } else if(logoImg.width == 290 && logoImg.height == 290){
                                Company.uploadCompanyLogo(the_url).then(function (data) {
                                    $scope.callbackAddLogo(data.data.objects[0]);
                                    $('#logo-button').show();
                                }, function (error) {
                                    notificationService.error(error.data.message);
                                    $('#logo-button').show();
                                });
                            } else {
                                $('#logo-button').show();
                                notificationService.error($filter('translate')('Please choose image 290 x 290 px or larger'));
                            }
                        }

                    };
                    reader.readAsDataURL(file);
                };

                function cropperFunc() {
                    var image = document.getElementById('image');
                    var cropper = new Cropper(image, {
                        aspectRatio: 1 / 1,
                        movable: false,
                        zoomable: false,
                    });

                    $('#cropp').on('click',function () {
                        var canvasImg = image.cropper.getCroppedCanvas();
                        var ctx = canvasImg.getContext('2d');

                        var canvasCopy = document.createElement("canvas");
                        var copyContext = canvasCopy.getContext("2d");
                        canvasCopy.width = 290;
                        canvasCopy.height = 290;
                        copyContext.drawImage(canvasImg, 0, 0, 290, 290);
                        canvasImg.width = 290;
                        canvasImg.height = 290;
                        ctx.drawImage(canvasCopy, 0, 0, canvasImg.width, canvasImg.height,  0, 0,  canvasCopy.width, canvasCopy.height);
                        $scope.dataUrl = canvasImg.toDataURL();
                        $('#wrapperForPng').show();
                        $('#wrapperForPng').html("<img  src='" + $scope.dataUrl + "' > <button id='cancel'>" + $filter('translate')('cancel') + "</button><button id='download'>" + $filter('translate')('save') + "</button>");
                        $('#cropper-wrap').hide();
                        $('#cancel').on('click', function () {
                            $('#cropper-wrap').show();
                            $('#wrapperForPng').find('img').remove();
                            $('#cancel').remove();
                            $('#download').remove();
                        });
                        $('#download').on('click', function () {
                            Company.uploadCompanyLogo($scope.dataUrl).then(function (data) {
                                $scope.callbackAddLogo(data.data.objects[0]);
                                $('#company-logo').show();
                                cropper.destroy();
                                $('#cropper-wrap').remove();
                                $('#wrapperForPng').remove();
                                $("#the-file-input").val('');
                                $("#owner_photo_wrap").find('img').show();
                                $("#owner_photo_bubble_wrap").show();
                                $(".block-company .img-section img").prop('href','$rootScope.logoLink');
                                $('#logo-button').show();
                            }, function (error) {
                                notificationService.error(error.data.message);
                            });

                        });
                    });
                    $('#close').on('click', function () {
                        cropper.destroy();
                        $('#cropper-wrap').remove();
                        $('#wrapperForPng').remove();
                        $("#the-file-input").val('');
                        $("#owner_photo_wrap").find('img').show();
                        $("#owner_photo_bubble_wrap").show();
                        if($rootScope.companyLogo == undefined) {
                            $("#logo-button").show();
                        }
                    });
                }
            }
        }
    }])
    .directive('addLogoTestCandidateQuestion', ["$rootScope", "Test", "notificationService", "$filter", function ($rootScope, Test, notificationService, $filter) {
        return {
            restrict: 'AE',
            link: function ($scope, elem, attr, ctrl) {
                elem.on('click', function () {
                    if ($rootScope.me.recrutRole == 'admin') {
                        $("#the-file-input").click();
                    } else {
                        notificationService.error($filter('translate')('Only admin can set logo'));
                    }
                });

                var Cropper = window.Cropper;
                $scope.openFiles = function(index){
                    console.log(index + 'openImg');
                    $rootScope.questionIndex = index;
                };
                $("#the-file-input").unbind('change').change(function() {
                    renderImage(this.files[0]);
                });
                renderImage = function (file) {
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        var the_url = event.target.result;
                        var logoImg = new Image();
                        console.log(logoImg);
                        logoImg.src = the_url;
                        logoImg.onload = function () {
                            console.log($('#logo-button' + $rootScope.questionIndex));
                            $('#logo-button' + $rootScope.questionIndex).hide();
                            if((logoImg.width > 960 && logoImg.height > 380) || (logoImg.width == 960 && logoImg.height > 380) || (logoImg.width > 960 && logoImg.height == 380)){
                                if($rootScope.questionIndex != undefined){
                                    if($("#cropper-wrap").length == 0) {
                                        $(".owner_photo_wrap" + $rootScope.questionIndex).prepend('<div id="cropper-wrap"> <div id="img-wrapper"> </div> <button id="close">' + $filter("translate")("Close") + '</button> <button id="cropp">' + $filter("translate")("Accept_1") + '</button> <div id="wrapper"></div>  </div> <div id="wrapperForPng"></div>');
                                        $(".owner_photo_wrap" + $rootScope.questionIndex).find('img').hide();
                                        $(".owner_photo_wrap" + $rootScope.questionIndex).find('.owner_photo_bubble_wrap' + $rootScope.questionIndex).hide();
                                        $('#wrapperForPng').hide();
                                    }
                                    $('#img-wrapper').html("<img id='image' src='" + the_url + "'>");
                                    cropperFunc($rootScope.questionIndex);
                                }
                            } else if(logoImg.width == 960 && logoImg.height == 380){
                                Test.uploadTestQuestionLogo(the_url).then(function (data) {
                                    if(data.data.status == 'ok'){
                                        $scope.callbackTestQuestionLogo(data.data.object, $rootScope.questionIndex);
                                        $('#logo-button' + $rootScope.questionIndex).show();
                                    }else{
                                        notificationService.error(data.data.message);
                                        $('#logo-button' + $rootScope.questionIndex).show();
                                    }
                                }, function (error) {
                                    notificationService.error(error.data.message);
                                    $('#logo-button' + $rootScope.questionIndex).show();
                                });
                            } else {
                                $('#logo-button' + $rootScope.questionIndex).show();
                                notificationService.error($filter('translate')('Please choose image 960 x 380 px or larger'));
                            }
                        }

                    };
                    console.log(file);
                    reader.readAsDataURL(file);
                };
                function cropperFunc(index) {
                    var image = document.getElementById('image');
                    var cropper = new Cropper(image, {
                        aspectRatio: 960 / 380,
                        movable: false,
                        zoomable: false
                    });

                    $('#cropp').on('click',function () {
                        var canvasImg = image.cropper.getCroppedCanvas();
                        var ctx = canvasImg.getContext('2d');

                        var canvasCopy = document.createElement("canvas");
                        var copyContext = canvasCopy.getContext("2d");
                        canvasCopy.width = 960;
                        canvasCopy.height = 380;
                        copyContext.drawImage(canvasImg, 0, 0, 960, 380);
                        canvasImg.width = 960;
                        canvasImg.height = 380;
                        ctx.drawImage(canvasCopy, 0, 0, canvasImg.width, canvasImg.height,  0, 0,  canvasCopy.width, canvasCopy.height);
                        $scope.dataUrl = canvasImg.toDataURL();
                        $('#wrapperForPng').show();
                        $('#wrapperForPng').html("<img  src='" + $scope.dataUrl + "' > <button id='cancel'>" + $filter('translate')('cancel') + "</button><button id='download'>" + $filter('translate')('save') + "</button>");
                        $('#cropper-wrap').hide();
                        $('#cancel').on('click', function () {
                            $('#cropper-wrap').show();
                            $('#wrapperForPng').find('img').remove();
                            $('#cancel').remove();
                            $('#download').remove();
                        });
                        $('#download').on('click', function () {
                            Test.uploadTestQuestionLogo($scope.dataUrl).then(function (data) {
                                $scope.callbackTestQuestionLogo(data.data.object, $rootScope.questionIndex);
                                $('#company-logo').show();
                                cropper.destroy();
                                $('#cropper-wrap').remove();
                                $('#wrapperForPng').remove();
                                $("#the-file-input").val('');
                                $(".owner_photo_wrap" + index).find('img').show();
                                $(".owner_photo_wrap" + index).find('.owner_photo_bubble_wrap' + index).show();
                                $(".block-company .img-section img").prop('href','$rootScope.testQuestionLogoLink');
                                $('#logo-button' + index).show();
                            }, function (error) {
                                notificationService.error(error.data.message);
                            });

                        });
                    });
                    $('#close').on('click', function () {
                        cropper.destroy();
                        $('#cropper-wrap').remove();
                        $('#wrapperForPng').remove();
                        $("#the-file-input").val('');
                        $(".owner_photo_wrap" + index).find('img').hide();
                        $(".owner_photo_wrap" + index).find('.owner_photo_bubble_wrap' + index).show();
                        $("#logo-button" + index).show();
                    });
                }
            }
        }
    }])
    .directive('testAutocompleter', ["$filter", "serverAddress", "$rootScope", function($filter, serverAddress, $rootScope) {
            return {
                restrict: 'EA',
                replace: true,
                link: function($scope, element, attrs) {
                    $scope.addedTest = {};
                    var inputText = "";

                    $(element[0]).select2({
                        placeholder: $filter('translate')('Choose test'),
                        //minimumInputLength: 2,
                        allowClear: true,
                        //formatInputTooShort: function () {
                        //    return ""+ $filter('translate')('Please enter 2 characters') +"";
                        //},
                        formatNoMatches: function(term) {
                            return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')('Please enter test title') + "</div>";
                        },
                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                return {id: data.id, text: term};
                            }
                        },
                        ajax: {
                            url: serverAddress + "/test/autocompleteTest",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    text: term.trim()
                                };
                            },
                            results: function(data, page) {
                                var result = [];
                                angular.forEach(data['objects'], function(val) {
                                    if(val.status != 'D'){
                                        result.push({id: val.id, text: val.testName})
                                    }
                                });
                                return {
                                    results: result
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("change", function(e){
                        if (e.added != undefined) {
                            $scope.addedTest = {
                                id: e.added.id,
                                text: e.added.text
                            };
                            $rootScope.$broadcast('addedTest', $scope.addedTest);
                        }
                    });
                }
            }
        }]
    )
    .directive('clickAnywhereButHere', function($document) {
        return {
            restrict: 'A',
            link: function(scope, elem, attr, ctrl) {
                elem.on('click', function(e) {
                    $(".clever-window.hideable").not(".ng-hide").addClass("ng-hide");
                    e.stopPropagation();
                });
                $document.on('click', function() {
                    scope.$apply(attr.clickAnywhereButHere);
                })
            }
        }
    })
    .directive('hideOnclickAnywhereButHere', function($document) {
        return {
            restrict: 'A',
            scope: {
                show: '='
            },
            link: function(scope, elem, attr, ctrl) {
                if(scope.show != false){
                    elem.on('click', function(e) {
                        var hidden = true;
                        if (!elem.children(".clever-window").hasClass("ng-hide")) {
                            hidden = false
                        }
                        $(".clever-window.hideable").not(".ng-hide").addClass("ng-hide");
                        if (hidden) {
                            elem.children(".clever-window").removeClass("ng-hide")
                        }
                        e.stopPropagation();
                    });
                    $document.on('click', function() {
                        $(".clever-window.hideable").not(".ng-hide").addClass("ng-hide");
                    })
                }
            }
        }
    }).directive('originAutocompleter', ["$filter", "serverAddress", function($filter, serverAddress) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $scope.setOriginAutocompleterValue = function(val) {
                    if (val != undefined) {
                        $(element[0]).select2("data", {id: val, text: val});
                    } else {
                        $(element[0]).select2("data", {id: '', text: ''});
                    }
                    $('.select2-search-choice-edit-origin').off().on('click', function (e) {
                        $scope.editOriginName();
                    }).attr("title", $filter('translate')('Edit source for all candidates'));
                    $('.select2-search-choice-delete-origin').off().on('click', function (e) {
                        $scope.removeSource();
                    }).attr("title", $filter('translate')('Delete source for all candidates'));
                };
                $scope.getOriginAutocompleterValue = function() {
                    var object = $(element[0]).select2("data");
                    return object != null ? object.text : null;
                };
                var inputText = "";

                $(element[0]).select2({
                    placeholder: $filter('translate')('source'),
                    minimumInputLength: 0,
                    formatNoMatches: function(term) {
                        return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')('Enter a source of this candidate') + "</div>";
                    },
                    createSearchChoice: function(term, data) {
                        if ($(data).filter(function() {
                                return this.text.localeCompare(term) === 0;
                            }).length === 0) {
                            inputText = term;
                            return {id: term, text: term};
                        }
                    },
                    ajax: {
                        url: serverAddress + "/candidate/autocompleteOrigin",
                        dataType: 'json',
                        crossDomain: true,
                        type: "POST",
                        data: function(term, page) {
                            return {
                                text: term.trim()
                            };
                        },
                        results: function(data, page) {
                            var result = [];
                            angular.forEach(data['objects'], function(val) {
                                result.push({id: val, text: val})
                            });
                            return {
                                results: result
                            };
                        }
                    },
                    dropdownCssClass: "bigdrop"
                }).on('change',function () {
                    $('.select2-search-choice-edit-origin').off().on('click', function (e) {
                        $scope.editOriginName();
                    }).attr("title", $filter('translate')('Edit source for all candidates'));
                }).on("select2-close", function(e) {
                    console.log("CLOSE!");
                    if (inputText.length > 0) {
                        $(element[0]).select2("data", {id: inputText, text: inputText});
                    }
                }).on("select2-selecting", function(e) {
                    inputText = "";
                });
            }
        }
    }]
).directive('select2EmploymentType', ["$filter", "serverAddress", "Service", function($filter, serverAddress, Service) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $(element[0]).select2({
                    tags: Service.employmentTypeTwo(),
                    tokenSeparators: [",", " "],
                    createSearchChoice: function(){
                     return false;
                    }
                }).on("change", function(e) {
                    $scope.progressUpdate();
                    if (!$scope.$$phase) {
                        $scope.$apply();
                    }
                });
                $scope.getSelect2EmploymentType = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2EmploymentType = function(val) {
                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }

                };

            }
        }
    }]
).directive('select2Lang', ["$filter", "serverAddress", "Service", "notificationService", "$window", function($filter, serverAddress, Service, notificationService, $window) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element) {
                function format(item) {
                    return item.text;
                }
                $scope.setLangs=function(langs) {
                    $scope.addedLang = [];
                    var results = [];
                    var newarr = [];
                    var unique = {};
                    var newarrAdd = [];
                    var uniqueAdd = {};
                    angular.forEach(langs, function (val) {
                        if (!unique[val.name]) {
                            newarr.push(val);
                            unique[val.name] = val;
                        }
                    });
                    angular.forEach(newarr, function (nval) {
                        results.push({id: nval.languageId == undefined ? nval.name : nval.languageId, text: nval.name, level: 'undefined'});
                        setTimeout(function(){
                            var myListener = $scope.$on('addedLang', function (event, data) {
                                if (data != undefined) {
                                    angular.forEach(results, function(mval, ind) {
                                        angular.forEach(data, function(val) {
                                            if(mval.text == val.text){
                                                results.splice(ind, 1);
                                            }
                                        });
                                    });
                                    angular.forEach(results, function (val) {
                                        if (!uniqueAdd[val.text]) {
                                            newarrAdd.push(val);
                                            uniqueAdd[val.text] = val;
                                        }
                                    });
                                    angular.forEach(newarrAdd, function(mval, ind) {
                                        angular.forEach(data, function(val) {
                                            if(mval.text == val.text){
                                                newarrAdd.splice(ind, 1);
                                                results = newarrAdd;
                                            }
                                        });
                                    });
                                    $scope.addedLang = data;
                                    $('.addingLangs').show();
                                    $scope.$apply();
                                }
                            });
                            $scope.$on('$destroy', myListener);
                        },0);
                    });
                    var inputText = "";

                    $(element[0]).select2({
                        tags:  results,
                        tokenSeparators: [',', ' '],
                        data:{
                            results:  results,
                            text: function(item) { return item.text; }
                        },
                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                var inputElement = $('.select-lang-container .select2-input input');
                                inputElement.attr('placeholder', $filter('translate')('Choose/add'));
                                return {id: term, text: term};
                            }
                        },
                        formatSelection: format,
                        formatResult: format
                        }
                    ).on("change", function(e) {
                        if(e.added != undefined){
                            $scope.addedLang.push(e.added);
                            var alreadySet = $scope.getSelect2Lang();
                            var toStandardCase = alreadySet[alreadySet.length - 1];
                            toStandardCase.text = toStandardCase.text[0].toUpperCase() + toStandardCase.text.slice(1).toLowerCase();
                            alreadySet.pop();
                            alreadySet.push(toStandardCase);
                            $scope.setSelect2Lang(alreadySet);
                            angular.forEach(alreadySet, function(nval, index) {
                                if( alreadySet.length > 1 && index < alreadySet.length -1 ){
                                    if(e.added.text.toUpperCase() == nval.text.toUpperCase()){
                                        $scope.addedLang.splice(-1, 1);
                                        var afterDelete = $scope.getSelect2Lang();
                                        afterDelete.pop();
                                        $scope.setSelect2Lang(afterDelete);
                                        notificationService.success($filter('translate')('This language has already been added'));
                                        $scope.$broadcast('addedLang',  $scope.addedLang);
                                    }
                                }
                            });
                        }
                        if($scope.type != 'merge' && $scope.type != 'Vacancy add' && $scope.type != 'Vacancy edit') {
                            $scope.candidate.languages = $scope.getSelect2Lang();
                            $scope.progressUpdate();
                        }
                        var inputElement = $('.select-lang-container .select2-search-field input');
                        inputElement.attr('placeholder', $filter('translate')('Choose/add'));


                        if (e.removed) {
                            angular.forEach($scope.addedLang, function(nval) {
                                if(e.removed.id == nval.id){
                                    var deleteFromArray = $scope.addedLang.indexOf(nval);
                                    if (deleteFromArray > -1) {
                                        $scope.addedLang.splice(deleteFromArray, 1);
                                    }
                                    $scope.$broadcast('addedLang',  $scope.addedLang);
                                }
                                results.push(e.removed);
                            });
                        }
                    }).on("select2-selecting", function(e) {
                        inputText = "";
                    });
                };
                $scope.getSelect2Lang = function() {
                    var val = $(element[0]).select2("data");
                    $scope.addedLang2 = val;
                    setTimeout(function(){
                        $scope.$broadcast('addedLang',  $scope.addedLang2);
                    },0);
                    return val != null ? val : null;
                };
                $scope.setSelect2Lang = function(val) {
                    var inputElement = $('.select-lang-container .select2-search-field input');
                    inputElement.attr('placeholder', $filter('translate')('Choose/add'));
                    inputElement.attr('maxlength', '20');
                    if (val != undefined) {
                        $scope.addedLang = val;
                        $(element[0]).select2("data", val);
                        setTimeout(function(){
                            $scope.$broadcast('addedLang',  $scope.addedLang);
                        },0);
                    } else {
                        $(element[0]).select2("data", {id: '', text: ''});
                    }
                };
            }
        }
    }]
).directive('select2LangSearch', ["$filter", "serverAddress", "Service", function($filter, serverAddress, Service) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $scope.setLangs=function(langs) {
                    Array.prototype.removeDuplicates = function (){
                        var temp=[];
                        label:for(i=0;i<this.length;i++){
                            for(var j=0; j<temp.length;j++ ){//check duplicates
                                if(temp[j]==this[i])//skip if already present
                                    continue label;
                            }
                            temp[temp.length] = this[i];
                        }
                        return temp;
                    };
                    $scope.fullLangs = langs.concat(Service.lang());
                    $scope.fullLangs2 = $scope.fullLangs.removeDuplicates();
                    //$scope.cutFullLangs = $scope.fullLangs2.slice(0,)

                    $(element[0]).select2({
                            tags: $scope.fullLangs2,
                            tokenSeparators: [","]
                        }
                    ).on("change", function(e) {
                            if (e.removed) {

                            } else {
                            }
                        });
                };
                $scope.getSelect2Lang = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2Lang = function(val) {
                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }
                };
            }
        }
    }]
).directive('select2Groups', ["$filter", "serverAddress", "Service", "CandidateGroup","notificationService", function($filter, serverAddress, Service, CandidateGroup, notificationService) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $scope.setGroups=function(groups, groupsByCandidate) {
                    var candidateGroups = groupsByCandidate;
                    var groupList = groups;
                    var groupNameList = [];
                    var alreadyDeleted = [];
                    angular.forEach(groupList, function (val, key) {
                        groupNameList.push(val.name);
                    });
                    $(element[0]).select2({
                            tags: groupNameList,
                            tokenSeparators: [","]
                        }
                    ).on("change", function(e) {
                            if (e.removed) {
                                var newGroupList = $scope.getSelect2Group().split(",");
                                var isExists = false;

                                angular.forEach(candidateGroups, function(val, key) {
                                    isExists = false;
                                    angular.forEach(newGroupList, function(nval, nkey) {
                                        if (nval == val.name) {
                                            isExists = true;
                                        }
                                    });
                                    if (!isExists) {
                                        var candidates = [];
                                        candidates.push($scope.candidate.candidateId);
                                        CandidateGroup.remove({
                                            candidateGroupId : val.candidateGroupId,
                                            candidateIds : candidates
                                        },function(res){
                                            if(res.status == 'ok'){
                                                notificationService.success($filter('translate')('Tags removed'));
                                                var deletedElement = alreadyDeleted.indexOf(val);
                                                alreadyDeleted.splice(deletedElement, 1);
                                            }
                                        });
                                        var deleteFromArray = candidateGroups.indexOf(val);
                                        if (deleteFromArray > -1) {
                                            candidateGroups.splice(deleteFromArray, 1);
                                        }
                                    }
                                });

                            } else {
                                var newGroupList = $scope.getSelect2Group().split(",");
                                var isExists = false;
                                angular.forEach(newGroupList, function(nval, key) {
                                    isExists = false;
                                    angular.forEach(candidateGroups, function(val, nkey) {
                                        if (nval.toUpperCase() == val.name.toUpperCase()) {
                                            isExists = true;
                                            if(alreadyDeleted.indexOf(val.name.toUpperCase()) === -1)
                                            alreadyDeleted.push(val.name.toUpperCase());
                                        }
                                    });
                                    if (!isExists && alreadyDeleted.indexOf(nval.toUpperCase()) === -1) {
                                        var candidates = [];
                                        candidates.push($scope.candidate.candidateId);
                                        CandidateGroup.add({name : nval, candidateIds : candidates},function(res){
                                            if(res.status == 'ok'){
                                                $('.select2-search-choice').last().children().first().text(res.object.name);
                                                var afterAdd = $scope.getSelect2Group().split(",");
                                                afterAdd.pop();
                                                afterAdd.push(res.object.name);
                                                $scope.setSelect2Group(afterAdd);
                                                candidateGroups.push(res.object);
                                                notificationService.success($filter('translate')('Tags added'));
                                            }
                                            $('a.select2-search-choice-edit').attr("title", $filter('translate')('Edit tag for all candidates'));
                                            $('a.select2-search-choice-edit').off().on('click',function (e) {
                                                $scope.editTagName(e.currentTarget);
                                            });
                                        });
                                    }
                                });
                                if (isExists) {
                                    notificationService.success($filter('translate')('This tag has already assigned'));
                                    var afterDelete = $scope.getSelect2Group().split(",");
                                    afterDelete.pop();
                                    $scope.setSelect2Group(afterDelete);
                                    $('a.select2-search-choice-edit').attr("title", $filter('translate')('Edit tag for all candidates'));
                                    $('a.select2-search-choice-edit').off().on('click',function (e) {
                                        $scope.editTagName(e.currentTarget);
                                    });
                                }
                            }

                        });
                };
                $scope.getSelect2Group = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2Group = function(val) {

                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }
                };
                setTimeout(function () {
                    $('a.select2-search-choice-edit').attr("title", $filter('translate')('Edit tag for all candidates'));
                    $('a.select2-search-choice-edit').off().on('click',function (e) {
                        $scope.editTagName(e.currentTarget);
                    });
                },5000);
            }
        }
    }]
).directive('select2CustomField', ["$filter", "Service", "CustomField","notificationService", function($filter, Service, CustomField, notificationService) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                var groupNameList = [];
                var addParam = [];

                $(element[0]).select2({
                        tags: groupNameList,
                        tokenSeparators: [","],
                        placeholder: ($filter('translate')('Enter values for the drop-down list')),
                        minimumInputLength: 1,
                        width: '310px'
                    }
                );

                $('#addFieldParam').click(function(){

                    var newGroupList = $scope.getSelect2Group().split(",");

                    var addParam = [];
                    angular.forEach(newGroupList, function(nval) {
                        addParam.push({name: 'defaultValue', value: nval == '' ? notificationService.error($filter('translate')('Please enter at least one value for the drop-down list')) : nval});
                    });

                    $scope.count = 0;
                    angular.forEach($scope.allObjCustomField, function(val) {
                        if(val.orderIndex != undefined && $scope.count <= val.orderIndex){
                            $scope.count = val.orderIndex;
                        }
                    });

                    CustomField.addField({
                        objType: $scope.tabsForFields == 'Vacancies' ? 'vacancy' : 'vacancy' &&  $scope.tabsForFields == 'Candidates' ? 'candidate' : 'candidate' && $scope.tabsForFields == 'Clients' ? 'client' : 'client',
                        type: $scope.typeCustomField,
                        title: $scope.fieldTitle == undefined ||  $scope.fieldTitle == '' ? notificationService.error($filter('translate')('Enter the field title')) :  $scope.fieldTitle,
                        orderIndex: ++$scope.count,
                        params: addParam
                    }, function(resp) {
                        if (resp.status == "ok") {
                            $scope.objCustomField = resp.object;
                            $scope.fieldTitle = '';
                            $("#customFullField").select2("val", "");
                            $scope.showDropDownSelect = false;
                            $scope.typeCustomField = null;
                            $scope.getFullFields();
                            notificationService.success($filter('translate')('New field added'));
                        } else {
                            //notificationService.error(resp.message);
                        }
                    });
                });

                $scope.getSelect2Group = function() {
                    var val = $(element[0]).select2('val');
                    return val != null ? val.toString() : null;
                };
                $scope.setSelect2Group = function(val) {

                    if (val != undefined) {
                        $(element[0]).select2('val', val);
                    }
                };
                $('#s2id_customFullField .select2-search-field input').attr('maxlength', 50);
            }
        }
    }]
).directive('select2GroupsForMass', ["$filter", "serverAddress", "Service",
        "CandidateGroup", "notificationService", "$rootScope", function ($filter, serverAddress, Service, CandidateGroup, notificationService, $rootScope) {
        return {
            restrict: 'EA',
            replace: true,
            link: function ($scope, element, attrs) {
                $rootScope.setGroupsForMass = function (groups, groupsByCandidate, scope) {
                    var candidateGroups = groupsByCandidate;
                    var groupList = groups;
                    var groupNameList = [];
                    angular.forEach(groupList, function (val, key) {
                        groupNameList.push(val.name);
                    });
                    $(element[0]).select2({
                            tags: groupNameList,
                            tokenSeparators: [","]
                        }
                    ).on("change", function (e) {
                            var i = 0;
                            if (e.removed) {
                                angular.forEach(candidateGroups, function(val, key) {
                                    //if(e.removed.text == val.name){
                                    //    CandidateGroup.remove({
                                    //        candidateGroupId : val.candidateGroupId,
                                    //        candidateIds : $scope.candidatesAddToVacancyIds
                                    //    },function(res){
                                    //        if(res.status == 'ok'){
                                    //            if(i == 0){
                                    //                i++;
                                    //                notificationService.success($filter('translate')('Tags removed'));
                                    //            }
                                    //        }
                                    //    });
                                    //}
                                });
                            }else{
                                //var newGroupList = scope.getSelect2GroupForMass().split(",");
                                //angular.forEach(newGroupList, function (nval, key) {
                                //    CandidateGroup.add({
                                //        name: newGroupList[newGroupList.length-1],
                                //        candidateIds: $scope.candidatesAddToVacancyIds
                                //    }, function (res) {
                                //        if(res.status == 'ok'){
                                //            if(i == 0){
                                //                i++;
                                //                candidateGroups.push(res.object);
                                //                notificationService.success($filter('translate')('Tags added'));
                                //            }
                                //        }
                                //    });
                                //});
                            }
                        });
                    scope.getSelect2GroupForMass = function () {
                        var val = $(element[0]).select2('val');
                        return val != null ? val.toString() : null;
                    };
                    scope.setSelect2GroupForMass = function (val) {
                        if (val != undefined) {
                            $(element[0]).select2('val', val);
                        }
                    };
                };
            }
        }
    }]
).directive('descriptionTreatment', [function() {
        return {
            restrict: 'EA',
            scope: {
                description: "="
            },
            link: function(scope, element, attrs) {
               scope.$watch('description', function(newval, oldval) {
                    if (newval) {
                        element.html(scope.description);
                        element.children().each(function () {
                            if($(this).html() == "&nbsp;") {
                                $(this).remove();
                            }else {
                                return false;
                            }
                        });
                        $(element).linkify();
                    }
                });

            }
        }
    }]
).directive('ngContextMenu', function ($parse) {
    var renderContextMenu = function ($scope, event, options) {
        if (!$) { var $ = angular.element; }
        $(event.currentTarget).addClass('context');
        var $contextMenu = $('<div>');
        $contextMenu.addClass('dropdown clearfix');
        var $ul = $('<ul>');
        var body = document.body,
            html = document.documentElement;

        var height = Math.max( body.scrollHeight, body.offsetHeight,
            html.clientHeight, html.scrollHeight, html.offsetHeight );
        $ul.addClass('dropdown-menu');
        $ul.attr({ 'role': 'menu' });
        $ul.css({
            display: 'block',
            position: 'absolute',
            left: event.pageX + 'px',
            top: event.pageY + 'px'
        });
        angular.forEach(options, function (item, i) {
            var $li = $('<li>');
            if (item === null) {
                $li.addClass('divider');
            } else {
                $a = $('<a>');
                $a.attr({ tabindex: '-1'});
                $a.text(item[0]);
                $li.append($a);
                $li.on('click', function () {
                    $scope.$apply(function() {
                        item[1].call($scope, $scope);
                    });
                });
            }
            $ul.append($li);
        });
        $contextMenu.append($ul);
        $contextMenu.css({
            width: '100%',
            height: height,
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999999
        });
        $(document).find('body').append($contextMenu);
        $contextMenu.on("click", function (e) {
            $(event.currentTarget).removeClass('context');
            $contextMenu.remove();
        }).on('contextmenu', function (event) {
            $(event.currentTarget).removeClass('context');
            event.preventDefault();
            $contextMenu.remove();
        });
    };
    return function ($scope, element, attrs) {
        element.on('contextmenu', function (event) {
            $scope.$apply(function () {
                event.preventDefault();
                var options = $scope.$eval(attrs.ngContextMenu);
                if (options instanceof Array) {
                    renderContextMenu($scope, event, options);
                } else {
                    throw '"' + attrs.ngContextMenu + '" not an array';
                }
            });
        });
    };
}).directive('positionAutocompleter', ["$rootScope", "$filter", "$translate", "serverAddress", function($rootScope, $filter, $translate, serverAddress) {
        return {
            restrict: 'EA',
            replace: true,
            link: function($scope, element, attrs) {
                $scope.setPositionAutocompleterValue = function(val) { //переимновтаь
                    if (val != undefined) {
                        $(element[0]).select2("data", {id: val, text: val});
                    }else {
                        $(element[0]).select2("data", {id: '', text: ''});
                    }
                };
                $scope.getPositionAutocompleterValue = function() {//.переимновтаь
                    var object = $(element[0]).select2("data");
                    return object != null ? object.text : null;
                };
                var inputText = "";
                let translatedPositions = false;

                $rootScope.$on('$translateChangeSuccess', function () {
                    initSelect2();
                });

                if(!translatedPositions) {
                    initSelect2();
                }

                function initSelect2() {
                    translatedPositions = true;
                    $(element[0]).select2({
                        placeholder: $translate.instant($scope.placeholder),
                        minimumInputLength: 2,
                        allowClear: true,
                        formatInputTooShort: function () {
                            return ""+ $filter('translate')('Please enter 2 characters') +"";
                        },
                        formatNoMatches: function(term) {
                            return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')('Enter a source of this candidate') + "</div>";
                        },
                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                return {id: term, text: term};
                            }
                        },
                        ajax: {
                            url: serverAddress + "/candidate/autocompletePosition",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    text: term.trim()
                                };
                            },
                            results: function(data, page) {
                                var result = [];
                                angular.forEach(data['objects'], function(val) {
                                    result.push({id: val, text: val})
                                });
                                return {
                                    results: result
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("select2-close", function(e) {
                        if (inputText.length > 0) {
                            $(element[0]).select2("data", {id: inputText, text: inputText});
                        }
                    }).on("select2-selecting", function(e) {
                        inputText = "";
                    }).on("select2-open", function() {
                        if($(element[0]).select2("data"))
                            $('#select2-drop input').val($(element[0]).select2("data").text)
                    });
                }
            }
        }
    }]
).directive('dotdotdot', function() {
        return function(scope, element, attrs) {
            $(element).dotdotdot({
                watch:true
                //height:Number(attrs.dotdotdot)
            });
        }
    }
).directive('dotdotdot2', function() {
        return function(scope, element, attrs) {
            $(element).dotdotdot({
                watch:true,
                height:Number(attrs.dotdotdot2)
            });
        }
    }
).directive('customScrollbar', function() {
            return function(scope, element, attrs) {
                $(element).mCustomScrollbar({
                    theme: 'dark',
                    scrollInertia:1000
                });
            }
        }
).directive('popup', function() {
        return function($scope, element, attrs) {
                element.popup({
                    position : 'right center'
                });
        }
    }
).directive('skillsAutocompleter', ["$filter", "serverAddress","notificationService", function($filter, serverAddress, notificationService) {
            return {
                restrict: 'EA',
                replace: true,
                link: function($scope, element, attrs) {
                    $scope.setSkillAutocompleterValue = function(val) { //переимновтаь
                        if (val != undefined) {
                            $(element[0]).select2("data", {id: val, text: val});
                        }
                    };
                    $scope.getSkillAutocompleterValue = function() {//.переимновтаь
                        var object = $(element[0]).select2("data");
                        return object != null ? object.text : null;
                    };
                    var inputText = "";
                    var source = ["MySQL", "JavaScript", "Linux", "CSS", "HTML", "PHP", "jQuery", "SQL", "Git", "C#", "Java", "XML", "C++", "Python", "OOP/OOD", "PostgreSQL", "MongoDB", "Spring", "Hibernate", "CSS3", "HTML5", "MVC", "Oracle", "ASP.NET", "Android", "Maven", "WPF", "JSON", "WCF", "AJAX", ".NET", "Jira", "Django", "Scrum", "Windows", "JSP", "Yii", "Redis", "JDBC", "SQLite", "Agile", "Ruby", "TDD", "JUnit", "REST API", "STL", "Qt", "Bootstrap", "Tomcat", "ADO.NET", "Delphi", "LINQ", "iOS", "WinForms", "Selenium", "Angular.js", "Design Patterns", "Eclipse", "Apache", "Mercurial", "Frontend", "Entity Framework", "Node.js", "Photoshop", "T-SQL", "JPA", "Objective-C", "Nginx", "Multithreading", "Servlets", "Redmine", "SOAP", "TFS", "UML", "Backbone.js", "Jenkins", "Perl", "Wordpress", "Subversion", "Ant", "Ruby on Rails", "JSF", "CoffeeScript", "PL/SQL", "Joomla", "C/C++", "FreeBSD", "LESS", "SASS", "bash", "Android SDK", "Drupal", "GWT", "EJB", "Scala", "Smarty", "CodeIgniter", "XSLT", "OpenGL", "Quality Assurance (QA)", "Flask", "Symfony", "Swing", "OOD", "Zend Framework (ZF)", "Ubuntu", "Twitter Bootstrap", "Java EE", "Memcached", "Magento", "Silverlight", "\u0421++", "ExtJS", "JMS", "Illustrator", "Boost", "Sphinx", "Patterns", "BDD", "MS SQL Server", "NodeJS", "Unix", "User Interface (UI)", "TCP/IP", "Unity3D", "CI", "Java Core", "JBoss", "RabbitMQ", "NoSQL", "WinAPI", "TeamCity", "Kohana", "TestNG", "Flash", "HAML", "UIKit", "JSTL", "AWS", "NetBeans", "Product management", "RSpec", "C (plain)", "Groovy", "Kanban", "MFC", "Confluence", "Spring MVC", "HTTP", "NHibernate", "XPath", "XAML", "Mantis", "PHPUnit", "Mockito", "Algorithms", "Embedded", "Memcache", "Struts", "Adobe Photoshop", "Cocoa", "CoreData", "Firebird", "Selenium IDE", "IIS", "Visual Studio", "NUnit", "English", "RoR", "Flex", "Lua", "Perforce", "Networking", "SOA", "Knockout", "LAMP", "Xcode", "CakePHP", "\u0421#", "Tornado", "SSIS", "Firebug", "Microsoft SQL Server", "RequireJS", "Highload", "MVVM", "Windows Phone", "SEO", "Doctrine", "COM", "Azure", "Debian", "User Experience (UX)", "IntelliJ IDEA", "JMeter", "Erlang", "Cocoa Touch", "TestComplete", "Windows Forms", "MapKit", "DDD", "MacOS", "Twig", "CVS", "XP", "Foundation", "GUI", "GCD", "Pascal", "Mongo", "Axure", "CentOS", "Prototype", "SoapUI", "Test driven development (TDD)", "SSRS", "Cucumber", "Manual Testing (QA)", "SOLID", "ActionScript", "Grunt", "Solr", "CMS", "Cassandra", "Sinatra", "EntityFramework", "DNS", "Entity", "Hadoop", "Symfony 2", "CRM", "JAXB", "Project Management", "DHCP", "Knockout.js", "regression", "Celery", "TestRail", "CouchDB", "Jetty", "Automation", "DevExpress", "ETL", "Java SE", "Servlet", "ZF", "WebServices", "SCSS", "ASP", "ORM", "Bugzilla", "JAX-RS", "Web Development", "Automated Testing (QA)", "Embedded C", "Stylus", "Selenium WebDriver", "Bitrix", "Shell", "Jade", "iPhone", "Facebook API", "SDLC", "IDEA", "Microsoft Office", "Threads", "Security", "VirtualBox", "Matlab", "DB2", "Vaadin", "Capybara", "Visual Basic (VB)", "Adobe Illustrator", "ARM", "MyBatis", "Waterfall", "RUP", "PHP5", "ActionScript3 (AS3)", "Glassfish", "VMware", "XSD", "Laravel", "Underscore.js", "Gradle", "SharePoint", "SVG", "Grails", "usability", "WinRT", "Zabbix", "Cocos2d", "Nagios", "Assembler", "Objective C", "CoreLocation", "R (language)", "Win32", "Regression Testing", "Cisco", "OpenCV", "JAX-WS", "DirectX", "Continuous Integration", "Haskell", "GIS", "Open Source", "Leaflet"];
                    var sourceForSelect = [];
                    angular.forEach(source, function(val) {
                        sourceForSelect.push({id: val, text: val})
                    });
                    $(element[0]).select2({
                        placeholder: $filter('translate')('Enter skill'),
                        minimumInputLength: 2,
                        formatInputTooShort: function () {
                            return ""+ $filter('translate')('Please enter 2 characters') +"";
                        },
                        formatNoMatches: function(term) {
                            return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')('Enter a source of this candidate') + "</div>";
                        },
                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                return {id: term, text: term};
                            }
                        },
                        data: sourceForSelect,
                        dropdownCssClass: "bigdrop"
                    }).on("select2-close", function(e) {
                        console.log("CLOSE!");
                        function addSkillName(first) {
                            this.name = first;
                        }
                        if($scope.getSkillAutocompleterValue().length > 1){
                            if($scope.candidate.skills.length > 0){
                                var noDoublicate = true;
                                angular.forEach($scope.candidate.skills, function(resp){

                                    if(resp.name.toLowerCase() == $scope.getSkillAutocompleterValue().toLowerCase()){
                                        notificationService.error($filter('translate')('Skill is already added'));
                                        noDoublicate = false;
                                    }
                                });
                                if(noDoublicate){
                                    $scope.candidate.skills.push({name : $scope.getSkillAutocompleterValue(),level: '0'});
                                }
                            }else{
                                $scope.candidate.skills.push({name : $scope.getSkillAutocompleterValue(),level: '0'});
                            }
                        }
                        $scope.setSkillAutocompleterValue('');
                        $scope.$apply();
                        console.log($scope.candidate);
                        if (inputText.length > 0) {
                            $(element[0]).select2("data", {id: inputText, text: inputText});
                        }
                    }).on("select2-selecting", function(e) {
                        inputText = "";
                    });
                }
            }
        }]
).directive('skillsAutocompleterForSearch', ["$filter", "serverAddress","notificationService", function($filter, serverAddress, notificationService) {
            return {
                restrict: 'EA',
                replace: true,
                link: function($scope, element, attrs) {
                    $scope.setSkillAutocompleterValueForSearch = function(val) { //переимновтаь
                        if (val != undefined) {
                            $(element[0]).select2("data", {id: val, text: val});
                        }
                    };
                    $scope.getSkillAutocompleterValueForSearch = function() {//.переимновтаь
                        var object = $(element[0]).select2("data");
                        return object != null ? object.text : null;
                    };
                    var inputText = "";

                    $(element[0]).select2({
                        placeholder: $filter('translate')('Skill with rating'),
                        minimumInputLength: 2,
                        formatInputTooShort: function () {
                            return ""+ $filter('translate')('Please enter 2 characters') +"";
                        },
                        formatNoMatches: function(term) {
                            return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')('Enter a source of this candidate') + "</div>";
                        },
                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                return {id: term, text: term};
                            }
                        },
                        ajax: {
                            url: serverAddress + "/candidate/autocompleteSkill",
                            dataType: 'json',
                            crossDomain: true,
                            type: "POST",
                            data: function(term, page) {
                                return {
                                    text: term.trim()
                                };
                            },
                            results: function(data, page) {
                                var result = [];
                                angular.forEach(data['objects'], function(val) {
                                    result.push({id: val, text: val})
                                });
                                console.log(result);
                                return {
                                    results: result
                                };
                            }
                        },
                        dropdownCssClass: "bigdrop"
                    }).on("select2-close", function(e) {
                        console.log("CLOSE!");
                        function addSkillName(first) {
                            this.name = first;
                        }
                        if($scope.getSkillAutocompleterValueForSearch().length > 1){
                            $scope.candidate = {};
                            var i = 0;
                            angular.forEach($scope.candidate.skills, function(resp){
                                if(resp.name == $scope.getSkillAutocompleterValueForSearch()){
                                    notificationService.error($filter('translate')('Skill is already added'));
                                }else{
                                    if(i == 0){
                                        $scope.candidate.skills.push({name : $scope.getSkillAutocompleterValueForSearch(),level: '_0'});
                                        i++;
                                    }
                                }
                            });

                        }
                        $scope.getSkillAutocompleterValueForSearch('');
                        $scope.$apply();
                        if (inputText.length > 0) {
                            $(element[0]).select2("data", {id: inputText, text: inputText});
                        }
                    }).on("select2-selecting", function(e) {
                        inputText = "";
                    });
                }
            }
        }]
).directive('select2GroupsSearch', ["$filter", "serverAddress", "Service", "CandidateGroup", function($filter, serverAddress, Service, CandidateGroup) {
            return {
                restrict: 'EA',
                replace: true,
                link: function($scope, element, attrs) {
                    $scope.clearTags = function(){
                        $(element[0]).select2('data', null);
                        $scope.groupIdsForSearch = [];
                    };
                    $scope.setGroups=function(groups, groupsByCandidate) {
                        var candidateGroups = groupsByCandidate;
                        var groupList = groups;
                        var groupNameList = [];
                        $scope.groupsForEdit = [];
                        angular.forEach(groupList, function (val, key) {
                            groupNameList.push(val.name);
                        });
                        $(element[0]).select2({
                                tags: groupNameList,
                                tokenSeparators: [","]
                            }
                        ).on("change", function(e) {
                            if (e.removed) {
                                var newGroupList = $scope.getSelect2Group().split(",");
                                var isExists = false;
                                angular.forEach(groupList, function(val, key) {
                                    isExists = false;
                                    angular.forEach(newGroupList, function(nval, nkey) {
                                        if (nval == val.name) {
                                            isExists = true;
                                        }else if(val.candidateGroupId == nval){
                                            isExists = true;
                                        }
                                    });
                                    if (!isExists) {
                                        //angular.forEach(newGroupList, function(nval, key) {
                                        //    angular.forEach(groupList, function(val, nkey) {
                                        //        if (nval == val.name) {
                                        //            groupsIds.push(val.candidateGroupId);
                                        //        }
                                        //    });
                                        //});
                                        var deleteFromArray = $scope.groupIdsForSearch.indexOf(val.candidateGroupId);
                                        if (deleteFromArray > -1) {
                                            $scope.groupIdsForSearch.splice(deleteFromArray, 1);
                                        }
                                    }
                                });
                            } else {
                                var groupsIds = [];
                                var newGroupList = $scope.getSelect2Group().split(",");
                                var isExists = false;
                                angular.forEach(newGroupList, function(nval, key) {
                                    isExists = false;
                                    angular.forEach(candidateGroups, function(val, nkey) {
                                        if (nval == val.name) {
                                            isExists = true;
                                        }
                                    });
                                    if (!isExists) {
                                        angular.forEach(groupList, function(val, nkey) {
                                            if (nval == val.name) {
                                                groupsIds.push(val.candidateGroupId);
                                                var alreadyAdded = false;
                                                angular.forEach($scope.groupsForEdit,function (forEdit) {
                                                    if(val.candidateGroupId == forEdit.candidateGroupId) {
                                                        alreadyAdded = true;
                                                    }
                                                });
                                                if(!alreadyAdded) {
                                                    $scope.groupsForEdit.push({name: val.name, candidateGroupId: val.candidateGroupId})
                                                }
                                            }else if(val.candidateGroupId == nval){
                                                groupsIds.push(val.candidateGroupId)
                                            }
                                        });
                                        //CandidateGroup.add({name : nval, candidateIds : candidates},function(res){
                                        //    candidateGroups.push(res.object);
                                        //});
                                    }
                                });
                                $('a.select2-search-choice-edit').attr("title", $filter('translate')('Edit tag for all candidates'));
                                $('a.select2-search-choice-edit').off().on('click',function (e) {
                                    $scope.editTagName(e.currentTarget);
                                });
                                $scope.groupIdsForSearch = groupsIds;
                                $scope.$apply();
                            }
                        });
                    };
                    $scope.getSelect2Group = function() {
                        var val = $(element[0]).select2('val');
                        return val != null ? val.toString() : null;
                    };
                    $scope.setSelect2Group = function(val) {
                        if (val != undefined) {
                            $(element[0]).select2('val', val);
                        }
                    };
                }
            }
        }]
).directive('ngMin', function() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, elem, attr, ctrl) {
                scope.$watch(attr.ngMin, function(){
                    ctrl.$setViewValue(ctrl.$viewValue);
                });
                var minValidator = function(value) {
                    var min = scope.$eval(attr.ngMin) || 0;
                    if (!isEmpty(value) && value < min) {
                        ctrl.$setValidity('ngMin', false);
                        return undefined;
                    } else {
                        ctrl.$setValidity('ngMin', true);
                        return value;
                    }
                };

                ctrl.$parsers.push(minValidator);
                ctrl.$formatters.push(minValidator);
            }
        };
    }
).directive('ngMax', function() {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function(scope, elem, attr, ctrl) {
                scope.$watch(attr.ngMax, function(){
                    ctrl.$setViewValue(ctrl.$viewValue);
                });
                var maxValidator = function(value) {
                    var max = scope.$eval(attr.ngMax) || Infinity;
                    if (!isEmpty(value) && value > max) {
                        ctrl.$setValidity('ngMax', false);
                        return undefined;
                    } else {
                        ctrl.$setValidity('ngMax', true);
                        return value;
                    }
                };

                ctrl.$parsers.push(maxValidator);
                ctrl.$formatters.push(maxValidator);
            }
        };
    }).directive('showPreviewCandidate', function () {
            return {
                scope: {
                    candidate: '='
                },
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var showDocument = false;
                    if(scope.candidate.files){
                        angular.forEach(scope.candidate.files,function(resp){
                            initDocuments(resp);
                            if(resp.showGDocs){
                                showDocument = true;
                                resp.showDocument = true;
                            }
                        });
                    }
                    if(showDocument){
                        $(element).addClass('attachment');
                        $(element).click(function () {
                            $(this).removeClass('attachment');
                            $(this).addClass('unhide');
                        }, function () {
                            $(this).addClass('attachment');
                            $(this).removeClass('unhide');
                        });
                    }else{
                        $(element).addClass('unhide')
                    }
                }
            }
        }).directive('myEnter', function () {
        return function (scope, element, attrs) {
            console.log('here');
            element.bind("keydown keypress", function (event) {
                if(event.which === 13) {
                    scope.$apply(function (){
                        scope.$eval(attrs.myEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    }).directive('filterList', function($timeout) {
        return {
            link: function(scope, element, attrs) {

                var li = Array.prototype.slice.call(element[0].children);
                function filterBy(value) {
                    li.forEach(function(el) {
                        if($(el).attr('role') == 'tab'){
                            el.className = el.outerText.toLowerCase().indexOf(value.toLowerCase()) !== -1 ? 'panel-heading' : 'ng-hide';
                            if(el.outerText.toLowerCase().indexOf(value.toLowerCase()) !== -1){
                                $(el).parent().css({'display': 'block', 'margin-top': '20px'});
                                if(el.className != 'ng-hide'){
                                    $(el).parents('.guideAndWork').find('.mrg-bottom').css('display', 'none');
                                }
                                if(scope.searchFaq.length == 0){
                                    $(el).parents('.guideAndWork').find('.mrg-bottom').css('display', 'block');
                                }
                            }else{
                                $(el).parents('.guideAndWork').find('.mrg-bottom').css('display', 'none');
                                $(el).parent().css('display', 'none');
                            }
                        }else{
                            if(el.textContent.toLowerCase().indexOf(value.toLowerCase()) !== -1){
                                $(el).parent().css('display', 'block');
                                $(el).parent()[0].children[0].className = 'panel-heading';
                            }
                        }
                    });
                }

                scope.$watch(attrs.filterList, function(newVal, oldVal) {
                    if (newVal !== oldVal) {
                        filterBy(newVal);
                    }
                });
            }
        };
    }).directive("fileread", [function () {
        return {
            restrict: 'AE',
            scope: {
                fileread: "="
            },
            link: function (scope, element, attributes) {
                element.bind("change", function (changeEvent) {
                    var reader = new FileReader();
                    reader.onload = function (loadEvent) {
                        scope.$apply(function () {
                            var txt = "";
                            if ('files' in element[0]) {
                                for (var i = 0; i < element[0].files.length; i++) {
                                    var file = element[0].files[i];
                                    if ('name' in file) {
                                        txt += file.name;
                                    }
                                }
                            }
                            scope.fileread = txt;
                        });
                    };
                    reader.readAsDataURL(changeEvent.target.files[0]);
                });
            }
        }
    }]).directive('selectWithScroll' , [function() {
        return {
            restrict: 'A',
            scope: {
                scrollSize: "=",
                activeClass: "="
            },
            link: function(scope, element) {

                element.on(
                    {
                        mousedown: () => showOptions(event),
                        change: () => reset(event),
                        blur: () =>  reset(event),
                        contextmenu: () => disableContextMenu()
                    }
                );

                let optionsLength = element.children('option').length;
                let showUsers = !(element.attr('size'));
                let selectedOption = null;


                function showOptions(e) {
                    if(showUsers && optionsLength > scope.scrollSize - 1) {
                        element.attr('size', scope.scrollSize);
                        element.addClass(scope.activeClass);
                        showUsers = false;
                    }

                    if(e.target === selectedOption && !showUsers && e.target.tagName.toLowerCase() !== 'select') {
                        reset(e);
                    }

                    if(e.target.tagName.toLowerCase() === 'option') {
                        selectedOption = e.target;
                    }
                }

                function reset(e) {
                    element.removeAttr('size');
                    element.removeClass(scope.activeClass);
                    showUsers = true;
                    if(e.target.tagName.toLowerCase() === 'option') selectedOption = e.target;
                    if(e.type === 'change') element.blur();
                }

                function disableContextMenu() {
                    selectedOption = null;
                    return false;
                }

            }
        }
    }]).directive('fixedHeaderTable', [function() {
        return {
            restrict: 'EA',
            scope: {
                columns: "=",
                secondColumns: "="
            },
            link: function(scope, element, attrs) {
                $(element).after('<table class="table" id="header-fixed" columns="10" second-columns="8" style="position: fixed;top: 0;display: none;background-color: inherit; margin-right: 15px;width: 98%"></table>');
                setTimeout(function(){
                    var tableOffset = $('#'+ attrs.id).offset().top;
                    /////////////////////////////////////////////////////////////////////////  Id is a must!!!!!!
                    /////////////////////////////////////////////////////////////////////////  ".main-header" is a must!!!!!!
                    var header = $('#'+ attrs.id + " #main-header").clone();
                    var secondHeader = $('#'+ attrs.id + " #second_header").clone();
                    var $fixedHeader = $("#header-fixed").append(header);
                    $fixedHeader = $("#header-fixed").append(secondHeader);
                  setTimeout(function(){
                      $("#header-fixed #main-header td:nth-child(1)").css('width', '95');
                      $("#header-fixed #main-header td:nth-child(2)").css('width', '95');
                      $("#header-fixed #main-header td:nth-child(3)").css('width', '105');
                      $("#header-fixed #main-header td:nth-child(4)").css('width', '130');
                      $("#header-fixed #main-header td:nth-child(5)").css('width', '92');
                      $("#header-fixed #main-header td:nth-child(6)").css('width', '100');
                      $("#header-fixed #main-header td:nth-child(7)").css('width', '239');
                      $("#header-fixed #main-header td:nth-child(8)").css('width', '271');
                      $("#header-fixed #main-header td:nth-child(9)").css('width', '127');
                      $("#header-fixed #main-header td:nth-child(10)").css('width', '152');
                      //for (var i = 1; i <= scope.columns; i++){
                      //    $("#header-fixed #main-header td:nth-child("+i+")").css('width', $('#'+ attrs.id + " #main-header td:nth-child("+i+")").css('width'));
                      //}
                      if(secondHeader){
                          console.log(scope.secondColumns);
                          $("#header-fixed #second_header td:nth-child(1)").css('width', '105');
                          $("#header-fixed #second_header td:nth-child(2)").css('width', '119');
                          $("#header-fixed #second_header td:nth-child(3)").css('width', '93');
                          $("#header-fixed #second_header td:nth-child(4)").css('width', '119');
                          $("#header-fixed #second_header td:nth-child(5)").css('width', '56');
                          $("#header-fixed #second_header td:nth-child(6)").css('width', '84');
                          $("#header-fixed #second_header td:nth-child(7)").css('width', '88');
                          $("#header-fixed #second_header td:nth-child(8)").css('width', '84');
                          //for (var i = 1; i <= scope.secondColumns; i++){
                          //    $("#header-fixed #second_header td:nth-child("+i+")").css('width', $('#'+ attrs.id + " #second_header td:nth-child("+i+")").css('width'));
                          //}
                      }
                      console.log('done')
                  },1000);

                    $(window).bind("scroll", function() {
                        var offset = $(this).scrollTop();
                        if (offset >= tableOffset && $fixedHeader.is(":hidden")) {
                            if(window.screen.width >= '1400'){
                                $fixedHeader.css('display', 'inline-table');
                                $("#header-fixed #main-header td:nth-child(7)").css('width', '226');
                                $("#header-fixed #main-header td:nth-child(8)").css('width', '225');
                                $("#header-fixed #main-header td:nth-child(9)").css('width', '157');
                                $("#header-fixed #main-header td:nth-child(10)").css('width', '183');
                            }else{
                                $fixedHeader.css('display', 'block');
                            }
                        }
                        else if (offset < tableOffset) {
                            $fixedHeader.hide();
                        }
                    });
                },500)

            }
        }
    }]).directive('datepickerForTask', ["$filter",  "$rootScope" ,"$translate", "$route", "Task" ,function($filter,  $rootScope, $translate, $route, Task){
        return {
            restrict:"EA",
            link: function ($scope, element, attrs) {
                $(".editDateTask").datetimepicker({
                    format: "dd/mm/yyyy hh:00",
                    startView: 2,
                    minView: 1,
                    autoclose: true,
                    weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                    language: $translate.use(),
                    initialDate: new Date(),
                    startDate: new Date()
                }).on('changeDate', function (data) {
                    $rootScope.editableTask.targetDate = $('.editDateTask').datetimepicker('getDate');
                    $scope.roundMinutes($rootScope.editableTask.targetDate);
                    Task.changeTargetDate({
                        "taskId": $rootScope.editableTask.taskId,
                        "date":$rootScope.editableTask.targetDate
                    }, function(resp){
                        if($route.current.$$route.pageName != 'Activity'){
                            $rootScope.getHistoryForAllActions();
                            $scope.updateTasks();
                            $scope.getLastEvent();
                        } else{
                            $rootScope.getHistoryForAllActions();
                            $scope.tableParams.reload();
                        }
                    })
                }).on('hide', function () {
                    if ($('.editDateTask').val() == "") {
                        $rootScope.editableTask.date = "";
                    }
                });
            }
        };
    }]).directive('datepickerForReportOnRequest', ["$filter",  "$rootScope" ,"$translate", "Statistic" ,function($filter,  $rootScope, $translate, Statistic){
        return {
            restrict:"EA",
            link: function ($scope, element, attrs) {
                let today = new Date();
                let yesterday = new Date(today);
                yesterday.setDate(today.getDate() - 1);
                element.datetimepicker({
                    format: "dd/mm/yyyy",
                    startView: 2,
                    minView: 2,
                    maxView: 4,
                    autoclose: true,
                    weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                    language: $translate.use(),
                    initialDate: yesterday,
                    startDate: new Date($rootScope.me.org.dc),
                    endDate: yesterday
                }).on('changeDate', function (data) {
                    function datepickerDSTfix(dateFromPicker) {
                        let currentTimeZone = (new Date()).getTimezoneOffset();
                        let pickerTimeZone = dateFromPicker.getTimezoneOffset();
                        if(pickerTimeZone == currentTimeZone) {
                            let corrected = new Date(dateFromPicker - dateFromPicker.getMinutes()* 60000 - dateFromPicker.getSeconds()*1000 + currentTimeZone*60000);
                            return corrected - corrected.getHours() * 3600000
                        } else {
                            let timeZoneShift = pickerTimeZone - currentTimeZone;
                            let corrected = new Date(dateFromPicker - dateFromPicker.getMinutes()* 60000 - dateFromPicker.getSeconds()*1000 + currentTimeZone*60000 + timeZoneShift*60000);
                            return corrected - corrected.getHours() * 3600000
                        }
                    }

                    if (data.date != undefined) {
                        Statistic.setParam('requestReportDate', datepickerDSTfix(data.date));
                    }
                }).on('hide', function () {
                    element.blur();
                });
            }
        };
    }]).directive('datepickerOfCustomEditTime', ["$filter",  "$rootScope","$translate" ,function($filter,  $rootScope, $translate){
        return {
            restrict:"EA",
            link: function ($scope, element, attrs) {
                    element.datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:00" : "mm/dd/yyyy hh:00",
                        startView: 2,
                        minView: 1,
                        autoclose: true,
                        language: $translate.use(),
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        initialDate: new Date(),
                        startDate: new Date()
                    }).on('changeDate', function (val) {
                        var flag = false;

                        function datepickerDSTfix(dateFromPicker) {
                            let currentTimeZone = (new Date()).getTimezoneOffset();
                            let pickerTimeZone = dateFromPicker.getTimezoneOffset();
                            if(pickerTimeZone == currentTimeZone) {
                                return dateFromPicker - dateFromPicker.getMinutes()* 60000 - dateFromPicker.getSeconds()*1000 + currentTimeZone*60000
                            } else {
                                let timeZoneShift = pickerTimeZone - currentTimeZone;
                                return dateFromPicker - dateFromPicker.getMinutes()* 60000 - dateFromPicker.getSeconds()*1000 + currentTimeZone*60000 + timeZoneShift*60000
                            }
                        }

                        if (val.date != undefined) {
                            $scope.editCustomValueDate = datepickerDSTfix(val.date);
                            if($scope[$scope.objType].fieldValues &&  $scope[$scope.objType].fieldValues.length > 0){
                                angular.forEach($scope[$scope.objType].fieldValues, function(val) {
                                    if (val.field.fieldId == $scope.editCustomId) {
                                        val.dateTimeValue = $scope.editCustomValueDate;
                                        flag = true;
                                    }
                                });
                                    if(!flag){
                                      $scope[$scope.objType].fieldValues.push({
                                          objType: $scope.objType,
                                          dateTimeValue: $scope.editCustomValueDate,
                                          fieldValueId: $scope.editCustomFieldValueId,
                                          field: {
                                             fieldId: $scope.editCustomId
                                        }
                                    });
                                }
                            }else{
                                $scope[$scope.objType].fieldValues.push({
                                    objType: $scope.objType,
                                    dateTimeValue: $scope.editCustomValueDate,
                                    fieldValueId: $scope.editCustomFieldValueId,
                                    field : {
                                        fieldId:  $scope.editCustomId
                                    }
                                });
                            }
                        }
                    }).on('hide', function (val) {
                        if ($(element).name == $scope.editCustomId) {
                            console.log($scope[$scope.objType], '$scope[$scope.objType].fieldValue');
                            angular.forEach($scope[$scope.objType].fieldValues, function (nval) {
                                if ($(element).value != '') {
                                    if ($scope.editCustomId == nval.field.fieldId) {
                                        nval.dateTimeValue = "";
                                    }
                                }
                            });
                        }
                        $(element).blur();
                    });
            }
        };
    }]).directive('datepickerOfCustomEdit', ["$filter",  "$rootScope","$translate" ,function($filter,  $rootScope, $translate){
        return {
            restrict:"EA",
            link: function ($scope, element, attrs) {
                $(element).datetimepicker({
                    format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                    startView: 4,
                    minView: 2,
                    autoclose: true,
                    language: $translate.use(),
                    weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                    initialDate: new Date(),
                    startDate: new Date()
                }).on('changeDate', function (val) {
                    var flag = false;
                    if (val.date != undefined) {
                        $scope.editCustomValueDate = val.date.getTime();
                        console.log($scope[$scope.objType].fieldValues, '$scope[$scope.objType].fieldValuesDate');
                        if ($scope[$scope.objType].fieldValues &&  $scope[$scope.objType].fieldValues.length > 0) {

                            console.log('1date');
                            angular.forEach($scope[$scope.objType].fieldValues, function (val) {
                                if (val.field.fieldId == $scope.editCustomId) {
                                    val.dateTimeValue = $scope.editCustomValueDate;
                                    flag = true;
                                    console.log('flag = true;');
                                }
                            });

                            if(!flag){

                                $scope[$scope.objType].fieldValues.push({
                                    objType: $scope.objType,
                                    dateTimeValue: $scope.editCustomValueDate,
                                    fieldValueId: $scope.editCustomFieldValueId,
                                    field: {
                                        fieldId: $scope.editCustomId
                                    }
                                });
                            }
                        } else {
                            console.log('2date');

                            // $scope[$scope.objType].fieldValues = [];

                            $scope[$scope.objType].fieldValues.push({
                                objType: $scope.objType,
                                dateTimeValue: $scope.editCustomValueDate,
                                fieldValueId: $scope.editCustomFieldValueId,
                                field: {
                                    fieldId: $scope.editCustomId
                                }
                            });
                        }
                        console.log($scope[$scope.objType].fieldValues, '$scope[$scope.objType].fieldValues');
                    }
                }).on('hide', function () {
                    if ($(element).name == $scope.editCustomId) {
                        console.log($scope[$scope.objType], '$scope[$scope.objType].fieldValue');

                        angular.forEach($scope[$scope.objType].fieldValues, function (nval) {
                            if ($(element).value != '') {
                                if ($scope.editCustomId == nval.field.fieldId) {
                                    nval.dateTimeValue = "";
                                }
                            }
                        });
                    }
                    $(element).blur();
                });

            },

        };
    }]).directive('customScrollbarPagination', function() {
            return function(scope, element, attrs) {
                $(element).mCustomScrollbar({
                    theme: 'dark-3',
                    scrollInertia:1000
                });
            }
        }
    ).directive("navPagination", ["$rootScope", function ($rootScope) {
        return {
            restrict: 'AE',
            templateUrl: '../partials/pagination.html?1',
            link: function (scope, element, attributes) {
                let pagePickerButtons = element.find('.left-block .pager-round-button');
                scope.$watch('paginationParams', function (newValue, oldValue) {
                    if(newValue)
                    scope.totalPagesCount = Math.ceil(newValue.totalCount/scope.params.count());
                    if(pagePickerButtons) {
                        if(scope.totalPagesCount > 999) {
                            pagePickerButtons.width(42);
                        } else {
                            pagePickerButtons.width(37);
                        }
                    }
                });
            }
        }
    }]).directive("paginationSelect", ["$rootScope", function ($rootScope) {
        return {
            restrict: 'AE',
            link: function (scope, element, attributes) {
                let startPos = 1;
                let lastPos = 1;
                let expanded = false;
                let heightDropList = 100;
                let widthDropList = 37;
                let drListElement = element.find('.pagination-droplist');
                let elementWrapper = element.find('.pagination-droplist-2');
                let totalPages;

                scope.$watch('paginationParams', function (newValue, oldValue) {
                    hideDropdown();
                    if(newValue)
                        totalPages = Math.ceil(newValue.totalCount/scope.params.count());
                        if(totalPages > 5) {
                            startPos = firstPageNumber(totalPages, scope.paginationParams.currentPage+1);
                            lastPos = lastPageNumber(totalPages, scope.paginationParams.currentPage+1);
                            formingElement(startPos, lastPos);
                            bindListeners(heightDropList, widthDropList);
                        }
                });

                function lastPageNumber(totalPages, currentPage) {
                    if(totalPages == 6) {
                        switch (true) {
                            case (currentPage == 3):
                                return 5;
                            case (currentPage == 4):
                                return 3;
                            default:
                                return 4
                        }
                    } else {
                        switch (true) {
                            case (currentPage < 3 || currentPage > totalPages - 2):
                                return totalPages - 2;
                            default:
                                return (currentPage - 1)
                        }
                    }
                }

                function firstPageNumber(totalPages, currentPage) {
                    if(totalPages == 6) {
                        switch (currentPage) {
                            case 3:
                                return 4;
                            case  4:
                                return 2;
                            default:
                                return 3
                        }
                    } else {
                        switch (true) {
                            case (currentPage < 3):
                                return 3;
                            case (currentPage == 3):
                                return 4;
                            case (currentPage > 3 && currentPage < totalPages - 1):
                                return 2;
                            case (currentPage >= totalPages - 1):
                                return 3;
                        }
                    }
                }

                function hideDropdown() {
                    if(elementWrapper) {
                        elementWrapper.css({
                            "height": "0",
                            "border": "none"
                        });
                        expanded = false;
                    }
                }

                function bindListeners(height, width) {
                    element.unbind().on('click',(event) => {
                        if(expanded && hideIfNotScrollBar(event)) {
                            hideDropdown();
                        } else {
                            expanded = true;

                            elementWrapper.css({
                                "height": height,
                                "width": width,
                                "border": "1px solid #aaa"
                            });
                        }
                    });
                    element.find('li').on('click',(event) => {
                        scope.params.page(event.target.value);
                        scope.$apply();
                    });
                    $('body').on('click', (event) => {
                        if(hideIfNotScrollBar(event)) {
                            if(!$(event.target).is(element)) {
                                hideDropdown();
                            }
                        }
                    })
                }

                function hideIfNotScrollBar(event) {
                    let classListOfTarget = [];
                    for(let i = event.target.classList.length - 1 ; i >= 0; i--) {
                        classListOfTarget.push(event.target.classList[i]);
                    }
                    if(classListOfTarget && (classListOfTarget.indexOf('_mCS_2') != -1 || classListOfTarget.indexOf('mCSB_dragger_bar') != -1 || classListOfTarget.indexOf('mCSB_dragger') != -1)) {
                        return false
                    } else {
                        return true
                    }
                }

                function formingElement(startPage, lastPage) {
                    let pagesList = '';
                    let elementsCount = lastPage - startPage + 1;
                    for(let i = startPage; i <= lastPage; i++){
                        pagesList += '<li value =" ' + i + '">' + i + '</li>';
                    }
                    drListElement.html(pagesList);
                    if(elementsCount < 5) {
                        heightDropList = 20*(elementsCount);
                    } else {
                        heightDropList = 100;
                    }
                    if(lastPage > 999) {
                        widthDropList = 57;
                    } else if(lastPage > 99) {
                        widthDropList = 49;
                    } else {
                        widthDropList = 37;
                    }
                    return drListElement
                }

            }
        }
    }]).directive("paginationSecondSelect", ["$rootScope", function ($rootScope) {
        return {
            restrict: 'AE',
            link: function (scope, element, attributes) {
                let startPos = 1;
                let lastPos = 1;
                let expanded = false;
                let heightDropList = 100;
                let widthDropList = 37;
                let drListElement = element.find('.pagination-droplist');
                let elementWrapper = element.find('.pagination-droplist-2');
                let totalPages;

                scope.$watch('paginationParams', function (newValue, oldValue) {
                    hideDropdown();
                    if(newValue)
                        totalPages = Math.ceil(newValue.totalCount/scope.params.count());
                    if(totalPages > 5) {
                        startPos = scope.paginationParams.currentPage + 2;
                        lastPos = totalPages - 1;
                        formingElement(startPos, lastPos);
                        bindListeners(heightDropList, widthDropList);
                    }
                });

                function hideDropdown() {
                    if(elementWrapper) {
                        elementWrapper.css({
                            "height": "0",
                            "border": "none"
                        });
                        expanded = false;
                    }
                }

                function bindListeners(height, width) {
                    element.unbind().on('click',(event) => {
                        if(expanded && hideIfNotScrollBar(event)) {
                            hideDropdown();
                        } else {
                            expanded = true;
                            elementWrapper.css({
                                "height": height,
                                "width": width,
                                "border": "1px solid #aaa"
                            });
                        }
                    });
                    element.find('li').on('click',(event) => {
                        scope.params.page(event.target.value);
                        scope.$apply();
                    });
                    $('body').on('click', (event) => {
                        if(hideIfNotScrollBar(event)) {
                            if(!$(event.target).is(element)) {
                                hideDropdown();
                            }
                        }
                    })
                }

                function hideIfNotScrollBar(event) {
                    let classListOfTarget = [];
                    for(let i = event.target.classList.length - 1 ; i >= 0; i--) {
                        classListOfTarget.push(event.target.classList[i]);
                    }
                    if(classListOfTarget && (classListOfTarget.indexOf('_mCS_2') != -1 || classListOfTarget.indexOf('mCSB_dragger_bar') != -1 || classListOfTarget.indexOf('mCSB_dragger') != -1)) {
                        return false
                    } else {
                        return true
                    }
                }

                function formingElement(startPage, lastPage) {
                    let pagesList = '';
                    let elementsCount = lastPage - startPage + 1;
                    for(let i = startPage; i <= lastPage; i++){
                        pagesList += '<li value =" ' + i + '">' + i + '</li>';
                    }
                    drListElement.html(pagesList);
                    if(elementsCount < 5) {
                        heightDropList = 20*(elementsCount);
                    } else {
                        heightDropList = 100;
                    }
                    if(lastPage > 999) {
                        widthDropList = 57;
                    } else if(lastPage > 99) {
                        widthDropList = 49;
                    } else {
                        widthDropList = 37;
                    }
                    return drListElement
                }

            }
        }
    }]);
function similar_text(first, second, percent) {
    if (first === null || second === null || typeof first === 'undefined' || typeof second === 'undefined') {
        return 0;
    }
    first += '';
    second += '';
    var pos1 = 0,
        pos2 = 0,
        max = 0,
        firstLength = first.length,
        secondLength = second.length,
        p, q, l, sum;
    max = 0;
    for (p = 0; p < firstLength; p++) {
        for (q = 0; q < secondLength; q++) {
            for (l = 0;
                 (p + l < firstLength) && (q + l < secondLength) && (first.charAt(p + l) === second.charAt(q + l)); l++)
                ;
            if (l > max) {
                max = l;
                pos1 = p;
                pos2 = q;
            }
        }
    }
    sum = max;
    if (sum) {
        if (pos1 && pos2) {
            sum += similar_text(first.substr(0, pos1), second.substr(0, pos2));
        }
        if ((pos1 + max < firstLength) && (pos2 + max < secondLength)) {
            sum += similar_text(first.substr(pos1 + max, firstLength - pos1 - max), second.substr(pos2 + max,
                secondLength - pos2 - max));
        }
    }
    if (!percent) {
        return sum;
    } else {
        return (sum * 200) / (firstLength + secondLength);
    }
}


function getPosition(element) {
    var xPosition = 0;
    var yPosition = 0;
    while (element) {
        xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
        yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
        element = element.offsetParent;
    }
    return {x: xPosition, y: yPosition};
}

function createSpanForInterviewStatusHistory(arrname, status, $filter, short) {
    var span = "<span style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:";
    switch (status) {
        case "longlist":
            return span + "#9eacc3'>" + $filter('translate')("interview_status_assoc_full.longlist") + "</span>";
        case "shortlist":
            return span + "#b5c3da;'>" + $filter('translate')("interview_status_assoc_full.shortlist") + "</span>";
        case "interview":
            return span + "#f09c99'>" + $filter('translate')("interview_status_assoc_full.interview") + "</span>";
        case "notafit":
            return span + "#71a6b1'>" + $filter('translate')("interview_status_assoc_full.notafit") + "</span>";
        case "approved":
            return span + "#b5d6a8'>" + $filter('translate')("interview_status_assoc_full.approved") + "</span>";
        case "declinedoffer":
            return span + "#d9a9bf'>" + $filter('translate')("interview_status_assoc_full.declinedoffer") + "</span>";
        case "completed":
            return span + "#f1f1f1'>" + $filter('translate')("interview_status_assoc.completed") + "</span>";

        default:
            if (short && status == "interview_with_the_boss") {
                return span + "#CBB4AB'>" + $filter('translate')(status + "_short") + "</span>"
            } else {
                if(arrname){
                    return span + "#CBB4AB'>" + $filter('translate')(arrname + "." + status) + "</span>"
                } else{
                    return span + "#CBB4AB'>" + $filter('translate')(arrname + status) + "</span>"
                }
            }
    }
}

function createDivForInterviewStatusHistory(status, $filter) {
    var span = "<div class='grey-hover vacancy-stages' style='border-radius: 5px;padding-left: 4px;padding-right: 4px;color:white;background-color:";
    switch (status) {
        case "longlist":
            return span + "#5e6d86'>" + $filter('translate')("interview_status_assoc_full.longlist") + "</div>";
        case "shortlist":
            return span + "#7887a0;'>" + $filter('translate')("interview_status_assoc_full.shortlist") + "</div>";
        case "interview":
            return span + "#3E3773'>" + $filter('translate')("interview_status_assoc_full.interview") + "</div>";
        case "notafit":
            return span + "#407682'>" + $filter('translate')("interview_status_assoc_full.notafit") + "</div>";
        case "approved":
            return span + "#76a563'>" + $filter('translate')("interview_status_assoc_full.approved") + "</div>";
        case "declinedoffer":
            return span + "#a56484'>" + $filter('translate')("interview_status_assoc_full.declinedoffer") + "</div>";
        default:
            return span + "rgba(88,88,88,0.96)'>" + $filter('translate')(status) + "</div>"
    }
}

'use strict';

/* Filters */
var mass = {
    0: "today",
    1: "tomorrow"
};


angular.module('RecruitingApp.filters', ['ngSanitize'])
    .filter("fileNameCut", [function () {
        return function (fileName, start, end) {
            if (fileName != undefined) {
                start = start != undefined ? start : 0;
                end = end != undefined ? end : 50;
                var filenameArr = fileName.split(".");
                    if(fileName.length >= end){
                        return filenameArr[0].substring(start, end-6) + "..." + filenameArr.pop();
                    } else if (filenameArr.length == 1) {
                        return filenameArr[0].substring(start, end);
                    } else {
                        return fileName.substring(start, end);
                    }
            } else {
                return "";
            }

        }
    }])
    .filter("roundUp", [function () {
        return function (number) {
            if (number == undefined) return 0;
            return Math.ceil(number);

        }
    }])
    .filter("datefunction", ["$filter", function ($filter) {
        return function (date) {
            var vlDate = new Date($filter('date')(date, "MM/dd/yyyy", "UTC"));
            var now = new Date();
            var vlM = vlDate.getMonth();
            if (vlDate.getMonth() == now.getMonth()) {
                if (vlDate.getDate() >= now.getDate()) {
                    var dayDiff = vlDate.getDate() - now.getDate();
                    if (dayDiff > 1) {
                    } else {
                        return $filter('translate')(mass[dayDiff]) + " " + $filter('translate')('birthday_2');
                    }

                } else {

                    return $filter('date')(vlDate, "dd MMM") + " " + $filter('translate')("was") + " " + $filter('translate')('birthday_2')
                }
            } else {
                return $filter('date')(vlDate, "dd MMM") + " " + $filter('translate')("was") + " " + $filter('translate')('birthday_2')
            }
        }
    }])
    .filter('findTypeOfVacancy', ["$filter", "Vacancy", function ($filter, Vacancy) {
        return function (vacancyStatus) {
            var array = vacancyStatus.split(',');
            var vacancyType;
            angular.forEach(Vacancy.interviewStatusNew(), function (vStatus) {
                var check = [];
                var statusDef = $filter('filter')(vStatus.status, {defaultS: true});
                angular.forEach(statusDef, function (statusD) {
                    angular.forEach(array, function (statA) {
                        if (statusD.value == statA) {
                            check.push(true);
                        }
                    });
                });
                if (check.length == statusDef.length) {
                    vacancyType = vStatus.vacancyType;
                } else {
                }
            });
            return vacancyType;
        }
    }])
    .filter('vacancyStatusForHistory', ["$filter", "Vacancy", function ($filter, Vacancy) {
        return function (vacancyStatus) {
            var array = vacancyStatus.split(',');
            var forReturn = [];
            angular.forEach(Vacancy.interviewStatusNew(), function (vStatus) {
                var check = [];
                var statusDef = $filter('filter')(vStatus.status, {defaultS: true});
                angular.forEach(statusDef, function (statusD) {
                    angular.forEach(array, function (statA) {
                        if (statusD.value == statA) {
                            check.push(true);
                        }
                    });
                });
                if (check.length == statusDef.length) {
                    angular.forEach(vStatus.status, function (vStatusV) {
                        if (vStatusV.forHistory) {
                            angular.forEach(array, function (val) {
                                if (val == vStatusV.value) {
                                    forReturn.push(vStatusV.value);
                                }
                            })
                        }
                    });
                }
            });
            return forReturn;
        };
    }])
    .filter('vacancyStatusInSelectFilter', ["$filter", function ($filter) {
        return function (vacancyStatus) {
            if (vacancyStatus != undefined) {
                var value = $filter('filter')(vacancyStatus, {used: true});
                if (value != undefined && value.length == 1) {
                    return $filter('filter')(value[0].status, {added: true});
                }
            }
            return [];
        }
    }])
    .filter('vacancyStatusInCheckFilter', ["$filter", function ($filter) {
        return function (vacancyStatus, vacancyType) {
            if (vacancyStatus != undefined) {
                var value = $filter('filter')(vacancyStatus, {vacancyType: vacancyType});
                if (value != undefined && value.length == 1) {
                    return $filter('filter')(value[0].status, {defaultS: false});
                }
            }
        }
    }])
    .filter('dateFormat', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, withHour, withUTC) {

            function createDateAsUTC(datLong) {
                if (datLong != undefined) {
                    var date = new Date(datLong);
                    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                }
            }

            if (withUTC == true) {
                date = createDateAsUTC(date);
            }
            var hour = "";
            var dateToday = new Date().getTime();
            var lang = $translate.use();
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "d MMM ";
                dateMDY = "d MMM y ";
            } else if (lang == 'en') {
                dateMD = "MMM d ";
                dateMDY = "MMM d, y ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm a";
                } else {
                    hour = "H:mm";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                return $filter('date')(date, dateMD + hour);
            } else {
                return $filter('date')(date, dateMDY + hour);
            }
        };
    }])
    .filter('dateFormat2', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, withHour) {
            var hour = "";
            var dateToday = new Date().getTime();
            var dateTomorrow = new Date().setDate(new Date().getDate() + 1);
            var lang = $translate.use();
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "d MMM ";
                dateMDY = "d MMM y ";
            } else if (lang == 'en') {
                dateMD = "MMM d ";
                dateMDY = "MMM d, y ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm a";
                } else {
                    hour = "H:mm";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                if (angular.equals($filter('date')(dateToday, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("today");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + " " + $filter('date')(date, hour)
                    }
                    return res;
                } else if (angular.equals($filter('date')(dateTomorrow, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("tomorrow");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + " " + $filter('date')(date, hour)
                    }
                    return res;
                } else {
                    return $filter('date')(date, dateMD + hour);
                }
            } else {
                return $filter('date')(date, dateMDY + hour);
            }
        };
    }])
    .filter('dateFormat3', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, withHour, withUTC) {

            function createDateAsUTC(datLong) {
                if (datLong != undefined) {
                    var date = new Date(datLong);
                    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                }
            }

            if (withUTC == true) {
                date = createDateAsUTC(date);
            }
            var hour = "";
            var dateToday = new Date().getTime();
            var lang = $translate.use();
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "yyyy-MM-dd ";
                dateMDY = "yyyy-MM-dd ";
            } else if (lang == 'en') {
                dateMD = "MM-dd-yyyy ";
                dateMDY = "MM-dd-yyyy ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm:ss a";
                } else {
                    hour = "H:mm:ss";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                return $filter('date')(date, dateMD + hour);
            } else {
                return $filter('date')(date, dateMDY + hour);
            }
        };
    }])
    .filter('dateFormat4', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, withHour, withUTC) {

            function createDateAsUTC(datLong) {
                if (datLong != undefined) {
                    var date = new Date(datLong);
                    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                }
            }

            if (withUTC == true) {
                date = createDateAsUTC(date);
            }
            var hour = "";
            var dateToday = new Date().getTime();
            var lang = $translate.use();
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "d MMM ";
                dateMDY = "d MMM y ";
            } else if (lang == 'en') {
                dateMD = "MMM d ";
                dateMDY = "MMM d, y ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm a";
                } else {
                    hour = "H:mm";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                return $filter('date')(date, dateMD) + $filter('translate')('at') + " " + $filter('date')(date, hour);
            } else {
                return $filter('date')(date, dateMDY) + $filter('translate')('at') + " " + $filter('date')(date, hour);
            }
        };
    }])
    .filter('dateFormat5', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, withHour) {
            var hour = "";
            var dateforToday = "";
            var dateToday = new Date().getTime();
            var dateTomorrow = new Date().setDate(new Date().getDate() + 1);
            var dateYesterday = new Date().setDate(new Date().getDate() - 1);
            var lang = $translate.use();
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "d MMM ";
                dateMDY = "d MMM y ";
            } else if (lang == 'en') {
                dateMD = "MMM d ";
                dateMDY = "MMM d, y ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm a";
                    dateforToday = "h:mm:ss a";
                } else {
                    hour = "H:mm";
                    dateforToday = "H:mm:ss";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                if (angular.equals($filter('date')(dateToday, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("today");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + " " + $filter('date')(date, dateforToday)
                    }
                    return res;
                } else if (angular.equals($filter('date')(dateYesterday, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("yesterday");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + " " + $filter('date')(date, dateforToday)
                    }
                    return res;
                } else {
                    return $filter('date')(date, dateMD);
                }
            } else {
                return $filter('date')(date, dateMDY);
            }
        };
    }])
    .filter('dateFormat6', ["$filter", "$translate",'$rootScope' , function ($filter, $translate, $rootScope) {
        return function (date, withHour) {
            var hour = "";
            var dateToday = new Date().getTime();
            var dateTomorrow = new Date().setDate(new Date().getDate() + 1);
            var lang = $translate.use() || $rootScope.currentLang || 'ru';
            var dateMD = "";
            var dateMDY = "";
            if (lang == 'ru' || lang == 'ua') {
                dateMD = "d MMM ";
                dateMDY = "d MMM '<br/>' y ";
            } else if (lang == 'en') {
                dateMD = "MMM d ";
                dateMDY = "MMM d, y ";
            }
            if (withHour === true) {
                if (lang == 'en') {
                    hour = "h:mm a";
                } else {
                    hour = "H:mm";
                }
            }
            if (angular.equals($filter('date')(dateToday, 'y'), $filter('date')(date, 'y'))) {
                if (angular.equals($filter('date')(dateToday, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("today");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + '<br/>' + $filter('date')(date, hour);
                    }
                    return res;
                } else if (angular.equals($filter('date')(dateTomorrow, 'y MMM d'), $filter('date')(date, 'y MMM d'))) {
                    var res = $filter("translate")("tomorrow");
                    if (withHour) {
                        res += " " + $filter("translate")("at") + '<br/>' + $filter('date')(date, hour)
                    }
                    return res;
                } else {
                    return $filter('date')(date, dateMD + '<br/>' + hour);
                }
            } else {
                return $filter('date')(date, dateMDY + hour);
            }
        };
    }])
    .filter('salaryFormat', ["$filter", function ($filter) {
        return function (salaryFrom, salaryTo) {
            var res = "";
            if (salaryFrom && salaryTo) {
                res = salaryFrom + "-" + salaryTo;
            } else if (salaryFrom && !salaryTo) {
                res = salaryFrom + "+";
            } else if (!salaryFrom && salaryTo) {
                res = $filter('translate')('up to') + " " + salaryTo;
            } else if (!salaryFrom && !salaryTo) {
                res = $filter('translate')('on the interview results');
            }
            return res;
        };
    }])
    .filter('secondsToHhMm', ["$filter", function ($filter) {
        return function (seconds) {
            if (seconds != undefined && seconds != null && !isNaN(seconds) && seconds != 0) {
                var res = "";
                if(seconds >= 60) {
                    var hour = parseInt(seconds / 3600 );
                    if (hour != 0) {
                        res += hour + " " + $filter("translate")("h") + " ";
                    }
                    var min =  parseInt((seconds - (hour * 3600)) / 60);
                    res += min + " " + $filter("translate")("min");
                    return res;
                } else {
                    var sec = seconds + " " +$filter("translate")("sec");
                    return sec;
                }
            } else {
                return "";
            }
        };
    }])
    .filter('dayFormat', ["$filter", function ($filter) {
        return function (seconds) {
            if (seconds != undefined && seconds != null && !isNaN(seconds) && seconds != 0) {
                var res = "";
                var day = parseInt(seconds / 3600 / 24);
                if (day != 0) {
                    res += day + " " + $filter("translate")("d") + ". ";
                }
                var hour = Math.round((seconds / 3600) % 24);
                if (hour != 0) {
                    res += hour + " " + $filter("translate")("h") + ". "
                } else if (seconds < 3600) {
                    res += "1 " + $filter("translate")("h") + ". "
                }
                return res;
            } else {
                return "";
            }
        };
    }])
    .filter('dayFormat2', ["$filter", "$translate", function ($filter, $translate) {
        return function (date, done) {
            if (date) {
                var seconds = (new Date().getTime() - date) / 1000;
                var res = "";
                var day = parseInt(seconds / 3600 / 24);
                if (day != 0) {
                    res += day + " " + $filter("translate")("d") + ". ";
                }
                var hour = Math.round((seconds / 3600) % 24);
                if (hour != 0) {
                    res += hour + " " + $filter("translate")("h") + ". "
                } else if (seconds < 3600) {
                    var min = parseInt(seconds / 60);
                    if (min >= 1) {
                        res += min + " " + $filter("translate")("min") + ". ";
                    }
                }
                if (res != "") {
                    res += " " + $filter("translate")("ago")
                } else {
                    res = $filter("translate")("Just done");
                    if (done) {
                        if ($translate.use() != 'en') {
                            res += " " + $filter("translate")("done")
                        }
                    }
                }
                return res;
            } else {

            }
        };
    }])
    .filter('countFormat', ["$filter", "$translate", function ($filter, $translate) {
        return function (count) {
            if ($translate.use() == 'en') {
                return count + " " + $filter("translate")("Active vacancies");
            } else {
                return count;
            }
        };
    }])
    .filter('clientsCountFormat', ["$filter", function ($filter) {
        return function (count) {
            if (count == 1) {
                return count;
            } else if (count == undefined) {
                return 0;
            } else {
                return count;
            }
        };
    }])
    .filter('ageOfDate', ['$filter', function ($filter) {
        return function (dateString) {
            if (dateString != undefined) {
                var today = new Date();
                var birthDate = new Date(dateString);
                var age = today.getFullYear() - birthDate.getFullYear();
                var m = today.getMonth() - birthDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }
                var cases = [2, 0, 1, 1, 1, 2];
                var translate = $filter('translate');
                return age + " " + [translate('year'), translate('years'), translate('age_1')][(age % 100 > 4 && age % 100 < 20) ? 2 : cases[(age % 10 < 5) ? age % 10 : 5]];

            }
        };
    }])
    .filter('ageDisplay', ["$filter", function ($filter) {
        return function (ageFrom, ageTo) {
            if (ageFrom != undefined && ageTo == undefined) {
                return $filter('translate')('from') + " " + ageFrom
            } else if (ageTo != undefined && ageFrom == undefined) {
                return $filter('translate')('to') + " " + ageTo
            } else if (ageTo != undefined && ageFrom != undefined) {
                return ageFrom + "-" + ageTo;
            }
        }
    }])
    .filter('adviceFilter', function () {
        return function (advices, criteria) {
            var filtered = [];
            var limit = criteria.limit;
            angular.forEach(advices, function (val, s, i) {
                if (limit != undefined && limit > s) {
                    if (val.scorePersent != undefined && val.scorePersent > 25) {
                        filtered.push(val);
                    }
                }
            });
            return filtered;
        }
    })
    .filter('transliteration', ["transliteration", function (transliteration) {
        return function (value) {
            var transl = transliteration.getArray();
            var result = "";
            for (var i = 0; i < value.length; i++) {
                if (transl[value[i]] != undefined) {
                    result += transl[value[i]];
                } else {
                    if (value[i].match(/\w/)) {
                        result += value[i];
                    } else if(value[i] == '#'){
                        result += '-sharp'
                    }else if(value[i] == '/'){
                        result += '|'
                    } else {
                        result += '_';
                    }
                }
            }
            return result;
        }
    }])
    .filter('responsibleWithout', function () {
        return function (responsible, responsibleHas) {
            var filtered = [];
            angular.forEach(responsible, function (person) {
                if (person.userId != undefined) {
                    var has = false;
                    angular.forEach(responsibleHas, function (hasPerson) {
                        if (hasPerson.responsible && hasPerson.responsible.userId === person.userId) {
                            has = true;
                        }
                    });
                    if (!has) {
                        filtered.push(person);
                    }
                }
            });
            return filtered;
        };
    })
    .filter('scopeRegionFilter', function () {
        return function (regions, regionId) {
            var filtered = [];
            angular.forEach(regions, function (region) {
                if (angular.equals(region.regionId, regionId)) {
                    filtered.push(region);
                }
            });
            return filtered;
        };
    })
    .filter('cutName', function () {
        return function (value, wordwise, max, tail) {
            if (!value) return '';

            max = parseInt(max, 10);
            if (!max) return value;
            if (value.length <= max) return value;

            value = value.substr(0, max);
            if (wordwise) {
                var lastspace = value.lastIndexOf(' ');
                if (lastspace != -1) {
                    value = value.substr(0, lastspace);
                }
            }

            return value + (tail || '…');
        };
    })
    .filter('cut', function () {
        return function (value, wordwise, max, tail) {
            var endExtension = "";
            if (!value)
                return '';
            if (value.split('.').length === 2) {
                endExtension = value.split('.')[1];
                value = value.split('.')[0];
            }
            max = parseInt(max, 10);
            if (!max)
                return value;
            if (value.length + value.split(' ').length <= max)
                return value + endExtension;

            value = value.substr(0, max);
            if (wordwise) {
                var lastspace = value.lastIndexOf(' ');
                if (lastspace !== -1) {
                    value = value.substr(0, lastspace);
                }
            }
            return value + (tail || '...') + endExtension;
        };
    })
    .filter('modalchangestatusplaceholder', ["$filter", function ($filter) {
        return function (value) {
            if (value == 'declinedoffer') {
                return $filter('translate')('Write a comment why candidate long offer (required)')
            } else {
                return $filter('translate')('Write a comment about changing candidate status to') + ' '
                     + $filter('translate')('(optional)');
            }

        };
    }])
    .filter('spellcheck', function () {
        return function (value) {
            if (!value) {
                return '';
            }
            if (value === 'admin') {
                return 'Admin';
            }
            if (value === 'client') {
                return 'Hiring manager';
            }
            if (value === 'hr:client') {
                return 'Hiring manager';
            }
            if (value === 'recruter') {
                return 'Recruiter';
            }
            if (value === 'researcher') {
                return 'Researcher';
            }
            if (value === 'hr:admin') {
                return 'Admin';
            }
            if (value === 'hr:recruter') {
                return 'Recruiter';
            }
            if (value == "salesmanager") {
                return "Sales Manager"
            }
            if (value === 'hr:salesmanager') {
                return 'Sales Manager';
            }
            if (value === 'freelancer') {
                return 'Freelancer';
            }
            if (value === 'hr:freelancer') {
                return 'Freelancer';
            }
            return value;
        };
    })
    .filter('cutScope', function () {
        return function (value) {
            if (!value)
                return '';
            if (value.length < 15) {
                return value;
            } else {
                value = value.substr(0, 13);
                return value + '...';
            }
        };
    })
    .filter('unique', function () {

        return function (items, filterOn) {

            if (filterOn === false) {
                return items;
            }

            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
                var hashCheck = {}, newItems = [];

                var extractValueToCompare = function (item) {
                    if (angular.isObject(item) && angular.isString(filterOn)) {
                        return item[filterOn];
                    } else {
                        return item;
                    }
                };

                angular.forEach(items, function (item) {
                    var valueToCheck, isDuplicate = false;

                    for (var i = 0; i < newItems.length; i++) {
                        if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
                            isDuplicate = true;
                            break;
                        }
                    }
                    if (!isDuplicate) {
                        newItems.push(item);
                    }

                });
                items = newItems;
            }
            return items;
        };
    })
    .filter('escape', function () {
        return window.escape;
    })
    .filter('interpolate', ['version', function (version) {
        return function (text) {
            return String(text).replace(/\%VERSION\%/mg, version);
        };
    }])
    .filter("translatestatus", ["$filter", function ($filter) {
        return function (text) {
            switch (text) {
                case"shortlist":
                    return $filter("translate")("short_list");
                case"longlist":
                    return $filter("translate")("long_list");
                case"interview":
                    return $filter("translate")("interview");
                case"approved":
                    return $filter("translate")("approved");
                case"notafit":
                    return $filter("translate")("not_a_fit");
                case"declinedoffer":
                    return $filter("translate")("declined_offer");
                case"no_contacts":
                    return $filter("translate")("no_contacts");
                case"no_response":
                    return $filter("translate")("no_response");
            }

        }
    }])
    .filter('getorders', function () {
        return function (orders) {
            var filtered_list = [];
            if (orders != undefined) {
                for (var i = 0; i < orders.length; i++) {
                        var two_days_ago = new Date().getTime() - 24 * 60 * 60 * 1000;
                        var last_modified = new Date(orders[i].date).getTime();

                        //if (two_days_ago <= last_modified || orders[i].type == 'task') {
                            filtered_list.push(orders[i]);
                        //}
                }
            }

            //filtered_list.sort(function (a, b) {
            //    return a.date - b.date;
            //});
            return filtered_list;
        }
    })
    .filter('showRegionInVacancy', function () {
        return function (region) {

            if (region) {
                if (region.city) {
                    return region.city;
                } else if (region.country)
                    return region.country;
            }
            return "";

        }
    })
    .filter('textForNotice', function ($sce, $filter) {
        return function (text, withDot) {
            withDot == undefined ? false : withDot;
            var respText;
            var dots = "";
            if ($filter('countOfTextInSticker')(text) > 210 && withDot)dots = "...";
            if (text != undefined && text.length > 0) {
                respText = linkify3(text) + dots;
            } else {
                respText = "";
            }
            respText = respText.replace(new RegExp('\n', 'g'), '<br />');
            return $sce.trustAsHtml(respText);
        }
    })
    .filter('countOfTextInSticker', function () {
        return function (text) {
            var limitRow = 30;
            var count = 0;
            if (text != undefined) {
                var arr = text.split(/\n/g);
                angular.forEach(arr, function (val) {
                    if (val.length >= limitRow) {
                        count = count + val.length;
                    } else {
                        count = count + limitRow;
                    }
                });
            }
            return count;
        }
    })
    .filter('stringToJson', function () {
        return function (text) {
            if (text != undefined) {
                var s = JSON.parse(text);
                if (angular.isArray(s)) {
                    return s;
                } else {
                    return s.split(',');
                }
            }
            return [];
        }
    })
    .filter('numberSpacing', function () {
        return function (number) {
            if (number != undefined) {
                //return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                var parts = number.toString().split(".");
                parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                return parts.join(".");
            }
            return [];
        }
    })
    .filter('dateCounter', function ($filter, $sce) {
        return function (date, type) {
            if (!date) {
                return "";
            }
            var msDate = null;
            switch (type) {
                case "String":
                    msDate = new Date(date);
                    break;
                case "second":
                    msDate = new Date(date * 1000);
                    break;
                case "milliseconds":
                    msDate = new Date(date);
                default:
                    msDate = date;
            }

            var today = new Date();
            today.setUTCHours(0, 0, 0, 0);
            msDate.setUTCHours(0, 0, 0, 0);
            var seconds = (today.getTime() - msDate.getTime()) / 1000;
            var future = false;
            if (seconds < 0) {
                seconds = Math.abs(seconds);
                future = true;
            }

            var res = "";
            var day = parseInt(seconds / 3600 / 24);
            var translate = $filter("translate");
            if (day === 0) {
                return $sce.trustAsHtml(translate("today"));
            } else if (day === 1) {
                if (future) {
                    return $sce.trustAsHtml(translate("tomorrow"));
                } else {
                    return $sce.trustAsHtml("<span style='color:#D95C5C'>" + translate("yesterday") + "</span>");
                }
            } else {
                var cases = [2, 0, 1, 1, 1, 2];
                res += day + " " + [translate('day'), translate('days'), translate('days_1')][(day % 100 > 4 && day % 100 < 20) ? 2 : cases[(day % 10 < 5) ? day % 10 : 5]]
            }
            if (!future) {
                res += " " + translate("ago");
                res = "<span style='color:#D95C5C'>" + res + "</span>";
            } else {
                res = translate("in_1") + " " + res;
            }
            return $sce.trustAsHtml(res);
        };
    })
    .filter("makeLink", [function () {
        return function (linkName) {
            if (linkName != undefined) {
                var linkNameArr = linkName.split(":");
                if(linkNameArr[0] != 'http' && linkNameArr[0] != 'https'){
                    linkNameArr.unshift("http://");
                    linkNameArr = linkNameArr.join("");
                    return linkNameArr;
                }else{
                    linkNameArr = linkNameArr.join(":");
                    return linkNameArr;
                }
            } else {
                return "";
            }

        }
    }])
    .filter('filter_refToDomain', function(){
        return function (value) {
            if(!value) return;
            return value.split('/')[2];
        };
    })
    .filter('filter_parseObject', function () {
        return function (value) {
            var str,
                str2,
                i = 0 ,
                max, resault = '';

            if(!value)return;

            value = JSON.parse(value);
            max = Object.entries(value);

            for(; i < max.length; i++) {
                str = max[i][0];
                str2 = max[i][1];
                resault += str + ":" + str2 + '<br />' ;
            }

            return resault;
        }
    })
    .filter('filterDataForReport',filterFildsForCustomReports)
    .filter('parseCamelCase' , function() {
       return function(string) {
           var result = [];
           Array.prototype.map.call(string, (letter) => {
                if(letter === letter.toLowerCase()) {
                    result.push(letter);
                } else {
                    result.push(" ");
                    result.push(letter);
                }
           });
           return result.join("");
       }
    });
function linkify3(text) {
    if (text) {
        text = text.replace(
            /((https?\:\/\/)|(www\.))(\S+)(\w{2,4})(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi,
            function (url) {
                var full_url = url;
                if (!full_url.match('^https?:\/\/')) {
                    full_url = 'http://' + full_url;
                }
                url = url.replace('http://', '').replace('https://', '').replace('www.', '');
                var dot = "";
                if (url.length > 24) {
                    dot = "...";
                }
                return '<a target="_blank" href="' + full_url + '">' + url.substr(0, 24) + dot + '</a>';
            }
        );
    }
    return text;
}


function linkify(inputText) {
    var replacedText, replacePattern1, replacePattern2, replacePattern3;

    //URLs starting with http://, https://, or ftp://
    replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    //console.log(inputText.match(replacePattern1))
    replacedText = inputText.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

    //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
    replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    //console.log(inputText.match(replacePattern1))
    replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

    ////Change email addresses to mailto:: links.
    //replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
    //replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

    return replacedText;
}

function filterFildsForCustomReports($filter) {
    return (field, scope) =>{
        if(scope.ctrlReport){
            scope = scope.ctrlReport;
        }

        if(field.type.value == 'responsibles'){
            if(!field.value) return '-';
            return field.value.map(item => scope.getPersonFullName(item.personId)).join(', ');
        }else if(field.type.value == 'client'){
            return field['vacancy'].clientId.name;
        }else if(field.type.value == 'location'){
            return scope.regionIdToName(field['vacancy'].regionId);
        }else if(field.type.value == 'salary'){
            return (field['vacancy'].salaryTo)? field['vacancy'].salaryTo + " " + field['vacancy'].currency : '-';
        }else if(field.type.value == "dc" || field.type.value == "dateFinish"  || field.type.value == "datePayment"){
            return formatDate(field.value);
        }else if(field.type.id && field.type.visiable){
            return filterCustomFildsForCustomReports(field);
        }

        if(!field.value && field.type.visiable){
            return '-';
        }

        return field.value;
    }
}

function formatDate(date) {
    if(!date) return '-';
     date = new Date(date);


    var dd = date.getDate();
    if (dd < 10) dd = '0' + dd;

    var mm = date.getMonth() + 1;
    if (mm < 10) mm = '0' + mm;

    var yy = date.getFullYear() % 100;

    if (yy < 10) yy = '0' + yy;

    return dd + '.' + mm + '.' + yy;
}

function filterCustomFildsForCustomReports(customField) {
    let vacancy = customField.vacancy;

    if(vacancy.customFieldsDto){
        vacancy = vacancy.customFieldsDto.filter(item => item.fieldId == customField.type.id);
        if(vacancy[0] && vacancy[0].type !== "date" && vacancy[0].type !== "datetime"){
            return vacancy[0].value;
        }else if(vacancy[0] && vacancy[0].type == "date"){
            return vacancy[0].value.split(' ')[0];
        }else if(vacancy[0] && vacancy[0].type == "datetime"){
            console.log(vacancy[0], 'vacancy[0]');
            return vacancy[0].value.split(':')[0] + ":" + vacancy[0].value.split(':')[1];
        }
    }

    return '-';
}

angular.module('services.account', [
    'ngResource',
    'ngCookies'
]).factory('Account', ['$resource', 'serverAddress', function($resource, serverAddress) {

    var account = $resource(serverAddress + '/account/:param', {param: "@param"}, {

        getAccountInfo: {
            method : "GET",
            headers: {'Content-type':'application/json; charset=UTF-8'},
            params: {
                param: 'getAccountInfo'
            }
        },
        getExpenses: {
            method : "POST",
            headers: {'Content-type':'application/json; charset=UTF-8'},
            params: {
                param: 'getExpenses'
            }
        },
        getAccountHistory: {
            method : "POST",
            headers: {'Content-type':'application/json; charset=UTF-8'},
            params: {
                param: 'getAccountHistory'
            }
        },
        getAccountsInfo: {
            method : "GET",
            headers: {'Content-type':'application/json; charset=UTF-8'},
            params: {
                param: 'getAccountsInfo'
            }
        },
        getTransactions:{
            method:"POST",
            headers:{'Content-type':'application/json; charset=UTF-8'},
            params:{
                param:'getTransactions'
            }
        },
        addTransactionForFinancier: {
            method: "POST",
            headers:{'Content-type':'application/json; charset=UTF-8'},
            params:{
                param:'addTransactionForFinancier'
            }
        }


    });

    return account;
}]);

angular.module('services.achieve', [
    'ngResource',
    'ngCookies'
]).factory('Achieve', ['$resource', 'serverAddress', function($resource, serverAddress) {

    var achieve = $resource(serverAddress + '/achieve/:param', {param: "@param"}
        , {
            get:{
                method:"POST",
                params:{
                    param:"get"
                }
            }


        });

    return achieve;
}]);

angular.module('services.action', [
    'ngResource',
    'ngCookies'
]).factory('Action', ['$resource', 'serverAddress', '$filter', '$localStorage', function($resource, serverAddress, $filter, $localStorage) {

    var action = $resource(serverAddress + '/action/:param', {param: "@param"}
        , {
            editAction: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'editAction'
                }
            },
            removeMessageAction: {
                method : "GET",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'removeMessageAction'
                }
            }


        });

    return action;
}]);

angular.module('services.cacheCandidates',[]).factory('CacheCandidates', function() {
    var candidate = [];
    return (function() {
        return {
            add: function(candidateObject) {
                candidate[candidateObject.localId] = candidateObject;
            },
            get: function(localId) {
                return candidate[localId];
            },
            isExist: function(localId) {
                return candidate[localId] != undefined;
            },
            update: function(candidateObject) {
                if (candidate[candidateObject.localId]) {
                    candidate = candidateObject;
                }
            },
            updateLastHistory: function(historyObject) {
                if (historyObject.candidate && candidate[historyObject.candidate.localId]) {
                    candidate[historyObject.candidate.localId].actions.objects[0] = historyObject;
                }
            }
        };
    }());


});
angular.module('services.candidateGroup', [
    'ngResource',
    'ngCookies'
]).factory('CandidateGroup', ['$resource', 'serverAddress', '$filter', '$localStorage', function($resource, serverAddress, $filter, $localStorage) {
    var options;

    var candidateGroup = $resource(serverAddress + '/candidateGroup/:param', {param: "@param"}
        , {
            getGroups: {
                method : "GET",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getGroups'
                }
            },
            add: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "add"
                }
            },
            addList: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "addList"
                }
            },
            editGroup: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "editGroup"
                }
            },
            remove : {
                method : "POST",
                headers : {'Content-type' : 'application/json'},
                params: {
                    param : "remove"
                }
            }


        });

    return candidateGroup;
}]);

angular.module('services.candidate', [
    'ngResource',
    'ngCookies'
]).factory('Candidate', ['$resource', 'serverAddress', '$filter', '$localStorage',"notificationService","$rootScope","$translate", function($resource, serverAddress, $filter, $localStorage,notificationService, $rootScope,$translate) {
    var options;

    var candidate = $resource(serverAddress + '/candidate/:param', {param: "@param"}
            , {
            all: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            },
            getLangInOrg: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getLangInOrg"
                }
            },
            createExcel: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "createExcel"
                }
            },
            getExternal: {
                method: "POST",
                params: {
                    param: "getExternal"
                }
            },
            add: {
                method: "PUT",
                params: {
                    param: "add"
                }
            },
            edit: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "edit"
                }
            },
            sendToMail: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "sendToMail"
                }
            },
            one: {
                method: "GET",
                params: {
                    param: "get"
                }
            },
            changeState: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changeState"
                }

            },
            setResponsible: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "setResponsible"
                }
            },
            removeFile: {
                method: "GET",
                params: {
                    param: "removeFile"
                }
            },
            setMessage: {
                method: "POST",
                params: {
                    param: "setMessage"
                }
            },
            addFile: {
                method: "GET",
                params: {
                    param: "addFile"
                }
            },
            addFromRecall: {
                method: "GET",
                params: {
                    param: "addFromRecall"
                }
            },
            "mathRecallWithCandidate": {
                method: "GET",
                params: {
                    param: "mathRecallWithCandidate"
                }
            },
            mergeCandidates: {
                method: "PUT",
                params: {
                    param: "mergeCandidates"
                }

            },
            getAdvices: {
                method: "GET",
                params: {
                    param: "getAdvices"
                }
            },
            fromLinkFile: {
                method: "POST",
                params: {
                    param: "fromLinkFile"
                }
            },
            fromLinkSite: {
                method: "POST",
                params: {
                    param: "fromLinkSite"
                }
            },
            fromText: {
                method: "POST",
                params: {
                    param: "fromText"
                }
            },
            getContacts: {
                method: "GET",
                params: {
                    param: "getContacts"
                }
            },
            getDuplicates: {
                method: "POST",
                params: {
                    param: "getDuplicates"
                }
            },
            getDuplicatesByName: {
                method: "POST",
                params: {
                    param: "getDuplicatesByName"
                }
            },
            getDuplicatesByNameAndContacts: {
                method: "POST",
                params: {
                    param: "getDuplicatesByNameAndContacts"
                }
            },
            addToParserQueue: {
                method: "POST",
                params: {
                    param: "addToParserQueue"
                }
            },
            removeFromParserQueue: {
                method: "POST",
                params: {
                    param: "removeFromParserQueue"
                }
            },
            getParseEmailData: {
                method: "GET",
                params: {
                    param: "getParseEmailData"
                }
            },
            getMessages: {
                method: "GET",
                params: {
                    param: "getMessages"
                }
            },
            getParseEmailHistory: {
                method: "POST",
                params: {
                    param: "getParseEmailHistory"
                }
            },
            saveSearchFilter: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "saveSearchFilter"
                }
            },
            getSearchHistory: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getSearchHistory"
                }
            },
            getSearchHistoryAdmin: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getSearchHistoryAdmin"
                }
            },
            checkMailbox: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "checkMailbox"
                }
            },
            addLink: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "addLink"
                }
            },
            getCandidateLinks: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getCandidateLinks"
                }
            },
            removeCandidateLink: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeCandidateLink"
                }
            },
            autocompleteSkill: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "autocompleteSkill"
                }
            },
            updateFromFile: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "updateFromFile"
                }
            },
            getCV: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getCV"
                }
            },
            addEmailAccess: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "addEmailAccess"
                }
            },
            editEmailAccess: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "editEmailAccess"
                }
            },
            editOriginAll: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "editOriginAll"
                }
            },
            removeOriginAll: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeOriginAll"
                }
            },
            getCandidateProperties: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getCandidateProperties"
                }
            }
        });
    candidate.getSearchHistoryUniqueLink = function(callback) {
        candidate.getSearchHistory({type: 'linkedin'}, function(resp) {
            var history = [];
            angular.forEach(resp.objects, function(val, key) {
                if (history.length < 8) {
                    var has = false;
                    angular.forEach(history, function(valHistory, keyHistory) {
                        if (
                            (
                                valHistory.company === val.company ||
                                (
                                    valHistory.company && val.company &&
                                    $.trim(valHistory.company.toUpperCase()) === $.trim(val.company.toUpperCase())
                                )
                            )
                            &&
                            (
                                valHistory.position === val.position ||
                                (
                                    valHistory.position && val.position &&
                                    $.trim(valHistory.position.toUpperCase()) === $.trim(val.position.toUpperCase())
                                )
                            )
                            &&
                            (
                                valHistory.words === val.words ||
                                (
                                    valHistory.words && val.words &&
                                    $.trim(valHistory.words.toUpperCase()) === $.trim(val.words.toUpperCase())
                                )
                            )
                            && valHistory.countryCode == val.countryCode) {
                            has = true;
                        }
                    });
                    if (!has) {
                        history.push(val);
                    }
                }
            });
            if (callback != undefined)
                callback(history);
        });
    };
    candidate.searchOptions = function() {
        return options;
    };
    candidate.setOptions = function(name, value) {
        options[name] = value;
    };
    candidate.init = function() {

        options = {
            "state": null,
            "id": null,
            "personId": null,
            "regions": null,
            "employmentType": null,
            "industry": null,
            "sort": null,
            "sortOrder": "DESC",
            "org": null,
            "origin": null,
            "city": null,
            "country": null,
            "responsibleId": null,
            "ids": null,
            "page": {"number": 0, "count": 100},
            "words": null,
            "name": null,
            "position": null,
            "salary": null,
            "sex": null,
            "candidateGroupId" : null
        };
    };

    candidate.getStatus = function() {
        return [
            {value: "active_search", name: "active search"},
            {value: "not_searching", name: "not searching"},
            {value: "passive_search", name: "passive search"},
            {value: "employed", name: "employed"},
            {value: "freelancer", name: "freelancer"},
            //{value: "reserved", name: "reserved"},
            {value: "archived", name: "archived"},
            {value: "work", name: "Our employee"},
            {value: "only_remote", name: "Only remote"},
            {value: "only_relocation_abroad", name: "Only relocation abroad"}
        ];
    };
    candidate.getStatusAssociative = function() {
        return {
            "active_search": "active search",
            "not_searching": "not searching",
            "passive_search": "passive search",
            "employed": "employed"
        };
    };

    candidate.fromFile = function($scope, $rootScope, $location) {
        $scope.optionsForResumeFile = {
            change: function(file) {
                $rootScope.loading = true;
                $scope.fastCandLoading = true;
                file.$preview(file).then(function(data) {
                    $scope.newImgSrc = data.item.thumb;
                    $scope.ngShowNewImage = true;
                });
                file.$upload(serverAddress + '/candidate/fromFile', file).then(function(data) {
                    //candidate.convert($scope, data.data.object);
                    //$scope.candidate.source = 'cvfile';
                    //if (data.data.object.position) {
                    //    $scope.setPositionAutocompleterValue(data.data.object.position);
                    //}
                    //$scope.callbackFile(data.data.objects[0], file.filename);
                    $rootScope.file = file;
                    $rootScope.resumeToSave = data;
                    $scope.fastCandLoading = false;
                    $rootScope.loading = false;
                    setTimeout(function(){
                        $scope.imgWidthFunc(file.object.photo);
                    }, 3000);
                    if(data.data.status != 'error' ){
                        $location.path("candidate/add");
                    } else {
                        $scope.callbackErr(data.data.message);
                        $scope.fastCandLoading = false;
                    }

                }).catch(function(data) {
                    $scope.callbackErr(data.statusText);
                    $scope.fastCandLoading = false;
                });
            },
            setError: function(err, data) {
                $scope.callbackErr(data.statusText);
                $scope.fastCandLoading = false;
            }
        };
    };
    candidate.setPhoto = function($scope, error) {
        $scope.file = {}; //Model
        $scope.optionsForPhoto = {
            change: function(file) {
                file.$preview(file).then(function(data) {
                    $scope.newImgSrc = data.item.thumb;
                    $scope.ngShowNewImage = true;
                });
                file.$upload(serverAddress + '/candidate/addPhoto', file).then(function(data) {
                    $scope.callbackAddPhoto(data.data.objects[0]);
                    console.log(data)
                    setTimeout(function(){
                        $scope.imgWidthFunc(file.objects[0]);
                    }, 2000);
                });
            },
            setError: function(err, data) {
                $scope.callbackErr(data.statusText);
            }
        };
    };

    var duplicatesByNameAndContacts = false;
    candidate.checkDuplicatesByNameAndContacts = function($scope) {
        console.log(duplicatesByNameAndContacts);
        $scope.dublicetesTypeName = '';
        $scope.dublicetesTypeMphone = '';
        $scope.dublicetesTypeEmail = '';
        $scope.dublicetesTypeSkype = '';
        $scope.dublicetesTypeLinkedin = '';
        if ((!duplicatesByNameAndContacts && $scope.contacts && $scope.contacts.email && $scope.contacts.email.length > 4) || (!duplicatesByNameAndContacts && $scope.contacts && $scope.contacts.skype && $scope.contacts.skype.length > 4) || (!duplicatesByNameAndContacts && $scope.contacts && $scope.contacts.linkedin && $scope.contacts.linkedin.length > 4) || (!duplicatesByNameAndContacts && $scope.contacts && $scope.contacts.mphone && $scope.contacts.mphone.length > 4) || (!duplicatesByNameAndContacts && $scope.candidate.fullName && $scope.candidate.fullName.length > 3)) {
        //if (!duplicatesByNameAndContacts && $scope.contacts && $scope.contacts.email && $scope.contacts.email.length > 4 && $scope.contacts.skype && $scope.contacts.skype.length > 4 && $scope.contacts.linkedin && $scope.contacts.linkedin.length > 4 && $scope.contacts.mphone && $scope.contacts.mphone.length > 4 && $scope.candidate.fullName && $scope.candidate.fullName.length > 3) {
            duplicatesByNameAndContacts = true;
            setTimeout(function(){
                candidate.getDuplicatesByNameAndContacts({
                    email: $scope.contacts.email,
                    skype: $scope.contacts.skype,
                    linkedInUrl: $scope.contacts.linkedin,
                    phone: $scope.contacts.mphone,
                    fullName: $scope.candidate.fullName
                }, function (res) {
                    $scope.duplicatesByNameAndContacts = [];
                    if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
                        angular.forEach(res.objects, function (c, i) {
                            console.log(c.candidateId != $scope.candidate.candidateId, ' candID');
                            if (c.candidateId != $scope.candidate.candidateId) {
                                $scope.duplicatesByNameAndContacts.push(c);
                                if (c.type == "name") {
                                    $scope.dublicetesTypeName = c.type;
                                }
                                if (c.type == "mphone") {
                                    $scope.dublicetesTypeMphone = c.type;
                                }
                                if (c.type == "email") {
                                    $scope.dublicetesTypeEmail = c.type;
                                }
                                if (c.type == "skype") {
                                    $scope.dublicetesTypeSkype = c.type;
                                }
                                if (c.type == "linkedin") {
                                    $scope.dublicetesTypeLinkedin = c.type;
                                }
                            }
                        });
                    } else {
                        $scope.duplicatesByNameAndContacts = [];
                    }
                    duplicatesByNameAndContacts = false;
                }, function (resp) {
                    $scope.duplicatesByNameAndContacts = [];
                    duplicatesByNameAndContacts = false;
                });
            }, 2000);
        } else {
            $scope.duplicatesByNameAndContacts = [];
        }
    };

    //var duplicatesByEmailGO = false;
    //candidate.checkDuplicatesByEmail = function($scope) {
    //    if (!duplicatesByEmailGO && $scope.contacts && $scope.contacts.email && $scope.contacts.email.length > 4) {
    //        duplicatesByEmailGO = true;
    //        candidate.getDuplicates({email: $scope.contacts.email, phone: ""}, function(res) {
    //            $scope.duplicatesByEmail = [];
    //            if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
    //                angular.forEach(res.objects, function(c, i) {
    //                    if (c.candidateId != $scope.candidate.candidateId) {
    //                        $scope.duplicatesByEmail.push(c);
    //                    }
    //                });
    //                //$scope.duplicatesByEmail = res.objects;
    //            } else {
    //                $scope.duplicatesByEmail = [];
    //            }
    //            duplicatesByEmailGO = false;
    //        }, function(resp) {
    //            $scope.duplicatesByEmail = [];
    //            duplicatesByEmailGO = false;
    //        });
    //    } else {
    //        $scope.duplicatesByEmail = [];
    //    }
    //};
    //
    //var duplicatesBySkypeGO = false;
    //candidate.checkDuplicatesBySkype = function($scope) {
    //    if (!duplicatesBySkypeGO && $scope.contacts && $scope.contacts.skype && $scope.contacts.skype.length > 4) {
    //        duplicatesBySkypeGO = true;
    //        candidate.getDuplicates({skype: $scope.contacts.skype, phone: ""}, function(res) {
    //            $scope.duplicatesBySkype = [];
    //            if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
    //                angular.forEach(res.objects, function(c, i) {
    //                    if (c.candidateId != $scope.candidate.candidateId) {
    //                        $scope.duplicatesBySkype.push(c);
    //                    }
    //                });
    //                //$scope.duplicatesByEmail = res.objects;
    //            } else {
    //                $scope.duplicatesBySkype = [];
    //            }
    //            duplicatesBySkypeGO = false;
    //        }, function(resp) {
    //            $scope.duplicatesBySkype = [];
    //            duplicatesBySkypeGO = false;
    //        });
    //    } else {
    //        $scope.duplicatesBySkype = [];
    //    }
    //};
    //var duplicatesByLinkedinGO = false;
    //candidate.checkDuplicatesByLinkedin = function($scope) {
    //    if (!duplicatesByLinkedinGO && $scope.contacts && $scope.contacts.linkedin && $scope.contacts.linkedin.length > 4) {
    //        duplicatesByLinkedinGO = true;
    //        candidate.getDuplicates({ linkedInUrl: $scope.contacts.linkedin, phone: ""}, function(res) {
    //            $scope.duplicatesByLinkedin = [];
    //            if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
    //                angular.forEach(res.objects, function(c, i) {
    //                    if (c.candidateId != $scope.candidate.candidateId) {
    //                        $scope.duplicatesByLinkedin.push(c);
    //                    }
    //                });
    //                //$scope.duplicatesByEmail = res.objects;
    //            } else {
    //                $scope.duplicatesByLinkedin = [];
    //            }
    //            duplicatesByLinkedinGO = false;
    //        }, function(resp) {
    //            $scope.duplicatesByLinkedin = [];
    //            duplicatesByLinkedinGO = false;
    //        });
    //    } else {
    //        $scope.duplicatesByLinkedin = [];
    //    }
    //};
    //
    //var duplicatesByPhoneGO = false;
    //candidate.checkDuplicatesByPhone = function($scope) {
    //    if (!duplicatesByPhoneGO && $scope.contacts && $scope.contacts.mphone && $scope.contacts.mphone.length > 4) {
    //        duplicatesByPhoneGO = true;
    //        candidate.getDuplicates({email: "", phone: $scope.contacts.mphone}, function(res) {
    //            $scope.duplicatesByPhone = [];
    //            if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
    //                angular.forEach(res.objects, function(c, i) {
    //                    if (c.candidateId != $scope.candidate.candidateId) {
    //                        $scope.duplicatesByPhone.push(c);
    //                    }
    //                });
    //                //$scope.duplicatesByPhone = res.objects;
    //            } else {
    //                $scope.duplicatesByPhone = [];
    //            }
    //            duplicatesByPhoneGO = false;
    //        }, function(resp) {
    //            $scope.duplicatesByPhone = [];
    //            duplicatesByPhoneGO = false;
    //        });
    //    } else {
    //        $scope.duplicatesByPhone = [];
    //    }
    //};
    //
    //var duplicatesByNameGO = false;
    //var fullNamePattern = "/^[A-Za-zА-Яа-яёЁІіЇїЄєҐґ’'`\-]+(\s+[A-Za-zА-Яа-яёЁІіЇїЄєҐґ’'`\-]+)+(\s+[A-Za-zА-Яа-яёЁІіЇїЄєҐґ’'`\-]+)*$/";
    //candidate.checkDuplicatesByName = function($scope) {
    //    console.log(duplicatesByNameGO);
    //    console.log($scope.candidate.fullName);
    //    console.log($scope.candidate.fullName.match(fullNamePattern));
    //    if (!duplicatesByNameGO && $scope.candidate.fullName && $scope.candidate.fullName.length > 3) {
    //        duplicatesByNameGO = true;
    //        candidate.getDuplicatesByName({fullName: $scope.candidate.fullName}, function(res) {
    //            $scope.duplicatesByName = [];
    //            if (res.status === "ok" && res.objects != undefined && res.objects.length > 0) {
    //                angular.forEach(res.objects, function(c, i) {
    //                    if (c.candidateId != $scope.candidate.candidateId) {
    //                        $scope.duplicatesByName.push(c);
    //                    }
    //                });
    //            } else {
    //                $scope.duplicatesByName = [];
    //            }
    //            duplicatesByNameGO = false;
    //        }, function(resp) {
    //            $scope.duplicatesByName = [];
    //            duplicatesByNameGO = false;
    //        });
    //    } else {
    //        $scope.duplicatesByName = [];
    //    }
    //};

    function countCandProperties($scope, candidate) {
        var allPuncts = 15;
        var allPuncts3 = allPuncts / 100 * 3;
        var allPuncts5 = allPuncts / 100 * 5;
        var allPuncts50 = allPuncts / 100 * 50;
        var progressMessage = [];
        var count = 0;
        if (candidate) {
            if (candidate.fullName) {
                count = count + allPuncts5;
            } else {
                progressMessage.push($filter('translate')("full_name"));
            }
            if (candidate.contacts !== undefined && candidate.contacts !== null && candidate.contacts.length !== 0) {
                var i = 0;
                angular.forEach(candidate.contacts, function(val) {
                    if (angular.equals(val.type, "email" || val.type, "skype")) {
                        count = count + allPuncts5;
                        i++
                    }
                    if (angular.equals(val.type, "linkedin")) {
                        count = count + allPuncts5;
                        i++
                    }
                    if (angular.equals(val.type, "mphone")) {
                        count = count + allPuncts5;
                        i++
                    }
                });
                if(i < 3){
                    progressMessage.push($filter('translate')("contacts") + "(" + $filter('translate')("Phone, email, linkedin") + ")");
                }
            } else {
                progressMessage.push($filter('translate')("contacts") + "(" + $filter('translate')("Phone, email, linkedin") + ")");
            }
            if (candidate.coreSkills) {
                if(candidate.coreSkills.length > 30){
                    count = count + allPuncts3;
                }else{
                    progressMessage.push($filter('translate')("Skills with text"));
                }
            } else {
                progressMessage.push($filter('translate')("Skills with text"));
            }
            if (candidate.db) {
                count = count + allPuncts3;
            } else {
                progressMessage.push($filter('translate')("date_of_birth"));
            }
            if (candidate.descr || candidate.files || ($scope.fileForSave !== undefined && $scope.fileForSave !== null && $scope.fileForSave.length !== 0)) {
                if(candidate.descr.length > 500){
                    count = count + allPuncts50;
                } else if(candidate.files.length > 0 || ($scope.fileForSave !== undefined && $scope.fileForSave !== null && $scope.fileForSave.length !== 0)){
                    count = count + allPuncts50;
                }
            } else{
                if(!candidate.descr <= 500){
                    progressMessage.push($filter('translate')("description"));
                }
                if(!candidate.files || ($scope.fileForSave == undefined && $scope.fileForSave == null)){
                    progressMessage.push($filter('translate')("files"));
                }
            }

            //if (!candidate.descr || !candidate.files || ($scope.fileForSave == undefined && $scope.fileForSave == null && $scope.fileForSave.length == 0)) {
            //
            //}
            //if (candidate.education) {
            //    count++;
            //} else {
            //    progressMessage.push($filter('translate')("education"));
            //}
            //if (candidate.employmentType) {
            //    count++;
            //} else {
            //    progressMessage.push($filter('translate')("employment_type"));
            //}
            if (candidate.expirence) {
                count = count + allPuncts3;
            } else {
                progressMessage.push($filter('translate')("experience"));
            }
            //if (candidate.files || ($scope.fileForSave !== undefined && $scope.fileForSave !== null && $scope.fileForSave.length !== 0)) {
            //    count++;
            //} else {
            //    progressMessage.push($filter('translate')("files"));
            //}
            //if (candidate.industry) {
            //    count++;
            //} else {
            //    progressMessage.push($filter('translate')("industry"));
            //}
            if (candidate.languages) {
                count = count + allPuncts3;
            } else {
                progressMessage.push($filter('translate')("languages"));
            }
            if (candidate.photo) {
                count = count + allPuncts5;
            } else {
                progressMessage.push($filter('translate')("photo"));
            }
            if (candidate.position) {
                count = count + allPuncts5;
            } else {
                progressMessage.push($filter('translate')("position"));
            }
            if (candidate.region) {
                count = count + allPuncts5;
            } else {
                progressMessage.push($filter('translate')("lives_in"));
            }
            if (candidate.salary) {
                count = count + allPuncts3;
            } else {
                progressMessage.push($filter('translate')("desired_salary"));
            }
        }
        $scope.progressMessage = $filter('translate')("empty_fields") + "(" + progressMessage.length + "): ";
        $.each(progressMessage, function(i, p) {
            $scope.progressMessage += "" + p + "; ";
        });
        return count;
    }
    candidate.externalSource = function() {
        if ($localStorage.isExist("search_external") && JSON.parse($localStorage.get("search_external")).version != undefined && JSON.parse($localStorage.get("search_external")).version == 6) {
            return JSON.parse($localStorage.get("search_external"))
        } else {
            return {
                openSettingsMenu: false,
                externalToSearch: ["rabota", "hhUa", "work", "djinni", "superJobUa"],
                visibleUa: "none",
                visibleRu: "none",
                version: 6,
                visibleKz: "none",
                visibleBy: "none",
                sourcesUa: [
                    {
                        value: "rabota",
                        name: "rabota.ua",
                        check: false
                    },
                    {
                        value: "hhUa",
                        check: false,
                        name: "hh.ua"
                    },
                    {
                        value: "work",
                        check: false,
                        name: "work.ua"
                    },
                    {
                        value: "djinni",
                        check: false,
                        name: "djinni.co"
                    },
                    {
                        value: "superJobUa",
                        check: false,
                        name: "superjob.ua"
                    }
                ],
                sourcesRu: [
                    {
                        value: "hhRu",
                        check: false,
                        name: "hh.ru"
                    },
                    {
                        value: "superJobRu",
                        check: false,
                        name: "superjob.ru"
                    },
                    {
                        value: "djinni",
                        check: false,
                        name: "djinni.co"
                    }

                ],
                sourcesKz: [
                    {
                        value: "hhKz",
                        check: false,
                        name: "hh.kz"
                    }
                ],
                sourcesBy: [
                    {
                        value: "hhBy",
                        check: false,
                        name: "jobs.tut.by"
                    },
                    {
                        value: "superJobBy",
                        check: false,
                        name: "by.superjob.ru"
                    },
                    {
                        value: "djinni",
                        check: false,
                        name: "djinni.co"
                    },

                ]
            }
        }
    };

    candidate.progressUpdate = function($scope, isEdit) {
        var cand = angular.copy($scope.candidate);
        if (isEdit) {
            //candidate.checkDuplicatesByName($scope);
            cand.languages = $scope.getSelect2Lang();
            if(cand.languages && $scope.candidate.languages) {
                if (!cand.languages.length && !$scope.candidate.languages.length){
                    cand.languages = '';
                }
            } else {
                cand.languages = '';
            }
            cand.employmentType = $scope.getSelect2EmploymentType();
            cand.db = $('.datepickerOfBirth').datetimepicker();
            console.log( cand.db, ' cand.db');
            if ($("#pac-input").val() && $("#pac-input").val().length == 0) {
                cand.region = null;
            } else if ($("#pac-input").val() && $("#pac-input").val().length > 0) {
                cand.region = $scope.region == undefined ? cand.region : $scope.region;
            }
            cand.contacts = [];
            if ($scope.contacts !== undefined) {
                if ($scope.contacts.email) {
                    cand.contacts.push({type: "email", value: $scope.contacts.email});
                }
                console.log('vik12q');
                //candidate.checkDuplicatesByEmail($scope);
                if ($scope.contacts.mphone) {
                    cand.contacts.push({type: "mphone", value: $scope.contacts.mphone});
                }
                //candidate.checkDuplicatesByPhone($scope);
                if ($scope.contacts.skype) {
                    cand.contacts.push({type: "skype", value: $scope.contacts.skype});
                }
                //candidate.checkDuplicatesBySkype($scope);
                if ($scope.contacts.linkedin) {
                    cand.contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
                }
                if ($scope.contacts.facebook) {
                    cand.contacts.push({type: "facebook", value: $scope.contacts.facebook});
                }
                if ($scope.contacts.googleplus) {
                    cand.contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
                }
                if ($scope.contacts.homepage) {
                    cand.contacts.push({type: "homepage", value: $scope.contacts.homepage});
                }
            }
        } else {
            //candidate.checkDuplicatesByEmail($scope);
            //candidate.checkDuplicatesByPhone($scope);
            //candidate.checkDuplicatesByName($scope);
        }
        var c = countCandProperties($scope, cand);
        $scope.progressPct = c / 15 * 100 < 100 ? Math.round(c / 15 * 100) : 100;
        if ($scope.progressPct < 40) {
            color = '#C5393A'; //red
        } else if ($scope.progressPct >= 40 && $scope.progressPct < 85) {
            color = '#E78409'; //orange
        } else if ($scope.progressPct >= 85) {
            color = '#74B830'; //green
        } else {
            var color = '#CCCCCC'; //grey
        }
        $scope.progress = {width: $scope.progressPct + '%', 'background-color': color};
        if (!$scope.$$phase) {
            $scope.$apply();
        }
    };


    candidate.convert = function($scope, object) {
        if (!object.fullName && !object.photo && !object.education && !object.position && !object.expirence && !object.languages && !object.coreSkills && !object.contacts && !object.db) {
            new PNotify({
                styling: 'jqueryui',
                type: "error",
                text: $filter('translate')("We found small amount of data, it doesn't look like resume.")
            });
        } else {
            $scope.candidate = null;
            $scope.candidate = object;
            if ($scope.candidate.salary == 0) {
                $scope.candidate.salary = '';
            }
            if (object.city) {
                getPlaceInfo(object.city + ' ' + object.country, function(resp) {
                    var reg = convertToRegionObject(resp);
                    $scope.regionInput = reg.fullName;
                    $("#pac-input").val(reg.fullName);
                    $scope.candidate.region = reg;
                    $scope.region = reg

                });
            }
            if (object.country && !object.city) {
                getPlaceInfo(object.country, function(resp) {
                    var reg = convertToRegionObject(resp);
                    $scope.regionInput = reg.fullName;
                    $("#pac-input").val(reg.fullName);
                    $scope.candidate.region = reg;
                    $scope.region = reg

                });
            }
            if ($scope.candidate.currency == undefined) {
                $scope.candidate.currency = 'USD';
            }
            if ($scope.candidate.status == undefined) {
                $scope.candidate.status = 'active_search';
            }
            $(".datepickerOfBirth").val('');
            if (object.db != undefined) {
                // $('.datepickerOfBirth').datetimepicker({
                //     format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                //     startView: 4,
                //     minView: 2,
                //     autoclose: true,
                //     language: $translate.use(),
                //     weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                //     initialDate:  new Date(1167609600000),
                //     startDate: new Date(-1262304000000),
                //     endDate: new Date(1199134800000)
                // });


                $(".datepickerOfBirth").datetimepicker("setDate", new Date(object.db));
            }
            $scope.photoLink = $scope.serverAddress + "/getapp?id=" + $scope.candidate.photo + "&d=true";
            $scope.fileForSave = [];
            $scope.contacts = [];
            if (object.contacts != undefined) {
                $.each(object.contacts, function(i, c) {
                    if (angular.equals(c.type, "email")) {
                        $scope.contacts.email = c.value;
                    }
                    if (angular.equals(c.type, "skype")) {
                        $scope.contacts.skype = c.value;
                    }
                    if (angular.equals(c.type, "mphone")) {
                        $scope.contacts.mphone = c.value;
                    }
                    if (angular.equals(c.type, "homepage")) {
                        $scope.contacts.homepage = c.value;
                    }
                    if (angular.equals(c.type, "linkedin")) {
                        $scope.contacts.linkedin = c.value;
                    }
                });
            }
        }
    };

    candidate.ZIP = function($scope, $interval) {
        $scope.file = {}; //Model
        $scope.optionsForZIP = {
            change: function(file) {
                file.$upload(serverAddress + '/uploadZipFile', file).then(function(resp){
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    } else {
                        $scope.zipInfo = function () {
                            //$scope.zipType = $('#zipType').val();
                            var fullPath = $('#zip').val();
                            if (fullPath) {
                                if($scope.zipBrowser == 'Firefox'){
                                    $scope.filename = fullPath;
                                }
                                else{
                                    var startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
                                    var filename = fullPath.substring(startIndex);
                                    if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
                                        $scope.filename = filename.substring(1);
                                    }
                                }
                            }
                            if($('#zipButton1').prop('checked')){
                                $scope.zipType =$('#zipButton1').val()
                            }
                            if($('#zipButton2').prop('checked')){
                                $scope.zipType =$('#zipButton2').val()
                            }
                            if($('#zipButton3').prop('checked')){
                                $scope.zipType =$('#zipButton3').val()
                            }

                            if($('#noFiles').prop('checked')){
                                $scope.zipTypeFiles = true;
                            }
                            if($('#hasFiles').prop('checked')){
                                $scope.zipTypeFiles = false;
                            }
                        };
                        $scope.zipInfo();
                        $scope.response = JSON.parse(resp.response);
                        if($scope.response.status == 'ok'){
                            notificationService.success($filter('translate')('Your archive successfully loaded'));
                            if($scope.regionzip.length <=1){
                                $.ajax({
                                    url: "/hr/setZipFileParams",
                                    type: "POST",
                                    data:'{"fileName":"'+$scope.filename+'","type":"'+$scope.zipType+'","countries":"'+$scope.regionzip[0].country+'","countryIds":"'+$scope.regionzip[0].googlePlaceId.googlePlaceId+'","onlyResume":"'+$scope.zipTypeFiles+'"}',
                                    dataType: "json",
                                    contentType: "application/json"
                                });
                            }
                            else if($scope.regionzip.length <=2){
                                $.ajax({
                                    url: "/hr/setZipFileParams",
                                    type: "POST",
                                    data:'{"fileName":"'+$scope.filename+'","type":"'+$scope.zipType+'","countries":"'+$scope.regionzip[0].country+','+$scope.regionzip[1].country+'","countryIds":"'+$scope.regionzip[0].googlePlaceId.googlePlaceId+','+$scope.regionzip[1].googlePlaceId.googlePlaceId+'","onlyResume":"'+$scope.zipTypeFiles+'"}',
                                    dataType: "json",
                                    contentType: "application/json"
                                });
                            }
                            else{
                                $.ajax({
                                    url: "/hr/setZipFileParams",
                                    type: "POST",
                                    data:'{"fileName":"'+$scope.filename+'","type":"'+$scope.zipType+'","countries":"'+$scope.regionzip[0].country+','+$scope.regionzip[1].country+','+$scope.regionzip[2].country+'","countryIds":"'+$scope.regionzip[0].googlePlaceId.googlePlaceId+','+$scope.regionzip[1].googlePlaceId.googlePlaceId+','+$scope.regionzip[2].googlePlaceId.googlePlaceId+'","onlyResume":"'+$scope.zipTypeFiles+'"}',
                                    dataType: "json",
                                    contentType: "application/json"
                                });
                            }
                        }else{
                            notificationService.error($scope.response.message);
                        }
                        $scope.updateZipList();
                        var stopRefreshing = false;
                        var start = $interval(function(){
                            $scope.updateZipList();
                            angular.forEach($scope.zipUploads, function(data){
                                if($scope.response.object.uplId == data.uplId){
                                    if(data.status == 'finished'){
                                        stopRefreshing = true;
                                    }
                                }
                            });
                            if(stopRefreshing){
                                $interval.cancel(start);
                            }
                        }, 5000);
                    }
                });
            }
        };
    };

    candidate.convert2 = function($scope, object, toSave) {
        var updateText = '';
        if ($('.datepickerOfBirth').datetimepicker('getDate') == null && object.db) {
            $(".datepickerOfBirth").datetimepicker("setDate", new Date(object.db));
            updateText += ' ' + $filter('translate')("date_of_birth");
        }
        if (!$scope.candidate.fullName && object.fullName) {
            $scope.candidate.fullName = object.fullName;
            if (updateText) {
                updateText += ',';
            }
            updateText += ' ' + $filter('translate')("full_name");
        }
        if (!$scope.candidate.position && object.position) {
            $scope.candidate.position=$scope.setPositionAutocompleterValue(object.position);
            //$scope.candidate.position = object.position;
            if (updateText) {
                updateText += ',';
            }
            updateText += ' ' + $filter('translate')("position");
        }
        if (!$scope.candidate.photo && object.photo) {
            $scope.candidate.photo = object.photo;
            if (updateText) {
                updateText += ',';
            }
            updateText += ' ' + $filter('translate')("photo");
        }
        if($scope.candidate.photo){
            $scope.photoLink = $scope.serverAddress + "/getapp?id=" + $scope.candidate.photo + "&d=true"
        }
        if (!$scope.regionInput && object.city) {
            $scope.regionInput = object.city;
            if (updateText) {
                updateText += ',';
            }
            updateText += ' ' + $filter('translate')("city");
        }
        if (!toSave && object.contacts != undefined) {
            $.each(object.contacts, function(i, c) {
                if (angular.equals(c.type, "email") && !$scope.contacts.email && c.value) {
                    $scope.contacts.email = c.value;
                    if (updateText) {
                        updateText += ',';
                    }
                    updateText += ' ' + $filter('translate')("Email");
                }
                candidate.checkDuplicatesByNameAndContacts($scope);
                //candidate.checkDuplicatesByEmail($scope);
                if (angular.equals(c.type, "skype") && !$scope.contacts.skype && c.value) {
                    $scope.contacts.skype = c.value;
                    if (updateText) {
                        updateText += ',';
                    }
                    updateText += ' ' + $filter('translate')("Skype");
                }
                if (angular.equals(c.type, "mphone") && !$scope.contacts.mphone && c.value) {
                    $scope.contacts.mphone = c.value;
                    if (updateText) {
                        updateText += ',';
                    }
                    updateText += ' ' + $filter('translate')("phone");
                }
                //candidate.checkDuplicatesByNameAndContacts($scope);
                //candidate.checkDuplicatesByPhone($scope);
                if (angular.equals(c.type, "homepage") && !$scope.contacts.homepage && c.value) {
                    $scope.contacts.homepage = c.value;
                    if (updateText) {
                        updateText += ',';
                    }
                    updateText += ' ' + $filter('translate')("home_page");
                }
            });
            $scope.candidate.position=$scope.getPositionAutocompleterValue();
        }
        if (toSave && object.contacts != undefined && false) {
            $.each(object.contacts, function(i, c) {
                if (angular.equals(c.type, "email") && c.value) {
                    var needContact = true;
                    $.each($scope.candidate.contacts, function(j, cOld) {
                        if (angular.equals(cOld.type, "email") && cOld.value) {
                            needContact = false;
                        }
                    });
                    if (needContact) {
                        $scope.candidate.contacts.push({type: "email", value: c.value});
                        if (updateText) {
                            updateText += ',';
                        }
                        updateText += ' ' + $filter('translate')("Email");
                    }
                }
                candidate.checkDuplicatesByNameAndContacts($scope);
                //candidate.checkDuplicatesByEmail($scope);
                if (angular.equals(c.type, "skype") && c.value) {
                    var needContact = true;
                    $.each($scope.candidate.contacts, function(j, cOld) {
                        if (angular.equals(cOld.type, "skype") && cOld.value) {
                            needContact = false;
                        }
                    });
                    if (needContact) {
                        $scope.candidate.contacts.push({type: "skype", value: c.value});
                        if (updateText) {
                            updateText += ',';
                        }
                        updateText += ' ' + $filter('translate')("Skype");
                    }
                }
                //candidate.checkDuplicatesByNameAndContacts($scope);
                //candidate.checkDuplicatesBySkype($scope);
                if (angular.equals(c.type, "mphone") && c.value) {
                    var needContact = true;
                    $.each($scope.candidate.contacts, function(j, cOld) {
                        if (angular.equals(cOld.type, "mphone") && cOld.value) {
                            needContact = false;
                        }
                    });
                    if (needContact) {
                        $scope.candidate.contacts.push({type: "mphone", value: c.value});
                        if (updateText) {
                            updateText += ',';
                        }
                        updateText += ' ' + $filter('translate')("phone");
                    }
                }
                //candidate.checkDuplicatesByNameAndContacts($scope);
                //candidate.checkDuplicatesByPhone($scope);
            });
        }
        if (!$scope.candidate.descr && object.descr && updateText !== '') {
            $scope.candidate.descr = object.descr;
            if (updateText) {
                updateText += ',';
            }
            updateText += ' ' + $filter('translate')("description");
        }
        if (updateText) {
            new PNotify({
                styling: 'jqueryui',
                type: "success",
                text: $filter('translate')("Added new data") + ":<br/>" + updateText
            });
        }
    };
    //////////////////////////////////////////////////////////////////////// Search params

    var searchParams = null;
    candidate.getSearchParams = function(){
        return searchParams;
    };
    candidate.setSearchParams = function(data){
        searchParams = data;
    };

    candidate.init();
    return candidate;
}]);

angular.module('services.checkAccess', [
    'ngResource',
    'ngCookies',
    'services.person'
]).factory('CheckAccess', ['Person', '$location', '$cookies', '$rootScope','notificationService', 'frontMode', '$filter', '$uibModal',
    function(Person, $location, $cookies, $rootScope, notificationService, frontMode, $filter, $uibModal) {
        var timer = 0;
    var access = {
        check: function($window, route, params) {
            timer = 0;
            Person.authPing(function success(data) {
                if (data.status === 'ok') {
                    if($rootScope.modalLoginForm){
                        $rootScope.modalLoginForm.close();
                        delete $rootScope.modalLoginForm;
                        location.reload();
                    }
                }
                if (data.status === 'error') {
                    $cookies.url = $location.$$url;
                    if (route && route.originalPath == '/vacancies/:id') {
                        $window.location.replace($location.$$protocol + "://" + $location.$$host + "/i#/pv/" + params.id);
                    } else {
                        //$window.location.replace('/');
                    }
                } else {
                    $rootScope.i = 0;
                    PNotify.removeAll();
                    $cookies.cfauth = 'true';
                    $cookies.lasturl = $location.$$url;
                    //$rootScope.me = data;
                }

            }, function err(status) {
                $cookies.url = $location.$$url;
                $cookies.cfauth = 'false';

                if (route && route.originalPath == '/vacancies/:id') {
                    if (frontMode == 'demo') {
                        $window.location.replace($location.$$protocol + "://" + $location.$$host + "/di#/pv/" + params.id);
                    } else {
                        $window.location.replace($location.$$protocol + "://" + $location.$$host + "/i#/pv/" + params.id);
                    }
                } else if(status.status == 403) {
                    if(!$rootScope.modalLoginForm){
                        $rootScope.modalLoginForm = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/no-access-modal.html',
                            size: '',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: function () {

                            }
                        });
                    }
                   if(timer == 0){
                       setTimeout(function(){
                           access.check();
                           timer++;
                       },30000)
                   }
                    //$window.location.replace('/');
                }else{
                    $rootScope.i++;
                    if( $rootScope.i == '1'){
                        new PNotify({
                            text: $filter('translate')('No connection to the server, check the Internet connection'),
                            hide: false,
                            type: 'error'
                        });
                    }
                }
            });
        }
    };
        return access;
}]);

 angular.module('services.client', [
    'ngResource'
]).factory('Client', ['$resource', 'serverAddress', function($resource, serverAddress) {
    var options;
    var client = $resource(serverAddress + '/client/:param', {param: "@param"}
        , {
            all: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            },
            add: {
                method: "PUT",
                params: {
                    param: "add"
                }
            },
            edit: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "edit"
                }
            },
            one: {
                method: "GET",
                params: {
                    param: "get"
                }
            },
            addLink: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "addLink"
                }
            },
            removeFile: {
                method: "GET",
                params: {
                    param: "removeFile"
                }
            },
            changeState: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changeState"
                }
            }, setMessage: {
                method: "POST",
                params: {
                    param: "setMessage"
                }
            },
            addResponsible: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "setResponsible"
                }
            },
            removeResponsible: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeResponsible"
                }
            }

        });
    client.getState = function() {
        return [
            {value: "future", name: "future"},
            {value: "in_work", name: "in work"},
            {value: "on_hold", name: "on hold"},
            {value: "all_done", name: "all done"},
            {value: "canceled", name: "canceled"},
            {value: "deleted", name: "deleted"}
        ];
    };
    client.getStatusAssociated = function() {
        return {
            "future": "future",
            "in_work": "in work",
            "all_done": "all done",
            "canceled": "canceled",
            "deleted": "deleted"
        };
    };
    client.searchOptions = function() {
        return options;
    };
    client.setOptions = function(name, value) {
        options[name] = value;
    };
    client.init = function() {
        options = {
            country: null,
            city: null,
            name: null
        };
    };
    client.init();
    return client;
}
]);
 angular.module('services.contacts', [
    'ngResource'
]).factory('Contacts', ['$resource', 'serverAddress', function($resource, serverAddress) {
    var options;
    var contacts = $resource(serverAddress + '/contact/:action', {action: "@action"}, {
        add: {
            method: "PUT",
            params: {
                action: "addContact"
            }
        },
        addContactAndSignUp: {
            method: "PUT",
            params: {
                action: "addContactAndSignUp"
            }
        },
        edit: {
            method: "PUT",
            params: {
                action: "editContact"
            }
        },
        all: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                action: "get"
            }
        },
        one: {
            method: "GET",
            params: {
                action: "get"
            }
        }
    });
    contacts.searchOptions = function() {
        return options;
    };
    contacts.setOptions = function(name, value) {
        options[name] = value;
    };
    contacts.init = function() {
        options = {
            firstName: "",
            lastName: "",
            clientId: "",
            value: "",
            "page": {"number": 0, "count": 100}
        };
    };
    contacts.init();
    return contacts;

}]);

angular.module('services.customField', [
    'ngResource',
    'ngCookies'
]).factory('CustomField', ['$resource', 'serverAddress','$rootScope', function($resource, serverAddress, $rootScope) {

    var customField = $resource(serverAddress + '/customField/:param', {param: "@param"}, {

        addField: {
            method : "POST",
            params: {
                param: 'addField'
            }
        },
        removeField: {
            method : "POST",
            params: {
                param: 'removeField'
            }
        },
        getField: {
            method : "GET",
            params: {
                param: 'getField'
            }
        },
        getFullField: {
            method : "GET",
            params: {
                param: 'getFullField'
            }
        },
        getFullFields: {
            method : "GET",
            params: {
                param: 'getFullFields'
            }
        },
        getFieldParam: {
            method : "GET",
            params: {
                param: 'getFieldParam'
            }
        },
        addFieldParam: {
            method : "GET",
            params: {
                param: 'addFieldParam'
            }
        },
        addFieldParams: {
            method : "POST",
            params: {
                param: 'addFieldParams'
            }
        },
        addFieldList: {
            method : "POST",
            params: {
                param: 'addFieldList'
            }
        },
        editField: {
            method : "GET",
            params: {
                param: 'editField'
            }
        },
        deleteFieldParam: {
            method : "POST",
            params: {
                param: 'deleteFieldParam'
            }
        },
        getFieldsTitles: {
            method : "GET",
            params: {
                param: 'getFieldsTitles'
            }
        }
    });

    customField.requestGetFieldsTitles = function () {
        $rootScope.loading = true;
        return new Promise((resolve, reject) => {
            customField.getFieldsTitles({objectType: "vacancy"}, resp => resolve(resp, resp['request'] = 'customField'),error => reject(error));
        });
    };

    return customField;
}]);
function CustomReportEditService($rootScope, Stat, $translate, Company, Person, vacancyStages, notificationService, CustomReportsService, $timeout, $uibModal, translateWords, $location, CustomField, $filter) {
    try{
        let vacancyStatuses, fieldsListStart,
            singleton = {
                editReport: {}
            };

        function resetDefaultData() {
                fieldsListStart = [
                    {value:"client",visible:false},
                    {value:"salary",visible:false},
                    {value:"location",visible:false},
                    {value:"responsibles",visible:false},
                    {value:"status",visible:false},
                    {value:"dc",visible:false},
                    {value:"dateFinish",visible:false},
                    {value:"numberOfPositions",visiable:false},
                    {value:"datePayment",visible:false},
                    {value:"budget",visible:false},
                    {value:"employmentType",visible:false},
                    {value:"candidatesAdded",visible:false},
                    {value:"candidatesInWork",visible:false},
                    {value:"candidatesApproved",visible:false},
                    {value:"candidatesRefused",visible:false},
                    {value:"daysInWork",visible:false}];

                vacancyStatuses =[
                    {
                        value: "open",
                        added: false,
                        count: 0
                    },
                    {
                        value: "expects",
                        added: false,
                        count: 0
                    },
                    {
                        value: "inwork",
                        added: false,
                        count: 0
                    },
                    {
                        value: "payment",
                        added: false,
                        count: 0
                    },
                    {
                        value: "completed",
                        added: false,
                        count: 0
                    },
                    {
                        value: "canceled",
                        added: false,
                        count: 0
                    }
                ],
            inVacancyStatuses =[
                {
                    value: "longlist",
                    added: false,
                    count: 0
                },
                {
                    value: "shortlist",
                    added: false,
                    count: 0
                },
                {
                    value: "test_task",
                    added: false,
                    count: 0
                },
                {
                    value: "interview",
                    added: false,
                    count: 0
                },
                {
                    value: "interview_with_the_boss",
                    added: false,
                    count: 0
                },
                {
                    value: "security_check",
                    added: false,
                    count: 0
                },
                {
                    value: "tech_screen",
                    added: false,
                    count: 0
                },
                {
                    value: "hr_interview",
                    added: false,
                    count: 0
                },
                {
                    value: "tech_interview",
                    added: false,
                    count: 0
                },
                {
                    value: "interview_with_the_client",
                    added: false,
                    count: 0
                },
                {
                    value: "sent_offer",
                    added: false,
                    count: 0
                },
                {
                    value: "accept_offer",
                    added: false,
                    count: 0
                },
                {
                    value: "approved",
                    added: false,
                    count: 0
                },
                {
                    value: "notafit",
                    added: false,
                    count: 0,
                    type: "refuse"
                },
                {
                    value: "declinedoffer",
                    added: false,
                    count: 0,
                    type: "refuse"
                },
                {
                    value: "no_response",
                    added: false,
                    count: 0,
                    type: "refuse"
                },
                {
                    value: "no_contacts",
                    added: false,
                    count: 0,
                    type: "refuse"
                }
            ];
                singleton.editReport = angular.copy(CustomReportsService.data);
        }
        function concatCastomOrStandartFields(custom, standart) {
            console.log(custom, standart, 'custom, standart');
            custom.forEach(item => {
                standart.push({
                    value: item.title,
                    visiable: false,
                    id: item.fieldId
                })
            });
        }

        function checkProperty(data, property) {
            property.forEach(item  => {
                if(data.indexOf(item.value) !== -1 || data.indexOf(item.customInterviewStateId) !== -1){
                    item.added = true;
            }
        });
            return property;
        }

        function checkPropertyFyelds(data, property) {
            property.forEach(item  => {
                let index = data.indexOf(item.id || item.value);

                if(index !== -1){
                    item.visible = true;
                }
            });
            return property;
        }

        function checkPropertyPersons(data, property) {
            let i, index;

            for(i in property){
                index = data.indexOf(i);

                if(index !== -1){
                    property[i].added = true;
                }else{
                    property[i].added = false;
                }
            }
            return property;
        }

        function checkCount(data, property) {
            property.forEach(i => {
               data.forEach(j => {
                   if(j.item === i.value || j.item === i.customInterviewStateId){
                       i.count = j.count;
                   }
               });
            });
        }

        function concatStages(data){
            let mass = inVacancyStatuses.concat(data);
            isType(mass);
            return mass;
        }

        function isType(mass){
            mass.forEach(item =>{
                if(!item.type) item.type = 'ok';
            })
        }

        function isAllStagesChecked(data) {
            let i = 0, max = data.length, flag = true;

            for(; i < max; i++){
                if(!data[i].added){
                    flag = false
                }
            }
            return flag;
        }

        function splitMassStagesOnTypes(mass) {
            let obj = {};

            obj['Standard'] =  mass.filter(item => item.type === 'ok');
            obj['Company']  =  mass.filter(item => item.type !== 'ok'&& item.type !== 'refuse' );
            obj['Refuse']   =  mass.filter(item => item.type === 'refuse');

            return obj;
        }


        function _dataProcessing(data, item) {
            let respData = item.object, allStages = [],
                requestCountStages = data.filter(item => item.request === "stagesOrCount");


            if (item.request === 'statusesOrCount') {
                checkProperty(singleton.editReport.vacancyStatuses, vacancyStatuses);
                checkCount(respData, vacancyStatuses);
                this.vacancyStatuses = vacancyStatuses;
            } else if (item.request === 'stageFull') {
                allStages = respData.interviewStates.filter(item => item.status !== 'D');
                allStages = concatStages(allStages);
                checkProperty(singleton.editReport.interviewStatuses, allStages);
                checkCount(requestCountStages[0]["object"], allStages);
                this.selectStages = allStages.filter(item => item.added == true);
                allStages = splitMassStagesOnTypes(allStages);
                this.allStages = allStages;
            } else if(item.request == 'AllPersons'){
                this.associativePerson = checkPropertyPersons(singleton.editReport.interviewCreatorIds, item.object);
            }else if(item.request == 'customField'){
                concatCastomOrStandartFields(item.objects, fieldsListStart);
            }
        }

        function checkChangedArray(startData, finishData) {
            let change = true, i = 0, max = startData.length;

            if(startData.length === finishData.length){
                for(; i < max; i++){
                    if(!change) return false;
                    change = finishData.some(finish => finish === startData[i]);
                }
            }else{
                return false;
            }
            return change;
        }

        function checkChangedPrimitiveData(startData, finishData, index) {
            let change = true, i = 0, max = startData.length;

            if(index !== -1  && (finishData === startData) ){
                change =  true;
            }else{
                return false;
            }
            return change;
        }

        function isChanged(startData, finishData) {
            let index, i, change = true;
            console.log(startData, finishData);

            for(i in startData){
                index = Object.getOwnPropertyNames(finishData).sort().indexOf(i);

                if(startData[i].pop){
                    change = checkChangedArray(startData[i], finishData[i]);
                    if(!change) return change;
                }else{
                    change = checkChangedPrimitiveData(startData[i], finishData[i],index);
                    if(!change) return change;
                }
            }
            return change;
        }

        function createFinishDataBeforeSave() {
            let i, data = this.associativePerson, selectPerson = [];

            for(i in data){
                if(data[i].added){
                    selectPerson.push(i)
                }
            }

            this.data.interviewCreatorIds = selectPerson;
            this.data.withCandidates      = this.data.withCandidates;
            this.data.dateFrom            = (this.startVacancyDate)? this.startVacancyDate: CustomReportsService.data.dateFrom;
            this.data.dateTo              = (this.endDate)? this.endDate: CustomReportsService.data.dateTo;
            this.data.vacancyStatuses     = filterSelectedItems(this.vacancyStatuses, 'vacancyStatuses');
            this.data.interviewStatuses   = filterSelectedItems(this.selectStages, 'interviewStatuses');
            this.data.vacancyFields       = filterSelectedItems(this.fieldsList, 'vacancyFields');
            this.data.сustomVacancyFields = filterSelectedItems(this.fieldsList, 'сustomVacancyFields');
        }

        function filterSelectedItems(data, type) {
            let i = '', mass = [];

            if(type === 'vacancyStatuses' || type === 'interviewStatuses'){
                data = data.filter(item => item.added);
                data = data.map(item => item.customInterviewStateId || item.value);
            }else if(type === 'vacancyFields'){
                data = data.filter(item => item.visible && !item.id);
                data = data.forEach(item => {
                        mass.push(item.value);
                });
                return mass;
            }else if(type === 'сustomVacancyFields'){
                data.forEach(item =>{
                    if(item.visible && item.id){
                        mass.push(item.id);
                    }
                });
                return mass;
            }
            return  data;
        }

        function showSelectStages(data, select){
            let dataSelected = this.selectStages,
                index;

            if(select){
                data.forEach(item =>{
                    index = dataSelected.indexOf(item);
                    (index === -1)? dataSelected.push(item) : null;
                });
            }
        }

        function checkOnChange() {
            let change = true;

            createFinishDataBeforeSave.call(this);
            change = isChanged(CustomReportsService.data, this.data);
            this.change = change;
        }

        resetDefaultData();

        singleton.showOrHideCandidates = function () {
            console.log(this, 'this');
            this.data.withCandidates = !this.data.withCandidates;
            checkOnChange.call(this)
        };

        singleton.buildReport =  function ($scope) {
            this.change = true;
            this.timeMaxZone = false;
            this.timeMaxZone2 = false;
            resetDefaultData();

                Promise.all(
                    [
                        Stat.requestGetCountVacancyForActualVacancyStatistic({
                            from: singleton.editReport.dateFrom,
                            interviewCreatorIds: [],
                            to: singleton.editReport.dateTo
                        }),
                        Stat.requestGetCountInterviewForActualVacancyStatistic({
                            from: singleton.editReport.dateFrom,
                            interviewCreatorIds: [],
                            to: singleton.editReport.dateTo
                        }),
                        vacancyStages.requestVacancyStages(),
                        Person.requestGetAllPersons(),
                        CustomField.requestGetFieldsTitles()
                    ]).then(data => {
                    data.forEach(item => {
                        _dataProcessing.apply(this, [data, item]);
                    });

                    CustomReportsService.getDate.apply(this, [singleton.editReport, $scope]);
                    this.fieldsList = checkPropertyFyelds(this.fieldsList, fieldsListStart);
                    this.fieldsList = checkPropertyFyelds(this.data.сustomVacancyFields, this.fieldsList);
                    $rootScope.loading = false;

                    $scope.$apply();
                });
        };

        singleton.selectValue = function (status) {
            status.added = !status.added;
            checkOnChange.call(this)
        };

        singleton.selectValueVacancyFields = function (status) {
            status.visible = !status.visible;
            checkOnChange.call(this)
        };

        singleton.changeNameOrDescription = function (scope) {
            this.copyData = angular.copy(this.data);

            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/edit-name-and-description-custom-reports.html',
                size: '',
                backdrop: 'static',
                scope: scope,
            });
        };

        singleton.editNameOrDescr = function () {
            $rootScope.modalInstance.close();
        };

        singleton.saveNameOrDescr = function () {
            checkOnChange.call(this)
        };

        singleton.closeModal = function () {
            this.data.name = this.copyData.name;

            if(this.copyData.descr){
                this.data.descr = this.copyData.descr;
            }else{this.data.descr = '';}

            $rootScope.modalInstance.close();
        };

        singleton.selectValueStages = function (stage, type, data ,scope) {
            let index = data[type].indexOf(stage),
                change = true,
                index2 = this.selectStages.indexOf(data[type][index]);

            if(index !== -1){
                data[type][index].added = !data[type][index].added;
            }

            if(data[type][index].added && index2 === -1){
                this.selectStages.push(data[type][index]);
            }

           isAllCheck = isAllStagesChecked(this.allStages[type]);

            if(isAllCheck){
                setTimeout(()=>{
                    this.allStages[type].select = true;
                    scope.$apply();
                },0)
            }

            checkOnChange.call(this)
        };

        singleton.saveCustomReport = function ($scope) {
            if(this.timeMaxZone2){
                $rootScope.loading = false;
                return;
            }else if(this.timeMaxZone){
                $rootScope.loading = false;
                return;
            }

            translateWords.getTranslete("Report saved", $scope, 'reportSaved');
            let params = {
                "from": this.data.dateFrom,
                "to": this.data.dateTo,
                "types": null,
                "vacancyId": null,
                "vacancyStatuses": this.data.vacancyStatuses,
                "interviewStatuses": this.data.interviewStatuses,
                "interviewCreatorIds": this.data.interviewCreatorIds,
                "vacancyFields": this.data.vacancyFields,
                "withCandidates": this.data.withCandidates,
                "customReportName": this.data.name,
                "descr": (this.data.descr)? this.data.descr : '',
                "customVacancyReportId": this.data.customVacancyReportId,
                "customVacancyFields": this.data.сustomVacancyFields
            };

            Stat.requestEditCustomVacancyReport(params)
                .then((resp) => {
                    if(resp.status == "error"){
                        notificationService.error(resp.message);
                        return;
                    }
                    notificationService.success($filter('translate')('_Report') + " " + this.data.name + " " + $filter('translate')('saved'));
                    $location.path('/reports');
                    $rootScope.loading = false;
                    $scope.$apply();
                }, (error) => {
                    translateWords.getTranslete(error.text, $scope, 'error');
                    notificationService.error($scope.error)
                });
        };

        singleton.selectAllStages = function (stage) {
            let data = this.allStages[stage], i;

            if(!data['select']){
                data['select'] = true;

                for(i in data){
                    data[i].added = true;
                }
            }else if(data['select']){
                data['select'] = false;

                for(i in data){
                    data[i].added = false;
                }
            }

            showSelectStages.apply(this,[data, data['select']]);
            checkOnChange.call(this)
        };

        return singleton;
    }catch(error){
        console.log(error, 'error CustomReportEditService');
    }
}
angular
    .module('services.CustomReportEditService',['ngResource', 'ngCookies','services.person'])
    .factory('CustomReportEditService',["$rootScope","Stat", "$translate","Company","Person","vacancyStages", "notificationService", "CustomReportsService","$timeout","$uibModal","translateWords","$location","CustomField","$filter", CustomReportEditService]);
function CustomReportsService($rootScope, Stat, $translate, Company, Person, vacancyStages, notificationService, $location, $uibModal,$timeout, CustomField) {
    try{
        var reports = {},
            loadingExcel = false;


        function resetDefaultData() {
            reports.fieldsList = [
                {value:"client",visiable:false},
                {value:"salary",visiable:false},
                {value:"location",visiable:false},
                {value:"responsibles",visiable:false},
                {value:"status",visiable:false},
                {value:"dc",visiable:false},
                {value:"dateFinish",visiable:false},
                {value:"numberOfPositions",visiable:false},
                {value:"datePayment",visiable:false},
                {value:"budget",visiable:false},
                {value:"employmentType",visiable:false},
                {value:"candidatesAdded",visiable:false},
                {value:"candidatesInWork",visiable:false},
                {value:"candidatesApproved",visiable:false},
                {value:"candidatesRefused",visiable:false},
                {value:"daysInWork",visiable:false}];
        }

        function isCheckedFields(data, fieldsList) {
            fieldsList.forEach(item => {
                if(data.indexOf(item.id || item.value) !== -1){
                    item.visiable = true;
                }
            })
        }

        function formatDate(date) {

            var dd = date.getDate();
            if (dd < 10) dd = '0' + dd;

            var mm = date.getMonth() + 1;
            if (mm < 10) mm = '0' + mm;

            var yy = date.getFullYear() % 100;

            if (yy < 10) yy = '0' + yy;

            return dd + '.' + mm + '.' + yy;
        }
        


        function _getDataCandidate(data, regions, persons, stages) {
            angular.forEach(data, item => {
                angular.forEach(item.info, res => {
                    getReginForCandidate(res, regions);
                    getRecruterForCandidate(res, persons);
                    getStagesForCandidate(res, stages);
                })
            });
        }
        
        function resetNoAngularContext($scope) {
            if($rootScope.modalInstance)$rootScope.modalInstance.close();
            $rootScope.loading  = false;
            $scope.$apply();
        }

        function getReginForCandidate(res , regions) {
            angular.forEach(regions, function(reigion){
                if(res.candidate.regionId == reigion.regionId){
                    res.candidate.regionfullName = reigion.displayFullName;
                }
            });
        }

        function getStagesForCandidate(res , stages) {
            angular.forEach(stages, function(stage){
                if(res.interview.state == stage.customInterviewStateId){
                    res.interview.state = stage.name;
                }
            });
        }

        function getRecruterForCandidate(res , persons) {
            angular.forEach(persons, function(person){
                if(res.interview.creatorId == person.userId){
                    res.interview.creatorCutFullName = person.cutFullName;
                }
            });
        }
        
        function _showReportWithoutCandidates(response) {
            this.vacancyData = response.object["entryList"].map(item => item["vacancy"]);
            this.regions = response.object['regions'];
            this.build = true;
        }

        function _showReportWithCandidates(resp) {
            this.mainData = resp.object['entryList'];
            this.build = false;
            _getDataCandidate(this.mainData, this.regions,  resp.object['persons'], this.customStages);
        }

        function concatCastomOrStandartFields(custom, standart) {
            custom.objects.forEach(item => {
                standart.push({
                    value: item.title,
                    visiable: false,
                    id: item.fieldId
                })
            });
        }

        function responseSetInView(resp){
            resetDefaultData();
            concatCastomOrStandartFields(resp.filter(item => item.request == 'customField')[0],reports.fieldsList);
            isCheckedFields(this.dataReport["vacancyFields"], reports.fieldsList);
            isCheckedFields(this.dataReport["сustomVacancyFields"], reports.fieldsList);
            this.fieldsList = reports.fieldsList;
            _showReportWithoutCandidates.call(this, resp.filter(item => item.request == 'Statistic2')[0]);

        }

        function requestWithOrWithoutCandidates($scope) {
            let withCandidates = this.dataReport["withCandidates"];
            (withCandidates)? requestWithCandidates.call(this, $scope) : requestWithoutCandidates.call(this, $scope);
        }

        function requestWithCandidates($scope) {
            Stat.requestGetActualVacancyStatistic2({
                "from": this.dataReport['dateFrom'],
                "to": this.dataReport['dateTo'],
                "types":null,
                "vacancyId":null,
                "vacancyStatuses": this.dataReport["vacancyStatuses"],
                "interviewStatuses": this.dataReport["interviewStatuses"],
                "interviewCreatorIds": this.dataReport["interviewCreatorIds"],
                "vacancyFields": this.dataReport["vacancyFields"],
                "withCandidates":this.dataReport["withCandidates"]
            }, false)

                .then((resp) => {
                    resetDefaultData();
                    _showReportWithCandidates.call(this, resp);
                    resetNoAngularContext($scope);
                });
        }

        function requestWithoutCandidates($scope) {
            Promise.all([Stat.requestGetActualVacancyStatistic2({
                "from": this.dataReport['dateFrom'],
                "to": this.dataReport['dateTo'],
                "types":null,
                "vacancyId":null,
                "vacancyStatuses": this.dataReport["vacancyStatuses"],
                "interviewStatuses": this.dataReport["interviewStatuses"],
                "interviewCreatorIds": this.dataReport["interviewCreatorIds"],
                "vacancyFields": this.dataReport["vacancyFields"],
                "customVacancyFields":(this.dataReport["сustomVacancyFields"])?this.dataReport["сustomVacancyFields"]:[],
                "withCandidates":this.dataReport["withCandidates"]
            }, false),
                CustomField.requestGetFieldsTitles() ])

                .then((resp) => {
                    responseSetInView.apply(this, [resp]);
                    resetNoAngularContext($scope);
                });
        }

        reports.getReport = data => {
            reports.data = data;
            localStorage.setItem('reportsData', JSON.stringify(data));
        };

        reports.showChoosingMenu = function(selector){
            if($(selector).css('display') == 'none'){
                $(selector).show('500');
                $('body').mouseup(function(e) {
                    if ($(selector).has(e.target).length === 0) {
                        $(selector).hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $(selector).hide("500");
            }
        };

        reports.removeReport = function ($scope)  {
            let id = $scope.id;

            Stat.requestDeleteCustomVacancyReport({id: id})
                .then(response => response)
                .then(response => Stat.requestGetCustomVacancyReports())
                .then(response => {
                    let url = $location.path().split('/');
                        if(url.length > 2) {
                            $location.path('/reports');
                        }
                    this.customReports = response["objects"];
                    resetNoAngularContext($scope)
                })
                .catch(error => console.log(error, 'removeReport Method'))
        };

        reports.remove = function (id, scope) {
            scope.id = id;
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-custom-reports.html?b4',
                size: '',
                backdrop: 'static',
                scope: scope,
            });
        };

        reports.closeModal = function () {
            $rootScope.modalInstance.close();
        };


        reports.inHover = function (event) {
            let target = event.target.nextElementSibling;
                target.style.display = 'block';
        };

        reports.outHover = function (event) {
            let target = event.target.nextElementSibling;
                target.style.display = 'none';
        };

        reports.getPersonFullName = function (id) {
            var fullName = '';
            angular.forEach(reports.associativePerson, function (resp) {
                if(resp.userId == id) {
                    fullName = resp.cutFullName;
                }
            });
            return fullName;
        };

        reports.getDate = function (dataReport, scope) {
            var now = Date.now();
                now += (2592000000 * 2);

            $(".startDate").datetimepicker({
                format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                startView: 4,
                minView: 2,
                autoclose: true,
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                language: $translate.use(),
                endDate: new Date(now)
            }).on('changeDate', (data) => {
                this.startVacancyDate = data.date.getTime();

                if(this.startVacancyDate > new Date()){
                    this.timeMaxZone = true;
                }else{ this.timeMaxZone = false;}

                (this.data)? this.data.dateFrom = this.startVacancyDate : null;

                setTimeout(() => {
                    this.change = false;
                    scope.$apply();
                }, 100)
            })
              .on('hide', () => ($('.startDate').val() == "")? this.startVacancyDate = null : false);

            $(".endDate").datetimepicker({
                format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                startView: 4,
                minView: 2,
                autoclose: true,
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                language: $translate.use(),
                endDate: new Date(now)
            }).on('changeDate', (data) => {
                this.endDate = data.date.getTime();
                if(this.endDate > new Date()){
                    this.timeMaxZone = true;
                }else{ this.timeMaxZone = false;}

                (this.data)? this.data.dateTo = this.endDate : null;

                setTimeout(() => {
                    this.change = false;
                    scope.$apply();
                }, 100)
            })
              .on('hide', () => ($('.endDate').val() == "")? this.endDate = null : false);


            $(".startDate").datetimepicker("setDate", new Date(dataReport['dateFrom']));
            $(".endDate").datetimepicker("setDate", new Date(dataReport['dateTo']));
        };

        reports.buildReport = function($scope){
            requestWithOrWithoutCandidates.call(this, $scope);
        };

        reports.downloadReport = function () {
            $rootScope.loading = true;
            if(loadingExcel == false){
                loadingExcel = true;
                Stat.createVacancyStatisticExcel({
                    "from": this.dataReport['dateFrom'],
                    "to": this.dataReport['dateTo'],
                    "types":null,
                    "vacancyId":null,
                    "vacancyStatuses": this.dataReport["vacancyStatuses"],
                    "interviewStatuses": this.dataReport["interviewStatuses"],
                    "interviewCreatorIds": this.dataReport["interviewCreatorIds"],
                    "vacancyFields": this.dataReport["vacancyFields"],
                    "withCandidates": this.dataReport["withCandidates"],
                    "сustomVacancyFields":(this.dataReport["сustomVacancyFields"])? this.dataReport["сustomVacancyFields"] : []
                }, function (resp) {
                    if (resp.status == 'ok') {
                        var sr = $rootScope.frontMode == "war" ? "/hr/" : "/hrdemo/";

                        $timeout(() => {
                            $('#downloadReport')[0].href = sr + 'getapp?id=' + resp.object;

                            $('#downloadReport')[0].click();
                        },100)
                    }

                    loadingExcel = false;
                    $rootScope.loading = false;
                });
            }
        };

        reports.getAllPersons = function () {
            Person.getAllPersons(resp => {
                this.associativePerson = resp.object;
                angular.forEach(this.associativePerson, function(res){
                    res.added = false;
                });
            });
        };

        reports.vacancyStages = function () {
            vacancyStages.get(resp =>{
                this.customStages = resp.object.interviewStates;
            });
        };

        reports.getPersonFullName = function (id) {
            let fullName = '';

            angular.forEach(this.associativePerson, function (resp) {
                if(resp.userId == id) {
                    fullName = resp.cutFullName;
                }
            });

            return fullName;
        };

        reports.regionIdToName = function (regionId) {
            var location = '';

            angular.forEach(this.regions, function(regVal){
                if(regionId == regVal.regionId){
                    location = regVal.fullName;
                }
            });

            return (location)? location : "-";
        };

        if(!reports.data) {
            if (!localStorage.getItem('reportsData') || localStorage.getItem('reportsData') == '') {
                $location.path('/reports')
            }else{
                reports.data = JSON.parse(localStorage.getItem('reportsData'));
            }
        }
        return reports;
    }catch(error){
        console.log(error, 'error CustomReportsService');
    }
}

angular
    .module('services.CustomReportsService',['ngResource', 'ngCookies'])
    .factory('CustomReportsService',["$rootScope","Stat", "$translate","Company","Person","vacancyStages", "notificationService","$location","$uibModal","$timeout","CustomField", CustomReportsService]);
 angular.module('services.efficiency', [
    'ngResource'
]).factory('Efficiency', ['$resource', 'serverAddress', function($resource, serverAddress) {
    return $resource(serverAddress + '/efficiency/:param', {param: "@param"},
        {
            get: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            }
        });
}]);
angular.module('services.employee', [
    'ngResource'
]).factory('Employee', ['$resource', 'serverAddress', function($resource, serverAddress) {
    return $resource(serverAddress + '/employee/:param', {param: "@param"},
        {
            all: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            },
            one: {
                method: 'GET',
                params: {
                    param: "get"
                }
            },
            getEmployeeHistory: {
                method: 'GET',
                params: {
                    param: "getEmployeeHistory"
                }
            },
            getPositionList: {
                method: 'GET',
                params: {
                    param: "getPositionList"
                }
            },
            "addEmployeeForCandidate": {
                method: "PUT",
                params: {
                    param: "addEmployeeForCandidate"
                }
            },
            "editEmployee": {
                method: "POST",
                params: {
                    param: "editEmployee"
                }
            },
            "addEmployeeWithCandidate": {
                method: "PUT",
                params: {
                    param: "addEmployeeWithCandidate"
                }
            },
            "changeState": {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changeState"
                }
            },
            "changeSalary": {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changeSalary"
                }
            },
            "changeDepartment": {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changeDepartment"
                }
            },
            "changePosition": {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "changePosition"
                }
            },
            "setEmployeeFunctionsEnabled": {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "setEmployeeFunctionsEnabled"
                }
            },
            setComment: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "setComment"
                }
            },
            editComment: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "editComment"
                }
            },
            removeComment: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeComment"
                }
            },
            getPositionList: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getPositionList"
                }
            },
            //getDepartmentsList: {
            //    method: 'GET',
            //    headers: {'Content-type': 'application/json; charset=UTF-8'},
            //    params: {
            //        param: "getDepartmentsList"
            //    }
            //},
            getDepartmentsList: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "department/list"
                }
            },
            departmentAdd: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "department/add"
                }
            },
            departmentDelete: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "department/delete"
                }
            },
            departmentEdit: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "department/edit"
                }
            }

        });
}]);
 angular.module('services.fileinit', [
        'services.candidate'
    ]
).factory('FileInit', ['serverAddress', '$http', 'Candidate', 'notificationService', '$rootScope', function(serverAddress, $http, Candidate, notificationService, $rootScope) {
    return {
        initFileOption: function($scope, path, setings, $filter) {
            $scope.file = {}; //Model
            $scope.options = {
                change: function(file) {
                    $rootScope.loading = true;
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    if ($scope.objectId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        /** @namespace data.item.thumb */
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        $rootScope.loading = false;
                        var resp = JSON.parse(data.response);

                        if (data.statusText == 'OK' && resp.status != 'error') {
                            if ($scope.callbackFile != undefined) {
                                $scope.callbackFile(data.data.objects[0], $scope.file.filename);
                                if(path == 'candidate'){
                                    $scope.updateCandidate();
                                }else {
                                    $scope.updateClient();
                                }
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                        } else if (resp.status == 'error') {
                            notificationService.error(resp.message);
                            if ($scope.callbackFileError != undefined) {
                                $scope.callbackFileError("error");
                            }
                        }
                    }).catch(function(data) {

                        $scope.loading = false;

//                            data.response= JSON.parse(data.response);
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: $filter('translate')('Allowed file formats') + ": " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initFileVacancy: function($scope, path, $filter, setings) {
            $scope.fileForVacancy = {}; //Model
            $scope.optionsForVacancy = {
                change: function(file) {
                    $rootScope.loading = true;
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    if ($scope.objectId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        /** @namespace data.item.thumb */
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.fileForVacancy, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        var resp = JSON.parse(data.response);

                        if (data.statusText == 'OK' && resp.status != 'error') {
                            if ($scope.callbackFile != undefined) {
                                $scope.callbackFile(data.data.objects[0], $scope.fileForVacancy.filename);
                                $scope.updateVacancy();
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                        } else if (resp.status == 'error') {
                            notificationService.error(resp.message);
                            if ($scope.callbackFileError != undefined) {
                                $scope.callbackFileError("error");
                            }
                        }
                    }).catch(function(data) {

                        $scope.loading = false;

//                            data.response= JSON.parse(data.response);
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: $filter('translate')('Allowed file formats') + ": " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initCandFileOption: function($scope, path, setings, toSave, $filter) {
            $scope.file = {}; //Model
            $scope.options = {
                change: function(file) {
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    if ($scope.objectId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        console.log(data);
                        if (data.data.status == 'ok') {
                            if ($scope.callbackFile != undefined) {
                                $scope.callbackFile(data.data.objects[0], $scope.file.filename);
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                            $scope.fastCandAttachProcessId = data.data.objects[0];
                            $scope.fastCandAttachProcess = true;
                            //file.$upload(serverAddress + '/candidate/fromFile', file).then(function(data) {
                            //    console.log(data);
                            //    Candidate.convert2($scope, data.data.object, toSave);
                            //    if (toSave) {
                            //    }
                            //    $scope.fastCandAttachProcess = false;
                            //}).catch(function(data) {
                            //    console.log(data);
                            //    //$scope.callbackErr(data.statusText);
                            //    $scope.fastCandAttachProcess = false;
                            //});
                        }else{
                            console.log(2);
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "error",
                                    text: data.data.message
                                });
                        }
                    }).catch(function(data) {
                        $scope.loading = false;
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Возможные форматы файла: " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initVacancyTemplateInCandidateFileOption: function($scope, $rootScope, path, setings, toSave, $filter) {
            $scope.file = {}; //Model
            $rootScope.optionsTemplate = {
                change: function(file) {
                    var uri = serverAddress;
                    //if (path != undefined)
                    //    uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    console.log(uri);
                    console.log(12321);
                    if ($scope.fileId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        console.log(data);
                        if (data.data.status == 'ok') {
                            if ($scope.callbackFileTemplateInCandidate != undefined) {
                                $scope.callbackFileTemplateInCandidate(data.data.objects[0], $scope.file.filename);
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                            $scope.fastCandAttachProcessId = data.data.objects[0];
                            $scope.fastCandAttachProcess = true;
                            //file.$upload(serverAddress + '/candidate/fromFile', file).then(function(data) {
                            //    console.log(data);
                            //    Candidate.convert2($scope, data.data.object, toSave);
                            //    if (toSave) {
                            //    }
                            //    $scope.fastCandAttachProcess = false;
                            //}).catch(function(data) {
                            //    console.log(data);
                            //    //$scope.callbackErr(data.statusText);
                            //    $scope.fastCandAttachProcess = false;
                            //});
                        }else{
                            console.log(2);
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: data.data.message
                            });
                        }
                    }).catch(function(data) {
                        $scope.loading = false;
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Возможные форматы файла: " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initVacancyTemplateFileOption: function($scope, path, setings, toSave, $filter) {
            $scope.file = {}; //Model
            $scope.optionsForTemplate = {
                change: function(file) {
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    if ($scope.fileId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    $rootScope.loading = true;
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $rootScope.loading = false;
                        console.log(data);
                        if (data.data.status == 'ok') {
                            if ($scope.callbackFileForTemplate != undefined) {
                                $scope.callbackFileForTemplate(data.data.objects[0], $scope.file.filename);
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                            $scope.fastCandAttachProcessId = data.data.objects[0];
                            $scope.fastCandAttachProcess = true;
                            //file.$upload(serverAddress + '/candidate/fromFile', file).then(function(data) {
                            //    console.log(data);
                            //    Candidate.convert2($scope, data.data.object, toSave);
                            //    if (toSave) {
                            //    }
                            //    $scope.fastCandAttachProcess = false;
                            //}).catch(function(data) {
                            //    console.log(data);
                            //    //$scope.callbackErr(data.statusText);
                            //    $scope.fastCandAttachProcess = false;
                            //});
                        }else{
                            console.log(2);
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: data.data.message
                            });
                        }
                    }).catch(function(data) {
                        $scope.loading = false;
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Возможные форматы файла: " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initVacancyTemplateInCandidateFileOption: function($scope, $rootScope, path, setings, toSave, $filter) {
            $scope.file = {}; //Model
            $rootScope.optionsTemplate = {
                change: function(file) {
                    var uri = serverAddress;
                    //if (path != undefined)
                    //    uri = uri + "/" + path;
                    uri = uri + '/addFile';
                    console.log(uri);
                    console.log(12321);
                    if ($scope.fileId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        console.log(data);
                        if (data.data.status == 'ok') {
                            if ($scope.callbackFileTemplateInCandidate != undefined) {
                                $scope.callbackFileTemplateInCandidate(data.data.objects[0], $scope.file.filename);
                                new PNotify({
                                    styling: 'jqueryui',
                                    type: "success",
                                    text: ($filter('translate')('history_info.added_file'))
                                });
                            }
                            $scope.fastCandAttachProcessId = data.data.objects[0];
                            $scope.fastCandAttachProcess = true;
                            //file.$upload(serverAddress + '/candidate/fromFile', file).then(function(data) {
                            //    console.log(data);
                            //    Candidate.convert2($scope, data.data.object, toSave);
                            //    if (toSave) {
                            //    }
                            //    $scope.fastCandAttachProcess = false;
                            //}).catch(function(data) {
                            //    console.log(data);
                            //    //$scope.callbackErr(data.statusText);
                            //    $scope.fastCandAttachProcess = false;
                            //});
                        }else{
                            console.log(2);
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: data.data.message
                            });
                        }
                    }).catch(function(data) {
                        $scope.loading = false;
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Возможные форматы файла: " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initFileOptionForEditFromResume: function($scope, path, setings) {
            $scope.file = {}; //Model
            $scope.optionsForEditFromResume = {
                change: function(file) {
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/updateFromFile';
                    if ($scope.objectId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        /** @namespace data.item.thumb */
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        var resp = JSON.parse(data.response);

                        if (data.statusText == 'OK' && resp.status != 'error') {
                            if ($scope.callbackFile != undefined) {
                                $scope.updateCandidate();
                            }
                        } else if (resp.status == 'error') {
                            notificationService.error(resp.message);
                            if ($scope.callbackFileError != undefined) {
                                $scope.callbackFileError("error");
                            }
                        }
                        $('.confirmationResumeUpdate.modal').modal('hide');
                    }).catch(function(data) {

                        $scope.loading = false;

//                            data.response= JSON.parse(data.response);
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Возможные форматы файла: " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        initFileExcellUpload: function($rootScope, $scope, path, setings, $filter) {
            $scope.file = {}; //Model
            $scope.options = {
                change: function(file) {
                    $rootScope.loading = true;
                    console.log('hereeeeeeeeeee');
                    var uri = serverAddress;
                    if (path != undefined)
                        uri = uri + "/" + path;
                    uri = uri + '/uploadExcelFile';
                    if ($scope.objectId != undefined)
                        uri = uri + "/" + $scope.objectId;
                    $scope.fileIsSelected = true;
                    $scope.ngShowOldFile = false;
                    file.$preview(file).then(function(data) {
                        /** @namespace data.item.thumb */
                        $scope.newImgSrc = data.item.thumb;
                        $scope.fileName = data.item.filename;
                        $scope.ngShowNewImage = true;
                    });
                    file.$upload(uri, $scope.file, setings, $scope).then(function(data) {
                        $scope.loading = false;
                        var resp = JSON.parse(data.response);

                        if (data.statusText == 'OK' && resp.status != 'error') {
                            //if ($scope.callbackFile != undefined) {
                            //    $scope.callbackFile(data.data.objects[0], $scope.file.filename);
                            //}
                            $rootScope.loading = false;
                            new PNotify({
                                styling: 'jqueryui',
                                type: "success",
                                text: ($filter('translate')('history_info.added_file'))
                            });
                        } else if (resp.status == 'error') {
                            $rootScope.loading = false;
                            notificationService.error(resp.message);
                            if ($scope.callbackFileError != undefined) {
                                $scope.callbackFileError("error");
                            }
                        }
                    }).catch(function(data) {

                        $rootScope.loading = false;

//                            data.response= JSON.parse(data.response);
                        if (data.response[0].code == 'type') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: $filter('translate')('Allowed file formats') + ": " + setings.allowedType.join(", ")
                            });
                        }
                        if (data.response[0].code == 'upload') {
                            console.log("upload===");
                        }
                        if (data.response[0].code == 'size') {
                            new PNotify({
                                styling: 'jqueryui',
                                type: "error",
                                text: "Большой размер файла"
                            });
                        }
                    });

                }
            };
        },
        addPhotoByReference: function($scope, $rootScope, callback) {
            $rootScope.addPhotoByReference = function() {
                $scope.loader = false;
                $http({
                    url: serverAddress + '/addPhotoByReference',
                    method: "GET",
                    params: {reference: $rootScope.photoUrl}
                }).success(function(data) {
                    $scope.loader = true;
                    if (data.status == "ok") {
                        console.log('here');
                        callback(data.object);
                    } else if (data.status == "error") {
                        $scope.showErrorAddPhotoMessage = true;
                    }
                });
            };
        }
    };
     var FileInit = $resource(serverAddress + '/action/:param', {param: "@param"}, {
             changeFileName: {
                 method : "POST",
                 headers: {'Content-type':'application/json; charset=UTF-8'},
                 params: {
                     param: 'changeFileName'
                 }
             }


         });

     return FileInit;
}]);

angular.module('services.file', [
    'ngResource',
    'ngCookies'
]).factory('File', ['$resource', 'serverAddress', '$filter', '$localStorage', function($resource, serverAddress, $filter, $localStorage) {

    var file = $resource(serverAddress + '/file/:param', {param: "@param"}
        , {
            changeFileName: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'changeFileName'
                }
            }


        });

    return file;
}]);

angular.module('services.globalService', [
        'ngResource',
        'pascalprecht.translate',
        'services.notice'
    ]
).factory('Service', ['$resource', 'serverAddress', '$filter', '$translate', '$location', 'notificationService', '$rootScope', function($resource, serverAddress, $filter, $translate, $location, notificationService, $rootScope) {
    var service = $resource(serverAddress + '/:service/:action', {service: "@service", action: "@action"}, {
        getRegions: {
            method: "GET",
            params: {
                service: "region",
                action: "get"
            }
        },
        getRegionsTwo: {
            method: "GET",
            params: {
                service: "region",
                action: "get2"
            }
        },
        history: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "action",
                action: "get"
            }
        },
        notice: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "notice",
                action: "get"
            }
        },
        readNotice: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "notice",
                action: "read"
            }
        },
        publicVacancy: {
            method: "GET",
            params: {
                service: "public",
                action: "getVacancy"
            }
        },
        publicCandidate:{
          method:"GET",
            params: {
                service: "public",
                action: "getCandidate"
            }
        },
        saveAccessLogEntry: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "public",
                action: "saveAccessLogEntry"
            }
        },
        addCandidate: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "public",
                action: "addRecall"
            }
        },
        getEvaluation: {
            method: "GET",
            params: {
                service: "public",
                action: "getEvaluation"
            }
        },
        sendDailyReportExample: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "public",
                action: "sendDailyReportExample"
            }
        },
        getClientNames: {
            method: "GET",
            params: {
                service: "public",
                action: "getClientNames"
            }
        },
        addVacancyPackage: {
            method: "POST",
            params: {
                service: "public",
                action: "addVacancyPackage"
            }
        },
        saveBrowserWithPlugin: {
            method: "GET",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params : {
                service: "person",
                action: "saveBrowserWithPlugin"
            }
        },
        getOrgLogoId: {
            method: "GET",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params : {
                service : "company",
                action : "getOrgLogoId"
            }
        },
        removeLogo: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                service: "company",
                action: "removeLogo"
            }
        },
        readAt: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params : {
                service : "at",
                action : "read"
            }
        },
        getGroups: {
            method: "GET",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params : {
                service : "candidateGroup",
                action : "getGroups"
            }
        },
        getAllOpenVacancy: {
            method: "GET",
            params: {
                service: "public",
                action: "getAllOpenVacancy"
            }
        }

    });
    service.regions = function(callbacl) {

    };
    service.getRegions2 = function(callback) {
        service.getRegionsTwo(function(resp) {
            var country = [];
            var cities = [];
            var sortArrayCountry = [];
            var sortArrayCities = [];
            var sortObjectCountry = {};
            var sortObjectCities = {};
            angular.forEach(resp.object, function(valC, keyC) {
                country.push({id:keyC,value: keyC, name: keyC, type: "country", showName: keyC, country: keyC, nameRu: keyC});
                angular.forEach(valC, function(val, key) {
                    if (val.type == 'country') {
                        country.push({
                            id:val.displayCity+keyC,
                            value: val.regionId,
                            name: val.displayCity,
                            type: "country",
                            showName: val.displayCity,
                            nameRu: (val.googlePlaceId == undefined || val.googlePlaceId.cityRu == undefined) ? val.city : val.googlePlaceId.cityRu,
                            nameEn: (val.googlePlaceId == undefined || val.googlePlaceId.cityEn == undefined) ? val.city : val.googlePlaceId.cityEn,
                            country: keyC,
                            countryRu: (val.googlePlaceId == undefined || val.googlePlaceId.countryRu == undefined) ? val.country : val.googlePlaceId.countryRu
                        });
                    }else{
                        cities.push({
                            id:val.displayCity+keyC,
                            value: val.regionId,
                            name: val.displayCity,
                            type: "city",
                            showName: val.displayCity,
                            nameRu: (val.googlePlaceId == undefined || val.googlePlaceId.cityRu == undefined) ? val.city : val.googlePlaceId.cityRu,
                            nameEn: (val.googlePlaceId == undefined || val.googlePlaceId.cityEn == undefined) ? val.city : val.googlePlaceId.cityEn,
                            country: keyC,
                            countryRu: (val.googlePlaceId == undefined || val.googlePlaceId.countryRu == undefined) ? val.country : val.googlePlaceId.countryRu
                        });
                    }
                    angular.forEach(country, function(valIn, keyIn) {
                        if (valIn.value == val.country) {
                            valIn.name = val.displayCountry;
                            valIn.showName = val.displayCountry;
                            valIn.nameRu = (val.googlePlaceId == undefined || val.googlePlaceId.countryRu == undefined) ? val.country : val.googlePlaceId.countryRu;
                        }
                    })
                });
            });
            angular.forEach(country,function(data){
                sortArrayCountry.push(data.id)
            });
            angular.forEach(cities,function(data){
                sortArrayCities.push(data.id)
            });
            sortArrayCountry = sortArrayCountry.sort();
            sortArrayCities = sortArrayCities.sort();

            angular.forEach(sortArrayCountry,function(name,key){
                    angular.forEach(country,function(obj){
                        if(name == obj.id){
                            sortObjectCountry[key] = obj;
                        }
                    })
            });
            angular.forEach(sortArrayCities,function(name,key){
                angular.forEach(cities,function(obj){
                    if(name == obj.id){
                        sortObjectCities[key] = obj;
                    }
                })
            });
            //angular.forEach(sortObjectCities,function(obj){
            //    if(obj.name == 'Одесса'){
            //        console.log(obj)
            //    }
            //});
            if (callback != undefined)
                callback(sortObjectCountry, sortObjectCities);
        });
    };
    service.getIndustries = function() {
        return [
            {value: "Accounting, Auditing"},
            {value: "Agriculture, agribusiness"},
            {value: "Automotive"},
            {value: "Aviation & Aerospace"},
            {value: "Beauty, fitness and sports"},
            {value: "Charity & NGO"},
            {value: "Chemicals"},
            {value: "Construction and architecture"},
            {value: "Consulting"},
            {value: "Consumer Goods"},
            {value: "Culture, music, show business"},
            {value: "Design, creativity"},
            {value: "Energy industry"},
            {value: "E-Commerce"},
            {value: "Education"},
            {value: "Engineering"},
            {value: "Engineering Consulting"},
            {value: "Engineering Services"},
            {value: "Finance, bank"},
            {value: "FMCG"},
            {value: "Government"},
            {value: "Healthcare, hospital"},
            {value: "HR Management, HR"},
            {value: "Hotel and restaurant business, tourism"},
            {value: "Insurance"},
            {value: "IT, computers, the Internet"},
            {value: "IT Consulting"},
            {value: "Logistics, warehouse, Foreign Trade"},
            {value: "Legal"},
            {value: "Manufacturing"},
            {value: "Marketing, Advertising, PR"},
            {value: "Media, publishing, printing"},
            {value: "Medicine, pharmacy"},
            {value: "Mining"},
            {value: "Network Marketing and MLM"},
            {value: "Oil & Gas"},
            {value: "Real Estate"},
            {value: "Retail"},
            {value: "Sales Jobs"},
            {value: "Secretariat, outsourcing, ACS"},
            {value: "Security, Safety"},
            {value: "Service industries"},
            {value: "Telecommunications"},
            {value: "Top management, senior management"},
            {value: "Transport, Telecom"},
            {value: "Travel & Tourism"},
            {value: "Work at home"},
            {value: "Work for students, early career"},
            {value: "Work without special training"},
            {value: "Other areas of activity"}
        ];
    };

    service.getSalary = function() {
        return [
            {name: "up to 500", salaryFrom: "0", salaryTo: "500"},
            {name: "500-1500", salaryFrom: "500", salaryTo: "1500"},
            {name: "1500-2500", salaryFrom: "1500", salaryTo: "2500"},
            {name: "2500-3500", salaryFrom: "2500", salaryTo: "3500"},
            {name: "3500-4500", salaryFrom: "3500", salaryTo: "4500"},
            {name: "more", salaryFrom: "4500", salaryTo: ""}
        ];
    };

    service.currency = function() {
        return [
            {value: "USD"},
            {value: "EUR"},
            {value: "ARS"},
            {value: "AUD"},
            {value: "BRL"},
            {value: "BYN"},
            {value: "CAD"},   
            {value: "CNY"},
            {value: "GBP"},    
            {value: "HKD"},
            {value: "IDR"},
            {value: "INR"},
            {value: "JPY"},
            {value: "KZT"},
            {value: "LKR"},
            {value: "MXN"},
            {value: "MYR"},
            {value: "PHP"},
            {value: "PLN"},
            {value: "RMB"},
            {value: "RUB"},            
            {value: "SGD"},
            {value: "THB"},
            {value: "UAH"},
            {value: "ZAR"}
        ];
    };
    service.positionLevel = function() {
        return [
            {value: "specialty workers"},
            {value: "specialist  (entry level)"},
            {value: "specialist"},
            {value: "Senior Specialist / Team Leader"},
            {value: "middle manager / head of department"},
            {value: "top manager / CEO / President"}
        ];
    };

    service.employmentType = function() {
        return [
            {value: "full employment"},
            {value: "underemployment"},
            {value: "telework"},
            {value: "training, practice"},
            {value: "project work"},
            {value: "seasonal, temporary work"},
            {value: "relocate"}
        ];

    };
    service.numberPosition = function() {
        return [
            {value: "1"},
            {value: "2"},
            {value: "3"},
            {value: "4"},
            {value: "5"},
            {value: "6"},
            {value: "7"},
            {value: "8"},
            {value: "9"},
            {value: "10"}
        ];
    };
    service.employmentTypeTwo = function() {
        if ($translate.use() == 'ua') {
            return [
                {text: "повна зайнятість", id: "full employment"},
                {text: "неповна зайнятість ", id: "underemployment"},
                {text: "Віддалена робота ", id: "telework"},
                {text: "навчання, практика", id: "training_practice"},
                {text: "проектна робота", id: "project work"},
                {text: "сезонна, тимчасова робота", id: "seasonal_temporary_work"}
            ];
        } else if ($translate.use() == 'ru') {
            return [
                {text: "полная занятость", id: "full employment"},
                {text: "неполная занятость ", id: "underemployment"},
                {text: "удаленная работа ", id: "telework"},
                {text: "обучение, практика", id: "training_practice"},
                {text: "проектная работа", id: "project work"},
                {text: "сезонная, временная работа", id: "seasonal_temporary_work"},
                {text: "переезд", id: "Relocate"}
            ];
        } else {
            return [
                {text: "Full Time", id: "full employment"},
                {text: "Part Time", id: "underemployment"},
                {text: "Remote", id: "telework"},
                {text: "Training, Practice", id: "training_practice"},
                {text: "Project", id: "project work"},
                {text: "Temporary", id: "seasonal_temporary_work"},
                {text: "Relocate", id: "Relocate"}
            ];
        }
    };
    service.createArrayByEmploymentType = function(arrayOfName) {
        var array = service.employmentTypeTwo();
        var respArray = [];
        angular.forEach(arrayOfName, function(valueOfName) {
            angular.forEach(array, function(vlOfArr) {
                if (valueOfName == vlOfArr.id) {
                    respArray.push(vlOfArr);
                }
            });
        });
        return respArray;
    };

    service.experience = function() {
        return [
            {value: "no experience"},
            {value: "least a year"},
            {value: "1-2 years"},
            {value: "2-3 years"},
            {value: "3-4 years"},
            {value: "4-5 years"},
            {value: "5-10 years"},
            {value: "over 10 years"}
        ];
    };
    var UALang = [
        "Англійська розмовна",
        "Англійська професійна",
        "Англійська середня",
        "Англійська початківець",
        "Білоруська розмовна",
        "Білоруська професійна",
        "Білоруська середня",
        "Білоруська початківець",
        "Іспанська розмовна",
        "Іспанська професійна",
        "Іспанська середня",
        "Іспанська початківець",
        "Італійська розмовна",
        "Італійська професійна",
        "Італійська середня",
        "Італійська початківець",
        "Казахська розмовна",
        "Казахська професійна",
        "Казахська середня",
        "Казахська початківець",
        "Китайська розмовна",
        "Китайська професійна",
        "Китайська середня",
        "Китайська початківець",
        "Малайська розмовна",
        "Малайська професійна",
        "Малайська середня",
        "Малайська початківець",
        "Мандаринська розмовна",
        "Мандаринська професійна",
        "Мандаринська середня",
        "Мандаринська початківець",
        "Молдавська розмовна",
        "Молдавська професійна",
        "Молдавська середня",
        "Молдавська початківець",
        "Німецька розмовна",
        "Німецька професійна",
        "Німецька середня",
        "Німецька початківець",
        "Португальська розмовна",
        "Португальська професійна",
        "Португальська середня",
        "Португальська початківець",
        "Російська розмовна",
        "Російська професійна",
        "Російська середня",
        "Російська початківець",
        "Тамільська розмовна",
        "Тамільська професійна",
        "Тамільська середня",
        "Тамільська початківець",
        "Українська розмовна",
        "Українська професійна",
        "Українська середня",
        "Українська початківець",
        "Французька розмовна",
        "Французька професійна",
        "Французька середня",
        "Французька початківець",
        "Гінді розмовна",
        "Гінді професійна",
        "Гінді середня",
        "Гінді початківець",
        "Японська розмовна",
        "Японська професійна",
        "Японська середня",
        "Японська початківець",
     ];

    var RULang = ["Английский разговорный",
        "Английский профессиональный",
        "Английский средний",
        "Английский начинающий",
        "Белорусский разговорный",
        "Белорусский профессиональный",
        "Белорусский средний",
        "Белорусский начинающий",
        "Испанский разговорный",
        "Испанский профессиональный",
        "Испанский средний",
        "Испанский начинающий",
        "Итальянский разговорный",
        "Итальянский профессиональный",
        "Итальянский средний",
        "Итальянский начинающий",
        "Казахский разговорный",
        "Казахский профессиональный",
        "Казахский средний",
        "Казахский начинающий",
        "Китайский разговорный",
        "Китайский профессиональный",
        "Китайский средний",
        "Китайский начинающий",
        "Малайский разговорный",
        "Малайский профессиональный",
        "Малайский средний",
        "Малайский начинающий",
        "Мандаринский разговорный",
        "Мандаринский профессиональный",
        "Мандаринский средний",
        "Мандаринский начинающий",
        "Молдавский разговорный",
        "Молдавский профессиональный",
        "Молдавский средний",
        "Молдавский начинающий",
        "Немецкий разговорный",
        "Немецкий профессиональный",
        "Немецкий средний",
        "Немецкий начинающий",
        "Португальский разговорный",
        "Португальский профессиональный",
        "Португальский средний",
        "Португальский начинающий",
        "Русский разговорный",
        "Русский профессиональный",
        "Русский средний",
        "Русский начинающий",
        "Тамильский разговорный",
        "Тамильский профессиональный",
        "Тамильский средний",
        "Тамильский начинающий",
        "Украинский разговорный",
        "Украинский профессиональный",
        "Украинский средний",
        "Украинский начинающий",
        "Французский разговорный",
        "Французский профессиональный",
        "Французский средний",
        "Французский начинающий",
        "Хинди разговорный",
        "Хинди профессиональный",
        "Хинди средний",
        "Хинди начинающий",
        "Японский разговорный",
        "Японский профессиональный",
        "Японский средний",
        "Японский начинающий"

    ];
    var ENLang = [
        "English Oral",
        "English Professional",
        "English Intermediate",
        "English Elementary",
        "Belarusian Oral",
        "Belarusian Professional",
        "Belarusian Intermediate",
        "Belarusian Elementary",
        "Spanish Oral",
        "Spanish Professional",
        "Spanish Intermediate",
        "Spanish Elementary",
        "Italian Oral",
        "Italian Professional",
        "Italian Intermediate",
        "Italian Elementary",
        "Kazakh Oral",
        "Kazakh Professional",
        "Kazakh Intermediate",
        "Kazakh Elementary",
        "Chinese Oral",
        "Chinese Professional",
        "Chinese Intermediate",
        "Chinese Elementary",
        "Malay Oral",
        "Malay Professional",
        "Malay Intermediate",
        "Malay Elementary",
        "Mandarin Oral",
        "Mandarin Professional",
        "Mandarin Intermediate",
        "Mandarin Elementary",
        "Moldovan Oral",
        "Moldovan Professional",
        "Moldovan Intermediate",
        "Moldovan Elementary",
        "German Oral",
        "German Professional",
        "German Intermediate",
        "German Elementary",
        "Portuguese Oral",
        "Portuguese Professional",
        "Portuguese Intermediate",
        "Portuguese Elementary",
        "Russian Oral",
        "Russian Professional",
        "Russian Intermediate",
        "Russian Elementary",
        "Tamil Oral",
        "Tamil Professional",
        "Tamil Intermediate",
        "Tamil Elementary",
        "Ukrainian Oral",
        "Ukrainian Professional",
        "Ukrainian Intermediate",
        "Ukrainian Elementary",
        "French Oral",
        "French Professional",
        "French Intermediate",
        "French Elementary",
        "Hindi Oral",
        "Hindi Professional",
        "Hindi Intermediate",
        "Hindi Elementary",
        "Japanese Oral",
        "Japanese Professional",
        "Japanese Intermediate",
        "Japanese Elementary",
    ];

        service.lang = function() {
        if ($translate.use() == 'ua') {
            return UALang;
        } else if ($translate.use() == 'ru') {
            return RULang;
        } else {
            return ENLang;
        }
    };
    service.langTranslator = function(currentLang) {
        if (!currentLang || currentLang.length == 0) {
            return currentLang;
        }
        currentLang = currentLang.replace(/,/g, ', ');
        for (var i = 0; i < ENLang.length; i++) {
            if ($translate.use() == 'ua') {
                currentLang = currentLang.replace(ENLang[i], UALang[i]).replace(RULang[i], UALang[i]);
            }
            if ($translate.use() == 'en') {
                currentLang = currentLang.replace(UALang[i], ENLang[i]).replace(RULang[i], ENLang[i]);
            }
            if ($translate.use() == 'ru') {
                currentLang = currentLang.replace(ENLang[i], RULang[i]).replace(UALang[i], RULang[i]);
            }
        }
        return currentLang;
    };

    service.gender = function($scope) {
        $scope.sexObjectRU = [
            {name: "Мужчина", value: true},
            {name: "Женщина", value: false}
        ];
        $scope.sexObject = [
            {name: "Male", value: true},
            {name: "Female", value: false}
        ];
        $scope.sexObjectUA = [
            {name: "Чоловік", value: true},
            {name: "Жінка", value: false}
        ];
    };


    service.genderTwo = function($scope) {
        $scope.sexObjectRU = [
            {name: "Мужчина", value: true},
            {name: "Женщина", value: false},
            {name: "Не имеет значения", value: null}
        ];
        $scope.sexObject = [
            {name: "Male", value: true},
            {name: "Female", value: false},
            {name: "Doesn't matter", value: null}
        ];
        $scope.sexObjectUA = [
            {name: "Чоловік", value: true},
            {name: "Жінка", value: false},
            {name: "Не має значення", value: null}
        ];
    };

    service.toAddCandidate = function(path) {
        if ($rootScope && $rootScope.me && angular.equals($rootScope.me.recrutRole, "salesmanager")) {
            if (path) {
                $location.path(path);
            }
            notificationService.error($filter('translate')("Sales Manager cannot add candidates"));
        } else {
            $location.path("candidate/add/");
        }
    };
    service.toEditCandidate = function(id, path) {
        if ($rootScope && $rootScope.me && angular.equals($rootScope.me.recrutRole, "salesmanager")) {
            if (path) {
                $location.path(path);
            }
            notificationService.error($filter('translate')("Sales Manager cannot edit candidates"));
        } else {
            $location.path("candidate/edit/" + id);
        }
    };
    service.toMergeCandidate = function(id, path) {
        if ($rootScope && $rootScope.me && angular.equals($rootScope.me.recrutRole, "salesmanager")) {
            if (path) {
                $location.path(path);
            }
            notificationService.error($filter('translate')("Sales Manager cannot edit candidates"));
        } else {
            $location.path("candidate/merge/" + id);
        }
    };

    service.getCountryLinkedIn = function() {
        return [
            {key: "ru", value: "Россия"},
            {key: "au", value: "Австралия"},
            {key: "at", value: "Австрия"},
            {key: "az", value: "Азербайджан"},
            {key: "ax", value: "Аландские о-ва"},
            {key: "al", value: "Албания"},
            {key: "dz", value: "Алжир"},
            {key: "as", value: "Американское Самоа"},
            {key: "ai", value: "Ангилья"},
            {key: "ao", value: "Ангола"},
            {key: "ad", value: "Андорра"},
            {key: "aq", value: "Антарктида"},
            {key: "ag", value: "Антигуа и Барбуда"},
            {key: "ar", value: "Аргентина"},
            {key: "am", value: "Армения"},
            {key: "aw", value: "Аруба"},
            {key: "af", value: "Афганистан"},
            {key: "bs", value: "Багамские о-ва"},
            {key: "bd", value: "Бангладеш"},
            {key: "bb", value: "Барбадос"},
            {key: "bh", value: "Бахрейн"},
            {key: "by", value: "Беларусь"},
            {key: "bz", value: "Белиз"},
            {key: "be", value: "Бельгия"},
            {key: "bj", value: "Бенин"},
            {key: "bm", value: "Бермудские о-ва"},
            {key: "bg", value: "Болгария"},
            {key: "bo", value: "Боливия"},
            {key: "ba", value: "Босния и Герцеговина"},
            {key: "bw", value: "Ботсвана"},
            {key: "br", value: "Бразилия"},
            {key: "io", value: "Британская территория в Индийском океане"},
            {key: "bn", value: "Бруней-Даруссалам"},
            {key: "bf", value: "Буркина-Фасо"},
            {key: "bi", value: "Бурунди"},
            {key: "bt", value: "Бутан"},
            {key: "vu", value: "Вануату"},
            {key: "va", value: "Ватикан"},
            {key: "gb", value: "Великобритания"},
            {key: "hu", value: "Венгрия"},
            {key: "ve", value: "Венесуэла"},
            {key: "vg", value: "Виргинские о-ва (Британские)"},
            {key: "vi", value: "Виргинские о-ва (США)"},
            {key: "tl", value: "Восточный Тимор"},
            {key: "tp", value: "Восточный Тимор"},
            {key: "tl", value: "Восточный Тимор"},
            {key: "tp", value: "Восточный Тимор"},
            {key: "vn", value: "Вьетнама"},
            {key: "ga", value: "Габон"},
            {key: "ht", value: "Гаити"},
            {key: "gy", value: "Гайана"},
            {key: "gm", value: "Гамбия"},
            {key: "gh", value: "Гана"},
            {key: "gp", value: "Гваделупа"},
            {key: "gt", value: "Гватемала"},
            {key: "gn", value: "Гвинея"},
            {key: "gw", value: "Гвинея-Бисау"},
            {key: "de", value: "Германия"},
            {key: "gg", value: "Гернси"},
            {key: "gi", value: "Гибралтар"},
            {key: "hn", value: "Гондурас"},
            {key: "hk", value: "Гонконг"},
            {key: "gd", value: "Гренада"},
            {key: "gl", value: "Гренландия"},
            {key: "gr", value: "Греция"},
            {key: "ge", value: "Грузия"},
            {key: "gu", value: "Гуам"},
            {key: "dk", value: "Дания"},
            {key: "cd", value: "Демократическая Республика Конго"},
            {key: "je", value: "Джерси"},
            {key: "dj", value: "Джибути"},
            {key: "dm", value: "Доминика"},
            {key: "do", value: "Доминиканская Республика"},
            {key: "eg", value: "Египет"},
            {key: "zm", value: "Замбия"},
            {key: "eh", value: "Западная Сахара"},
            {key: "zw", value: "Зимбабве"},
            {key: "il", value: "Израиль"},
            {key: "in", value: "Индия"},
            {key: "id", value: "Индонезия"},
            {key: "jo", value: "Иордания"},
            {key: "iq", value: "Ирак"},
            {key: "ir", value: "Иран"},
            {key: "ie", value: "Ирландия"},
            {key: "is", value: "Исландия"},
            {key: "es", value: "Испания"},
            {key: "it", value: "Италия"},
            {key: "ye", value: "Йемен"},
            {key: "cv", value: "Кабо-Верде"},
            {key: "kz", value: "Казахстан"},
            {key: "ky", value: "Каймановы о-ва"},
            {key: "kh", value: "Камбоджа"},
            {key: "cm", value: "Камерун"},
            {key: "ca", value: "Канада"},
            {key: "cb", value: "Карибский бассейн (страны и территории)"},
            {key: "qa", value: "Катар"},
            {key: "ke", value: "Кения"},
            {key: "cy", value: "Кипр"},
            {key: "kg", value: "Киргизия"},
            {key: "ki", value: "Кирибати"},
            {key: "cn", value: "Китай"},
            {key: "cc", value: "Кокосовые о-ва (о-ва Килинг)"},
            {key: "co", value: "Колумбия"},
            {key: "km", value: "Коморские о-ва"},
            {key: "cg", value: "Конго"},
            {key: "ko", value: "Косово"},
            {key: "cr", value: "Коста-Рика"},
            {key: "ci", value: "Кот-д'Ивуар"},
            {key: "cu", value: "Куба"},
            {key: "kw", value: "Кувейт"},
            {key: "la", value: "Лаос"},
            {key: "lv", value: "Латвия"},
            {key: "ls", value: "Лесото"},
            {key: "lr", value: "Либерия"},
            {key: "lb", value: "Ливан"},
            {key: "ly", value: "Ливия"},
            {key: "lt", value: "Литва"},
            {key: "li", value: "Лихтенштейн"},
            {key: "lu", value: "Люксембург"},
            {key: "mu", value: "Маврикий"},
            {key: "mr", value: "Мавритания"},
            {key: "mg", value: "Мадагаскар"},
            {key: "yt", value: "Майотта"},
            {key: "mo", value: "Макао"},
            {key: "mk", value: "Македония"},
            {key: "mw", value: "Малави"},
            {key: "my", value: "Малайзия"},
            {key: "ml", value: "Мали"},
            {key: "mv", value: "Мальдивские о-ва"},
            {key: "mt", value: "Мальта"},
            {key: "ma", value: "Марокко"},
            {key: "mq", value: "Мартиника"},
            {key: "mh", value: "Маршалловы о-ва"},
            {key: "mx", value: "Мексика"},
            {key: "mz", value: "Мозамбик"},
            {key: "md", value: "Молдова"},
            {key: "mc", value: "Монако"},
            {key: "mn", value: "Монголия"},
            {key: "ms", value: "Монтсеррат"},
            {key: "mm", value: "Мьянма"},
            {key: "na", value: "Намибия"},
            {key: "nr", value: "Науру"},
            {key: "np", value: "Непал"},
            {key: "ne", value: "Нигер"},
            {key: "ng", value: "Нигерия"},
            {key: "an", value: "Нидерландские Антильские о-ва"},
            {key: "nl", value: "Нидерланды"},
            {key: "ni", value: "Никарагуа"},
            {key: "nu", value: "Ниуэ"},
            {key: "nz", value: "Новая Зеландия"},
            {key: "nc", value: "Новая Каледония"},
            {key: "no", value: "Норвегия"},
            {key: "nf", value: "Норфолк (о-в)"},
            {key: "ae", value: "ОАЭ"},
            {key: "om", value: "Оман"},
            {key: "ck", value: "Острова Кука"},
            {key: "im", value: "Остров Мэн"},
            {key: "cx", value: "Остров Рождества"},
            {key: "pk", value: "Пакистан"},
            {key: "pw", value: "Палау"},
            {key: "ps", value: "Палестинская территория"},
            {key: "pa", value: "Панама"},
            {key: "pg", value: "Папуа-Новая Гвинея"},
            {key: "py", value: "Парагвай"},
            {key: "pe", value: "Перу"},
            {key: "pn", value: "Питкэрн"},
            {key: "pl", value: "Польша"},
            {key: "pt", value: "Португалия"},
            {key: "pr", value: "Пуэрто-Рико"},
            {key: "re", value: "Реюньон"},
            {key: "rw", value: "Руанда"},
            {key: "ro", value: "Румыния"},
            {key: "sv", value: "Сальвадор"},
            {key: "ws", value: "Самоа"},
            {key: "sm", value: "Сан-Марино"},
            {key: "st", value: "Сан-Томе и Принсипи"},
            {key: "sa", value: "Саудовская Аравия"},
            {key: "sz", value: "Свазиленд"},
            {key: "sj", value: "Свальбард и Ян-Майен (о-ва)"},
            {key: "sh", value: "Святая Елена (о-в)"},
            {key: "kp", value: "Северная Корея"},
            {key: "mp", value: "Северные Марианские о-ва"},
            {key: "sc", value: "Сейшельские о-ва"},
            {key: "sn", value: "Сенегал"},
            {key: "pm", value: "Сен-Пьер и Микелон"},
            {key: "vc", value: "Сент-Винсент и Гренадины"},
            {key: "kn", value: "Сент-Китс и Невис"},
            {key: "lc", value: "Сент-Люсия"},
            {key: "rs", value: "Сербия"},
            {key: "sg", value: "Сингапур"},
            {key: "sy", value: "Сирия"},
            {key: "sk", value: "Словацкая Республика"},
            {key: "si", value: "Словения"},
            {key: "sb", value: "Соломоновы о-ва"},
            {key: "so", value: "Сомали"},
            {key: "sd", value: "Судан"},
            {key: "sr", value: "Суринам"},
            {key: "us", value: "США"},
            {key: "sl", value: "Сьерра-Леоне"},
            {key: "tj", value: "Таджикистан"},
            {key: "th", value: "Таиланд"},
            {key: "tw", value: "Тайвань"},
            {key: "tz", value: "Танзания"},
            {key: "tc", value: "Теркс и Кайкос (о-ва)"},
            {key: "tg", value: "Того"},
            {key: "tk", value: "Токелау"},
            {key: "to", value: "Тонга"},
            {key: "tt", value: "Тринидад и Тобаго"},
            {key: "tv", value: "Тувалу"},
            {key: "tn", value: "Тунис"},
            {key: "tm", value: "Туркменистан"},
            {key: "tr", value: "Турция"},
            {key: "ug", value: "Уганда"},
            {key: "uz", value: "Узбекистан"},
            {key: "ua", value: "Украина"},
            {key: "wf", value: "Уоллис и Футуна"},
            {key: "uy", value: "Уругвай"},
            {key: "fo", value: "Фарерские о-ва"},
            {key: "fm", value: "Федеративные Штаты Микронезии"},
            {key: "fj", value: "Фиджи"},
            {key: "ph", value: "Филиппины"},
            {key: "fi", value: "Финляндия"},
            {key: "fk", value: "Фолклендские о-ва (Мальвинские о-ва)"},
            {key: "fr", value: "Франция"},
            {key: "gf", value: "Французская Гвиана"},
            {key: "pf", value: "Французская Полинезия"},
            {key: "tf", value: "Французские Южные Территории"},
            {key: "hr", value: "Хорватия"},
            {key: "cf", value: "Центральноафриканская Республика"},
            {key: "td", value: "Чад"},
            {key: "me", value: "Черногория"},
            {key: "cz", value: "Чешская Республика"},
            {key: "cl", value: "Чили"},
            {key: "ch", value: "Швейцария"},
            {key: "se", value: "Швеция"},
            {key: "lk", value: "Шри-Ланка"},
            {key: "ec", value: "Эквадор"},
            {key: "gq", value: "Экваториальная Гвинея"},
            {key: "er", value: "Эритрея"},
            {key: "ee", value: "Эстония"},
            {key: "et", value: "Эфиопия"},
            {key: "za", value: "ЮАР"},
            {key: "kr", value: "Южная Корея"},
            {key: "ss", value: "Южный Судан"},
            {key: "jm", value: "Ямайка"},
            {key: "jp", value: "Япония"},
            {key: "oo", value: "Другое"},
            {key: "us", value: "United States"},
            {key: "af", value: "Afghanistan"},
            {key: "ax", value: "Aland Islands"},
            {key: "al", value: "Albania"},
            {key: "dz", value: "Algeria"},
            {key: "as", value: "American Samoa"},
            {key: "ad", value: "Andorra"},
            {key: "ao", value: "Angola"},
            {key: "ai", value: "Anguilla"},
            {key: "aq", value: "Antarctica"},
            {key: "ag", value: "Antigua and Barbuda"},
            {key: "ar", value: "Argentina"},
            {key: "am", value: "Armenia"},
            {key: "aw", value: "Aruba"},
            {key: "au", value: "Australia"},
            {key: "at", value: "Austria"},
            {key: "az", value: "Azerbaijan"},
            {key: "bs", value: "Bahamas"},
            {key: "bh", value: "Bahrain"},
            {key: "bd", value: "Bangladesh"},
            {key: "bb", value: "Barbados"},
            {key: "by", value: "Belarus"},
            {key: "be", value: "Belgium"},
            {key: "bz", value: "Belize"},
            {key: "bj", value: "Benin"},
            {key: "bm", value: "Bermuda"},
            {key: "bt", value: "Bhutan"},
            {key: "bo", value: "Bolivia"},
            {key: "ba", value: "Bosnia and Herzegovina"},
            {key: "bw", value: "Botswana"},
            {key: "br", value: "Brazil"},
            {key: "io", value: "British Indian Ocean Territory"},
            {key: "bn", value: "Brunei Darussalam"},
            {key: "bg", value: "Bulgaria"},
            {key: "bf", value: "Burkina Faso"},
            {key: "bi", value: "Burundi"},
            {key: "kh", value: "Cambodia"},
            {key: "cm", value: "Cameroon"},
            {key: "ca", value: "Canada"},
            {key: "cv", value: "Cape Verde"},
            {key: "cb", value: "Caribbean Nations"},
            {key: "ky", value: "Cayman Islands"},
            {key: "cf", value: "Central African Republic"},
            {key: "td", value: "Chad"},
            {key: "cl", value: "Chile"},
            {key: "cn", value: "China"},
            {key: "cx", value: "Christmas Island"},
            {key: "cc", value: "Cocos (Keeling) Islands"},
            {key: "co", value: "Colombia"},
            {key: "km", value: "Comoros"},
            {key: "cg", value: "Congo"},
            {key: "ck", value: "Cook Islands"},
            {key: "cr", value: "Costa Rica"},
            {key: "ci", value: "Cote D\"Ivoire (Ivory Coast)"},
            {key: "hr", value: "Croatia"},
            {key: "cu", value: "Cuba"},
            {key: "cy", value: "Cyprus"},
            {key: "cz", value: "Czech Republic"},
            {key: "cd", value: "Democratic Republic of the Congo"},
            {key: "dk", value: "Denmark"},
            {key: "dj", value: "Djibouti"},
            {key: "dm", value: "Dominica"},
            {key: "do", value: "Dominican Republic"},
            {key: "tp", value: "East Timor"},
            {key: "ec", value: "Ecuador"},
            {key: "eg", value: "Egypt"},
            {key: "sv", value: "El Salvador"},
            {key: "gq", value: "Equatorial Guinea"},
            {key: "er", value: "Eritrea"},
            {key: "ee", value: "Estonia"},
            {key: "et", value: "Ethiopia"},
            {key: "fk", value: "Falkland Islands (Malvinas)"},
            {key: "fo", value: "Faroe Islands"},
            {key: "fm", value: "Federated States of Micronesia"},
            {key: "fj", value: "Fiji"},
            {key: "fi", value: "Finland"},
            {key: "fr", value: "France"},
            {key: "gf", value: "French Guiana"},
            {key: "pf", value: "French Polynesia"},
            {key: "tf", value: "French Southern Territories"},
            {key: "ga", value: "Gabon"},
            {key: "gm", value: "Gambia"},
            {key: "ge", value: "Georgia"},
            {key: "de", value: "Germany"},
            {key: "gh", value: "Ghana"},
            {key: "gi", value: "Gibraltar"},
            {key: "gr", value: "Greece"},
            {key: "gl", value: "Greenland"},
            {key: "gd", value: "Grenada"},
            {key: "gp", value: "Guadeloupe"},
            {key: "gu", value: "Guam"},
            {key: "gt", value: "Guatemala"},
            {key: "gg", value: "Guernsey"},
            {key: "gn", value: "Guinea"},
            {key: "gw", value: "Guinea-Bissau"},
            {key: "gy", value: "Guyana"},
            {key: "ht", value: "Haiti"},
            {key: "hn", value: "Honduras"},
            {key: "hk", value: "Hong Kong"},
            {key: "hu", value: "Hungary"},
            {key: "is", value: "Iceland"},
            {key: "in", value: "India"},
            {key: "id", value: "Indonesia"},
            {key: "ir", value: "Iran"},
            {key: "iq", value: "Iraq"},
            {key: "ie", value: "Ireland"},
            {key: "im", value: "Isle of Man"},
            {key: "il", value: "Israel"},
            {key: "it", value: "Italy"},
            {key: "jm", value: "Jamaica"},
            {key: "jp", value: "Japan"},
            {key: "je", value: "Jersey"},
            {key: "jo", value: "Jordan"},
            {key: "kz", value: "Kazakhstan"},
            {key: "ke", value: "Kenya"},
            {key: "ki", value: "Kiribati"},
            {key: "kr", value: "Korea"},
            {key: "kp", value: "Korea (North)"},
            {key: "ko", value: "Kosovo"},
            {key: "kw", value: "Kuwait"},
            {key: "kg", value: "Kyrgyzstan"},
            {key: "la", value: "Laos"},
            {key: "lv", value: "Latvia"},
            {key: "lb", value: "Lebanon"},
            {key: "ls", value: "Lesotho"},
            {key: "lr", value: "Liberia"},
            {key: "ly", value: "Libya"},
            {key: "li", value: "Liechtenstein"},
            {key: "lt", value: "Lithuania"},
            {key: "lu", value: "Luxembourg"},
            {key: "mo", value: "Macao"},
            {key: "mk", value: "Macedonia"},
            {key: "mg", value: "Madagascar"},
            {key: "mw", value: "Malawi"},
            {key: "my", value: "Malaysia"},
            {key: "mv", value: "Maldives"},
            {key: "ml", value: "Mali"},
            {key: "mt", value: "Malta"},
            {key: "mh", value: "Marshall Islands"},
            {key: "mq", value: "Martinique"},
            {key: "mr", value: "Mauritania"},
            {key: "mu", value: "Mauritius"},
            {key: "yt", value: "Mayotte"},
            {key: "mx", value: "Mexico"},
            {key: "md", value: "Moldova"},
            {key: "mc", value: "Monaco"},
            {key: "mn", value: "Mongolia"},
            {key: "me", value: "Montenegro"},
            {key: "ms", value: "Montserrat"},
            {key: "ma", value: "Morocco"},
            {key: "mz", value: "Mozambique"},
            {key: "mm", value: "Myanmar"},
            {key: "na", value: "Namibia"},
            {key: "nr", value: "Nauru"},
            {key: "np", value: "Nepal"},
            {key: "nl", value: "Netherlands"},
            {key: "an", value: "Netherlands Antilles"},
            {key: "nc", value: "New Caledonia"},
            {key: "nz", value: "New Zealand"},
            {key: "ni", value: "Nicaragua"},
            {key: "ne", value: "Niger"},
            {key: "ng", value: "Nigeria"},
            {key: "nu", value: "Niue"},
            {key: "nf", value: "Norfolk Island"},
            {key: "mp", value: "Northern Mariana Islands"},
            {key: "no", value: "Norway"},
            {key: "pk", value: "Pakistan"},
            {key: "pw", value: "Palau"},
            {key: "ps", value: "Palestinian Territory"},
            {key: "pa", value: "Panama"},
            {key: "pg", value: "Papua New Guinea"},
            {key: "py", value: "Paraguay"},
            {key: "pe", value: "Peru"},
            {key: "ph", value: "Philippines"},
            {key: "pn", value: "Pitcairn"},
            {key: "pl", value: "Poland"},
            {key: "pt", value: "Portugal"},
            {key: "pr", value: "Puerto Rico"},
            {key: "qa", value: "Qatar"},
            {key: "re", value: "Reunion"},
            {key: "ro", value: "Romania"},
            {key: "ru", value: "Russian Federation"},
            {key: "ru", value: "Russia"},
            {key: "rw", value: "Rwanda"},
            {key: "sh", value: "Saint Helena"},
            {key: "kn", value: "Saint Kitts and Nevis"},
            {key: "lc", value: "Saint Lucia"},
            {key: "pm", value: "Saint Pierre and Miquelon"},
            {key: "vc", value: "Saint Vincent and the Grenadines"},
            {key: "ws", value: "Samoa"},
            {key: "sm", value: "San Marino"},
            {key: "st", value: "Sao Tome and Principe"},
            {key: "sa", value: "Saudi Arabia"},
            {key: "sn", value: "Senegal"},
            {key: "rs", value: "Serbia"},
            {key: "sc", value: "Seychelles"},
            {key: "sl", value: "Sierra Leone"},
            {key: "sg", value: "Singapore"},
            {key: "sk", value: "Slovak Republic"},
            {key: "si", value: "Slovenia"},
            {key: "sb", value: "Solomon Islands"},
            {key: "so", value: "Somalia"},
            {key: "za", value: "South Africa"},
            {key: "ss", value: "South Sudan"},
            {key: "es", value: "Spain"},
            {key: "lk", value: "Sri Lanka"},
            {key: "sd", value: "Sudan"},
            {key: "om", value: "Sultanate of Oman"},
            {key: "sr", value: "Suriname"},
            {key: "sj", value: "Svalbard and Jan Mayen"},
            {key: "sz", value: "Swaziland"},
            {key: "se", value: "Sweden"},
            {key: "ch", value: "Switzerland"},
            {key: "sy", value: "Syria"},
            {key: "tw", value: "Taiwan"},
            {key: "tj", value: "Tajikistan"},
            {key: "tz", value: "Tanzania"},
            {key: "th", value: "Thailand"},
            {key: "tl", value: "Timor-Leste"},
            {key: "tg", value: "Togo"},
            {key: "tk", value: "Tokelau"},
            {key: "to", value: "Tonga"},
            {key: "tt", value: "Trinidad and Tobago"},
            {key: "tn", value: "Tunisia"},
            {key: "tr", value: "Turkey"},
            {key: "tm", value: "Turkmenistan"},
            {key: "tc", value: "Turks and Caicos Islands"},
            {key: "tv", value: "Tuvalu"},
            {key: "ug", value: "Uganda"},
            {key: "ua", value: "Ukraine"},
            {key: "ae", value: "United Arab Emirates"},
            {key: "gb", value: "United Kingdom"},
            {key: "uy", value: "Uruguay"},
            {key: "uz", value: "Uzbekistan"},
            {key: "vu", value: "Vanuatu"},
            {key: "va", value: "Vatican City State (Holy See)"},
            {key: "ve", value: "Venezuela"},
            {key: "vn", value: "Vietnam"},
            {key: "vg", value: "Virgin Islands (British)"},
            {key: "vi", value: "Virgin Islands (U.S.)"},
            {key: "wf", value: "Wallis and Futuna"},
            {key: "eh", value: "Western Sahara"},
            {key: "ye", value: "Yemen"},
            {key: "zm", value: "Zambia"},
            {key: "zw", value: "Zimbabwe"},
            {key: "oo", value: "Other"}
        ];
    };

    service.dynamicTableLoading = function (total, page, count, getDataFunction) {
        let rocketElement = document.getElementById('scrollup');
        let pagesPerOneLoad = count,
            currentPage = page,
            pagesCount = Math.ceil(total/pagesPerOneLoad);
                if(currentPage < pagesCount - 1) {
                    $rootScope.loading = true;
                    currentPage++;
                    updateData(currentPage);
                }

        function updateData(pageNext) {
            if(getDataFunction) {
                if(rocketElement) {
                    moveUpFunc();
                }
                getDataFunction(pageNext, pagesPerOneLoad);
            }
        }
        function moveUpFunc(){
            let scrollUp = rocketElement; // найти элемент
            scrollUp.style.display = 'block';
            scrollUp.style.position = 'fixed';
            scrollUp.style.bottom = '20px';
            scrollUp.style.left = '0px';
            scrollUp.onmouseover = function() { // добавить прозрачность
                scrollUp.style.opacity=0.3;
                scrollUp.style.filter  = 'alpha(opacity=30)';
            };

            scrollUp.onmouseout = function() { //убрать прозрачность
                scrollUp.style.opacity = 0.5;
                scrollUp.style.filter  = 'alpha(opacity=50)';
            };

            scrollUp.onclick = function() { //обработка клика
                window.scrollTo(0,0);
            };
        }
    };

    return service;
}]);

angular.module('services.interceptorHandler',[]).factory('responseObserver', function responseObserver($q, $window, notificationService, $filter, $rootScope) {
    return {
        'responseError': function(errorResponse) {
            switch (errorResponse.status) {
                case 403:
                    setTimeout(function(){
                        console.log($rootScope.notAuthorized);
                        if($rootScope.notAuthorized == false){
                            if(errorResponse.config.url != '/hr/person/authping'){
                                ////////////////////////////////////////////////////////////////////<--------------Checking for not spaming error messages for every request(e.g. when you not logged)
                                var exists = false;
                                $(".ui-pnotify-text").each(function() {
                                    if ($(this).html() == $filter('translate')("It look's like some problem with connection"))
                                        exists = true;
                                });
                                if (!exists) {
                                    notificationService.error($filter('translate')("It look's like some problem with connection"));
                                }
                            }
                        }
                    },0);
                    break;
                default :
                    var exists = false;
                    $(".ui-pnotify-text").each(function() {
                        console.log($(this).html());
                        if ($(this).html() == $filter('translate')('service temporarily unvailable'))
                            exists = true;
                    });
                    if (!exists) {
                        notificationService.error($filter('translate')('service temporarily unvailable'));
                    }
                //case 500:
                //    $window.location = './500.html';
                //    break;
            }
            return $q.reject(errorResponse);
        }
    };
});
angular.module('services.localStorage', []
).factory('$localStorage', ['$window', function($window) {
    return (function() {
        return {
            isExist: function(name) {
                return $window.localStorage.getItem(name) != undefined;
            },
            get: function(name) {
                if (name == undefined || name == null)
                    return null;
                return $window.localStorage.getItem(name);
            },
            set: function(name, value) {
                if (angular.isObject(value)) {
                    value = JSON.stringify(value);
                }
                $window.localStorage.setItem(name, value);
            },
            remove: function(name) {
                $window.localStorage.removeItem(name);
            }
        };
    }());
}]);

angular.module('services.mail', [
    'ngResource'
]).factory('Mail', ['$resource', 'serverAddress', '$uibModal', '$rootScope', function ($resource, serverAddress, $uibModal, $rootScope) {
     var service = $resource(serverAddress + '/mail/:param', {param: "@param"},
        {
            createTemplate: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "createTemplate"
                }
            },
            getTemplate: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTemplate"
                }
            },
            getTemplateVacancy: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTemplateVacancy"
                }
            },
            getTemplatesVacancy: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTemplatesVacancy"
                }
            },
            removeTemplate: {
                method: 'GET',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeTemplate"
                }
            },
            getTemplatePost: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTemplate"
                }
            },
            updateTemplate: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "updateTemplate"
                }
            },
            sendMailByTemplate: {
                method: "POST",
                params: {
                    param: "sendMailByTemplate"
                }
            },
            getDefaultTemplate: {
                method: "GET",
                params: {
                    param: "getDefaultTemplate"
                }
            }
        });
     service.sendMailByTemplateVerified = function (queryPrams, successCallback, errorCallback) {
         service.sendMailByTemplate(queryPrams, function (resp) {
             if(resp.status == 'error' && resp.code == 'errorSendFromGmail') {
                 $rootScope.closeModal();
                 $rootScope.modalInstance =  $uibModal.open({
                     animation: true,
                     templateUrl: '../partials/modal/reintegrate-gmail.html',
                     size: '',
                     resolve: function(){
                     }
                 });
                 $rootScope.closeModal = function () {
                     $rootScope.modalInstance.close();
                     delete $rootScope.modalInstance;
                 };
             }else if(resp.code == 'сouldNotGetRefreshTokenIntegration') {
                 $rootScope.closeModal();
                 $rootScope.modalInstance = $uibModal.open({
                     animation: true,
                     templateUrl: '../partials/modal/gmail-access.html',
                     resolve: {
                     }
                 });
                 $rootScope.closeModal = function () {
                     $rootScope.modalInstance.close();
                     delete $rootScope.modalInstance;
                 };
             } else {
                 successCallback(resp);
             }
         }, function (err) {
            if(errorCallback) {
                errorCallback(err);
            }
         });
     };
     return service;
}]);
angular.module('services.news', [
    'ngResource',
    'ngCookies'
]).factory('News', ['$resource', 'serverAddress', '$filter', '$localStorage', 'notificationService',
    function ($resource, serverAddress, $filter, $localStorage, notificationService) {

        var News = $resource(serverAddress + '/news/:param', {param: "@param"},
            {
                getNews: {
                    method: "GET",
                    params: {
                        param: "getNews"
                    }
                },
                setNewsAsViewed: {
                    method: "POST",
                    params: {
                        param: "setNewsAsViewed"
                    }
                }

            });
        return News;
    }]);
angular.module('services.notice', [
        'ngResource'
    ]
).factory('Notice', ['$resource', 'serverAddress', function($resource, serverAddress) {
    var service = $resource(serverAddress + '/notice/:param', {param: "@param"},
        {
            all: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            },
            notice: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    service: "notice",
                    action: "get"
                }
            },
            readNotice: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    service: "notice",
                    action: "read"
                }
            },
            readAll: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                   param: "readAll"
                }
            },
            getMy: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getMy"
                }
            }
        });
    var forUpdateNoticesView = [];

    service.registerNoticeView = function(val, name) {
        forUpdateNoticesView.push({name: name, funct: val});
    };
    service.updateNoticesView = function(noticeId, nameNoticeView) {
        angular.forEach(forUpdateNoticesView, function(val) {
            if (val.name != nameNoticeView) {
                val.funct(noticeId);
            }
        })
    };
    return service;
}]);
angular.module('services.pay', [
    'ngResource',
    'ngCookies'
]).factory('Pay', ['$resource', 'serverAddress', '$filter', '$localStorage', 'notificationService',
    function ($resource, serverAddress, $filter, $localStorage, notificationService) {

        var Pay = $resource(serverAddress + '/pay/:param', {param: "@param"},
            {
                getPayments: {
                    method: "GET",
                    params: {
                        param: "getPayments"
                    },
                    isArray: true
                },
                createPaymentUsage: {
                    method: "GET",
                    params: {
                        param: "createPaymentUsage"
                    }
                },
                createPaymentHrModule: {
                    method: "GET",
                    params: {
                        param: "createPaymentHrModule"
                    }
                },
                removePayment: {
                    method: "GET",
                    params: {
                        param: "removePayment"
                    }
                }
            });
        return Pay;
    }]);
 angular.module('services.person', [
    'ngResource'
 ]).factory('Person', ['$resource', 'serverAddress','$rootScope', function($resource, serverAddress, $rootScope) {
     var person = $resource(serverAddress + '/person/:param', {param: "@param"},
            {
                authorization: {
                    method: 'POST',
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "auth"
                    }
                },
                in: {
                    method: "GET",
                    params: {
                        param: "in"
                    }
                },
                changeUserParam:{
                  method:"GET",
                    params:{
                        param:"changeUserParam"
                    }
                },
                registration: {
                    method: "POST",
                    params: {
                        param: "registration"
                    }
                },
                joinInvited: {
                    method: "POST",
                    params: {
                        param: "joinInvited"
                    }
                },
                inviteUser: {
                    method: "GET",
                    params: {
                        param: "inviteUser"
                    }
                },
                finishReg: {
                    method: "GET",
                    params: {
                        param: "finishReg"
                    }
                },
                logout: {
                    method: 'GET',
                    headers: {'Content-Type': 'application/json'},
                    params: {
                        param: "logout"
                    }
                },
                getMe: {
                    withCredentials: true,
                    method: 'GET',
                    params: {
                        param: "getMe"
                    }
                },
                changeOrg: {
                    method: "GET",
                    params: {
                        param: "changeOrg"
                    }
                },
                getAllPersons: {
                    method: "GET",
                    params: {
                        param: "getAllPersons"
                    }
                },
                getAllPersonsWithDetails: {
                    method: "GET",
                    params: {
                        param: "getAllPersonsWithDetails"
                    }
                },
                getPerson: {
                    method: "GET",
                    params: {
                        param: "getPerson"
                    }
                },
                getInvited: {
                    method: "GET",
                    params: {
                        param: "getInvited"
                    },
                    isArray: true
                },
                inviteInfo: {
                    method: "GET",
                    params: {
                        param: "inviteInfo"
                    }
                },
                changeUserRole: {
                    method: "GET",
                    params: {
                        param: "changeUserRole"
                    }

                },
                changeUserRegion: {
                    method: "GET",
                    params: {
                        param: "changeUserRegion"
                    }
                },
                setSocial: {
                    method: "GET",
                    params: {
                        param: "setSocial"
                    }
                },
                personEmails:{
                    method:"GET",
                    params:{
                        param:"personEmails"
                    }
                },

                addEmail:{
                    method:"POST",
                    params:{
                        param:"addEmail"
                    }
                },

                deleteEmail:{
                    method:"GET",
                    params:{
                        param:"deleteEmail"
                    }
                },




                resetSocial: {
                    method: "GET",
                    params: {
                        param: "resetSocial"
                    }
                },
                setLang: {
                    method: "GET",
                    params: {
                        param: "setLang"
                    }
                },
                changePassword: {
                    method: "POST",
                    params: {
                        param: "changePassword"
                    }
                },
                changePasswordByKey: {
                    method: "POST",
                    params: {
                        param: "changePasswordByKey"
                    }
                },
                updateContacts: {
                    method: "POST",
                    params: {
                        param: "updateContacts"
                    }
                },
                changeOrgName: {
                    method: "POST",
                    params: {
                        param: "changeOrgName"
                    }
                },
                createPaymentUsage: {
                    method: "GET",
                    params: {
                        param: "createPaymentUsage"
                    }
                },
                getPayments: {
                    method: "GET",
                    params: {
                        param: "getPayments"
                    },
                    isArray: true
                },
                deletePayment: {
                    method: "GET",
                    params: {
                        param: "deletePayment"
                    }
                },
                changeRegion: {
                    method: "POST",
                    params: {
                        param: "changeRegion"
                    }
                },
                disableUser: {
                    method: "GET",
                    params: {
                        param: "disableUser"
                    }
                },
                enableUser: {
                    method: "GET",
                    params: {
                        param: "enableUser"
                    }
                },
                getActivePersonCount: {
                    method: "GET",
                    params: {
                        param: "getActivePersonCount"
                    }
                },
                checkKey: {
                    method: "GET",
                    params: {
                        param: "checkKey"
                    }
                },
                getAchieves:{
                    method:"POST",
                    params:{
                        param:"getAchieves"
                    }
                },
                authPing:{
                    method:"GET",
                    params:{
                        param:"authping"
                    }
                },
                getUserParam: {
                    method: "GET",
                    params: {
                        param: "getUserParam"
                    }
                },
                editEmail:{
                    method:"POST",
                    params:{
                        param:"editEmail"
                    }
                },
                removePersonEmail:{
                    method:"GET",
                    params:{
                        param:"removePersonEmail"
                    }
                },
                changeFirstName:{
                    method:"POST",
                    params:{
                        param:"changeFirstName"
                    }
                },
                addGoogleCalendar:{
                    method:"POST",
                    params:{
                        param:"addGoogleCalendar"
                    }
                },
                getGoogleCalendar:{
                    method:"GET",
                    params:{
                        param:"getGoogleCalendar"
                    }
                },
                deleteGoogleCalendar:{
                    method:"DELETE",
                    params:{
                        param:"deleteGoogleCalendar"
                    }
                },
                unInviteUser:{
                    method:"GET",
                    params:{
                        param:"unInviteUser"
                    }
                },
                getUserPopup: {
                    method: "GET",
                    params: {
                        param: "getUserPopup"
                    }
                },
                addOutlookCalendar:{
                    method:"POST",
                    params:{
                        param:"addOutlookCalendar"
                    }
                },
                getOutlookCalendar: {
                    method: "GET",
                    params: {
                        param: "getOutlookCalendar"
                    }
                },
                deleteOutlookCalendar: {
                    method: "DELETE",
                    params: {
                        param: "deleteOutlookCalendar"
                    }
                }

            });
     person.requestGetAllPersons = function () {
         $rootScope.loading = true;
         return new Promise((resolve, reject) => {
             person.getAllPersons(resp => resolve(resp, resp['request'] = 'AllPersons'),error => reject(error));
         });
     };

     return person;
 }]);
angular.module('services.scope', []).factory('ScopeService', ['$rootScope', 'localStorageService', function($rootScope, localStorageService) {
    var currentControllerUpdateFunc = null;
    var defaultScopeIsInitialized = false;
    var navBarUpdateFunction = null;

    var initDefaultScope = function(name, val) {
        defaultScopeIsInitialized = true;
        if (name != null) {
            setActiveScopeObject(name, val);
        }
    };

    function defaultScopeIsInitializedFc() {
        return defaultScopeIsInitialized;
    }

    var scopeObject = [
        {name: "onlyMy", check: false, value: null, prevVal: null},
        {name: "region", check: false, value: null, prevVal: null},
        {name: "company", check: false, value: null, prevVal: null}
    ];

    function setActiveScopeObject(name, value) {
        var active = null;
        angular.forEach(scopeObject, function(val) {
            if (val.name == name) {
                val.check = true;
                if (value != undefined) {
                    val.value = value;
                } else {
                    val.value = null;
                }
                active = val;
            } else {
                val.check = false;
            }
        });
        updateControllerInformation(active);
    }

    function setCurrentControllerUpdateFunc(val) {
        currentControllerUpdateFunc = val;
    }

    function setNavBarUpdateFunction(val) {
        navBarUpdateFunction = val;
    }

    function getScopeObject() {
        return scopeObject;
    }

    function updateControllerInformation(val) {
        var value = getActiveScopeObject();
        if (currentControllerUpdateFunc != undefined) {
            if (val != undefined) {
                currentControllerUpdateFunc(val);
            } else {
                currentControllerUpdateFunc(value);
            }
        }
        if(navBarUpdateFunction!=undefined){
            if (val != undefined) {
                navBarUpdateFunction(val);
            } else {
                navBarUpdateFunction(value);
            }
        }
    }

    function getActiveScopeObject() {
        var active = null;
        angular.forEach(scopeObject, function(val) {
            if (val.check) {
                active = val;
            }
        });
        return active;
    }

    return {
        setCurrentControllerUpdateFunc: setCurrentControllerUpdateFunc,
        getScopeObject: getScopeObject,
        initDefaultScope: initDefaultScope,
        setActiveScopeObject: setActiveScopeObject,
        getActiveScopeObject: getActiveScopeObject,
        setNavBarUpdateFunction: setNavBarUpdateFunction,
        isInit: defaultScopeIsInitializedFc
    };

}

])
;

 angular.module('services.statistic', [
    'ngResource'
]).factory('Statistic', ['$resource', 'serverAddress', function($resource, serverAddress) {
    var service = $resource(serverAddress + '/stat/:action', {action: "@action"}, {
        getOrgInfo: {
            method: "GET",
            params: {
                action: "getOrgInfo"
            }
        },
        getOrgInfoWithParams: {
            method: "POST",
            params: {
                action: "getOrgInfo"
            }
        },
        getSalesFunnel: {
            method: "POST",
            params: {
                action: "getSalesFunnel"
            }
        },
        getGroupActionInterviewForStateNew: {
            method: "POST",
            params: {
                action: "getGroupActionInterviewForStateNew"
            }
        },
        getVacancyInterviewDetalInfo: {
            method: "POST",
            params: {
                action: "getVacancyInterviewDetalInfo"
            }
        },
        getVacancyInterviewDetalInfoFile: {
            method: "POST",
            params: {
                action: "getVacancyInterviewDetalInfoFile"
            }
        },
        getDailyReport: {
            method: "POST",
            params: {
                action: "getDailyReport"
            }
        }
    });

    service.parameters = {};

    service.setParam = function (key, value) {
        if(key)
        service.parameters[key] = value;
    };

    service.getParam = function (key) {
        if(key)
            return service.parameters[key];
    };

    return service;
}]);

angular.module('services.reportAll', [
    'ngResource',
    'ngCookies'
]).factory('Stat', ['$resource', 'serverAddress', '$filter', '$localStorage','$rootScope', 'notificationService', function($resource, serverAddress, $filter, $localStorage, $rootScope, notificationService) {

    var stat = $resource(serverAddress + '/stat/:param', {param: "@param"}
        , {
            getActualVacancyStatistic: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getActualVacancyStatistic'
                }
            },
            getActualVacancyStatistic2: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getActualVacancyStatistic2'
                }
            },
            createVacancyStatisticExcel: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'createVacancyStatisticExcel'
                }
            },
            getRecruiterNowStatistic: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getRecruiterNowStatistic'
                }
            },
            getCountVacancyForActualVacancyStatistic: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getCountVacancyForActualVacancyStatistic'
                }
            },
            getCountInterviewForActualVacancyStatistic: {
                method : "POST",
                headers: {'Content-type':'application/json; charset=UTF-8'},
                params: {
                    param: 'getCountInterviewForActualVacancyStatistic'
                }
            },
            getVacancyListInAccount: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "getVacancyListInAccount"
                }
            },
            getStatisticsByVacancies: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "getStatisticsByVacancies"
                }
            },
            saveCustomVacancyReport: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "saveCustomVacancyReport"
                }
            },
            getCustomVacancyReports: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "getCustomVacancyReports"
                }
            },
            deleteCustomVacancyReport: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "deleteCustomVacancyReport"
                }
            },
            editCustomVacancyReport: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params : {
                    param : "editCustomVacancyReport"
                }
            }
        }),
        data = false;


        stat.requestSaveCustomVacancyReport = function (params){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                stat.saveCustomVacancyReport(params, resp => resolve(resp),error => reject(error));
            });
        };
        stat.requestEditCustomVacancyReport = function (params){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                stat.editCustomVacancyReport(params, resp => resolve(resp),error => reject(error));
            });
        };
        stat.requestGetCustomVacancyReports= function (){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                stat.getCustomVacancyReports(resp => resolve(resp),error => reject(error));
            });
        };
        stat.requestGetActualVacancyStatistic2 = function (params, update){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                if(update && data) return resolve(data);
                stat.getActualVacancyStatistic2(params, resp => {
                    if(resp.status == 'error'){
                        notificationService.error(resp.message);
                        $rootScope.loading = false;
                    }else{
                        if(resp.object.entryList && resp.object.entryList.length > 0){
                            data = resp;
                            resolve(resp, resp['request'] = 'Statistic2');
                        }else{
                            resp.object.entryList = [];
                            resolve(resp, resp['request'] = 'Statistic2');
                        }
                    }
                },error => reject(error));
            });
        };
        stat.requestDeleteCustomVacancyReport = function (params){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                stat.deleteCustomVacancyReport(params, resp => resolve(resp),error => reject(error));
            });
        };
    stat.requestGetCountVacancyForActualVacancyStatistic = function (params){
        $rootScope.loading = true;
        return new Promise((resolve, reject) => {
            stat.getCountVacancyForActualVacancyStatistic(params, resp => resolve(resp,resp['request'] = 'statusesOrCount'),error => reject(error));
        });
    };

    stat.requestGetCountInterviewForActualVacancyStatistic = function (params){
        $rootScope.loading = true;
        return new Promise((resolve, reject) => {
            stat.getCountInterviewForActualVacancyStatistic(params, resp => resolve(resp, resp['request'] = 'stagesOrCount'),error => reject(error));
        });
    };


    return stat;
}]);
 angular.module('services.sticker', [
    'ngResource'
]).factory('Sticker', ['$resource', 'serverAddress', function($resource, serverAddress) {
    return $resource(serverAddress + '/sticker/:param', {param: "@param"},
        {
            all: {
                method: 'POST',
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "get"
                }
            },
            save: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "save"
                }
            }
        });
}]);
angular.module('services.task', [
    'ngResource',
    'ngCookies'
]).factory('Task', ['$resource', 'serverAddress', '$filter', '$localStorage', 'notificationService',
    function ($resource, serverAddress, $filter, $localStorage, notificationService) {

        var Task = $resource(serverAddress + '/task/:param', {param: "@param"},
            {
                add: {
                    method: "PUT",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "add"
                    }
                },
                get: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "get"
                    }
                },
                edit: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "edit"
                    }
                },
                changeState: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "changeState"
                    }
                },
                changeTargetDate: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "changeTargetDate"
                    }
                },
                taskComment: {
                    method: "POST",
                    params: {
                        param: "comment"
                    }
                },
                updateComment: {
                    method: "POST",
                    params: {
                        param: "updateComment"
                    }
                },
                removeComment: {
                    method: "POST",
                    params: {
                        param: "removeComment"
                    }
                },
                getHistory: {
                    method: "POST",
                    params: {
                        param: "getHistory"
                    }
                },
                addResponsible: {
                    method: "POST",
                    params: {
                        param: "addResponsible"
                    }
                },
                removeResponsible: {
                    method: "POST",
                    params: {
                        param: "removeResponsible"
                    }
                }
            });

        Task.task = function($scope, $rootScope, $location, $translate, $uibModal, $route){
            $rootScope.closeTaskModal = function(){
                $rootScope.closeModal();
            };
            $rootScope.saveNewTask = function(){
                if($route.current.$$route.pageName == 'Vacancies'){
                    $rootScope.newTask.vacancyId = $rootScope.vacancy.vacancyId;
                } else if($route.current.$$route.pageName == 'Candidate'){
                    $rootScope.newTask.candidateId = $scope.candidate.candidateId;
                } else if($route.current.$$route.pageName == 'Clients'){
                    $rootScope.newTask.clientId = $rootScope.client.clientId;
                }
                if($rootScope.newTask.title.length > 0) {
                    if($rootScope.newTask.targetDate > 0){
                        angular.forEach($rootScope.responsiblePersonsEdit, function(resp){
                            $rootScope.newTask.responsibleIds.push(resp.userId)
                        });
                        Task.add($rootScope.newTask, function(resp){
                            if(resp.status == 'ok'){
                                $scope.updateTasks();
                                notificationService.success($filter('translate')('Task saved'));
                                $rootScope.newTask.title = '';
                                $rootScope.newTask.text = '';
                                $rootScope.newTask.targetDate = '';
                                $rootScope.newTask.responsibleIds = [];
                                $rootScope.responsiblePersonsEdit = [];
                                $rootScope.newTask.type = 'Task';
                                $('.changeDateNewTask').val("");
                                //$scope.updateTasks();
                                $scope.getLastEvent();
                                $rootScope.closeTaskModal();
                            }else{
                                notificationService.error(resp.message);
                            }
                        })
                    }else{
                        notificationService.error($filter('translate')('Please enter a date'));
                    }
                }else{
                    notificationService.error($filter('translate')('Please enter a title for the task'));
                }
            };
            $rootScope.changeTaskState = function(task){
                $rootScope.editableTask = task;
                Task.changeState({
                    "taskId": task.taskId,
                    "taskState": task.status
                }, function(resp){
                    if(resp.status == 'ok'){
                        if($rootScope.editableTask){
                            $rootScope.editableTask = resp.object;
                        }
                        $rootScope.getHistoryForAllActions();
                        if($route.current.$$route.pageName != 'Activity'){
                            //$scope.updateTasks();
                            $scope.getLastEvent();
                        }
                    }else{
                        notificationService.error(resp.message);
                    }
                })
            };
            $rootScope.editNameTask = function(hideModal){
                if($rootScope.editableTask.title.length > 0){
                    $rootScope.editableTask.responsibleIds = [];
                    angular.forEach($rootScope.responsiblePersons, function(resp){
                        $rootScope.editableTask.responsibleIds.push(resp.userId)
                    });
                    Task.edit({
                        "taskId": $rootScope.editableTask.taskId,
                        "status": $rootScope.editableTask.status,
                        "title":$rootScope.editableTask.title,
                        "text":$rootScope.editableTask.text,
                        "targetDate":$rootScope.editableTask.targetDate,
                        "responsibleIds":$rootScope.editableTask.responsibleIds,
                        "type":$rootScope.editableTask.type
                    }, function(resp){
                        if(resp.status == 'ok'){
                            $rootScope.showEditNameTask = false;
                            $rootScope.showEditTextTask = false;
                            $rootScope.showNewText = false;
                            $scope.standartLength = $rootScope.editableTask.text;
                            $rootScope.editedTaskText = function (text) {
                                if($scope.standartLength != text && $rootScope.editableTask.text.length > 0){
                                    $rootScope.showNewText = true;
                                } else{
                                    $rootScope.showNewText = false;
                                }
                            };
                            $scope.urlTaskId = null;
                            if($route.current.$$route.pageName != 'Activity'){
                                //$scope.updateTasks();
                                $scope.getLastEvent();
                                $rootScope.getMoreHistory();
                                notificationService.success($filter('translate')('Task edited'));
                            } else{
                                $scope.tableParams.reload();
                                $rootScope.getMoreHistory();
                                notificationService.success($filter('translate')('Task edited'));
                            }
                            if(!hideModal){
                                $rootScope.closeModal();
                            }
                        }else{
                            notificationService.error(resp.message);
                        }
                    })
                }else{
                    notificationService.error($filter('translate')('Please enter a title for the task'));
                }
            };
            $rootScope.deleteTask = function(){
                Task.changeState({
                    "taskId": $rootScope.editableTask.taskId,
                    "taskState":'deleted'
                }, function(resp){
                    if(resp.status == 'ok'){
                        if($route.current.$$route.pageName != 'Activity'){
                            $scope.updateTasks();
                            $scope.getLastEvent();
                        } else{
                            $scope.tableParams.reload();
                        }
                        $rootScope.closeModal();
                        $scope.urlTaskId = null;
                        $location.$$absUrl = $location.$$absUrl.split("&")[0];
                        //$scope.$apply();
                    }else{
                        notificationService.error(resp.message);
                    }
                })
            };
            $rootScope.setResponsible = function(responsible){
                Task.addResponsible({
                    "taskId": $rootScope.editableTask.taskId,
                    "userId": responsible.userId
                }, function(resp){
                    if(resp.status == 'ok'){
                        $rootScope.getHistoryForAllActions();
                        if($route.current.$$route.pageName != 'Activity'){
                            //$scope.updateTasks();
                            $scope.getLastEvent();
                        } else{
                            $scope.tableParams.reload();
                        }
                    }else{
                        notificationService.error(resp.message);
                    }
                })
            };
            $rootScope.deletedResponsible = function(responsible){
                Task.removeResponsible({
                    "taskId": $rootScope.editableTask.taskId,
                    "userId": responsible.userId
                }, function(resp){
                    if(resp.status == 'ok'){
                        $rootScope.getHistoryForAllActions();
                        if($route.current.$$route.pageName != 'Activity'){
                            //$scope.updateTasks();
                            $scope.getLastEvent();
                        } else{
                            $scope.tableParams.reload();
                        }
                    }else{
                        notificationService.error(resp.message);
                    }
                })
            };
            $rootScope.addResponsible = function(responsible){
                var i = 0;
                angular.forEach($rootScope.responsiblePersonsEdit, function(resp){
                    if (resp.userId == responsible.userId){
                        i++;
                    }
                });
                if (i > 0){
                    notificationService.error($filter('translate')('This user already responsible for this task'));
                }else{
                    $scope.modalEditTaskToCandidateOpened = true;
                    responsible.notShown = true;
                    $rootScope.responsiblePersonsEdit.unshift(responsible);
                }
            };
            $rootScope.deleteResponsible = function(responsible){
                console.log('length', $rootScope.responsiblePersonsEdit.length);
                if($rootScope.responsiblePersonsEdit.length > 1){
                    angular.forEach($rootScope.responsiblePersonsEdit, function(resp){
                        if (resp.userId == responsible.userId){
                            responsible.notShown = false;
                            $rootScope.responsiblePersonsEdit.splice($rootScope.responsiblePersonsEdit.indexOf(resp), 1);
                        }
                    });
                }else{
                    notificationService.error($filter('translate')('The task must have at least one responsible'));
                }
            };
            $rootScope.addResponsibleInEdit = function(responsible){
                $rootScope.responsiblePersonsEdit = [];
                var i = 0;
                angular.forEach($rootScope.responsiblePersons, function(resp){
                    if (resp.userId == responsible.userId){
                        i++;
                    }
                });
                if (i > 0){
                    notificationService.error($filter('translate')('This user already responsible for this task'));
                }else{
                    $scope.modalEditTaskToCandidateOpened = true;
                    responsible.notShown = true;
                    $rootScope.responsiblePersons.unshift(responsible);
                }
                $rootScope.setResponsible(responsible);
            };
            $rootScope.deleteResponsibleInEdit = function(responsible){
                $rootScope.responsiblePersonsEdit = [];
                if($rootScope.responsiblePersons.length > 1){
                    angular.forEach($rootScope.responsiblePersons, function(resp){
                        if (resp.userId == responsible.userId){
                            responsible.notShown = false;
                            $rootScope.responsiblePersons.splice($rootScope.responsiblePersons.indexOf(resp), 1);
                        }
                    });
                    $rootScope.deletedResponsible(responsible);
                }else{
                    notificationService.error($filter('translate')('The task must have at least one responsible'));
                }
            };
            $scope.modalEditTaskToCandidateOpened = true;
            $scope.showModalEditTaskToCandidate = function (task) {
                $scope.modalEditTaskToCandidateOpened = false;
                $location.$$absUrl = $location.$$absUrl.split("&")[0];
                let newUrl = $location.$$absUrl.split('?')[0];
                $scope.urlDescription = $location.$$absUrl.split('?')[1] ||  $scope.urlDescription;

                $location.$$absUrl = newUrl + '&task=' + task.taskId;
                $rootScope.responsiblePersons = [];
                $rootScope.responsiblePersonsEdit = [];
                $rootScope.historyComment = [];
                $rootScope.historyAction = [];
                $rootScope.editableTask = task;
                $rootScope.showNewText = false;
                $scope.standartLength = $rootScope.editableTask.text;
                $rootScope.editedTaskText = function (text) {
                    if($scope.standartLength != text && $rootScope.editableTask.text.length > 0){
                        $rootScope.showNewText = true;
                    } else{
                        $rootScope.showNewText = false;
                    }
                };
                angular.forEach($rootScope.persons,function(res){
                    res.notShown = false;
                });
                angular.forEach($rootScope.editableTask.responsiblesPerson,function(resp){
                    angular.forEach($rootScope.persons,function(res){
                        if(resp.responsible.userId == res.userId){
                            $rootScope.responsiblePersons.push(res);
                            res.notShown = true;
                            //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                        }
                    });
                });
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/edit-task.html',
                    size: '',
                    scope: $scope,
                    resolve: function(){

                    }
                });
                $scope.modalInstance.closed.then(function() {
                    $scope.modalEditTaskToCandidateOpened = true;
                    $rootScope.responsiblePersons = [];
                    if($scope.urlDescription) {
                        if($location.$$absUrl.indexOf('&task=') == -1) {
                            $location.$$absUrl += '?' + $scope.urlDescription;
                        }  else {
                            $location.$$absUrl = $location.$$absUrl.split('&task=')[0] + '?' + $scope.urlDescription;
                        }

                    }
                });
                $rootScope.getMoreHistory = function(number){
                    Task.getHistory({
                        'taskId': task.taskId,
                        "page": {"number": 0, "count": $rootScope.historyLimit + number}
                    }, function (resp) {
                        if (resp.status == 'ok') {
                            $rootScope.historyLimit = resp.objects !== undefined ? resp.size : null;
                            $rootScope.historyTotal = resp.objects !== undefined ? resp.total : null;
                            if($rootScope.historyTotal < $rootScope.historyLimit){
                                $('.more-history').css('display', 'none');
                            }
                            $rootScope.historyTask = resp.objects;
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                };
                $rootScope.getHistoryForComment = function(){
                    Task.getHistory({
                        'taskId': task.taskId,
                        'type': 'comment'
                    }, function (resp) {
                        if (resp.status == 'ok') {
                            $rootScope.historyComment = [];
                            $(".taskSwitcher").prop( "checked", true );
                            $rootScope.historyTask = resp.objects;
                            angular.forEach($rootScope.historyTask,function(resp){
                                if(resp.type == 'comment'){
                                    $rootScope.historyComment.push(resp);
                                }
                            });
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                };
                $rootScope.getHistoryForAllActions = function(){
                    Task.getHistory({
                        'taskId': task.taskId,
                        "page": {"number": 0, "count": $rootScope.historyLimit}
                    }, function (resp) {
                        if (resp.status == 'ok') {
                            $(".taskSwitcher").prop( "checked", false );
                            $rootScope.historyLimit = resp.objects !== undefined ? resp.size : null;
                            $rootScope.historyTotal = resp.objects !== undefined ? resp.total : null;
                            $rootScope.historyTask = resp.objects;
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                };
                $rootScope.getHistoryForTask = function(val){
                    if(val == 'all actions') {
                        $rootScope.showAllActions = true;
                        $(".taskSwitcher").prop( "checked", true );
                        $rootScope.getHistoryForAllActions();
                    }else if(val == 'comment') {
                        $rootScope.getHistoryForComment();
                        $rootScope.showAllActions = false;
                        $(".taskSwitcher").prop( "checked", false );
                    }else if(val == 'switch') {
                        $rootScope.showAllActions = !$rootScope.showAllActions;
                        if($rootScope.showAllActions == false){
                            $rootScope.getHistoryForComment();
                            $(".taskSwitcher").prop( "checked", true );
                        }else{
                            $rootScope.getHistoryForAllActions();
                            $(".taskSwitcher").prop( "checked", false );
                        }
                    }
                };
                $rootScope.getHistoryForTask('all actions');
                $scope.modalInstance.result.then(function (selectedItem) {
                    //$scope.selected = selectedItem;
                }, function () {
                    $location.$$absUrl = $location.$$absUrl.split("&")[0];
                });
            };
            $scope.showModalEditTask = function (event) {
                if(event){
                    angular.forEach($rootScope.persons,function(res){
                        res.notShown = false;
                    });
                    $rootScope.responsiblePersons = [];
                    $rootScope.editableTaskOuter = event;
                    $rootScope.editableTask = event.task;
                    $rootScope.showNewText = false;
                    $scope.standartLength = $rootScope.editableTask.text;
                    $rootScope.editedTaskText = function (text) {
                        if($scope.standartLength != text && $rootScope.editableTask.text.length > 0){
                            $rootScope.showNewText = true;
                        } else{
                            $rootScope.showNewText = false;
                        }
                    };
                    angular.forEach($rootScope.editableTask.responsiblesPerson,function(resp){
                        angular.forEach($rootScope.persons,function(res){
                            if(resp.responsible.userId == res.userId){
                                $rootScope.responsiblePersons.push(res);
                                res.notShown = true;
                                //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                            }
                        });
                    });
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/edit-task.html',
                        size: '',
                        scope: $scope,
                        resolve: function(){

                        }
                    });
                    $rootScope.getMoreHistory = function(number){
                        Task.getHistory({
                            'taskId': $rootScope.editableTask.taskId,
                            "page": {"number": 0, "count": $rootScope.historyLimit + number}
                        }, function (resp) {
                            if (resp.status == 'ok') {
                                $rootScope.historyLimit = resp.objects !== undefined ? resp.size : null;
                                $rootScope.historyTotal = resp.objects !== undefined ? resp.total : null;
                                if($rootScope.historyTotal < $rootScope.historyLimit){
                                    $('.more-history').css('display', 'none');
                                }
                                $rootScope.historyTask = resp.objects;
                            }else{
                                notificationService.error(resp.message);
                            }
                        });
                    };
                    $rootScope.getHistoryForComment = function(){
                        Task.getHistory({
                            'taskId': $rootScope.editableTask.taskId,
                            'type': 'comment'
                        }, function (resp) {
                            if (resp.status == 'ok') {
                                $rootScope.historyComment = [];
                                $(".taskSwitcher").prop( "checked", true );
                                $rootScope.historyTask = resp.objects;
                                angular.forEach($rootScope.historyTask,function(resp){
                                    if(resp.type == 'comment'){
                                        $rootScope.historyComment.push(resp);
                                    }
                                });
                            }else{
                                notificationService.error(resp.message);
                            }
                        });
                    };
                    $rootScope.getHistoryForAllActions = function(){
                        Task.getHistory({
                            'taskId': $rootScope.editableTask.taskId,
                            "page": {"number": 0, "count": $rootScope.historyLimit}
                        }, function (resp) {
                            if (resp.status == 'ok') {
                                $(".taskSwitcher").prop( "checked", false );
                                $rootScope.historyLimit = resp.objects !== undefined ? resp.size : null;
                                $rootScope.historyTotal = resp.objects !== undefined ? resp.total : null;
                                $rootScope.historyTask = resp.objects;
                            }else{
                                notificationService.error(resp.message);
                            }
                        });
                    };
                    $rootScope.getHistoryForTask = function(val){
                        if(val == 'all actions') {
                            $rootScope.showAllActions = true;
                            $(".taskSwitcher").prop( "checked", true );
                            $rootScope.getHistoryForAllActions();
                        }else if(val == 'comment') {
                            $rootScope.getHistoryForComment();
                            $rootScope.showAllActions = false;
                            $(".taskSwitcher").prop( "checked", false );
                        }else if(val == 'switch') {
                            $rootScope.showAllActions = !$rootScope.showAllActions;
                            if($rootScope.showAllActions == false){
                                $rootScope.getHistoryForComment();
                                $(".taskSwitcher").prop( "checked", true );
                            }else{
                                $rootScope.getHistoryForAllActions();
                                $(".taskSwitcher").prop( "checked", false );
                            }
                        }
                    };
                    $rootScope.getHistoryForTask('all actions');
                    $rootScope.changeTaskState = function(task){
                        $rootScope.editableTask = task;
                        Task.changeState({
                            "taskId": task.taskId,
                            "taskState": task.status
                        }, function(resp){
                            if(resp.status == 'ok'){
                                if($rootScope.editableTask){
                                    $rootScope.editableTask = resp.object;
                                }
                                $rootScope.getHistoryForAllActions();
                                if($route.current.$$route.pageName != 'Activity'){
                                    $scope.updateTasks();
                                    $scope.getLastEvent();
                                } else{
                                    $scope.tableParams.reload();
                                }
                            }else{
                                notificationService.error(resp.message);
                            }
                        })
                    };

                }
            };
            $rootScope.addCommentForTask = function(){
                if($("#addComment").val().length > 0){
                    Task.taskComment({
                        taskId: $rootScope.editableTask.taskId,
                        comment: $rootScope.addComment.comment
                    },function(resp){
                        if(resp.status == 'ok'){
                            $rootScope.historyComment = [];
                            $rootScope.historyTask = resp.object;
                            $rootScope.addComment.comment = '';
                            if($rootScope.showAllActions = true){
                                $rootScope.getHistoryForAllActions();
                             }else{
                                $rootScope.getHistoryForComment();
                            }
                            $(".taskSwitcher").prop( "checked", true );
                            notificationService.success($filter('translate')('Comment added'));
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                }else{
                    notificationService.error($filter('translate')('write_a_comment'));
                }
            };
            $rootScope.updateCommentForTask = function(comment, taskId, taskActionId){
                if($("#addComment2").val().length > 0){
                    Task.updateComment({
                        taskId: taskId,
                        comment: comment,
                        taskActionId: taskActionId
                    },function(resp){
                        if(resp.status == 'ok'){
                            taskActionId.showTxtArea = false;
                            if($rootScope.showAllActions = true){
                                $rootScope.getHistoryForAllActions();
                            }else{
                                $rootScope.getHistoryForComment();
                            }
                            $rootScope.historyTask = resp.object;
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                }else{
                    notificationService.error($filter('translate')('write_a_comment'));
                }
            };
            $rootScope.deleteCommentForTask = function (taskId, taskActionId) {
                Task.removeComment({
                    taskId: taskId,
                    taskActionId: taskActionId
                },function(resp){
                    if(resp.status == 'ok'){
                        $rootScope.historyTask = resp.object;
                        if($rootScope.showAllActions = true){
                            $rootScope.getHistoryForAllActions();
                        }else{
                            $rootScope.getHistoryForComment();
                        }
                        notificationService.success($filter('translate')('Comment removed'));
                    } else{
                        notificationService.error(resp.message);
                    }
                });
            };
        };
        return Task;
    }]);
angular.module('services.testsService', [
    'ngResource'
]).factory('Test', ['$resource', 'serverAddress', "$http", function($resource, serverAddress, $http) {
    var options;

    var test = $resource(serverAddress + '/test/:param', {param: "@param"}
        , {
            saveTest: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "saveTest"
                }
            },
            getTest: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTest"
                }
            },
            getTests: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getTests"
                }
            },
            getAppointments: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getAppointments"
                }
            },
            getAppointment: {
                method: "GET",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "getAppointment"
                }
            },
            deleteTest: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "deleteTest"
                }
            },
            sendTest: {
                method: "POST",
                params: {
                    param: "sendTest"
                }
            },
            editAnswer: {
                method: "POST",
                params: {
                    param: "editAnswer"
                }
            },
            editAppointment: {
                method: "POST",
                params: {
                    param: "editAppointment"
                }
            },
            startTest: {
                method: "POST",
                params: {
                    param: "startTest"
                }
            },
            endAppointment: {
                method: "POST",
                params: {
                    param: "endAppointment"
                }
            },
            openTest: {
                method: "GET",
                params: {
                    param: "openTest"
                }
            },
            saveAnswer: {
                method: "POST",
                params: {
                    param: "saveAnswer"
                }
            },
            getTestsQuestion: {
                method: "POST",
                params: {
                    param: "getTestsQuestion"
                }
            },
            saveImage: {
                method: "POST",
                params: {
                    param: "saveImage"
                }
            },
            autocompleteTest: {
                method: "POST",
                params: {
                    param: "autocompleteTest"
                }
            }
        });
    test.uploadTestQuestionLogo = function(fileUp){
        var FD  = new FormData();
        var blobBin = atob(fileUp.split(',')[1]);
        var array = [];
        for(var i = 0; i < blobBin.length; i++) {
            array.push(blobBin.charCodeAt(i));
        }
        var file=new Blob([new Uint8Array(array)], {type: 'image/png'});
        FD.append('image', file);
        return $http({
            url: serverAddress + "/test/saveImage",
            method: 'POST',
            data: FD,
            withCredentials: true,
            headers: { 'Content-Type': undefined},
            transformRequest: angular.identity
        });
    };
    return test;
}]);

var module = angular.module('services.tooltip', []);
module.factory('TooltipService', function($sce, $rootScope, $translate, $filter) {
    return{
        createTooltips: function(){
            var options;
            $rootScope.$on('$translateChangeSuccess', function () {
                options = {
                    "toolTipForNewClient":  $sce.trustAsHtml($filter('translate')('Client is an organization, department or project with a list of vacancies to be filled') + '</br></br>'
                        + $filter('translate')('To add a vacancy, you need to create a Client first')+ '</br></br>'
                        + $filter('translate')("Fill Clients; profiles and you will be able to see their active/inactive vacancies' list, description, contacts, status, attachments, and responsible users")+ '</br></br>'
                        + $filter('translate')('Also, you can add tasks and comments for Clients')),
                    "scopeTooltip":  $sce.trustAsHtml($filter('translate')('Set the scope of visible data (vacancies, candidates, clients and users) in your interface: region, responsibility and company (if you have more than one CleverStaff account)')),
                    "addTabFacebook":  $sce.trustAsHtml($filter('translate')('Create a ‘Jobs’ tab on your company Facebook page and publish active vacancies from your CleverStaff account') + '</br></br>'
                        + $filter('translate')('NOTE: As a Facebook API has one-end integration, you should re-publish your vacancies if you want to change them') + '</br></br>'
                        + '<img src="images/sprite/download_27.6.2016_in_12_19_54.png" alt=""/>'),
                    "describeAdmin": $sce.trustAsHtml($filter('translate')("Full control on a company account. Able to manage users, clients, vacancies, and candidates. Paid user")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "describeRecruiter": $sce.trustAsHtml($filter('translate')("Able to manage clients, vacancies and candidates. Paid user")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "describeClient": $sce.trustAsHtml($filter('translate')("Has an access only to vacancies and candidates he/she is responsible for. Free user, unlimited number")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "describeSalesmanager": $sce.trustAsHtml($filter('translate')("Able to manage clients and vacancies he/she is responsible for. Paid user")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "describeFreelancer": $sce.trustAsHtml($filter('translate')("Cannot see the full database. Able to manage only clients, vacancies, and candidates he/she is responsible for. Paid user")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "describeResearcher": $sce.trustAsHtml($filter('translate')("Cannot see the full database and other users. Able to see only vacancies he/she responsible for and candidates he/she added. Paid user")+'<br/></br>' + $filter('translate')("Your role at your company account could be changed only by Administrator")),
                    "addContactInvite": $sce.trustAsHtml($filter('translate')("Has an access only to vacancies and candidates he/she is responsible for. Free user, unlimited number")),
                    "unlinkProfile": $sce.trustAsHtml($filter('translate')("When you add a candidate from LinkedIn / job boards, you merge data from these sources to a candidate profile at CleverStaff.") + '<br/></br>' + $filter('translate')("To unlinck the candidate from his/her CleverStaff profile click on the appropriate icon when pointing on the 'Linked profiles'.")),
                    "fbNewsModal": $sce.trustAsHtml($filter('translate')("This is a notification for important news you should know as our user") + '<br/></br>' + $filter('translate')("To close the notification please click the button below")),
                    "candidateMerge":  $sce.trustAsHtml($filter('translate')("Use this feature to merge two candidate profiles.") + '</br>' + $filter('translate')("Choose files and correct data from both profiles in 1 click or enter new data yourself.")),
                    "timeLimit": $sce.trustAsHtml($filter('translate')("You can limit the time for passing the test.") + '</br>' + $filter('translate')("The timer will start since a candidate clicks on the 'Start test' button.") + '</br>' + $filter('translate')("If the time flies before candidates finishes the test, all filled fields will be saved.")),
                    "changePoints": $sce.trustAsHtml($filter('translate')("Enter a numeric value from 0 to 1000.") + '</br>' + $filter('translate')("This field is not obligatory.")),
                    "statCandidateAdded": $sce.trustAsHtml($filter('translate')("The left number shows candidates added by each user and the % of all added candidates in this account.") + '</br>' + $filter('translate')("The right number shows candidates without name/contacts and the % of all candidates added by this user.")),
                    "showTooltipTrial" : $sce.trustAsHtml($filter('translate')("Days left until your trial expires") + '</br>' + $filter('translate')("All features are unlimited within your trial. You could invite unlimited number of users to test the system.") + '</br>' +  $filter('translate')('If your account will not be paid until trial end date:') + '</br>'
                        + '<ul>' + '<li>' + $filter('translate')("it will be automatically changed to ‘1 RECRUITER’ plan with limited features;") + '</li>' + '<li>' + $filter('translate')("all invited users will be blocked until account is paid.") +'</li>'+'</ul>'),
                    "statisticTooltip": $sce.trustAsHtml($filter('translate')('\'Statistics\' report shows the results of every account user: the quantity and the percentage of added candidates, vacancies, interviews, an average time to fill a vacancy for a specific time period.')),
                    "mailingTopic": $sce.trustAsHtml('Your letter topic, receiver will read in his Inbox'),
                    "toolTipForTestResults": $sce.trustAsHtml($filter('translate')('Percentile shows the percent of candidates, who received fewer points for passing the test, than a specific candidate with the percentile value')),
                    "mailingInternal": $sce.trustAsHtml('Mailing name for your internal usage. Visible only for you.')
                };
                $rootScope.tooltips = options;
            });
        }
    }
});
angular.module('services.translateWords', [
    'ngResource',
    'ngCookies'
]).factory('translateWords', ['$resource', 'serverAddress', '$filter', '$localStorage','$rootScope','$translate', function($resource, serverAddress, $filter, $localStorage, $rootScope,  $translate) {

    class Translate{
        constructor(){
        }
        getTranslete(str, $csope, name, ifTranslateForTitlePage){
            $csope[name] = $translate.instant(str);
            $rootScope.$on('$translateChangeSuccess', ()=> {
                if(ifTranslateForTitlePage){
                    $csope[name] = $translate.instant(str) + " | CleverStaff";
                }else{
                    $csope[name] = $translate.instant(str);
                }
            });
        }
    }
    const translate = new Translate();

    return translate;
}]);
 angular.module('services.transliteration', []).factory('transliteration', function() {
    var transl = [];
    transl['А'] = 'A';
    transl['а'] = 'a';
    transl['Б'] = 'B';
    transl['б'] = 'b';
    transl['В'] = 'V';
    transl['в'] = 'v';
    transl['Г'] = 'G';
    transl['г'] = 'g';
    transl['Д'] = 'D';
    transl['д'] = 'd';
    transl['Е'] = 'E';
    transl['е'] = 'e';
    transl['Ё'] = 'Yo';
    transl['ё'] = 'yo';
    transl['Ж'] = 'Zh';
    transl['ж'] = 'zh';
    transl['З'] = 'Z';
    transl['з'] = 'z';
    transl['И'] = 'I';
    transl['и'] = 'i';
    transl['Й'] = 'J';
    transl['й'] = 'j';
    transl['К'] = 'K';
    transl['к'] = 'k';
    transl['Л'] = 'L';
    transl['л'] = 'l';
    transl['М'] = 'M';
    transl['м'] = 'm';
    transl['Н'] = 'N';
    transl['н'] = 'n';
    transl['О'] = 'O';
    transl['о'] = 'o';
    transl['П'] = 'P';
    transl['п'] = 'p';
    transl['Р'] = 'R';
    transl['р'] = 'r';
    transl['С'] = 'S';
    transl['с'] = 's';
    transl['Т'] = 'T';
    transl['т'] = 't';
    transl['У'] = 'U';
    transl['у'] = 'u';
    transl['Ф'] = 'F';
    transl['ф'] = 'f';
    transl['Х'] = 'X';
    transl['х'] = 'x';
    transl['Ц'] = 'C';
    transl['ц'] = 'c';
    transl['Ч'] = 'Ch';
    transl['ч'] = 'ch';
    transl['Ш'] = 'Sh';
    transl['ш'] = 'sh';
    transl['Щ'] = 'Shh';
    transl['щ'] = 'shh';
    transl['Ъ'] = '"';
    transl['ъ'] = '"';
    transl['Ы'] = 'Y\'';
    transl['ы'] = 'y\'';
    transl['Ь'] = '\'';
    transl['ь'] = '\'';
    transl['Э'] = 'E\'';
    transl['э'] = 'e\'';
    transl['Ю'] = 'Yu';
    transl['ю'] = 'yu';
    transl['Я'] = 'Ya';
    transl['я'] = 'ya';
    transl['І'] = 'I';
    transl['і'] = 'i';
    transl['Ї'] = 'I';
    transl['ї'] = 'I';
    transl['\\'] = '_';
    transl['/'] = '_';
    return {
        getArray: function() {
            return transl;
        }
    };
});
angular.module('services.company', [
    'ngResource',
    'ngCookies'
]).factory('Company', ['$resource', 'serverAddress', '$filter', '$localStorage', 'notificationService', '$http', 'Service', "$rootScope",
    function ($resource, serverAddress, $filter, $localStorage, notificationService, $http, Service, $rootScope) {
    var options;

    var company = $resource(serverAddress + '/company/:param', {param: "@param"},
        {
            removeLogo: {
                method: "POST",
                headers: {'Content-type': 'application/json; charset=UTF-8'},
                params: {
                    param: "removeLogo"
                }
            },
            addLogo: {
                method: "POST",
                headers: {'Content-type': undefined, 'contentDisposition': 'form-data'},
                params: {
                    param: "addLogo"
                }
            },
            getParam: {
                method: "GET",
                params: {
                    param: "getParam"
                }
            },
            getParams: {
                method: "GET",
                params: {
                    param: "getParams"
                }
            },
            getInfo: {
                method: "GET",
                params: {
                    param: "getInfo"
                }
            },
            setDefaultInterviewStates: {
                method: "GET",
                params: {
                    param: "setDefaultInterviewStates"
                }
            },
            orgPages: {
                method: "GET",
                params: {
                    param: "orgPages"
                }
            },
            addFacebookPage: {
                method: "POST",
                params: {
                    param: "addFacebookPage"
                }
            },
            deleteFacebookPage: {
                method: "GET",
                params: {
                    param: "deleteFacebookPage"
                }
            },
            setParam: {
                method: "GET",
                params: {
                    param: "setParam"
                }
            }
        });

    company.init = function () {

        options = {
            "logo": null
        };
    };

        company.openVacancies = {};

        company.uploadCompanyLogo = function(fileUp){
            var FD  = new FormData();
            var blobBin = atob(fileUp.split(',')[1]);
            var array = [];
            for(var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }
            var file=new Blob([new Uint8Array(array)], {type: 'image/png'});
            FD.append('image', file);
            return $http({
                url: serverAddress + "/company/addLogo",
                method: 'POST',
                data: FD,
                headers: { 'Content-Type': undefined},
                transformRequest: angular.identity
            });
        };

        company.requestGetInfo = function (params) {
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                company.getInfo(params, resp => resolve(resp), error => reject(error));
            });
        };


        company.getAllOpenVacancies = function(string) {
            return new Promise((resolve,reject) => {
                if(angular.equals(this.openVacancies, {})){
                    Service.getAllOpenVacancy({
                        alias: string
                    },(resp) => {
                        if(resp.status == 'ok'){
                            this.openVacancies = resp;
                            resolve(resp);
                        } else {
                            reject(resp.messsage);
                        }
                    });
                } else {
                    resolve(this.openVacancies)
                }
            });
        };

    company.init();
    return company;
}]);

angular.module('services.vacancy', [
    'ngResource'
]).factory('Vacancy', ['$resource', 'serverAddress','$rootScope', function($resource, serverAddress, $rootScope) {
    var options;
    var vacancy = $resource(serverAddress + '/vacancy/:param', {param: "@param"}, {
        all: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "get"
            }
        },
        add: {
            method: "PUT",
            params: {
                param: "add"
            }
        },
        setInterviewStatus: {
            method: "POST",
            params: {
                param: "setInterviewStatus"
            }
        },
        edit: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "edit"
            }
        },
        one: {
            method: "GET",
            params: {
                param: "get"
            }
        },
        editInterview: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "changeInterview"
            }
        },
        addInterview: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "setInterview"
            }
        },
        addResponsible: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "setResponsible"
            }
        },
        removeResponsible: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "removeResponsible"
            }
        },
        changeState: {
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            method: "POST",
            params: {
                param: "changeState"
            }
        },
        addFile: {
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            method: "POST",
            params: {
                param: "addFile"
            }
        },
        removeFile: {
            method: "GET",
            params: {
                param: "removeFile"
            }
        },
        recalls: {
            method: "GET",
            params: {
                param: "recalls"
            }
        },
        oneRecall: {
            method: "GET",
            params: {
                param: "recall"
            }
        },
        getEvents: {
            method: "POST",
            params: {
                param: "getEvents"
            }
        },
        recallRewieved: {
            method: "GET",
            params: {
                param: "recallRewieved"
            }
        },
        setMessage: {
            method: "POST",
            params: {
                param: "setMessage"
            }
        },
        addFileFromCache: {
            method: "GET",
            params: {
                param: "addFile"
            }
        },
        addPublish: {
            method: "GET",
            params: {
                param: "addPublish"
            }
        },
        deletePublish: {
            method: "GET",
            params: {
                param: "deletePublish"
            }
        },
        getAdvices: {
            method: "GET",
            params: {
                param: "getAdvices"
            }
        },
        changeInterviewDate: {
            method: "POST",
            params: {
                param: "changeInterviewDate"
            }
        },
        sendInterviewCreateMail: {
            method: "POST",
            params: {
                param: "sendInterviewCreateMail"
            }
        },
        sendInterviewUpdateMail: {
            method: "POST",
            params: {
                param: "sendInterviewUpdateMail"
            }
        },
        getVacancyExampleForLogoDemo: {
            method: "GET",
            params: {
                param: "getVacancyExampleForLogoDemo"
            }
        },
        removeInterview: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "removeInterview"
            }
        },
        setMessageToCandidate: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "messageInterview"
            }
        },
        changeInterviewEmployeeDetail: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "changeInterviewEmployeeDetail"
            }
        },
        getWithLastAction: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "getWithLastAction"
            }
        },
        getCandidatesInStages: {
            method: "POST",
            headers: {'Content-type': 'application/json; charset=UTF-8'},
            params: {
                param: "interview/get"
            }
        },
        getCounts: {
            method: "GET",
            params: {
                param: "interview/getCounts"
            }
        },
        setInterviewList: {
            method: "POST",
            params: {
                param: "setInterviewList"
            }
        },
        hideState:{
            method:"GET",
            params:{
                param:'hideState'
            }
        },
        openHideState:{
            method:"GET",
            params:{
                param:'openHideState'
            }
        }
    });

    vacancy.requestHideState = function (params){
        $rootScope.loading = true;

        return new Promise((resolve, reject) => {
            vacancy.hideState(params, resp => resolve(resp),error => reject(error));
        });
    };

    vacancy.requestOpenHideState = function (params){
        $rootScope.loading = true;

        return new Promise((resolve, reject) => {
            vacancy.openHideState(params, resp => resolve(resp),error => reject(error));
        });
    };

    vacancy.interviewStatusNew = function() {
        return [
            {
                vacancyType: "simpleVacancy",
                used: true,
                status: [
                    {
                        value: "longlist",
                        forHistory: false,
                        withDate: false,
                        defaultS: true,
                        single: false,
                        added: true,
                        active_color: "longlist_color",
                        count: 0,
                        forAdd: true,
                        googleCalendarPrefix:"",
                        movable: false
                    },
                    {
                        value: "shortlist",
                        forHistory: false,
                        withDate: false,
                        defaultS: false,
                        single: false,
                        added: true,
                        active_color: "shortlist_color",
                        count: 0,
                        forAdd: true,
                        movable: true
                    },
                    {
                        value: "test_task",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        single: true,
                        added: false,
                        count: 0,
                        forAdd: false,
                        movable: true
                    },

                    {
                        value: "interview",
                        forHistory: true,
                        withDate: true,
                        defaultS: false,
                        single: true,
                        added: true,
                        active_color: "interview_color",
                        count: 0,
                        forAdd: true,
                        movable: true
                    },
                    {
                        value: "interview_with_the_boss",
                        forHistory: true,
                        withDate: true,
                        single: false,
                        defaultS: false,
                        added: false,
                        count: 0,
                        forAdd: false,
                        movable: true
                    },

                    {
                        value: "security_check",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        single: false,
                        added: false,
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "tech_screen",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "hr_interview",
                        forHistory: true,
                        withDate: true,
                        defaultS: false,
                        added: false,
                        single: true,
                        active_color: "interview_color",
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "tech_interview",
                        forHistory: true,
                        withDate: true,
                        defaultS: false,
                        added: false,
                        single: true,
                        active_color: "interview_color",
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "interview_with_the_client",
                        forHistory: true,
                        withDate: true,
                        defaultS: false,
                        single: true,
                        added: false,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "sent_offer",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        active_color: "interview_color",
                        count: 0,
                        forAdd: false,
                        movable: true
                    },
                    {
                        value: "accept_offer",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        active_color: "interview_color",
                        count: 0,
                        forAdd: false,
                        movable: true
                    },

                    {
                        value: "approved",
                        forHistory: false,
                        withDate: false,
                        defaultS: true,
                        single: false,
                        added: true,
                        active_color: "approved_color",
                        count: 0,
                        forAdd: false,
                        movable: false
                    },
                    {
                        value: "notafit",
                        forHistory: false,
                        withDate: false,
                        defaultS: false,
                        single: false,
                        added: true,
                        active_color: "notafit_color",
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "declinedoffer",
                        forHistory: false,
                        withDate: false,
                        defaultS: false,
                        single: false,
                        added: true,
                        active_color: "declinedoffer_color",
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "no_response",
                        forHistory: false,
                        withDate: false,
                        defaultS: false,
                        added: true,
                        single: false,
                        active_color: "no_response_color",
                        count: 0,
                        forAdd: true,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "no_contacts",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "is_not_looking_for_job",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "accepted_counter_offer",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    },
                    {
                        value: "found_another_job",
                        forHistory: true,
                        withDate: false,
                        defaultS: false,
                        added: false,
                        single: true,
                        isEnclosed: true,
                        count: 0,
                        forAdd: false,
                        movable: false,
                        type: 'refuse'
                    }
                ]
            },
            //{
            //    vacancyType: "itVacancy",
            //    used: false,
            //    status: [
            //        {
            //            value: "longlist",
            //            forHistory: false,
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "longlist_color",
            //            count: 0,
            //            forAdd: true,
            //            movable: false
            //        },
            //        {
            //            value: "shortlist",
            //            forHistory: false,
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "shortlist_color",
            //            count: 0,
            //            forAdd: true,
            //            movable: true
            //        },
            //        {
            //            value: "tech_screen",
            //            forHistory: true,
            //            withDate: false,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            isEnclosed: true,
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "test_task",
            //            forHistory: true,
            //            withDate: false,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            isEnclosed: true,
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "hr_interview",
            //            forHistory: true,
            //            withDate: true,
            //            defaultS: true,
            //            added: true,
            //            single: true,
            //            useAnimation: false,
            //            active_color: "interview_color",
            //            count: 0,
            //            forAdd: true,
            //            movable: true
            //        },
            //        {
            //            value: "tech_interview",
            //            forHistory: true,
            //            withDate: true,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            active_color: "interview_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "interview_with_the_client",
            //            forHistory: true,
            //            withDate: true,
            //            defaultS: false,
            //            single: true,
            //            added: false,
            //            useAnimation: false,
            //            isEnclosed: true,
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "sent_offer",
            //            forHistory: true,
            //            withDate: false,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            active_color: "interview_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "accept_offer",
            //            forHistory: true,
            //            withDate: false,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            active_color: "interview_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: true
            //        },
            //        {
            //            value: "approved",
            //            forHistory: false,
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "approved_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: false
            //        },
            //        {
            //            value: "notafit",
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "notafit_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: false
            //        },
            //        {
            //            value: "declinedoffer",
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "declinedoffer_color",
            //            count: 0,
            //            forAdd: false,
            //            movable: false
            //        },
            //        {
            //            value: "no_response",
            //            forHistory: false,
            //            withDate: false,
            //            defaultS: true,
            //            added: true,
            //            single: false,
            //            useAnimation: false,
            //            active_color: "no_response_color",
            //            count: 0,
            //            forAdd: true,
            //            movable: false
            //        },
            //        {
            //            value: "no_contacts",
            //            forHistory: true,
            //            withDate: false,
            //            defaultS: false,
            //            added: false,
            //            single: true,
            //            useAnimation: false,
            //            active_color: "no_contacts",
            //            isEnclosed: true,
            //            count: 0,
            //            forAdd: false,
            //            movable: false
            //        }
            //    ]
            //}
        ]
    };
    vacancy.standardInterviewStatus = function(type) {
        var cand;
        if (type == 'simple_vacancy') {
            cand = [
                {value: "longlist", active_color: "longlist_color", name: "long_list"},
                {value: "shortlist", active_color: "shortlist_color", name: "short_list"},
                {value: "interview", active_color: "interview_color", name: "interview"},
                {value: "approved", active_color: "approved_color", name: "approved"},
                {value: "notafit", active_color: "notafit_color", name: "not_a_fit"},
                {value: "declinedoffer", active_color: "declinedoffer_color", name: "declined_offer"}
            ]
        } else if (type == 'it_vacancy') {
            cand = [
                {value: "longlist", active_color: "longlist_color", name: "long_list"},
                {value: "shortlist", active_color: "shortlist_color", name: "short_list"},
                {value: "tech_interview", active_color: "interview_color", name: "tech_interview"},
                {value: "hr_interview", active_color: "interview_color", name: "hr_interview"},
                {value: "job_offer", active_color: "interview_color", name: "job_offer"},
                {value: "approved", active_color: "approved_color", name: "approved"},
                {value: "notafit", active_color: "notafit_color", name: "not_a_fit"},
                {value: "declinedoffer", active_color: "declinedoffer_color", name: "declined_offer"}
            ]
        }
        return cand;

    };

    vacancy.getInterviewStatus = function() {
        return [
            {name: "Long list", value: "longlist"},
            {name: "Short list", value: "shortlist"},
            {name: "Interview", value: "interview"}
        ];
    };

    vacancy.getInterviewStatusFull = function() {
        return [
            {name: "Long list", value: "longlist"},
            {name: "Short list", value: "shortlist"},
            {name: "Interview", value: "interview"},
            {name: "notafit", value: "notafit"},
            {name: "declinedoffer", value: "declinedoffer"},
        ];
    };


    vacancy.status = function() {
        return [
            {value: "open", name: "open"},
            {value: "expects", name: "wait"},
            {value: "inwork", name: "in work"},
            {value: "replacement", name: "replacement"},
            {value: "payment", name: "payment"},
            {value: "completed", name: "completed"},
            {value: "canceled", name: "canceled"},
            {value: "deleted", name: "deleted"}
        ];
    };

    vacancy.getStatusAssociated = function() {
        return {
            "open": "open",
            "expects": "wait",
            "inwork": "in work",
            "payment": "payment",
            "completed": "completed",
            "canceled": "canceled",
            "deleted": "deleted"
        };
    };

    vacancy.searchOptions = function() {
        return options;
    };
    vacancy.setOptions = function(name, value) {
        options[name] = value;
    };
    vacancy.init = function() {
        options = {
            "state": null,
            "id": null,
            "creator": null,
            "regions": null,
            "org": null,
            "responsible": null,
            "city": null,
            "country": null,
            "personId": null,
            "ids": null,
            "page": {"number": 0, "count": 100},
            "words": null,
            "position": null,
            "clientId": null,
            "salaryFrom": null,
            "salaryTo": null
        };
    };
    vacancy.init();
    return vacancy;
}
]);
angular.module('services.vacancyStages', [
    'ngResource',
    'ngCookies'
]).factory('vacancyStages', ['$resource', 'serverAddress', '$filter', '$localStorage', 'notificationService','$rootScope',
    function ($resource, serverAddress, $filter, $localStorage, notificationService, $rootScope) {

        var vacancyStages = $resource(serverAddress + '/interviewState/:param', {param: "@param"},
            {
                add: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "add"
                    }
                },
                get: {
                    method: "GET",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "get"
                    }
                },
                edit: {
                    method: "POST",
                    headers: {'Content-type': 'application/json; charset=UTF-8'},
                    params: {
                        param: "edit"
                    }
                }
            });
        vacancyStages.requestVacancyStages = function (params){
            $rootScope.loading = true;
            return new Promise((resolve, reject) => {
                vacancyStages.get(params, resp => resolve(resp, resp.request = 'stageFull'),error => reject(error));
            });
        };
        return vacancyStages;
    }]);

angular.module('services', [
        'services.cacheCandidates',
        'services.candidate',
        'services.checkAccess',
        'services.client',
        'services.contacts',
        'services.fileinit',
        'services.globalService',
        'services.localStorage',
        'services.notice',
        'services.person',
        'services.sticker',
        'services.efficiency',
        'services.statistic',
        'services.transliteration',
        'services.testsService',
        'services.vacancy',
        'services.company',
        'services.candidateGroup',
        'services.scope',
        'services.employee',
        'services.action',
        'services.vacancyStages',
        'services.reportAll',
        'services.task',
        'services.file',
        'services.mail',
        'services.account',
        'services.interceptorHandler',
        'services.achieve',
        'services.pay',
        'services.news',
        'services.tooltip',
        'services.customField',
        'services.translateWords',
        'services.CustomReportsService',
        'services.CustomReportEditService'
    ]
);


angular.module('constant', []).constant('serverAddress', '/hr').constant('frontMode', 'war');
angular.module('RecruitingApp', [
    'ngRoute',
    'ngCookies',
    'RecruitingApp.filters',
    'services',
    'RecruitingApp.directives',
    'ngTable',
    'once',
    "infinite-scroll",
    'oi.file',
    'oi.list',
    'ui.tinymce',
    'ui.notify',
    'LocalStorageModule',
    'pascalprecht.translate',
    'pasvaz.bindonce',
    'tmh.dynamicLocale',
    'uiGmapgoogle-maps',
    'googlechart',
    'googleApi',
    'controller',
    'constant',
    'ng-sortable',
    'angulartics',
    'angulartics.google.analytics',
    'ngQuickDate',
    'ui.bootstrap',
    'outlookApi'
]).config(['$routeProvider', '$locationProvider','$analyticsProvider', function ($routeProvider, $locationProvider, $analyticsProvider) {
    var universalResolves = {
        app: function ($q, $rootScope, $location, $route, $http, serverAddress,$filter, notificationService) {
            var defer = $q.defer();
            SecurityFilter($rootScope, defer, $location, $route, $http, serverAddress,$filter, notificationService);
            return defer.promise;
        }
    };
    var customRouteProvider = angular.extend({}, $routeProvider, {
        when: function (path, route) {
            route.resolve = (route.resolve) ? route.resolve : {};
            angular.extend(route.resolve, universalResolves);
            $routeProvider.when(path, route);
            return this;
        }
    });
    customRouteProvider
        .when('/organizer', {
            templateUrl: 'partials/future.html',
            title: 'Organizer',
            controller: 'ActivityFutureController',
            pageName: "Activity"
        })
        .when('/organizer/calendar', {
            templateUrl: 'partials/GoogleCalendar.html',
            title: 'Google Calendar',
            controller: 'ActivityCalendarController',
            pageName: "Activity Calendar"
        }).when('/efficiency', {
            templateUrl: 'partials/efficiency.html',
            title: 'Efficiency',
            controller: 'EfficiencyController',
            pageName: "Efficiency"
        })
        .when('/reports/statistics', {
            templateUrl: 'partials/statistics.html',
            title: 'statistics',
            controller: 'ActivityStatisticsController',
            pageName: "Statistics client"
        })
        .when('/company/settings/:param', {
            templateUrl: 'partials/companysettings.html',
            title: 'Company settings',
            controller: 'ActivityCompanySettingsController',
            pageName: "Company settings"
        })
        .when('/company/settings', {
            templateUrl: 'partials/companysettings.html',
            title: 'Company settings',
            controller: 'ActivityCompanySettingsController',
            pageName: "Company settings"
        })
        .when('/clients/statistics', {
            title: 'Clients',
            templateUrl: 'partials/statisticsС.html',
            controller: "ClientsStatisticsController",
            pageName: "Statistics client"
        }).when('/company/history', {
            templateUrl: 'partials/history.html',
            title: 'Activity History',
            controller: 'ActivityGlobalHistoryController',
            pageName: "Company History"
        }).when('/notices', {
            templateUrl: 'partials/notices.html',
            title: 'Notifications',
            controller: 'ActivityNoticesController',
            pageName: "ActivityNotice"
        }).when('/candidates', {
            title: 'Candidates',
            templateUrl: 'partials/candidates.html',
            controller: "CandidateController",
            pageName: "Candidates"
        })
        .when('/notifications', {
            title: "Email_notifications",
            templateUrl: 'partials/notification.html',
            controller: "NotificationController",
            pageName: "Notification"
        })
        //.when('/pay', {
        //    title: 'pay',
        //    templateUrl: 'partials/pay.html',
        //    controller: "payController",
        //    pageName: "pay"
        //})
        //.when('/payPlaton', {
        //    title: 'Pay',
        //    templateUrl: 'partials/payPlaton.html',
        //    controller: "payPlatonController",
        //    pageName: "pay"
        //})
        .when('/pay', {
            title: 'Pay',
            templateUrl: 'partials/pay.html',
            controller: "payWay4PayController",
            pageName: "pay"
        })
        .when('/candidates/:id', {
            title: 'Candidate',
            templateUrl: 'partials/candidate.html',
            controller: "CandidateOneController",
            pageName: "Candidate",
            reloadOnSearch: false
        })
        .when('/candidates/:id/:test', {
            title: 'Candidate',
            templateUrl: 'partials/candidate.html',
            controller: "CandidateOneController",
            pageName: "Candidates",
            reloadOnSearch: false
        })
        .when('/candidate/add/', {
            title: 'Add candidate',
            templateUrl: "partials/candidate-add.html",
            controller: "CandidateAddController",
            pageName: "Candidate add"
        })
        .when('/candidate/edit/:id', {
            title: 'Edit candidate',
            templateUrl: "partials/candidate-add.html",
            controller: "CandidateEditController",
            pageName: "Candidate edit",
            reloadOnSearch: false
        })
        .when('/candidate/merge/:id', {
            title: 'Merge candidate',
            templateUrl: "partials/candidate-merge.html",
            controller: "CandidateMergeController",
            pageName: "Candidate merge",
            reloadOnSearch: false
        }).when('/candidate/tests', {
            title: "Tests and forms",
            templateUrl: "partials/tests.html",
            controller: "testsAndForms",
            pageName: "Tests and forms"
        }).when('/candidate/test/:id', {
            title: "Tests and forms",
            templateUrl: "partials/test.html",
            controller: "testsAndForms",
            pageName: "Test page"
        }).when('/candidate/test/results/:id', {
            title: "Test results",
            templateUrl: "partials/test-result.html",
            controller: "testResults",
            pageName: "Test results"
        }).when('/candidate/test/details/:id', {
            title: "Detailed test results",
            templateUrl: "partials/test-detail.html",
            controller: "testResults",
            pageName: "Detailed test results"
        }).when('/candidate/tests/results/:id', {
            title: "Tests results",
            templateUrl: "partials/test-result.html",
            controller: "testResults",
            pageName: "Tests results"
        }).when('/candidate/send-test-candidate-to-email/:id', {
            title: "Send test candidate to email",
            templateUrl: "partials/sendTestCandidateToEmail.html",
            controller: "testsAndForms",
            pageName: "Send test candidate to email"
        }).when('/candidate/send-test-candidate-to-email-from-vacancy', {
            title: "Send test candidate to email",
            templateUrl: "partials/sendTestCandidateToEmail.html",
            controller: "testsAndForms",
            pageName: "Send test candidate to email from vacancy"
        }).when('/candidate/send-test-candidate-to-email-from-candidate', {
            title: "Send test candidate to email",
            templateUrl: "partials/sendTestCandidateToEmail.html",
            controller: "testsAndForms",
            pageName: "Send test candidate to email from candidate"
        }).when('/candidate/add/email', {
            title: "Get candidates from email",
            templateUrl: "partials/candidateAddFromEmail.html",
            controller: "CandidateAddFromEmailController",
            pageName: "Candidates add from email"
        }).when('/candidate/add/zip', {
            title: "Get candidates from zip",
            templateUrl: "partials/candidateAddFromZip.html",
            controller: "CandidateAddFromZipController",
            pageName: "Zip"
        }).when('/candidates_link', {
            title: 'Candidates',
            templateUrl: 'partials/candidateslink.html',
            controller: "CandidateLINKController",
            pageName: "Candidates"
        }).when('/xray_link', {
            title: 'Candidates X-Ray LinkedIn Search',
            templateUrl: 'partials/xraylink.html',
            controller: "CandidateXRayLinkController",
            pageName: "Candidates"
        })
        .when('/clients', {
            title: 'Clients',
            templateUrl: "partials/clients.html",
            controller: "ClientsController",
            pageName: "Clients"
        })
        .when('/client/add/', {
            title: 'New client',
            templateUrl: 'partials/client-add.html',
            controller: "ClientAddController",
            pageName: "Client add"
        })
        .when('/client/edit/:id', {
            title: 'Edit client',
            templateUrl: 'partials/client-add.html',
            controller: "ClientEditController",
            pageName: "Client edit",
            reloadOnSearch: false
        })
        .when('/clients/:id', {
            title: 'Client',
            templateUrl: "partials/client.html",
            controller: "ClientOneController",
            reloadOnSearch: false,
            pageName: "Clients"
        })
        .when('/contacts/:id', {
            title: 'Contacts',
            templateUrl: "partials/contacts.html",
            controller: "ContactsOneController",
            reloadOnSearch: false,
            pageName: "Clients"
        })
        .when('/contact/add/:id', {
            title: 'Add contact',
            templateUrl: "partials/contact-add.html",
            controller: "ContactAddController",
            pageName: "Clients"
        })
        .when('/contact/edit/:contactId', {
            title: 'Edit contact',
            templateUrl: "partials/contact-add.html",
            controller: "ContactEditController",
            pageName: "Contact Edit",
            reloadOnSearch: false
        })
        .when('/vacancies', {
            title: 'Vacancies',
            templateUrl: 'partials/vacancies.html',
            controller: "vacanciesController",
            pageName: "Vacancies"
        })
        .when('/vacancies/:id', {
            title: 'Vacancy',
            templateUrl: 'partials/vacancy.html',
            controller: "vacancyController",
            reloadOnSearch: false,
            pageName: "Vacancies"
        })
        .when('/vacancy/add', {
            title: 'Add vacancy',
            templateUrl: 'partials/vacancy-add.html',
            controller: "vacancyAddController",
            pageName: "Vacancy add"
        })
        .when('/vacancy/edit/:id', {
            title: 'Edit vacancy',
            templateUrl: 'partials/vacancy-add.html',
            controller: "vacancyEditController",
            pageName: "Vacancy edit",
            reloadOnSearch: false
        })
        .when('/vacancy/report/:id', {
            title: 'Vacancy report',
            templateUrl: 'partials/vacancy-reports.html',
            controller: 'vacancyReportController',
            pageName: 'Vacancies'
        })
        .when('/reports/vacancy', {
            title: 'Vacancy report',
            templateUrl: 'partials/vacancy-report.html',
            controller: 'reportsController',
            pageName: 'Vacancy report'
        })
        .when('/reports/vacancy/:id', {
            title: 'Vacancy report',
            templateUrl: 'partials/vacancy-reports.html',
            controller: 'vacancyReportController',
            pageName: 'Vacancy report'
        })
        .when('/reports/reportall', {
            templateUrl: 'partials/report-all.html',
            title: 'Report',
            controller: 'reportAllController',
            pageName: "Report all"
        })
        .when('/company/users', {
            title: 'Users',
            templateUrl: "partials/users.html",
            controller: "usersController",
            pageName: "Company users"
        })
        .when('/company/custom-fields', {
            title: "Custom fields",
            templateUrl: "partials/customFields.html",
            controller: "CustomFieldController",
            pageName: "Custom fields"
        })
        .when('/users/:id', {
            title: "User",
            templateUrl: "partials/user.html",
            controller: "userOneController",
            pageName: "Users"
        })
        .when('/personInfo/:id', {
            title: "User Info",
            templateUrl: "partials/user.html",
            controller: "userOneController",
            pageName: "User"
        }).when('/recalls/:id', {
            title: "Recalls Info",
            templateUrl: "partials/recall.html",
            controller: "recallController",
            pageName: "Recalls Info"
        }).when('/email/vacancy/:vacancyId', {
            title: "Send email",
            templateUrl: "partials/vacancy-send-candidates-to-client.html",
            controller: "CandidateEmailSend",
            pageName: "Vacancies"
        }).when('/excelHistory', {
            title: "Excel History",
            templateUrl: "partials/excel-history.html",
            controller: "excelHistoryController",
            pageName: "Excel History"
        }).when('/company/employees', {
            title: "employees",
            templateUrl: "partials/employees.html",
            controller: "EmployeesController",
            pageName: "Company employees"
        })
        .when('/company/employees/:id', {
            title: "employees",
            templateUrl: "partials/employee.html",
            controller: "EmployeeOneController",
            pageName: "Employee User"
        })
        .when('/company/employee/add', {
            title: "Adding an employee",
            templateUrl: "partials/employee-add.html",
            controller: "EmployeeAddController",
            pageName: "Employee add"
        })
        .when('/company/employee/add/:candidateId', {
            title: "Adding an employee",
            templateUrl: "partials/employee-add-from-candidate.html",
            controller: "EmployeeAddFromCandidateController",
            pageName: "Users"
        })
        .when('/company/employees/edit/:employeeId', {
            title: "Edit candidate",
            templateUrl: "partials/employee-add.html",
            controller: "EmployeeEditController",
            pageName: "Employee Edit User"
        }).when('/company/departmentCatalog', {
            templateUrl: 'partials/departmentCatalog.html',
            title: 'Department catalog',
            controller: 'DepartmentCatalogController',
            pageName: "Department Catalog"
        }).when('/faq', {
            templateUrl: 'partials/faq.html',
            title: 'FAQ',
            controller: 'FeedbackController',
            pageName: "FAQ"
        }).when('/ask_question', {
            templateUrl: 'partials/feedback-page.html',
            title: 'Ask question',
            controller: 'FeedbackController',
            pageName: "Ask question"
        }).when('/report_problem_on_this_page', {
            templateUrl: 'partials/feedback-page.html',
            title: 'Report problem on this page',
            controller: 'FeedbackController',
            pageName: "Report problem on this page"
        }).when('/suggest_improvement_or_request_feature', {
            templateUrl: 'partials/feedback-page.html',
            title: 'Suggest improvement or request feature',
            controller: 'FeedbackController',
            pageName: "Suggest improvement or request feature"
        }).when('/feedback/thanks', {
            templateUrl: 'partials/feedback-page-thanks.html',
            title: 'Thanks for feedback',
            controller: 'FeedbackController',
            pageName: "Thanks for feedback"
        }).when('/feedback-new-design', {
            templateUrl: 'partials/feedback-page-new-design.html',
            title: 'Feedback for new design',
            controller: 'FeedbackController',
            pageName: "Feedback for new design"
        }).when('/feedback-new-design-thanks', {
            templateUrl: 'partials/feedback-page-new-design-thanks.html',
            title: 'Thanks for feedback',
            controller: 'FeedbackController',
            pageName: "Thanks for feedback"
        }).when('/email-integration', {
            title: "Integration with email",
            templateUrl: "partials/addEmailForTemplate.html",
            controller: "addEmailForTemplateController",
            pageName: "Integration with email"
        }).when('/news', {
            title: "News",
            templateUrl: "partials/news.html",
            controller: "newsController",
            pageName: "News"
        })
        .when('/cloud-admin',{
            templateUrl: "partials/cloud-admin.html",
            controller: "cloudAdminController",
            pageName: "Cloud Admin"
        })
        .when('/reports/pipeline',{
            title: "Pipeline",
            templateUrl: "partials/pipeline.html",
            controller: "pipelineController",
            pageName: "Pipeline"
        })
        .when('/reports',{
            title: "Reports",
            templateUrl: "partials/reports.html",
            controller: "MyReportsCtrl",
            controllerAs: "myReportsCtrl",
            pageName: "Reports"
        })
        .when('/reports/custom-reports',{
            title: "Custom Reports",
            templateUrl: "partials/custom-reports.html",
            controller: "CustomReports",
            controllerAs: "ctrlReport",
            pageName: "Custom Reports"
        })
        .when('/reports/edit-reports',{
            title: "Edit Reports",
            templateUrl: "partials/edit-custom-report.html",
            controller: "CustomReportEditCtrl",
            controllerAs: "editReport",
            pageName: "Edit Reports"
        })
        .when('/constructor-reports',{
            title: "Reports constructor",
            templateUrl: "partials/constructor-reports.html",
            controller: "constructorReports",
            pageName: "Reports constructor"
        })
        //.when('/hr-module-info', {
        //    title: "HR-module",
        //    templateUrl: "partials/hr-module-info.html",
        //    controller: "hrModuleInfoController",
        //    pageName: "Hr-module info"
        //})
        .otherwise({redirectTo: '/organizer'});
}]).config(['$provide', '$httpProvider', 'serverAddress', 'frontMode', function ($provide, $httpProvider, serverAddress, frontMode) {
    var allRequest = {};
    var isExecuted = false;

    function stopCheckQueryTime(respUrl, $rootScope) {
        var obj = allRequest[respUrl];
        var length = 0;
        if (obj) {
            obj.stop();
            delete allRequest[respUrl];
            angular.forEach(allRequest, function (val) {
                length = length + 1;
            });
            //if (length == 0) {
            //    $rootScope.badInternetObj.show = false;
            //}
        }
    }

    $httpProvider.interceptors.push(function ($q, $rootScope, $window, $location) {
        return {
            'request': function (requestConfig) {
                if (!allRequest[requestConfig.url] && checkUrl(serverAddress, requestConfig.url, requestConfig.method)) {
                    allRequest[requestConfig.url] = new CheckQueryTime(requestConfig.url, $rootScope);
                    allRequest[requestConfig.url].start();
                }
                return requestConfig;
            },
            'response': function (responseConfig) {
                if (checkUrl(serverAddress, responseConfig.config.url, responseConfig.config.method)) {
                    if (responseConfig.status >= 400 && responseConfig.status < 500) {
                        handErrorException(isExecuted, serverAddress, val.status, frontMode, $window, $location);
                        stopCheckQueryTime(responseConfig.config.url, $rootScope);
                    } else {
                        stopCheckQueryTime(responseConfig.config.url, $rootScope);
                    }
                }
                return responseConfig;
            }, 'responseError': function (val) {
                if(val.config.url == '/hr/person/authping'){
                    $rootScope.notAuthorized = true;
                }else{
                    if($rootScope.notAuthorized == undefined){
                        $rootScope.notAuthorized = false;
                    }
                }
                handErrorException(isExecuted, serverAddress, val.status, frontMode, $window, $location, $rootScope);
                stopCheckQueryTime(val.config.url, $rootScope);
                return $q.reject(val);
            }
        };
    });
//    --------------------------------------------------------------------------------------------------------- Interceptor on every response
    $httpProvider.interceptors.push('responseObserver');
}]).run(function ($rootScope, $templateCache, CheckAccess, $window) {
    $rootScope.$on('$routeChangeStart', function (event, next, current) {
        if (current != undefined && current.$$route != undefined) {
            $rootScope.previousLocation = current.$$route.originalPath;
        }
        if (next != undefined && next.$$route != undefined) {
            $rootScope.currentLocation = next.$$route.originalPath;
        }

        if (typeof (current) !== 'undefined') {
            $templateCache.remove(current.templateUrl);
        }
    });
}).run(function ($location, $rootScope, CheckAccess, $window, $filter, $localStorage, Vacancy, notificationService, translateWords) {
    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {


        if(previous && previous.$$route != undefined){
            if( previous.$$route.pageName === "Custom fields" ){
                delete $rootScope['tabsForFields'];
                delete $rootScope['setAccess'];
            }

            if(current.originalPath == "/candidates/:id"&& previous.originalPath != "/vacancies/:id"){
                $rootScope.stageUrl = false;
            }
        }else{
            $rootScope.stageUrl = false;
        }

        if (current.$$route != undefined) {
            if (current.$$route.title !== undefined) {
                // $rootScope.notFormatedTitle = $filter('translate')(current.$$route.title);
                translateWords.getTranslete(current.$$route.title, $rootScope, 'title', true);
                $rootScope.title = $filter('translate')(current.$$route.title) + " | CleverStaff";
                //var firstPage = "http://127.0.0.1:8080/!#/ask_question";
                //var secondPage = "http://127.0.0.1:8080/!#/report_problem_on_this_page";
                //var thirdPage = "http://127.0.0.1:8080/!#/suggest_improvement_or_request_feature";
                var firstPage = $location.$$protocol + "://" + $location.$$host + "/!#/ask_question";
                var secondPage = $location.$$protocol + "://" + $location.$$host + "/!#/report_problem_on_this_page";
                var thirdPage = $location.$$protocol + "://" + $location.$$host + "/!#/suggest_improvement_or_request_feature";
                $rootScope.previousHistoryFeedback = $location.$$absUrl;
                //console.log($location.$$path.replace('/candidates/'+$scope.candidate.localId, '/candidates/'));
                if($rootScope.previousHistoryFeedback != firstPage && $rootScope.previousHistoryFeedback != secondPage && $rootScope.previousHistoryFeedback != thirdPage){
                    $localStorage.set('previousHistoryFeedback', $rootScope.previousHistoryFeedback);
                }

            }
            if(current.$$route.originalPath != undefined && current.$$route.originalPath == "/cloud-admin"){
                if($rootScope.me){
                    if($rootScope['me']['personParams']['domainAdmin'] == 'all'){
                        document.title = 'Admin Panel of all accounts | CleverStaff';
                    }else{
                        document.title =  "Admin Panel of domain" + $rootScope['me']['personParams']['domainAdmin'];
                    }
                }

            }
            if (current.$$route.pageName !== undefined) {
                $rootScope.activePage = current.$$route.pageName;
                if($rootScope.activePage == 'Candidate'){
                    if(angular.element($window).width() < 992){
                        $rootScope.hideContainer = false;
                    }
                }else{
                    $rootScope.hideContainer = true;
                }
                if($rootScope.activePage != 'Candidate edit'){
                    $('#select2-drop').hide();
                    $('#select2-drop-mask').hide();
                }
            }
        }
        $rootScope.stageName = '';
        $('.showCustomStage').hide();
        $rootScope.sendTestFromVacancyStage = function (stage, longlist, dataForVacancy) {
            if(stage == undefined){
                stage = longlist;
            }
            $localStorage.set('activeCustomStageId', stage);
            $rootScope.vacancySearchParams = {
                state: stage,
                vacancyId: $rootScope.vacancy.vacancyId,
                withCandidates: true,
                withVacancies: true
            };
            Vacancy.getCandidatesInStages($rootScope.vacancySearchParams, function(resp){
                if(resp.objects.length == 0){
                    notificationService.error($filter('translate')('add candidates to the stage'));
                }else{
                    $rootScope.candidatesInStages = resp.objects;
                    $localStorage.set('vacancyForTest', $rootScope.candidatesInStages);
                    $location.path('/candidate/send-test-candidate-to-email-from-vacancy');
                }
            });
        };
        $rootScope.sendCandidateToTest = function(candidate, count){
            $rootScope.candidateToTest = JSON.parse($localStorage.get('candidateForTest'));
            if(count == 0){
                notificationService.error($filter('translate')('Please add an email before sending a test to this candidate'))
            }else{
                if($rootScope.candidateToTest != undefined){
                    $location.path('/candidate/send-test-candidate-to-email-from-candidate');
                    $rootScope.fromCandidate = [$rootScope.candidateToTest];
                    $rootScope.emailCandidateId = $rootScope.candidateToTest.candidateId;
                    if($rootScope.candidateToTest.contacts.length > 0){
                        angular.forEach($rootScope.candidateToTest.contacts, function (nval) {
                            if (nval.type == "email") {
                                delete  $rootScope.emailCandidate;
                                var email = nval.value.split(" ")[0];
                                $rootScope.emailCandidate = email.replace(/,/g,"");
                            }
                        });
                    }else{
                        notificationService.error($filter('translate')('Please add an email before sending a test to this candidate'))
                    }
                }
            }
        };
        $('#candidate_preview').css({
            "top": 0,
            "left": 0,
            "display": "none"
        });

    });
}).config(function (googleServiceProvider, $logProvider, $translateProvider, tmhDynamicLocaleProvider) {
    /************************************/
    googleServiceProvider.configure({
        clientIdT: '195081582460-eo4qmmi7o6hii0ckmrc004lhkh9m3596.apps.googleusercontent.com',
        clientIdW: apiKey.google.client_id,
        calendarName: 'CleverStaff events',
        scopes: ["https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/calendar"],
        gmailScopes: ["https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/gmail.readonly"]
    });
    /************************************/
    $logProvider.debugEnabled(false);
    /************************************/
    $translateProvider.useStaticFilesLoader({
        prefix: 'languange/locale-',
        suffix: '.json?b=32'
    });
    $translateProvider.translations('en');
    $translateProvider.translations('ru');
    $translateProvider.translations('ua');
    var userLang = navigator.language || navigator.userLanguage;
    var lST = userLang.substring(0, 2);
    if (lST == "ru" || lST == "be") {
        $translateProvider.preferredLanguage('ru');
    }
    if (lST == "uk") {
        $translateProvider.preferredLanguage('ua');
    } else {
      $translateProvider.preferredLanguage('en');
    }

    $translateProvider.useLocalStorage();
    /************************************/
    tmhDynamicLocaleProvider.localeLocationPattern('lib/angular/i18n/angular-locale_{{locale}}.js');
    tmhDynamicLocaleProvider.useCookieStorage();
    /************************************/
    if (!navigator.saysWho) {
        navigator.saysWho = (function () {
            var ua = navigator.userAgent, tem,
                M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            if (/trident/i.test(M[1])) {
                tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                return 'IE ' + (tem[1] || '');
            }
            if (M[1] === 'Chrome') {
                tem = ua.match(/\bOPR\/(\d+)/);
                if (tem != null) return 'Opera ' + tem[1];
            }
            M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
            if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
            return M.join(' ');
        })();
    }
});

var controller = angular.module('controller', []);

function handErrorException(isExecuted, serverAddress, status, frontMode, $window, route, $rootScope) {
    if (status == 403 || status == 502) {
        if (!isExecuted) {
            isExecuted = true;
            if (route.$$path.indexOf('/vacancies/') == 0) {
                var path = route.$$path.replace('vacancies/', 'vacancy-');
                $window.location.replace('/i#' + path);
            }
        }
    }
    if (status == 404) {
        checkAuth(serverAddress, function (resp) {
            if (resp != 200) {
                $window.location.replace('/');
            }
        })

    }
}

function checkAuth(serverType, $rootScope, callback) {
    var request = new XMLHttpRequest();
    request.open('GET', serverType + '/person/authping', true);
    request.onload = function () {
        callback(request.status);
    };

    request.send();

}

function checkUrl(serverAddress, url, method) {
    if (url == "partials/client.html" ||
        url == "partials/candidate.html" ||
        url == "partials/vacancy.html" ||
        url == "partials/user.html" ||
        url == "partials/candidates.html" ||
        url == "partials/vacancies.html" ||
        url == "partials/future.html" ||
        url == "partials/employees.html" ||
        url == "partials/statistics.html" ||
        url == "partials/pay.html" ||
        url == "partials/payPlaton.html" ||
        url == "partials/clients.html" ||
        url == "partials/users.html") {
        return true;
    } else if ((url == serverAddress + "/candidate/get" && method == "GET") ||
        (url == serverAddress + "/vacancy/get" && method == "GET") ||
        (url == serverAddress + "/client/get" && method == "GET") ||
        (url == serverAddress + "/contact/get" && method == "GET") ||
        (url == serverAddress + '/person/getPerson' && method == "GET")) {
        return true;
    } else {
        return false;
    }

}

function CheckQueryTime(url, $root) {
    var active = false;
    return {
        getActive: function () {
            return active;
        },
        stop: function () {
            active = false;
        },
        start: function () {
            this.timer();
        },
        check: function () {
            if (active) {
                /** @namespace $root.badInternetObj */
                if (!$root.badInternetObj.show) {
                    $root.badInternetObj.show = true;
                    if (!$root.$$phase) {
                        $root.$apply();
                    }
                }
            }
        },
        timer: function () {
            if (!active) {
                active = true;
                setTimeout(this.check, 5000);
            }
        }
    }
}

var defaultRoute = '/organizer';
function checkUrlByRole(url, Role,  accessLevel, $location, serverAddress, $http, $filter, notificationService) {
    if (Role == 'client'){
        if (url == '/candidate/add/' || url == '/candidate/edit/' ||
            url == '/client/add/') {
            $location.path(defaultRoute);
        } else if (url == '/company/statistics') {
            $location.path('/clients/statistics');
        } else {
            return true;
        }
    }else if ((accessLevel == 'hide') && (url == "/vacancy/add" || url == "/vacancy/edit/:id" || url == "/clients" ||
        url == '/client/add/' || url == '/client/edit/:id' || url == '/email/vacancy/:vacancyId')) {

        notificationService.error($filter('translate')('This function is not available'));
        $location.path('/vacancies');
    } else {
        return true;
    }
}

function setPersonParams($http, userId, paramName, paramValue, serverAddress) {
    $http.get(serverAddress + '/person/changeUserParam?userId=' + userId + "&name=" + paramName + "&value=" + paramValue).success(function (resp) {
    });
}

function SecurityFilter($rootScope, deffer, $location, $route, $http, serverAddress, $filter, notificationService) {
    if ($route.current.$$route != undefined) {
        var routeName = $route.current.$$route.originalPath;
        $rootScope.$watch(
            'me',
            function meWatch(newValue,oldValue){
                if(newValue != undefined){
                    if (newValue.personParams == undefined
                        || newValue.personParams.timeZoneOffset == undefined
                        || newValue.personParams.timeZoneOffset != new Date().getTimezoneOffset()) {
                        setPersonParams($http, newValue.userId, "timeZoneOffset", new Date().getTimezoneOffset(), serverAddress);
                    }
                    if (newValue.status === 'error') {
                        //$window.location.replace('/');
                    } else {
                        $rootScope.me = newValue;
                        if (checkUrlByRole(routeName, newValue.recrutRole, newValue.personParams.clientAccessLevel, $location, serverAddress, $http, $filter, notificationService)) {
                            deffer.resolve();
                        }
                    }
                }
            }
        );

    } else {
        deffer.resolve();
    }
}
controller.controller('ActivityCalendarController', ["Person", "$scope", "$rootScope", "Vacancy", "frontMode", "$sce", "googleService", "notificationService", "$filter",
    '$http', '$localStorage','outlookService', '$uibModal', function (Person, $scope, $rootScope, Vacancy, frontMode, $sce, googleService, notificationService, $filter, $http, $localStorage, outlookService, $uibModal) {

    if ($localStorage.get('calendarShow') != undefined) {
        $rootScope.calendarShow = $localStorage.get('calendarShow');
        if ($rootScope.calendarShow == 'true') {
            $rootScope.calendarShow = true;
        } else if ($scope.calendarShow == 'false') {
            $rootScope.calendarShow = false;
        }
    } else {
        $rootScope.calendarShow = false;
    }
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    $scope.initUserGoogleCalendars = function () {

        var localStorageCheck = $localStorage.get("calendarsss_+" + $rootScope.me.personId);
        if (localStorageCheck != null) {
            $scope.calendarsForCheck = JSON.parse(localStorageCheck);
            var founded = {};
            for (var i = 0; i <= $rootScope.calendars.length - 1; i++) {
                var cal = $rootScope.calendars[i];
                var check = false;
                angular.forEach($scope.calendarsForCheck, function (val) {
                    if (cal.id == val.id) {
                        check = true;
                    }
                });
                if (!check) {
                    $scope.calendarsForCheck.push({
                        id: cal.id,
                        checked: true,
                        name: cal.summary,
                        isCleverStaffEvent: cal.summary == 'CleverStaff events'
                    });
                }
                founded[cal.id] = true;
            }
            for (var j = 0; j <= $scope.calendarsForCheck.length - 1; j++) {
                var el2 = $scope.calendarsForCheck[j];
                if (!founded[el2.id]) {
                    $scope.calendarsForCheck.splice(j, 1);
                }
            }
            var cleverStaffEventsElement;
            for (var k = 0; k <= $scope.calendarsForCheck.length - 1; k++) {
                var el = $scope.calendarsForCheck[k];
                if (el.name == 'CleverStaff events') {
                    cleverStaffEventsElement = angular.copy(el);
                    $scope.calendarsForCheck.splice(k, 1);
                }
            }
            $scope.calendarsForCheck.unshift(cleverStaffEventsElement);
        } else {
            $scope.calendarsForCheck = [];
            console.log('rootscope.calendars', $rootScope.calendars);
            angular.forEach($rootScope.calendars, function (val) {
                $scope.calendarsForCheck.push({
                    id: val.id,
                    checked: true,
                    name: val.summary,
                    isCleverStaffEvent: val.summary == 'CleverStaff events'
                })
            });
        }


        $scope.calendarsForGet = angular.copy($rootScope.calendars);
        for (var i = 0; i < $scope.calendarsForGet.length; i++) {
            for (var j = 0; j < $scope.calendarsForCheck.length; j++) {
                if ($scope.calendarsForCheck[j] && ($scope.calendarsForCheck[j].id == $scope.calendarsForGet[i].id)) {
                    if ($scope.calendarsForCheck[j].checked == false) {
                        $scope.calendarsForGet.splice(i, 1);
                    }
                }
            }
        }

        if (!$rootScope.$$phase) {
            $rootScope.$apply();
        }
    };


    $scope.login = function () {
        $localStorage.set('calendarShow', true);
        $rootScope.calendarShow = true;
        if (!$rootScope.me.googleMail) {
            $rootScope.curentOnlyMenWatch = $rootScope.$watch('g_info', function (val) {
                if ($rootScope.g_info !== undefined && $rootScope.g_info.email !== undefined) {
                    console.log("logon if!");
                    Person.setSocial({email: $rootScope.g_info.email, social: "google"}, function (resp) {
                        if (resp.status && angular.equals(resp.status, "error")) {
                            notificationService.error(resp.message);
                            $rootScope.g_info = null;
                        } else {
                            if ($scope.user) {
                                $scope.user.googleMail = $rootScope.g_info.email;
                            }
                            notificationService.success($filter('translate')("gmail change"));
                            googleService.login(function (selectedCalendar) {
                                if (selectedCalendar != undefined) $rootScope.selectedCalendar = selectedCalendar;
                                $scope.initUserGoogleCalendars();
                            });
                            $rootScope.initGoogleCalendar = true;
                        }
                    }, function () {
                        $rootScope.g_info = null;
                    });
                    $rootScope.curentOnlyMenWatch();
                }
            });
        } else {
            googleService.login(function (selectedCalendar) {
                if (selectedCalendar != undefined) $rootScope.selectedCalendar = selectedCalendar;
                $scope.initUserGoogleCalendars();
            });

            $rootScope.initGoogleCalendar = true;
        }
    };

    $scope.updateCalendar = function (selectedCal) {
        if (!selectedCal.isCleverStaffEvent) {
            console.log($scope.calendarsForGet);
            if (!selectedCal.checked) {
                console.log(selectedCal.checked);
                console.log("if");
                for (var i = 0; i < $scope.calendarsForGet.length; i++) {
                    console.log('$scope.calendarsForGet[i]', $scope.calendarsForGet[i]);
                    if ($scope.calendarsForGet[i].id == selectedCal.id) {
                        $scope.calendarsForGet.splice(i, 1);
                        selectedCal.checked = false;
                        i = 0;
                    }
                }
                calendarIndex = _.findIndex($scope.calendarsForCheck, {'id':selectedCal.id});
                $scope.calendarsForCheck[calendarIndex].checked = false;
            } else {
                console.log(selectedCal.checked);
                console.log("else");
                if(_.indexOf($scope.calendarsForGet,{'id': selectedCal.id}) == -1) {
                    angular.forEach($rootScope.calendars, function (val) {
                        if (val.id == selectedCal.id) {
                            $scope.calendarsForGet.push(val);
                            selectedCal.checked = true;
                        }
                    });
                }
                calendarIndex = _.findIndex($scope.calendarsForCheck, {'id':selectedCal.id});
                $scope.calendarsForCheck[calendarIndex].checked = true;
            }
            console.log('calendars calendarsForCheck', $scope.calendarsForCheck);
            $localStorage.set("calendarsss_+" + $rootScope.me.personId, $scope.calendarsForCheck);
            console.log('in update',$localStorage.get("calendarsss_+" + $rootScope.me.personId));
            if (!$scope.$$phase) {
                $scope.$apply();
            }
        }
    };
    if ($rootScope.calendarShow == true) {
        if ($rootScope.initGoogleCalendar == false) {
            googleService.login(function(){
                $scope.initUserGoogleCalendars();
            });
        } else {
            if ($rootScope.me.googleMail != undefined) {
                $scope.initUserGoogleCalendars();
            }
        }
    }
    $scope.resfeshIframe = function () {
        var iFrame = $(document).find("#calendar_iframe");
        iFrame.attr("src", iFrame.attr("src"));
    };
    $scope.srcUrl = null;


    $scope.getCalendarFrame = function (calendar, calendars) {
        if (frontMode === 'war') {
            if (calendar != undefined) {
                var url = "https://www.google.com/calendar/embed?&";
                url += "src=" + calendar.id.replace(new RegExp("#", 'g'), "%23");
                if (calendars) {
                    angular.forEach(calendars, function (value, key) {
                        if (value && value.id && value.id !== calendar.id) {
                            url += "&src=" + value.id.replace(new RegExp("#", 'g'), "%23");
                        }
                    });
                }
                url += "&ctz=" + jstz.determine().name();
                url += "&mode=WEEK";
                return $sce.trustAsResourceUrl(url);
            }
        } else {
            return $sce.trustAsResourceUrl("https://www.google.com/calendar/embed?mode=WEEK&src=cgbil05l7c05viqpngev2ou9b4%40group.calendar.google.com&ctz=Europe/Kiev");
        }
    };
    $scope.signOutGoogle = function () {
        $localStorage.set('calendarShow', false);
        $rootScope.calendarShow = false;
    };
    $scope.addGoogleCalendarForCs = function () {
        if($rootScope.me.outlookCalendar){
            $scope.deleteOutLookCalendar();
        }
        googleService.addCalendar(function (resultCode) {
            googleService.login(function(){
            }).then(
                result => {
                    Person.addGoogleCalendar({
                        accessToken: resultCode.code
                    }, function (resp) {
                        if (resp.status == 'ok') {
                            $localStorage.set('calendarShow', true);
                            $rootScope.calendarShow = true;
                            $scope.initUserGoogleCalendars();
                            $scope.getCalendarFrame();
                            setTimeout(function () {
                                $scope.resfeshIframe();
                            }, 1000)

                        } else {
                            if(resp.code == 'сouldNotGetRefreshToken') {
                                $scope.modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: '../partials/modal/calendar-access.html',
                                    resolve: {
                                    }
                                });
                            } else {
                                notificationService.error(resp.message);
                            }
                        }
                    });
                },
                error => {
                    console.log('in googleService.login reject')
                }
            );
            console.log('addCalendar');
        });
    };

    $scope.getGoogleCalendarForUserCs = function () {
        Person.getGoogleCalendar(function (resp) {
            if (resp.object != null) {
                $localStorage.set('calendarShow', true);
                $scope.showConnectButtom = false;
                $scope.resfeshIframe();
            } else {
                $scope.showConnectButtom = true;
                $localStorage.set('calendarShow', false);
                $rootScope.calendarShow = false;
            }
        });
    };
    $scope.getGoogleCalendarForUserCs();
    $scope.deleteGoogleCalendarForCs = function () {
        Person.deleteGoogleCalendar(function (resp) {
            if (resp.status == 'ok') {
                $localStorage.set('calendarShow', false);
                $rootScope.calendarShow = false;
                $scope.showConnectButtom = true;
                $scope.resfeshIframe();
                googleService.signOut();
            } else {
                notificationService.error(resp.message);
            }
        });
    };
        $scope.$watch(
            'outLookWatch',
            function watch(newValue,oldValue){
                if(newValue != undefined){
                    Person.addOutlookCalendar({
                        code:newValue
                    },function(resp){
                        if(resp.object){
                            $rootScope.me.outlookCalendar = resp.object;
                        }else{
                            $rootScope.me.outlookCalendar = false;
                        }
                    });
                }
            }
        );
    $scope.addOutlookcalendar = function (){
        if($scope.calendarShow){
            $scope.deleteGoogleCalendarForCs();
            outlookService.getAccessForCalendar();
        }else{
            outlookService.getAccessForCalendar();
        }
    };
        $scope.deleteOutLookCalendar = function(){
            Person.deleteOutlookCalendar (function(resp){
                if(resp.status == 'ok'){
                    if(resp.object){
                        $rootScope.me.outlookCalendar = resp.object;
                    }else{
                        $rootScope.me.outlookCalendar = false;
                    }
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        Person.getOutlookCalendar(function(resp){
            if(resp.object){
                $rootScope.me.outlookCalendar = resp.object;
            }else{
                $rootScope.me.outlookCalendar = false;
            }
        });
}]);

controller.controller('ActivityCompanySettingsController', ["$scope", "$rootScope", "$routeParams", "Service", "Person", "Company", "notificationService", "$filter", "$translate",
    "Vacancy", "$location", "$uibModal", function($scope, $rootScope, $routeParams, Service, Person, Company, notificationService, $filter, $translate, Vacancy, $location, $uibModal) {

    $scope.showHistory = true;
    $scope.facebookAppId = facebookAppId;
    $scope.loading = true;
    $scope.showChangeOrgName = false;
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    listenerForScopeLight($scope, $rootScope);

    $scope.callbackAddLogo = function(photo) {
        $rootScope.companyLogo = photo;
        $rootScope.logoLink = $scope.serverAddress + "/getapp?id=" + $rootScope.companyLogo + "&d=true";
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };

    $scope.newOrgName = $rootScope.me.orgName;

    $scope.showChangeUserOrgName = function() {
        $scope.showChangeOrgName = true;
        $scope.newOrgName = $rootScope.me.orgName;
    };

    $scope.changeOrgName = function() {
        Person.changeOrgName({orgName: $scope.newOrgName, lang: $rootScope.currentLang}, function(resp) {
            if (resp.status && angular.equals(resp.status, "error")) {
                notificationService.error(resp.message);
            } else {
                //notificationService.success($filter('translate')('You changed company name'));
                $rootScope.me.orgName = $scope.newOrgName;
                $scope.showChangeOrgName = false;
                angular.forEach($rootScope.me.orgs, function(org) {
                    if (org.orgId == $rootScope.me.orgId) {
                        org.orgName = $scope.newOrgName;
                    }
                });
                angular.forEach($rootScope.orgs, function(org) {
                    if (org.orgId == $rootScope.me.orgId) {
                        org.orgName = $scope.newOrgName;
                    }
                });

                //$scope.getLastEvent();

            }
        }, function() {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });
    };
    Vacancy.getVacancyExampleForLogoDemo(function (resp) {
        if (angular.equals(resp.status, "ok") && resp.object.localId != undefined) {
            console.log(resp);
            if ($rootScope.frontMode == 'war') {
                $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/pv/" + resp.object.localId;
            } else {
                $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/di#/pv/" + resp.object.localId;
            }

        }
    });
    $scope.updateFBpages = function(){
        Company.orgPages(function(resp){
            $rootScope.fbPages = resp.objects;
            for (var i = $rootScope.fbPages.length - 1; i >= 0; i--) {
                if ($rootScope.fbPages[i].status === 'D') {
                    $rootScope.fbPages.splice(i, 1);
                }
            }
        });
    };
    $scope.updateFBpages();
    $scope.addFacebookTabInCs = function (){
        FB.ui({
            method: 'pagetab',
            redirect_uri: 'https://www.facebook.com/dialog/pagetab?app_id=579184295576444'
        }, function(response){
            if(response === undefined){
                //notificationService.error($filter('translate')('To_add_a_page_that_has_already_been_created_Jobs_tab_you_need_to_remove_it_on_your_Facebook_page'));
            }else{
                $scope.FBpagesId = Object.keys(response.tabs_added);
                checkFbAuth();
            }
        });
        function checkFbAuth(){
            FB.getLoginStatus(function(response) {
                if (response.status === 'connected') {
                    var uid = response.authResponse.userID;
                    var accessToken = response.authResponse.accessToken;
                } else if (response.status === 'not_authorized') {
                    FB.login(function(response) {
                        checkFbAuth();
                        // Original FB.login code
                    });
                    // the user is logged in to Facebook,
                    // but has not authenticated your app
                } else {
                    // the user isn't logged in to Facebook.
                    FB.login(function(response) {
                        checkFbAuth();
                        // Original FB.login code
                    });
                }
                if(accessToken){
                    angular.forEach($scope.FBpagesId,function(data,key){
                        FB.api(
                            data,{accessToken: accessToken},
                            function (response1) {
                                if (response1 && !response1.error) {
                                    Company.addFacebookPage({
                                        facebookPageId: data,
                                        name : response1.name
                                    }, function(resp){
                                        if(resp.status == 'ok'){
                                            function facebooklogout() {
                                                FB.logout(function (response) {
                                                    }
                                                )
                                            }
                                            $scope.updateFBpages();
                                        }
                                    });
                                }
                            }
                        );
                    });
                }
            });
        }
    };
    $rootScope.showDeleteFbPagesOnCompany = function (tab) {
        $scope.deletedTabCompany = tab;
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/company-settings-remove-fb-tab.html',
            resolve: {

            }
        });
    };
    $rootScope.deleteTabOnFacebook = function(){
        Company.deleteFacebookPage({
            facebookPageId: $scope.deletedTabCompany.facebookPageId
        }, function(resp){
            if(resp.status == 'ok'){
                $scope.updateFBpages();
                $rootScope.closeModal();
            }else{
                notificationService.error(resp.message);
            }
        });
    };
    $.getScript('//connect.facebook.net/en_UK/all.js', function() {
        FB.init({
            appId: apiKey.facebook.appId,
            version: 'v2.9'
        });
        if(getUrlVars($location.$$absUrl).q1){
            $('.showNotHaveIntegration.modal').modal('hide');
            $scope.addFacebookTabInCs();
        }
    });
    $scope.showModalCompanyLogo = function(){
        $('.showImgCompany.modal').modal('show');
    };
    $scope.getLinkCompanyPage = function(name){
        Company.getParam({
            name: name
        }, function(resp){
            if(resp.status == 'ok'){
                if(name == 'companyWebSite'){
                    $scope.changeWebSite = resp.object;
                }else{
                    $scope.changeFacebookPage = resp.object;
                }
            }else{
                notificationService.error(resp.message);
            }
        });
    };
    $scope.getLinkCompanyPage('companyWebSite');
    $scope.getLinkCompanyPage('companyFacebookPage');
    $scope.showCompanyWebSite = true;
    $scope.showCompanyFacebookPage = true;
    $scope.setChangeCompanyWebSite = function(name){
        if($scope.changeWebSite.indexOf('http://') > -1 || $scope.changeWebSite.indexOf('https://') > -1 || $scope.changeWebSite.length == 0){
            Company.setParam({
                name: name,
                value: name == 'companyWebSite' ? $scope.changeWebSite : $scope.changeFacebookPage
            }, function(resp){
                if(resp.status == 'ok'){
                    if($scope.changeFacebookPage.length > 0) {
                        notificationService.success($filter('translate')("save_link"));
                    } else {
                        notificationService.success($filter('translate')("remove_link"));
                    }
                    $scope.showCompanyWebSite = true;
                    $scope.showCompanyFacebookPage = true;
                }else{
                    notificationService.error(resp.message);
                }
            });
        }else{
            notificationService.error($filter('translate')("enter the link http"));
        }
    };
    $scope.setChangeUserWebSite = function(name){
        if($scope.changeFacebookPage.indexOf('http://') > -1 || $scope.changeFacebookPage.indexOf('https://') > -1 || $scope.changeFacebookPage.length == 0){
            Company.setParam({
                name: name,
                value: name == 'companyWebSite' ? $scope.changeWebSite : $scope.changeFacebookPage
            }, function(resp){
                if(resp.status == 'ok'){
                    if($scope.changeFacebookPage.length > 0) {
                        notificationService.success($filter('translate')("save_link"));
                    } else {
                        notificationService.success($filter('translate')("remove_link"));
                    }
                    $scope.showCompanyWebSite = true;
                    $scope.showCompanyFacebookPage = true;
                }else{
                    notificationService.error(resp.message);
                }
            });
        }else{
            notificationService.error($filter('translate')("enter the link http"));
        }
    };
    $scope.showInputForChangeWebSite = function(){
        $scope.showCompanyWebSite = false;
    };
    $scope.showInputForChangeFacebookPage = function(){
        $scope.showCompanyFacebookPage = false;
    };
}]);

controller.controller('ActivityFutureController', ["$scope", "$translate", "$rootScope", "Vacancy", "frontMode", "$filter", "Sticker",
    "Service", "ScopeService","Person", "$location", "notificationService","Task","$document", "$uibModal", "$sce", "$timeout", "$route", "Achieve",
    function($scope, $translate, $rootScope, Vacancy, frontMode, $filter, Sticker, Service, ScopeService, Person, $location,
             notificationService,Task, $document, $uibModal, $sce, $timeout, $route, Achieve) {
    $rootScope.loading = true;
    $rootScope.showAchieves = true;
    $scope.activeVacancy = null;
        Task.task($scope, $rootScope, $location, $translate, $uibModal, $route);
        //if(localStorage.showAchieves == 'true'){
        //    $scope.showAchieves = true;
        //}else if(localStorage.showAchieves == 'false'){
        //    $scope.showAchieves = false;
        //} else{
        //    $scope.showAchieves = true;
        //}



        if(localStorage.upcomingEventsScope != undefined) {
            $rootScope.upcomingEventsScope = JSON.parse(localStorage.upcomingEventsScope);
            console.log('rootUpcom',$rootScope.upcomingEventsScope, JSON.parse(localStorage.upcomingEventsScope));
            $(".upcomingScopeSwticher").prop( "checked", $rootScope.upcomingEventsScope );
        } else {
            if($rootScope.me.recrutRole != 'admin' ) {
                $rootScope.upcomingEventsScope = false;
            }else {
                $(".upcomingScopeSwticher").prop( "checked", true );
                $rootScope.upcomingEventsScope = true;
            }
        }
        if($rootScope.me.recrutRole != 'admin' && $rootScope.me.recrutRole != 'recruter'){
            $rootScope.showAchieves = false;
        }
        if(frontMode === 'demo'){
            $rootScope.showAchieves = false;
        }
    $scope.showEvents = null;
    $scope.popoverStyleElem = false;
    $rootScope.responsiblePersons =[];
    $scope.todayDate = new Date().getTime();
    $rootScope.stickerViewInfo = {text: null, title: null, author: null, show: true, object: null};
    $rootScope.stickerEditInfo = {text: null, title: null, author: null, show: false};
    $scope.extensionHas = null;
    $scope.publicLink = $location.$$protocol + "://" + $location.$$host;
    $scope.publicImgLink = "http://dev.cleverstaff.net/img/congratAchievesBigForSoc.jpg";
    $rootScope.vacancyChangeInterviewDate = {
        date: null,
        dateOld: null,
        candidate: null,
        interviewObject: null,
        comment: null
    };
    $(".changeVacancyInterviewDatePicker").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
        startView: 2,
        minView: 0,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use()
    }).on('changeDate', function(data) {
        $rootScope.vacancyChangeInterviewDate.date = data.date;
    }).on('hide', function() {
        if ($('.changeVacancyInterviewDatePicker').val() == "") {
            $rootScope.vacancyChangeInterviewDate.date = null;
        }
    });

    listenerForScope($scope, $rootScope);

    $scope.getBrowser = function() {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            return "chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            return "firefox";
        } else {
            return "all";
        }
    };

    $rootScope.readAt = function(answer) {
        Service.readAt({answer: answer, at: {atId: $rootScope.at.atId}}, function(resp) {
            $("#atwindow.modal").modal("hide");
            $rootScope.at = null;
            $("#atwindow.modal .field").html('');
        });
    };

    function scope_update(val) {
        $scope.tableParams.reload();
    }
        $scope.upcomingEventsUpdate = function (val) {
            var previousScope = $rootScope.upcomingEventsScope;
            if(val == 'onlyMy') {
                $rootScope.upcomingEventsScope = true;
                $(".upcomingScopeSwticher").prop( "checked", true );
            }else if(val == 'allUsers') {
                $rootScope.upcomingEventsScope = false;
                $(".upcomingScopeSwticher").prop( "checked", false );
            }else if(val == 'switch') {
                $rootScope.upcomingEventsScope = !$rootScope.upcomingEventsScope;
            }
            if(previousScope != $rootScope.upcomingEventsScope) {
                $scope.tableParams.reload();
            }
            localStorage.upcomingEventsScope = $rootScope.upcomingEventsScope;
    };

    ScopeService.setCurrentControllerUpdateFunc(scope_update);
    //this function created for  care about correct change user information after as change inform in scope happened
    $scope.tableParams = {
        reload: function() {
            if (ScopeService.isInit()) {
                var activeParam = ScopeService.getActiveScopeObject();
                $scope.activeScopeParam = activeParam;
                var requestQuery = {
                    personId: activeParam.name == 'onlyMy' || $rootScope.upcomingEventsScope ? $rootScope.userId : null
                };
                requestQuery.country = activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null;
                requestQuery.city = activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null;
                Vacancy.getEvents(requestQuery, function(resp) {
                    $scope.events = $filter('getorders')(resp.objects);
                    if (activeParam.name == 'region' || activeParam.name == 'onlyMy') {
                        $scope.showEvents = true
                    } else {

                        if($rootScope.me.recrutRole!='admin'){
                            $scope.showEvents=true
                        }else{
                            $scope.showEvents = resp.objects != undefined && resp.objects.length > 0;
                        }
                    }
                    $rootScope.loading = false;
                });
            }
        }
    };

    Person.getAllPersons(function (resp) {
        $scope.persons = [];
        if(resp.status == "ok"){
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                $scope.persons.push($scope.associativePerson[key]);
            });
            $rootScope.persons = $scope.persons;
        }
    });
    $scope.newStickerObject = {text: "", "title": ""};

    $scope.saveNewSticker = function() {
        $scope.newStickerObject.scope = "user";
        Sticker.save($scope.newStickerObject, function(val) {
            if (val.status != "error") {
                val.object.color = val.color = {
                    "background-color": $scope.paletteColorMap.white.color,
                    name: $scope.paletteColorMap.white.name
                };
                if ($scope.stickers == undefined)  $scope.stickers = [];
                $scope.stickers.unshift(val.object);
                $scope.newStickerObject = {text: "", "title": ""};
                $scope.show_add = false;
            }
        });

    };

    $scope.hidePalette = function(object) {
        object.mouseover = false;
        setTimeout(function() {
            if (!object.mouseover) {
                object.palette_show = false;
                if (!object.$$phase) {
                    object.$apply();
                }
            }
        }, 300);
    };

    $scope.showPalette = function(object) {
        object.mouseover = true;
        object.palette_show = true;
    };


    $scope.paletteColor = [
        {color: "rgb(255, 255, 255)", name: "white"},
        {color: "rgb(255, 109, 63)", name: "red"},
        {color: "rgb(255, 155, 0)", name: "orange"},
        {color: "rgb(255, 218, 0)", name: "yellow"},
        {color: "rgb(149, 214, 65)", name: "green"},
        {color: "rgb(28, 232, 181)", name: "teal"},
        {color: "rgb(63, 195, 255)", name: "blue"},
        {color: "rgb(184, 196, 201)", name: "gray"}
    ];

    $scope.paletteColorMap = {
        "white": {color: "rgb(255, 255, 255)", name: "white"},
        "red": {color: "rgb(255, 109, 63)", name: "red"},
        "orange": {color: "rgb(255, 155, 0)", name: "orange"},
        "yellow": {color: "rgb(255, 218, 0)", name: "yellow"},
        "green": {color: "rgb(149, 214, 65)", name: "green"},
        "teal": {color: "rgb(28, 232, 181)", name: "teal"},
        "blue": {color: "rgb(63, 195, 255)", name: "blue"},
        "gray": {color: "rgb(184, 196, 201)", name: "gray"}
    };

    $scope.changeColor = function(sticker, color) {
        if (color && sticker) {
            sticker.color = {"background-color": color.color, name: color.name};

            var stickerS = angular.copy(sticker);
            stickerS.color = color.name;
            Sticker.save(stickerS, function(val) {
                console.log(val);
            });
        }

    };
    $scope.test_one = function(element) {
        $(this).parent().find(".sticker-palette").css({display: "inline-block"});
    };

    $scope.stickerDelete = function(index) {
        if (confirm($filter('translate')('Are you sure you want to remove this sticker?')) == true) {
            var sticker = $scope.stickers[index];
            var stickerS = angular.copy(sticker);
            stickerS.color = stickerS.color.name;
            stickerS.status = "deleted";
            Sticker.save(stickerS, function(val) {
                $scope.stickers.splice(index, 1);
            });
        }
    };

    $scope.openModal = function(object) {
        if ($filter('countOfTextInSticker')(object.text) > 210) {
            $rootScope.stickerViewInfo.show = true;
            $rootScope.stickerEditInfo.show = false;
            $rootScope.stickerViewInfo.text = object.text;
            $rootScope.stickerViewInfo.object = object;
            $rootScope.stickerViewInfo.title = object.title;
            $rootScope.stickerViewInfo.author = object.creator;
            $(".viewingStickerInfo").modal("show");
        }
    };

    $scope.editSticker = function(scope) {
        var sticker = scope.sticker;
        scope.newStickerText = sticker.text != undefined && sticker.text.length > 0 ? sticker.text : "";
        scope.newStickerTitle = sticker.title != undefined && sticker.title.length > 0 ? sticker.title : "";
        scope.sticker_text_show = false;
    };

    $rootScope.closeAddSticker = function() {
        if (!$rootScope.stickerViewInfo.object)
            $(".viewingStickerInfo").modal("hide");
        $rootScope.stickerViewInfo.show = true;
        $rootScope.stickerEditInfo.show = false;
    };

    $rootScope.saveSticker = function(scope) {
        scope.sticker.text = scope.newStickerText;
        scope.sticker.title = scope.newStickerTitle;
        var stickerS = angular.copy(scope.sticker);
        stickerS.color = stickerS.color.name;
        Sticker.save(stickerS, function(val) {
            if (val.status != "error") {
                scope.sticker_text_show = true;
                scope.newStickerText = "";
                scope.newStickerTitle = "";
            }
        });
    };
    $scope.vacancyAll = {
        personId: $rootScope.userId,
        pages: {count: 15}
    };
    Vacancy.getWithLastAction($scope.vacancyAll, function(resp){
        $scope.activeVacancy = resp.objects;
        //console.log($scope.activeVacancy);
    });

    if ($rootScope.eventListenerPing) {
        document.removeEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    }
    $rootScope.eventListenerPing = function (event) {
        $scope.extensionHas = true;
    };
    document.addEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    document.dispatchEvent(new CustomEvent('cleverstaffExtensionPing'));
    $scope.achieveParametr = {
        names: ["changeInterviewState","createOrg","addInterview","orgLogo","addClient","addEmailForParsing","addContactClient","candidateToVacancy","addUsers",
            "sendCandidatesToClient","publishVacancy","plugin","browser","addVacancy","closeVacancy","addCandidateFromLink"],
        browser: $scope.getBrowser(),
        plugin: $scope.extensionHas
    };

    $scope.updateAchieve = function(){
        Achieve.get($scope.achieveParametr, function(resp){
            if(resp.status == "ok"){
                $scope.achieveDone = resp.object.first_wave.countAll - resp.object.first_wave.countHas;
                $scope.achieveDone2 = resp.object.second_wave.countAll - resp.object.second_wave.countHas;
                $scope.publicBrowser = $scope.getBrowser();
                $scope.achieves = resp.object.first_wave.achieves;
                $scope.achieves2 = resp.object.second_wave.achieves;
                if(resp.object.first_wave.countHas){
                    $scope.achievePercent = Math.round(resp.object.first_wave.countHas * 100 / resp.object.first_wave.countAll + 0.22222222222222222222);
                }else{
                    $scope.achievePercent = 0;
                }
                if(resp.object.second_wave.countHas){
                    $scope.achievePercent2 = Math.round(resp.object.second_wave.countHas * 100 / resp.object.second_wave.countAll + 0.22222222222222222222);
                }else{
                    $scope.achievePercent2 = 0;
                }
                $scope.achievePercentNotDone = 100 - $scope.achievePercent;
                $scope.achievePercentNotDone2 = 100 - $scope.achievePercent2;
                if ($scope.achievePercent < 40) {
                    color = '#C5393A'; //red
                } else if ($scope.achievePercent >= 40 && $scope.achievePercent < 85) {
                    color = '#E78409'; //orange
                } else if ($scope.achievePercent >= 85) {
                    color = '#74B830'; //green
                } else {
                    var color = '#CCCCCC'; //grey
                }
                if ($scope.achievePercent2 < 40) {
                    colorTwo = '#C5393A'; //red
                } else if ($scope.achievePercent2 >= 40 && $scope.achievePercent2 < 85) {
                    colorTwo = '#E78409'; //orange
                } else if ($scope.achievePercent2 >= 85) {
                    colorTwo = '#74B830'; //green
                } else {
                    var colorTwo = '#CCCCCC'; //grey
                }
                $scope.progressAchieve = {width: $scope.achievePercent + '%', 'background-color': color};
                $scope.progressAchieve2 = {width: $scope.achievePercent2 + '%', 'background-color': colorTwo};
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
                if($scope.achieves){
                    if($rootScope.me.personId == $rootScope.me.org.creatorId){
                        if($scope.achieves.createOrg && $scope.achieves.createOrg.value == 'false'){
                            $scope.source = 'createAcc';
                        } else if($scope.achieves.addEmailForParsing && $scope.achieves.addEmailForParsing.value == 'false'){
                            $scope.source = 'linkMail';
                        } else if($scope.achieves.addUsers && $scope.achieves.addUsers.value == 'false'){
                            $scope.source = 'addUsers';
                        } else if($scope.achieves.browser && $scope.achieves.browser.value == 'false'){
                            $scope.source = 'browser';
                        } else if($scope.achieves.plugin && $scope.achieves.plugin.value == 'false'){
                            $scope.source = 'browser';
                        } else if($scope.achieves.addCandidateFromLink && $scope.achieves.addCandidateFromLink.value == 'false'){
                            $scope.source = 'addCandidateFromLink';
                        } else if($scope.achieves.addClient && $scope.achieves.addClient.value == 'false'){
                            $scope.source = 'addClient';
                        } else if($scope.achieves.addContactClient && $scope.achieves.addContactClient.value == 'false'){
                            $scope.source = 'addContactClient';
                        } else if($scope.achieves.addVacancy && $scope.achieves.addVacancy.value == 'false'){
                            $scope.source = 'addVacancy';
                        } else if($scope.achieves.changeInterviewState && $scope.achieves.changeInterviewState.value == 'false'){
                            $scope.source = 'changeInterviewState';
                        }else if($scope.achieves.orgLogo && $scope.achieves.orgLogo.value == 'false'){
                            $scope.source = 'orgLogo';
                        }else if($scope.achieves.publishVacancy && $scope.achieves.publishVacancy.value == 'false'){
                            $scope.source = 'publishVacancy';
                        }else if($scope.achieves.candidateToVacancy && $scope.achieves.candidateToVacancy.value == 'false'){
                            $scope.source = 'candidateToVacancy';
                        }else if($scope.achieves.sendCandidatesToClient && $scope.achieves.sendCandidatesToClient.value == 'false'){
                            $scope.source = 'sendCandidatesToClient';
                        }else if($scope.achieves.addInterview && $scope.achieves.addInterview.value == 'false'){
                            $scope.source = 'addInterview';
                        }else if($scope.achieves.closeVacancy && $scope.achieves.closeVacancy.value == 'false'){
                            $scope.source = 'closeVacancy';
                        }else if($scope.achieves.uploadArchive && $scope.achieves.uploadArchive.value == 'false'){
                            $scope.source = 'uploadArchive';
                        }else if($scope.achieves.addCandidateFromCV && $scope.achieves.addCandidateFromCV.value == 'false'){
                            $scope.source = 'addCandidateFromCV';
                        }
                    } else{
                        if( $scope.achieves.addEmailForParsing && $scope.achieves.addEmailForParsing.value == 'false'){
                            $scope.source = 'linkMail';
                        } else if($scope.achieves.browser && $scope.achieves.browser.value == 'false'){
                            $scope.source = 'browser';
                        } else if($scope.achieves.plugin && $scope.achieves.plugin.value == 'false'){
                            $scope.source = 'browser';
                        } else if($scope.achieves.addCandidateFromLink && $scope.achieves.addCandidateFromLink.value == 'false'){
                            $scope.source = 'addCandidateFromLink';
                        } else if($scope.achieves.addClient && $scope.achieves.addClient.value == 'false'){
                            $scope.source = 'addClient';
                        } else if($scope.achieves.addContactClient && $scope.achieves.addContactClient.value == 'false'){
                            $scope.source = 'addContactClient';
                        } else if($scope.achieves.addVacancy && $scope.achieves.addVacancy.value == 'false'){
                            $scope.source = 'addVacancy';
                        } else if($scope.achieves.changeInterviewState && $scope.achieves.changeInterviewState.value == 'false'){
                            $scope.source = 'changeInterviewState';
                        }else if($scope.achieves.publishVacancy && $scope.achieves.publishVacancy.value == 'false'){
                            $scope.source = 'publishVacancy';
                        }else if($scope.achieves.candidateToVacancy && $scope.achieves.candidateToVacancy.value == 'false'){
                            $scope.source = 'candidateToVacancy';
                        }else if($scope.achieves.sendCandidatesToClient && $scope.achieves.sendCandidatesToClient.value == 'false'){
                            $scope.source = 'sendCandidatesToClient';
                        }else if($scope.achieves.addInterview && $scope.achieves.addInterview.value == 'false'){
                            $scope.source = 'addInterview';
                        }else if($scope.achieves.closeVacancy && $scope.achieves.closeVacancy.value == 'false'){
                            $scope.source = 'closeVacancy';
                        }else if($scope.achieves.uploadArchive && $scope.achieves.uploadArchive.value == 'false'){
                            $scope.source = 'uploadArchive';
                        }
                    }
                }
                if($scope.achieves2){
                    if($rootScope.me.personId == $rootScope.me.org.creatorId){
                        if($scope.achieves2.closeVacancyUser3OrOrg6 && $scope.achieves2.closeVacancyUser3OrOrg6.value == 'false'){
                            $scope.source = 'closeVacancyUser3OrOrg6';
                        } else if($scope.achieves2.addCandidateFromLink400 && $scope.achieves2.addCandidateFromLink400.value == 'false'){
                            $scope.source = 'addCandidateFromLink400';
                        }else if($scope.achieves2.upload300resumeFromArchiveOrEmail && $scope.achieves2.upload300resumeFromArchiveOrEmail.value == 'false'){
                            $scope.source = 'upload300resumeFromArchiveOrEmail';
                        }else if($scope.achieves2.makePay && $scope.achieves2.makePay.value == 'false'){
                            $scope.source = 'makePay';
                        }
                    } else{
                        if($scope.achieves2.closeVacancyUser3OrOrg6 && $scope.achieves2.closeVacancyUser3OrOrg6.value == 'false'){
                            $scope.source = 'closeVacancyUser3OrOrg6';
                        } else if($scope.achieves2.addCandidateFromLink400 && $scope.achieves2.addCandidateFromLink400.value == 'false'){
                            $scope.source = 'addCandidateFromLink400';
                        }else if($scope.achieves2.upload300resumeFromArchiveOrEmail && $scope.achieves2.upload300resumeFromArchiveOrEmail.value == 'false'){
                            $scope.source = 'upload300resumeFromArchiveOrEmail';
                        }
                    }
                }
            }
        });
    };
    $scope.updateAchieve();
    $scope.achievePopup = function(){
        $('.helpIcon').popup({
            position : 'top center',
            on: 'click'
        });
        $('.achieveContainer').on('click',function(e){
            var kids = $(e.target).children('.helpIcon');
            kids.click();
        })
    };
    $scope.achievePopup();
    $scope.getPlugin = function() {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            window.open("https://chrome.google.com/webstore/detail/cleverstaff-extension/komohkkfnbgjojbglkikdfbkjpefkjem");
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
            window.open("/extension/CleverstaffExtension4Firefox.xpi");
        } else {
            $("#bad-browser-modal").modal("show");
        }
    };
    $scope.achieveClicked = function(source){
        $scope.source = source;
    };

    $scope.share = function(sourse) {

        var link = $location.$$protocol + "://" + $location.$$host;
        if (sourse === 'linkedin') {
            if (!IN.User.isAuthorized()) {
                console.log('photoLink ' + $scope.publicImgLink);
                IN.User.authorize(function() {
                    IN.API.Raw("/people/~/shares")
                        .method("POST")
                        .body(JSON.stringify({
                            "content": {
                                "submitted-url": link,
                                "title": $filter('translate')('Congratulations') + ', CleverStaff Guru ' + $rootScope.me.cutFullName + '!',
                                "description": $filter('translate')('Text for social achieves'),
                                "submitted-image-url": $scope.publicImgLink
                            },
                            "visibility": {
                                "code": "anyone"
                            },
                            "comment": ''
                        }))
                        .result(function(r) {
                            notificationService.success($filter('translate')('News posted on your LinkedIn'));
                            //$scope.addPublish('linkedin');
                            autoRefreshIN();
                        })
                        .error(function(r) {
                            notificationService.error(r.message);
                        });
                }, "w_share");
            } else {
                console.log('photoLink ' + $scope.publicImgLink);
                IN.API.Raw("/people/~/shares")
                    .method("POST")
                    .body(JSON.stringify({
                        "content": {
                            "submitted-url": link,
                            "title": $filter('translate')('Congratulations') + ', CleverStaff Guru ' + $rootScope.me.cutFullName + '!',
                            "description": $filter('translate')('Text for social achieves'),
                            "submitted-image-url": $scope.publicImgLink
                        },
                        "visibility": {
                            "code": "anyone"
                        },
                        "comment": ""
                    }))
                    .result(function(r) {
                        notificationService.success($filter('translate')('News posted on your LinkedIn'));
                        //$scope.addPublish('linkedin');
                        autoRefreshIN();
                    })
                    .error(function(r) {
                        notificationService.error(r.message);
                    });
            }
        }
        if (sourse === 'facebook') {
            FB.getLoginStatus(function(response) {
                console.log('photoLink ' + $scope.publicImgLink);
                if (response.status === 'connected') {
                    FB.ui({
                            method: 'feed',
                            name: $filter('translate')('Congratulations') + ', CleverStaff Guru ' + $rootScope.me.cutFullName + '!',
                            caption: '',
                            description: $filter('translate')('Text for social achieves'),
                            link: link,
                            picture: $scope.publicImgLink
                        },
                        function(response) {
                            if (response && response.post_id) {
                                notificationService.success($filter('translate')('News posted on your Facebook'));
                                //$scope.addPublish('facebook');
                            } else {
                                notificationService.error($filter('translate')('News was not published.'));
                            }
                        });
                }
                else {
                    console.log('photoLink ' + $scope.publicImgLink);

                    FB.login(function() {
                        FB.ui({
                                method: 'feed',
                                name: $filter('translate')('Congratulations') + ', CleverStaff Guru ' + $rootScope.me.cutFullName + '!',
                                caption: '',
                                description:$filter('translate')('Text for social achieves'),
                                link: link,
                                picture: $scope.publicImgLink
                            },
                            function(response) {
                                if (response && response.post_id) {
                                    notificationService.success($filter('translate')('News posted on your Facebook'));
                                } else {
                                    notificationService.error($filter('translate')('News was not published.'));
                                }
                            });
                    });
                }
            });
        }
    };
    $scope.toggleAchieve1 = function ($event){
        $("#achieve1").slideToggle("slow");
        var toggleIconPlus = $($event.currentTarget).find('.indicator');

            toggleIconPlus.toggleClass('fa-plus fa-minus');


    };
    $scope.toggleAchieve2 = function ($event){
        if($scope.achievePercent >= 100){
            $("#achieve2").slideToggle("slow");
            $($event.currentTarget).find(" .indicator").toggleClass('fa-minus fa-plus');
        }
    };



        $scope.popoverPosition = function (event, height) {
            var popoverTop = $(event.target).position().top - height - 5 + "px";
            if(!$scope.popoverStyleElem){
                $scope.popoverStyleElem = $("<style>").prop("type", "text/css")
                    .html("\
                .achievement-block .achievement-list .events_c .achieveContainer .popover{\
                top: " + popoverTop + " !important;\
                }")
                    .appendTo("head");
            }else{
                $scope.popoverStyleElem.html("\
                .achievement-block .achievement-list .events_c .achieveContainer .popover{\
                top: " + popoverTop + " !important;\
                }");
            }
        };


    $scope.htmlPopover = $sce.trustAsHtml("<div class='popupOuter'><a href='#/email-integration' target='_blank'><img src='../images/sprite/achievesImg/Import_from_email.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover2 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/3.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover3 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/4.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover4 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/ustanovit-vascherenie-dlya-Chome.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover5 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/email-integration' target='_blank'><img src='../images/sprite/achievesImg/6.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover6 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/candidate/add' target='_blank'><img src='../images/sprite/achievesImg/Upload_cv.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover7 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/client/add' target='_blank'><img src='../images/sprite/achievesImg/Dobavit-zakazchika.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover8 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/email-integration' target='_blank'><img src='../images/sprite/achievesImg/Add_contact.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover9 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/vacancy/add' target='_blank'><img src='../images/sprite/achievesImg/Add_vacancy.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover10 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/candidate/add/zip' target='_blank'><img src='../images/sprite/achievesImg/upload_cvs_arcive.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover11 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/izmenit-etapi-kandidatov.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover12 = $sce.trustAsHtml("<div class='popupOuter'><a href='#/company/settings' target='_blank'><img src='../images/sprite/achievesImg/Upload_logo.png' alt='' class='achieveImg'/></a><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover13 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/opublikovat-vakansiy-v-sotsseti.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover14 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/add_candidate_to_vacancy.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover15 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/Send-candidates-to-the-client-by-email.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover16 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/naznachit-sobesedovanie.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");
    $scope.htmlPopover17 = $sce.trustAsHtml("<div class='popupOuter'><img src='../images/sprite/achievesImg/zakrit-vakansiy.png' alt='' class='achieveImg'/><i class='fa fa-times stlForImg' aria-hidden='true'></i></div>");

            angular.element(document.body).bind('click', function (e) {
                var popups = document.querySelectorAll('.popover');
                if(popups) {
                    for(var i=0; i<popups.length; i++) {
                        var popup = popups[i];
                        var popupElement = angular.element(popup);
                        var content;
                        var arrow;
                        if(popupElement.next()) {
                            //The following is the content child in the popovers first sibling
                            // For the classic popover with Angularjs Ui Bootstrap
                            content = popupElement[0].querySelector('.popover-content');
                            // For the templating popover (popover-template attrib) with Angularjs Ui Bootstrap
                            bodytempl = popupElement[0].querySelector('.popover-body');
                            headertempl= popupElement[0].querySelector('.popover-title');
                            //The following is the arrow child in the popovers first sibling
                            // For both cases.
                            arrow = popupElement[0].querySelector('.arrow');
                        }
                        //console.log(content);
                        //console.log(bodytempl);
                        //console.log(headertempl);
                        if(popupElement[0].previousSibling!=e.target && e.target != content && e.target != arrow && e.target != bodytempl && e.target != headertempl){
                            //popupElement.scope().$parent.isOpen=false;
                            popupElement.remove();
                        }
                    }
                }
            });




        $.getScript("https://platform.linkedin.com/in.js?async=true", function success() {
        IN.init({
            api_key: apiKey.linkedIn.api_key,
            scope: "r_emailaddress w_share"
        });
    });
    $.getScript('//connect.facebook.net/en_UK/sdk.js', function() {
        FB.init({
            appId: apiKey.facebook.appId,
            version: 'v2.9'
        });
    });

    $rootScope.switchTabs = function(){
        $rootScope.showAchieves = !$rootScope.showAchieves;
        localStorage.showAchieves = $rootScope.showAchieves;
    };
    $scope.tableParams.reload();

    $rootScope.openAchievesCongrat = function () {
        $('.congrat.modal').modal('show');
    };
    //
    //$scope.openChangeVacancyInterviewDate = function(interviewObject) {
    //    $rootScope.vacancyChangeInterviewDate.interviewObject = interviewObject;
    //    $rootScope.vacancyChangeInterviewDate.date = interviewObject.date;
    //    $rootScope.vacancyChangeInterviewDate.candidate = interviewObject.candidate.candidateId;
    //    $rootScope.vacancyChangeInterviewDate.dateOld = angular.copy(interviewObject.date);
    //    if ($rootScope.vacancyChangeInterviewDate.date != undefined) {
    //        $(".changeVacancyInterviewDatePicker").datetimepicker("setDate", new Date(angular.copy(interviewObject.date)));
    //    } else {
    //        $(".changeVacancyInterviewDatePicker").val("");
    //    }
    //    $('.changeVacancyInterviewDate.modal').modal('show');
    //};

    $rootScope.saveChangedVacancyInterview = function() {
        var object = $rootScope.vacancyChangeInterviewDate;
        var newDate = $('.changeVacancyInterviewDatePicker').datetimepicker('getDate') != null ?
            $('.changeVacancyInterviewDatePicker').datetimepicker('getDate').getTime() : null;
        if(newDate) {
            Vacancy.changeInterviewDate({
                interviewId: object.interviewObject.interviewId,
                date: newDate,
                comment: object.comment != null ? object.comment : "",
                lang: $translate.use()
            }, function(resp) {
                $scope.tableParams.reload();
                object.interviewObject.dateInterview = newDate;
               $rootScope.closeModal();
                if ($rootScope.selectedCalendar != undefined) {
                    googleCalendarUpdateEvent(googleService, new Date(newDate), resp.object.candidateId.fullName,
                        $scope.vacancy.position, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null,
                        resp.object.comment, resp.object.interviewId + object.interviewObject.state, $filter);

                }
                var activeParam = ScopeService.getActiveScopeObject();
                $scope.activeScopeParam = activeParam;
                var requestQuery = {
                    personId: activeParam.name == 'onlyMy' ? $rootScope.userId : null
                };
                requestQuery.country = activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null;
                requestQuery.city = activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null;
                Vacancy.getEvents(requestQuery, function(resp) {
                    $scope.events = $filter('getorders')(resp.objects);
                    if (activeParam.name == 'region' || activeParam.name == 'onlyMy') {
                        $scope.showEvents = true
                    } else {

                        if($rootScope.me.recrutRole!='admin'){
                            $scope.showEvents=true
                        }else{
                            $scope.showEvents = resp.objects != undefined && resp.objects.length > 0;
                        }
                    }
                    $rootScope.loading = false;
                });
            });
        } else {
            notificationService.error($filter('translate')('Select the interview date'));
        }
    };
        if($rootScope.me.recrutRole != 'client'){
            $timeout(function(){
                if($rootScope.questStatus){
                    if ($rootScope.questStatus.letsCelebratePopup == 'Y') {
                        $rootScope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/HelloQuest/helloQuestStart.html',
                            size: 'lg',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: function () {

                            }
                        });
                    }
                    if ($rootScope.questStatus.onboardingQuestPopup == 'Y') {
                        $rootScope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/HelloQuest/helloQuestOnBoard.html',
                            size: '',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: function () {

                            }
                        });
                    }
                }
            },0);
            //Person.changeUserParam({
            //    userId: 'userId',
            //    name: 'letsCelebratePopup',
            //    value: 'Y'
            //}, function (resp){});
            $rootScope.continueQuest = function (key) {
                $rootScope.loading = true;
                Person.changeUserParam({
                    name: key,
                    value: 'Y'
                }, function (resp) {
                    if (resp.status == "ok") {
                        $rootScope.updateQuestStatus();
                        $location.path("/candidates");
                        $timeout(function(){
                            $rootScope.loading = false;
                        }, 500);
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            };
            $rootScope.finishQuest = function () {
                $rootScope.closeModal();
                Person.changeUserParam({
                    name: 'onboardingQuestPopup',
                    value: 'N'
                }, function (resp) {
                    if (resp.status == "ok") {
                        $('html, body').animate({
                            scrollTop: $("#accordion").offset().top
                        }, 1000);
                        $rootScope.updateQuestStatus();
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            };
        }
            $rootScope.closeModal = function () {
                $scope.modalInstance.close();
            };

    $rootScope.changeTaskState = function(task){
        Task.changeState({
            "taskId": task.taskId,
            "taskState":task.status == 'open'? "completed" : 'open'
        }, function(resp){
            if(resp.status == 'ok'){
                if($rootScope.editableTask){
                    $rootScope.editableTask = resp.object;
                }
                $scope.tableParams.reload();
            }else{
                notificationService.error(resp.message);
            }
        })
    };
        $(".changeDateNewTask").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:00" : "mm/dd/yyyy hh:00",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        }).on('changeDate', function (data) {
            console.log(data);
            $rootScope.newTask.targetDate = $('.changeDateNewTask').datetimepicker('getDate');
            $scope.roundMinutes($rootScope.newTask.targetDate)
        }).on('hide', function () {
            if ($('.changeDateNewTask').val() == "") {
                $rootScope.newTask.date = "";
            }
        });
        $(".withoutTimeTask").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:00" : "mm/dd/yyyy hh:00",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        }).on('changeDate', function (data) {
            $rootScope.editableTask.targetDate = $('.withoutTimeTask').datetimepicker('getDate');
            $scope.roundMinutes($rootScope.editableTask.targetDate);
            Task.changeTargetDate({
                "taskId": $rootScope.editableTask.taskId,
                "date":$rootScope.editableTask.targetDate
            }, function(resp){
                $scope.tableParams.reload();
            })
        }).on('hide', function () {
            if ($('.withoutTimeTask').val() == "") {
                $rootScope.editableTask.date = "";
            }
        });


    //    $rootScope.editNameTask = function(hideModal){
    //    if($rootScope.editableTask.title.length > 0){
    //        $rootScope.editableTask.responsibleIds = [];
    //        angular.forEach($rootScope.responsiblePersons, function(resp){
    //            $rootScope.editableTask.responsibleIds.push(resp.userId)
    //        });
    //        Task.edit({
    //            "taskId": $rootScope.editableTask.taskId,
    //            "status": $rootScope.editableTask.status,
    //            "title": $rootScope.editableTask.title,
    //            "text": $rootScope.editableTask.text,
    //            "targetDate": $rootScope.editableTask.targetDate,
    //            "responsibleIds": $rootScope.editableTask.responsibleIds,
    //            "type": $rootScope.editableTask.type
    //        }, function(resp){
    //            if(resp.status == 'ok'){
    //                $rootScope.showEditNameTask = false;
    //                $rootScope.showEditTextTask = false;
    //                $scope.tableParams.reload();
    //                if(!hideModal){
    //                    $rootScope.closeModal();
    //                }
    //            }else{
    //                notificationService.error(resp.message);
    //            }
    //        })
    //    }else{
    //        notificationService.error($filter('translate')('Please enter a title for the task'));
    //    }
    //};
    //$rootScope.deleteTask = function(){
    //    Task.changeState({
    //        "taskId": $rootScope.editableTask.taskId,
    //        "taskState":'deleted'
    //    }, function(resp){
    //        if(resp.status == 'ok'){
    //            $rootScope.closeModal();
    //            //$('.editTaskInCandidate').modal('hide');
    //            $scope.tableParams.reload();
    //        }else{
    //            notificationService.error(resp.message);
    //        }
    //    })
    //};

    $scope.roundMinutes = function(date) {

        date.setHours(date.getHours());
        date.setMinutes(0);

        return date;
    };
        //$rootScope.addResponsibleInEdit = function(responsible){
        //    var i = 0;
        //    angular.forEach($rootScope.responsiblePersons, function(resp){
        //        if (resp.userId == responsible.userId){
        //            i++;
        //        }
        //    });
        //    if (i > 0){
        //        notificationService.error($filter('translate')('This user already responsible for this task'));
        //    }else{
        //        responsible.notShown = true;
        //        $rootScope.responsiblePersons.unshift(responsible);
        //    }
        //    $rootScope.editNameTask(true);
        //};
        //$rootScope.deleteResponsibleInEdit = function(responsible){
        //    if($rootScope.responsiblePersons.length > 1){
        //        angular.forEach($rootScope.responsiblePersons, function(resp){
        //            if (resp.userId == responsible.userId){
        //                responsible.notShown = false;
        //                $rootScope.responsiblePersons.splice($rootScope.responsiblePersons.indexOf(resp), 1);
        //            }
        //        });
        //        $rootScope.editNameTask(true);
        //    }else{
        //        notificationService.error($filter('translate')('The task must have at least one responsible'));
        //    }
        //};

        $scope.showModalUsersLogoutNotification = function(){
            $('.usersLogoutNotification').modal('setting',{
                onHide: function(){
                    localStorage.otherSessionsRemoves = false;
                }
            }).modal('show');
        };
        $document.ready(function(){
            if(localStorage.otherSessionsRemoves == 'true'){
                $scope.showModalUsersLogoutNotification();
            }
        });
        $rootScope.changeTabOnTask = function(val){
            if (val == "Task") {
                $rootScope.editableTask.type = 'Task';
            } else if (val == "Call") {
                $rootScope.editableTask.type = 'Call';
            } else if (val == "Meeting") {
                $rootScope.editableTask.type = 'Meeting';
            }
            $rootScope.editNameTask(true);
        };
        $scope.open = function (size) {

            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/send-vacancy-by-email.html',
                size: size,
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        $scope.CSNewsFeed = function(name){
            $scope.variable = $("." + name);
            if($scope.variable.css('display') == 'none'){
                $($scope.variable).slideDown();
                $('body').mouseup(function (e) {
                    if ($($scope.variable).has(e.target).length === 0) {
                        $scope.variable.slideUp();
                        $(document).off('mouseup');
                    }
                });
            }
        };

        $scope.showChangeInterviewTime = function(interviewObject){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/organizer-change-interview-time.html',
                size: '',
                resolve: function () {

                }
            });
            $scope.modalInstance.opened.then(function() {
                setTimeout(function(){
                    $(".changeVacancyInterviewDatePicker").datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function(data) {
                        $rootScope.vacancyChangeInterviewDate.date = data.date;
                    }).on('hide', function() {
                        if ($('.changeVacancyInterviewDatePicker').val() == "") {
                            $rootScope.vacancyChangeInterviewDate.date = null;
                        }
                    });
                    $rootScope.vacancyChangeInterviewDate.interviewObject = interviewObject;
                    $rootScope.vacancyChangeInterviewDate.date = interviewObject.date;
                    $rootScope.vacancyChangeInterviewDate.candidate = interviewObject.candidate.candidateId;
                    $rootScope.vacancyChangeInterviewDate.dateOld = angular.copy(interviewObject.date);
                    if ($rootScope.vacancyChangeInterviewDate.date != undefined) {
                        $(".changeVacancyInterviewDatePicker").datetimepicker("setDate", new Date(angular.copy(interviewObject.date)));
                    } else {
                        $(".changeVacancyInterviewDatePicker").val("");
                    }
                },0)
            });
        };

        if($rootScope.currentLang == 'en'){
            (function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_EN/all.js#xfbml=1&version=v2.8&appId=1106253812731158";
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
        }else{
            (function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/ru_RU/all.js#xfbml=1&version=v2.8&appId=1106253812731158";
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
        }
}]);

controller.controller('ActivityGlobalHistoryController', ["$scope", "$rootScope", "Service", "Person", "Company", "notificationService", "$filter", "$translate", "$uibModal", "vacancyStages","Action","CacheCandidates",
    function($scope, $rootScope, Service, Person, Company, notificationService, $filter, $translate, $uibModal, vacancyStages, Action, CacheCandidates) {
    $scope.showHistory = true;
    $scope.loading = true;
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
    $scope.search = function() {
        var country = null;
        var city = null;
        if ($scope.regionId) {
            if ($scope.regionIdType == 'country') {
                country = $scope.regionId;
            } else if ($scope.regionIdType == 'city') {
                city = $scope.regionId;
            }
        }
        vacancyStages.get(function(resp){
            $scope.customStages =resp.object.interviewStates;
        });
        var array = [];
        $scope.updateHistory = function(){
            Service.history({
                country: country, city: city,
                //"ignoreType":['sent_candidate_to_client'],
                personId: $rootScope.onlyMe ? $rootScope.userId : null,
                "page": {"number": 0, "count": $scope.historyLimit ? $scope.historyLimit : 20}
            }, function(res) {
                $scope.history = res.objects;
                angular.forEach($scope.history, function(value){
                    if(value.stateNew && value.type == "set_interview_status"){
                        array = value.stateNew.split(",");
                        angular.forEach($scope.customStages,function(val){
                            angular.forEach(array,function(resp){
                                if(val.customInterviewStateId == resp){
                                    array[array.indexOf(val.customInterviewStateId)] = val.name;
                                }
                            });
                        });
                        value.stateNew = array.toString();
                    }
                });
                $scope.showHistory = res.objects != undefined;

                $scope.historyLimit = 20;
                $scope.historyTotal = res.total;
                $scope.loading = false;
            });
        };
        $scope.updateHistory();
    };

    $scope.search();
    $scope.getMoreHistory = function() {
        var country = null;
        var city = null;
        if ($scope.regionId) {
            if ($scope.regionIdType == 'country') {
                country = $scope.regionId;
            } else if ($scope.regionIdType == 'city') {
                city = $scope.regionId;
            }
        }
        Service.history({
            country: country, city: city,
            personId: $rootScope.onlyMe ? $rootScope.userId : null,
            "page": {"number": 0, "count": $scope.historyLimit *= 2}
        }, function(res) {
            $scope.history = res.objects;
            $scope.loading = false;

        }, function(error) {
        });
    };
    listenerForScopeLight($scope, $rootScope);

    $scope.callbackAddLogo = function(photo) {
        $rootScope.companyLogo = photo;
        $rootScope.logoLink = $scope.serverAddress + "/getapp?id=" + $rootScope.companyLogo + "&d=true";
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };

        $scope.changeComment = function(action){
            Action.editAction({"comment": action.descr, "actionId": action.actionId}, function(resp){
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                }
                else {
                    action.editCommentFlag = false;
                    action.descr = resp.object.descr;
                    action.new_komment = '';
                    action.dateEdit = resp.object.dateEdit;
                }
            });
        };
        $scope.changeCommentFlag = function(history){
            history.editCommentFlag = !history.editCommentFlag;
            $scope.editComment = history.descr;
            console.log('history.editCommentFlag');
        };

        $scope.showDeleteComment = function(resp) {

            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-comment-candidate.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $rootScope.commentRemove = resp;
            $rootScope.commentRemoveId = resp.actionId;
            console.log('deleteFunc');
        };

        $rootScope.deleteComment = function() {
            Action.removeMessageAction({
                actionId: $rootScope.commentRemoveId
            },function(resp){
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('Comment removed'));
                    if(!$scope.onlyComments){
                        $scope.updateHistory();
                    }
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $scope.closeModal();
            })
        };
}]);

controller.controller('hrModuleInfoController',["$scope","$rootScope", "$filter", "Pay", "notificationService",
    function($scope, $rootScope, $filter, Pay, notificationService) {
        $scope.payClick = function () {
            Pay.createPaymentHrModule({
                type: 'way4pay'
            }, function (resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    var form = '<form id="payForm" action="https://secure.wayforpay.com/pay" method="post">' +
                        '<input type="hidden" name="amount" value="' + resp.wayForPayParams.amount + '" />' +
                        '<input type="hidden" name="currency" value="' + resp.wayForPayParams.currency + '" />' +
                        '<input type="hidden" name="merchantAccount" value="' + resp.wayForPayParams.merchantAccount + '" />' +
                        '<input type="hidden" name="merchantDomainName" value="' + resp.wayForPayParams.merchantDomainName + '" />' +
                        '<input type="hidden" name="merchantSignature" value="' + resp.wayForPayParams.merchantSignature + '" />' +
                        '<input type="hidden" name="merchantTransactionSecureType" value="' + resp.wayForPayParams.merchantTransactionSecureType + '" />' +
                        '<input type="hidden" name="merchantTransactionType" value="' + resp.wayForPayParams.merchantTransactionType + '" />' +
                        '<input type="hidden" name="orderDate" value="' + resp.wayForPayParams.orderDate + '" />' +
                        '<input type="hidden" name="orderReference" value="' + resp.wayForPayParams.orderReference + '" />' +
                        '<input type="hidden" name="paymentSystems" value="' + resp.wayForPayParams.paymentSystems + '" />' +
                        '<input type="hidden" name="productCount[]" value="' + resp.wayForPayParams.productCount + '" />' +
                        '<input type="hidden" name="productName[]" value="' + resp.wayForPayParams.productName + '" />' +
                        '<input type="hidden" name="productPrice[]" value="' + resp.wayForPayParams.productPrice + '" />' +
                        '<input type="hidden" name="returnUrl" value="' + resp.wayForPayParams.returnUrl + '" />' +
                        '<input type="hidden" name="serviceUrl" value="' + resp.wayForPayParams.serviceUrl + '" />' +
                        '</form>';
                    $('body').append(form);
                    $('#payForm').submit();
                    $('#payForm').remove();
                }
            }, function () {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
}]);
controller.controller('newsController',["$scope", "Notice", "Service","Person","$rootScope", "$filter",
    function($scope, Notice, Service, Person, $rootScope, $filter) {
        var TIMEOUT = null;
            if(TIMEOUT === null) {
                TIMEOUT = window.setTimeout(function() {
                    TIMEOUT = null;
                    //fb_iframe_widget class is added after first FB.FXBML.parse()
                    //fb_iframe_widget_fluid is added in same situation, but only for mobile devices (tablets, phones)
                    //By removing those classes FB.XFBML.parse() will reset the plugin widths.
                    $('.fb-page').removeClass('fb_iframe_widget fb_iframe_widget_fluid');
                    console.log('parse');
                    FB.XFBML.parse();
                }, 50);
            }
        $scope.CSNewsFeed = function(name){
            $scope.variable = $("." + name);
            if($scope.variable.css('display') == 'none'){
                $($scope.variable).slideDown();
                $('body').mouseup(function (e) {
                    if ($($scope.variable).has(e.target).length === 0) {
                        $scope.variable.slideUp();
                        $(document).off('mouseup');
                    }
                });
            }
        };
}]);
controller.controller('ActivityNoticesController',["$scope", "Notice", "Service","Person","$rootScope", "$filter", function($scope, Notice, Service, Person, $rootScope, $filter) {
    var noticeDate = new Date();
    var sendReadRequest = [];
    console.log(noticeDate);
    noticeDate.setDate(1);
    noticeDate.setMonth(noticeDate.getMonth() + 1);
    noticeDate.setHours(0);
    noticeDate.setMinutes(0);
    $scope.notices = [];
    $scope.usedIds = {};
    $scope.searchNumber = 1;
    $scope.showNumber = 20;

    Notice.registerNoticeView(function(id) {
        angular.forEach($scope.notices, function(not) {
            angular.forEach(not.object, function(val) {
                if (val.noticeId == id) {
                    val.read = true;
                }
            })
        });
    }, "ActivityNoticesController");
    $scope.hideButtonPrevHistory = false;
    var array = [];
    $scope.updateNotification = function(){
        Notice.all({
            from: null,
            to: null,
            page:{
                count:$scope.showNumber,
                number:$scope.searchNumber - 1
            }
        }, function(resp) {
            $scope.notificationOuter = resp;
            $scope.getMoreHistoryLoading = false;
            if (resp.status == 'ok' && resp.objects != undefined && resp.objects.length > 0) {
                console.log(resp);
                /** @namespace resp.objects */
                array.push({date: noticeDate.getTime(), object: resp.objects});
                $scope.notices = array;
                array = [];
                angular.forEach($scope.notices[0].object,function(data,key){
                    data.dateCreationMonth = $filter('date')(data.dc,'MM')
                });
                console.log($scope.notices);
                $scope.totalPages = Math.ceil($scope.notificationOuter.total/$scope.showNumber)
            } else if (resp.status == 'ok' && resp.objects == undefined) {
                $scope.hideButtonPrevHistory = true;
            }

        }, function(respError) {
            $scope.getMoreHistoryLoading = true;
        });
    };
    $scope.getBehindLastMonth = function(subtractMonth) {
        $scope.getMoreHistoryLoading = true;
        var to = angular.copy(noticeDate);
        if (subtractMonth) {
            noticeDate.setMonth(noticeDate.getMonth() - 1);
        }
        $scope.updateNotification();
    };
    function pageScroll() {
        $(window).scroll(function() {
            if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
                $(window).unbind('scroll');
                $scope.getBehindLastMonth(true);
            }
        });

    }

    $scope.getBehindLastMonth(true);

    $scope.readNotice = function(n) {
        if (!n.read) {
            Notice.updateNoticesView(n.noticeId, "ActivityNoticesController");
            if (!n.read && sendReadRequest.indexOf(n.noticeId) == -1) {
                sendReadRequest.push(n.noticeId);
                var index = sendReadRequest.indexOf(n.noticeId);
                Service.readNotice(n.noticeIds, function(resp) {
                    if (resp.status && resp.status == "ok") {
                        n.read = true;
                        document.dispatchEvent(new CustomEvent('cleverstaffExtensionReloadCountUnreadNotice'));
                    } else if (resp.message) {
                    }
                    sendReadRequest.splice(index, 1);
                }, function(resp) {
                    sendReadRequest.splice(index, 1);
                });
            } else {
            }
        }
    };
    $scope.checkEverythingRead = function(){
        noticeDate = new Date();
        noticeDate.setDate(1);
        noticeDate.setMonth(noticeDate.getMonth() + 1);
        noticeDate.setHours(0);
        noticeDate.setMinutes(0);
        Notice.readAll(function(resp){
            if(resp.status == 'ok'){
                $rootScope.changeFaviconNumber(0);
                $scope.getBehindLastMonth(true);
                $rootScope.updateNoticesNav();
            }
        })
    };

    $scope.changePage= function(index){
        console.log(index);
        $scope.searchNumber = $scope.searchNumber + index;
        $scope.updateNotification();
    };

    $scope.changeInputPage = function(){
        if($scope.searchNumber){
            $scope.updateNotification();
        }
    };
    $scope.changeShowNumber = function(number){
        $scope.showNumber = number;
        $scope.updateNotification();
    };


}]);
controller.controller('reportsController',["$scope", "$rootScope", "$location", "localStorageService", "Vacancy", "ngTableParams", "Client", "$filter", "Service",
    "ScopeService", "Company", "notificationService", "serverAddress", "$timeout", "Person", "$uibModal", "$anchorScroll","Stat", function($scope, $rootScope, $location, localStorageService, Vacancy, ngTableParams, Client, $filter, Service, ScopeService, Company, notificationService,
                                                                                                      serverAddress, $timeout, Person, $uibModal, $anchorScroll, Stat) {

    if($location.path() == '/reports/vacancy') {
        $scope.vacanciesFound = null;
        $rootScope.searchCheckVacancy = $rootScope.searchCheckVacancy == undefined ? false : $rootScope.searchCheckVacancy;
        $scope.onlyMe = $rootScope.onlyMe;
        $scope.salaryObject = Service.getSalary();
        $scope.previousFlag = true;
        $scope.a = {};
        $scope.a.searchNumber = 1;
        $scope.status = Vacancy.status();
        $scope.employmentType = Service.employmentType();
        $scope.regionId = null;
        $scope.loader = false;
        $scope.searchStatus = '';
        $scope.chosenStatuses = [];
        $scope.currentStatus = null;
        $scope.isSearched = false;
        $rootScope.changeStateObject = {status: "", comment: "", placeholder: null};
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.vacancy = {
            accessType: 'public',
            currency: "USD",
            dateFinish: null,
            datePayment: null,
            descr: "",
            sex:null,
            langs: '',
            status: "open",
            clientId: {
                clientId: $rootScope.addVacancyClientId
            }
        };
        $rootScope.addVacancyClientId = null;

        $scope.toVacancyReport = function (localId) {
            $location.path('reports/vacancy/' + localId);
        };

        if($rootScope.me.personParams.clientAccessLevel != 'hide') {
            Client.all(Client.searchOptions(), function(response) {
                $scope.clients = response.objects;
                var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('chose_customer')+'</option>';
                angular.forEach($scope.clients, function (value) {
                    optionsHtml += "<option style='color: #000000' value='" + value.clientId + "'>" + value.name + "</option>";
                });
                $('#client-select').html(optionsHtml);
            });
        }
        Service.getRegions2(function (resp) {
            $scope.regions = resp;
            var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('region')+'</option>';
            console.log($scope.searchParam['regionId']);
            angular.forEach($scope.regions, function (value) {
                if(JSON.stringify(value).replace(/\'/gi,"") == $scope.searchParam['regionId']){
                    optionsHtml += "<option style='color: #000000' selected value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
                }else{
                    optionsHtml += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
                }
            });
            $('#cs-region-filter-select').html(optionsHtml);
        });
        if ($rootScope.curentOnlyMenWatch !== undefined) {
            $rootScope.curentOnlyMenWatch();
        }
        if ($rootScope.curentRegionWatch !== undefined) {
            $rootScope.curentRegionWatch();
        }

        function scope_update(val) {
            $scope.tableParams.reload();
        }

        ScopeService.setCurrentControllerUpdateFunc(scope_update);

        $rootScope.statusInter = Vacancy.getInterviewStatus();
        /************************Параметры при загрузке страницы*******************************/
        if(localStorage.countVacancy){
            $scope.startPagesShown = localStorage.countVacancy;
        } else{
            $scope.startPagesShown = 15;
        }
        $scope.searchParam = {
            searchCs: true,
            salary: "",
            status: "",
            regionId: null,
            words: "",
            personId: 'null',
            clientId: "",
            personNameWhoSearching: $rootScope.usernameThatIsSearching,
            pages: {count: $scope.startPagesShown}
        };

        //This function must be after init searchParam
        if ($rootScope.previousLocation == '/vacancies/:id') {
            if ($rootScope.searchParamInVacancies != undefined) {
                $scope.searchParam = $rootScope.searchParamInVacancies;
                if($scope.searchParam.clientId){
                    $scope.$watch('setClientAutocompleterValue',function(newVal, oldVal){
                        if(newVal != undefined){
                            $scope.setClientAutocompleterValue($scope.searchParam.clientName, $scope.searchParam.clientId);
                        }
                    })
                }
                $rootScope.searchParamInVacancies = null;
            }
        }else if ($rootScope.previousLocation == '/clients/:id' && $rootScope.allClientsVacancies == true){
            $scope.searchParam = {
                searchCs: true,
                salary: "",
                status: "",
                regionId: null,
                words: "",
                personId: Vacancy.searchOptions().personId,
                clientId: "",
                personNameWhoSearching: $rootScope.usernameThatIsSearching,
                pages: {count: $scope.startPagesShown}
            };
            $scope.searchParam.clientId = $rootScope.searchParamInVacancies.clientId;
            $scope.searchParam.clientName = $rootScope.searchParamInVacancies.clientName;
            if($rootScope.searchParamInVacancies.status != undefined) {
                $scope.searchParam.status = $rootScope.searchParamInVacancies.status;
                $scope.chosenStatuses = ['expects', 'payment', 'completed', 'canceled', 'deleted'];
            }
            $scope.$watch('setClientAutocompleterValue',function(newVal, oldVal){
                if(newVal != undefined){
                    $scope.setClientAutocompleterValue($scope.searchParam.clientName, $scope.searchParam.clientId);
                }
            })
        }
        $scope.deleteSearchByUser = function() {
            $scope.searchParam.personId = null;
            $scope.searchParam.personNameWhoSearching = null;
            $scope.tableParams.reload();
        };

        $scope.addSearchStatus = function (status) {
            console.log('status', status);
            if(status != 'null') {
                if($scope.chosenStatuses.indexOf(status) != -1){
                    notificationService.error($filter('translate')('the status is already selected'));
                } else{
                    $scope.chosenStatuses.push(status);
                    $scope.updateSearchStatuses();
                }
                console.log('statuses:', $scope.chosenStatuses);
            }
        };
        $scope.updateSearchStatuses = function () {
            $scope.searchParam.status = '';
            if($scope.chosenStatuses.length != 1) {
                angular.forEach($scope.chosenStatuses, function (status) {
                    $scope.searchParam.status = $scope.searchParam.status + status + ',';
                });
                $scope.searchParam.status = $scope.searchParam.status.replace(/,$/, "");
            }else {
                $scope.searchParam.status = $scope.chosenStatuses[0];
            }
        };
        $scope.deleteSearchStatus = function (selectedStatus) {
            $scope.chosenStatuses.splice(selectedStatus, 1);
            $scope.currentStatus = 'null';
            $scope.updateSearchStatuses();
        };
        $scope.clickSearch = function() {
            if($scope.searchParam['salaryName'] == null && $scope.searchParam.states == null &&
                $scope.searchParam.state == null && $("#clientAutocompleater").select2('data') == null &&
                $scope.searchParam.words.length == 0 && $scope.searchParam.name == null &&
                $scope.searchParam.position == null && $scope.searchParam.candidateGroups == null &&
                $scope.searchParam.regionId == null && $scope.searchParam.candidateGroupIds == null &&
                $scope.searchParam.searchFullTextType == null && $scope.searchParam['responsibleId'] == null &&
                $scope.searchParam['personId'] == 'null'){
                notificationService.error($filter('translate')('Enter the data'));
            }else{
                $rootScope.loading = true;
                if ($scope.searchParam['salaryName'] ||
                    $scope.searchParam['status'] ||
                    $("#clientAutocompleater").select2('data') !== null ||
                    $scope.searchParam['regionId'] ||
                    $scope.searchParam['responsibleId'] ||
                    $scope.searchParam['personId'] ||
                    $scope.searchParam['words']) {
                    if ($scope.searchParam['salaryName']) {
                        angular.forEach($scope.salaryObject, function(resp){
                            if(resp.name == $scope.searchParam.salaryName){
                                $scope.searchParam['salary'] = resp;
                            }
                        });
                        //$scope.searchParam['salary'] = angular.fromJson($scope.searchParam['salary']);
                    }
                    console.log($scope.searchParam['regionId']);
                    if ($("#clientAutocompleater").select2('data') !== null) {
                        $scope.searchParam['clientId'] =$("#clientAutocompleater").select2('data').id;
                        $scope.searchParam['clientName'] = $("#clientAutocompleater").select2('data').name
                    }
                    $scope.tableParams.$params.page = 1;
                    $scope.tableParams.reload();
                    $rootScope.searchCheckVacancy = true;
                    // console.log("CLICK TRU E")
                } else if ($rootScope.searchCheckVacancy) {
                    // console.log("CLIK TRUE");
                    $scope.tableParams.$params.page = 1;
                    $scope.tableParams.reload();
                    $rootScope.searchCheckVacancy = false;
                }
                $scope.isSearched = true;
            }
        };

        let currentPage = $scope.searchParam.pages.number;
        $scope.tableParams = new ngTableParams({
            page: 1,
            count: $scope.searchParam.pages.count
        }, {
            total: 0,
            getData: function($defer, params) {
                $rootScope.loading = true;
                if ($rootScope.previousLocation == '/vacancies/:id') {
                    if($scope.previousFlag){
                        $scope.tableParams.page($rootScope.previousSearchNumber);
                        $scope.previousFlag = !$scope.previousFlag;
                    }
                }
                if (ScopeService.isInit()) {
                    var activeParam = ScopeService.getActiveScopeObject();
                    $scope.activeScopeParam = activeParam;
                    Vacancy.setOptions("page", {number: (params.$params.page - 1), count: params.$params.count});
                    localStorage.countVacancy = params.$params.count;
                    $scope.searchParam.pages.count = params.$params.count;
                    $scope.searchParam.personId = $scope.searchParam.personId == 'null' ? null: $scope.searchParam.personId;
                    Vacancy.setOptions("personId", $scope.searchParam.personId != undefined ? $scope.searchParam.personId : activeParam.name == 'onlyMy' ? $rootScope.userId : null);
                    Vacancy.setOptions("salaryFrom", $scope.searchParam['salary'] ? $scope.searchParam['salary'].salaryFrom : null);
                    Vacancy.setOptions("salaryTo", $scope.searchParam['salary'] ? $scope.searchParam['salary']["salaryTo"] : null);
                    Vacancy.setOptions("state", isNotBlank($scope.searchParam['status']) && $scope.chosenStatuses.length == 1 ? $scope.searchParam['status'] : null);
                    Vacancy.setOptions("states", $scope.chosenStatuses.length > 1 ? $scope.chosenStatuses : null);
                    Vacancy.setOptions("words", $scope.searchParam['words'] ? $scope.searchParam['words'] : null);
                    Vacancy.setOptions("clientId", isNotBlank($scope.searchParam['clientId']) ? $scope.searchParam['clientId'] : null);
                    Vacancy.setOptions("responsibleId", isNotBlank($scope.searchParam['responsibleId']) ? $scope.searchParam['responsibleId'] : null);
                    if ($scope.searchParam['regionId']) {
                        var json = JSON.parse($scope.searchParam['regionId']);
                        if (json.type == 'country') {
                            Vacancy.setOptions("country", json.value);
                        } else if (json.type == 'city') {
                            Vacancy.setOptions("city", json.value);
                        }
                    } else {
                        Vacancy.setOptions("country", activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null);
                        Vacancy.setOptions("city", activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null);
                    }

                    function getVacancies(page, count) {
                        if(page || count) {
                            currentPage = page;
                            Vacancy.setOptions("page", {number: page, count: count});
                        } else {
                            $scope.isShowMore = false;
                            currentPage = Vacancy.searchOptions().page.number;
                            if(document.getElementById('scrollup'))
                                document.getElementById('scrollup').style.display = 'none';
                            $timeout(function() {
                                $anchorScroll('mainTable');
                            });
                        }
                        Vacancy.all(Vacancy.searchOptions(), function(response) {
                            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : undefined;
                            $scope.paginationParams = {
                                currentPage: Vacancy.searchOptions().page.number,
                                totalCount: $rootScope.objectSize
                            };
                            let pagesCount = Math.ceil(response['total']/Vacancy.searchOptions().page.count);
                            if(pagesCount == Vacancy.searchOptions().page.number + 1) {
                                $('#show_more').hide();
                            } else {
                                $('#show_more').show();
                            }
                            params.total(response['total']);
                            angular.forEach(response['objects'], function(val) {
                                if (val.region) {
                                    if (val.region.city) {
                                        val.regionShort = val.region.displayCity;
                                    } else if (val.region.country)
                                        val.regionShort = val.region.displayCountry;
                                }
                            });

                            if(page) {
                                $scope.vacancies = $scope.vacancies.concat(response['objects'])
                            } else {
                                $scope.vacancies = response['objects'];
                            }
                            $scope.vacanciesFound = response['total'] >= 1;
                            $defer.resolve($scope.vacancies);
                            Vacancy.init();
                            $scope.searchParam.personId = $scope.searchParam.personId == null ? 'null': $scope.searchParam.personId;
                            $rootScope.loading = false;

                        });
                    }
                    getVacancies();
                    $scope.showMore = function () {
                        $scope.isShowMore = true;
                        Service.dynamicTableLoading(params.total(), currentPage, $scope.tableParams.count(), getVacancies)
                    };
                    $rootScope.searchParamInVacancies = $scope.searchParam;
                    $scope.a.searchNumber = $scope.tableParams.page();
                    $rootScope.previousSearchNumber = $scope.a.searchNumber;
                    $rootScope.allClientsVacancies = false;
                }
            }
        });
        Client.init();
        $scope.changeInputPage = function(params,searchNumber){
            var searchNumber = Math.round(searchNumber);
            var maxValue = $filter('roundUp')(params.settings().total/params.count());
            if(searchNumber){
                if(searchNumber >= 1 && searchNumber <= maxValue){
                    params.page(searchNumber);
                    $scope.a.searchNumber = searchNumber;
                }
            }
        };
        $scope.toOneObject = function(localId) {
            $location.path('/vacancies/' + localId);
        };
        $scope.toAdd = function() {
            $location.path('/vacancy/add');
        };
        if($rootScope.searchedClientId){
            $scope.searchParam['clientId'] = $rootScope.searchedClientId;
            $scope.tableParams.reload();
            $rootScope.searchedClientId = '';
        }
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();

        $scope.showAdvancedSearchFunc = function() {
            $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
        };
        $scope.showAdvancedSearchFuncHide = function(){
            $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
        };
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        Person.getAllPersons(function (resp) {
            $scope.persons = [];
            $rootScope.persons = [];
            $rootScope.personsNotChanged = [];
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                $scope.persons.push($scope.associativePerson[key]);
                $rootScope.persons.push($scope.associativePerson[key]);
                $rootScope.personsNotChanged.push($scope.associativePerson[key]);
            });
        });
        $(document).click(function (){
            if($(".advancedSearch").css('display') != 'none'){
                $scope.showAdvancedSearchFuncHide();
                $scope.$apply();
            }
        });
        $scope.showChangeStatusOfVacancy = function (status, vacancy) {
            $scope.oneVacancy = vacancy;
            $rootScope.changeStateObject.status_old = $scope.oneVacancy.status;
            $rootScope.changeStateObject.status = status;
            $rootScope.changeStateObject.placeholder = $filter('translate')('Write_a_comment_why_do_you_change_vacancy_status');
            $scope.numberOfCandidatesInDifferentStates = function () {
                var totalCount = 0;
                Vacancy.getCounts({
                    vacancyId: vacancy.vacancyId
                },function(statusesCount){
                    console.log(statusesCount);
                    $scope.statusesCount = statusesCount.object;
                    angular.forEach($scope.VacancyStatusFiltered, function (val) {
                        val.count = 0;
                    });
                    angular.forEach($scope.statusesCount, function (item) {
                        //if (item.state == 'approved') {
                        //    //$scope.activeName = 'approved';
                        //    //$scope.paramForExcell.interviewState = 'approved';
                        //}
                        angular.forEach($scope.VacancyStatusFiltered, function (valS) {
                            if (valS.name) {
                                valS.value = valS.name;
                            }
                            if (item.item == valS.value) {
                                valS.count = item.count;
                                totalCount = totalCount + item.count;
                            }
                            if (item.item == valS.customInterviewStateId) {
                                valS.count = item.count;
                                totalCount = totalCount + item.count;
                            }
                        });
                    });
                    $scope.numberAllCandidateInVacancy = totalCount;
                });
            };
            if (status == 'completed') {
                $scope.numberOfCandidatesInDifferentStates();
                setTimeout(function () {
                    var hasApproved = false;
                    angular.forEach($scope.statusesCount, function (i) {
                        if (i.item == "approved") {
                            hasApproved = true;
                        }
                    });
                    if (!hasApproved) {
                        notificationService.error($filter('translate')('You must move one of the candidates to status Approved'));
                    } else {
                        $scope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/vacancy-change-status.html',
                            size: '',
                            resolve: function(){

                            }
                        });
                    }
                }, 500);
            } else {
                if (status != 'inwork') {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && (vacancy.responsiblesPerson != undefined && vacancy.responsiblesPerson.length > 0)) {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if ($scope.needAutoSetResponsible && vacancy.status == 'inwork') {
                    $rootScope.changeResponsibleInVacancy.id = $rootScope.me.userId;
                    $rootScope.changeResponsibleInVacancy.comment = 'Поскольку вы являетесь единственным пользователем Вашей компании, мы назначили Вас ответственным';
                    $rootScope.saveResponsibleUserInVacancy();
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && !$scope.needAutoSetResponsible) {
                    notificationService.error($filter('translate')('You must set a responsible') + '!');
                }
            }
        };
        $rootScope.saveVacancyStatus = function () {
            if (!$rootScope.clickedSaveVacancyStatus) {
                $rootScope.clickedSaveVacancyStatus = true;
                // console.log("DELETE IN VACANCY");
                $rootScope.closeModal();
                Vacancy.changeState({
                    vacancyId: $scope.oneVacancy.vacancyId,
                    comment: $rootScope.changeStateObject.comment,
                    vacancyState: $rootScope.changeStateObject.status
                }, function (resp) {
                    if (resp.status == "ok") {
                        $scope.vacancy.status = $rootScope.changeStateObject.status;
                        $rootScope.changeStateObject.comment = "";
                        //$rootScope.changeStateObject.status = null;
                        notificationService.success($filter('translate')('vacancy change status'));
                        $scope.tableParams.reload();
                    } else if (resp.message) {
                        notificationService.error(resp.message);
                    }
                    $rootScope.clickedSaveVacancyStatus = false;
                }, function (err) {
                    $rootScope.clickedSaveVacancyStatus = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };


    }
}]);
controller.controller('ActivityStatisticsController', ["$scope", "$rootScope", "Service", "Statistic", "Person", "$translate", "ngTableParams", "$filter", "frontMode", "Company", "notificationService", function($scope, $rootScope, Service, Statistic, Person, $translate, ngTableParams, $filter, frontMode, Company, notificationService) {
    $scope.countRowShow = false;
    $scope.selectedDate = null;
    $scope.selectedDateTo = null;
    $scope.selectedDateFrom = null;
    $scope.candWithoutContacts = false;
    $rootScope.loading = true;
    $scope.a = {};
    $scope.a.searchNumber = 1;
    $scope.statisticParam = {
        page: 0,
        count: 0
    };
    var statWithCandCont = ['actionCount', 'clientCount', 'candidateCount', 'vacancyCount', 'vacancyCompletedCount', 'interviewCount', 'vacancyCreatorStat', 'vacancyResponsibleCompletedStat', 'candidateCreatorStat', 'toInterviewPersonStat', 'vacancyResponsibleCompletedTimeStat'];

    var statWithoutCandCont = ['actionCount', 'clientCount', 'candidateCount', 'vacancyCount', 'vacancyCompletedCount', 'interviewCount', 'vacancyCreatorStat', 'vacancyResponsibleCompletedStat', 'candidateCreatorStat', 'toInterviewPersonStat', 'vacancyResponsibleCompletedTimeStat', 'addedCandidatesWithoutNameOrContacts'];
    var withoutContactsLoaded = false;
    $(".dateOptionsYearMonthWeek").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd MM yyyy" : "MM dd yyyy",
        showMeridian: true,
        autoclose: true,
        todayBtn: false,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        minView: 2,
        startView: 2,
        language: $translate.use()
    }).on('changeDate',
        function(dateTex) {
            // $scope.loading = true;
            if (dateTex.date != undefined) {
                $scope.activeSearchName = "week";
                $(".dateOptionsYearMonthWeek").datetimepicker('hide');
                $scope.selectedDate = dateTex.date;
                $scope.selectedDateTo = new Date($scope.selectedDate);
                $scope.selectedDateTo.setDate(parseInt($filter('date')($scope.selectedDate, 'dd')) + 7 - $scope.selectedDate.getDay());
                $scope.selectedDateFrom = new Date($scope.selectedDate);
                $scope.selectedDateFrom.setDate(parseInt($filter('date')($scope.selectedDate, 'dd')) - $scope.selectedDate.getDay() + 1);
                if ($filter('date')($scope.selectedDateFrom, 'MM') != $filter('date')($scope.selectedDateTo, 'MM')) {
                    $("#searchText").html($filter('date')($scope.selectedDateFrom, 'dd MMMM') + " - " + $filter('date')($scope.selectedDateTo, 'dd MMMM yyyy'));
                } else {
                    $("#searchText").html($filter('date')($scope.selectedDateFrom, 'dd') + " - " + $filter('date')($scope.selectedDateTo, 'dd MMMM yyyy'));
                }
                $scope.search();
            }
        }
    ).on('show', function() {
            $(".table-condensed").addClass("tr_hover");
        }).on('hide', function() {
            $(".table-condensed").removeClass("tr_hover");
        });
    $(".my_widget").datetimepicker({
        format: "mm-yyyy",
        minView: 3,
        startView: 3,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use()
    }).on('changeDate',
        function(dateTex) {
            // $rootScope.loading = true;
            var selectedDate = dateTex.date;
            if (selectedDate != undefined) {
                $scope.activeSearchName = "month";
                $(".my_widget").datetimepicker('hide');
                var month = selectedDate.getMonth();
                var year = selectedDate.getFullYear();
                if (month !== null && year !== null) {
                    $scope.selectedDate = new Date(year, month, 1);
                    $scope.searchDate = null;
                    $scope.selectedDateFrom = new Date(year, month, 1);
                    $scope.selectedDateTo = new Date(year, parseInt(month) + 1, 0);
                    $("#searchText").html($filter('date')($scope.selectedDateFrom, 'dd') + " - " + $filter('date')($scope.selectedDateTo, 'dd') + " " + $filter('date')($scope.selectedDateTo, 'MMMM yyyy'));
                    $scope.search();
                }

            }
        });
    $scope.changeToYear = function(val) {
        $scope.changeParOfSearch("year");
        // $scope.loading = true;
        $('.ui.dropdown').dropdown('hide');
        var year = val;
        if (year == '') {
            year = 2017;
        }
        if (year !== null) {
            $scope.selectedDateFrom = new Date(year, 0, 1);
            $scope.selectedDateTo = new Date(year, 12, 0);
            $("#searchText").html($filter('date')($scope.selectedDateFrom, 'dd MMMM') + " - " + $filter('date')($scope.selectedDateTo, 'dd MMMM') + " " + $filter('date')($scope.selectedDateTo, 'yyyy'));
            $scope.search();
        }
    };
    $scope.changeParOfSearch = function(name) {
        if ($scope.activeSearchName !== name) {
            $scope.activeSearchName = name;
        }
        $('#dateOptionsYearMonthWeek').datetimepicker("setDate", null);
        $('#dateOptionsYearMonth').datetimepicker("setDate", null);
        switch (name) {
            case "week":
                $("#dateOptionsYearMonthWeek").datetimepicker("show");
                break;
            case "month":
                $('#my_widget').monthpicker('show');
                break;
            case "year":
                break;
            case "Forever":
                $("#searchText").html($filter('translate')("All time"));
                $scope.search();
                break;
        }
        $scope.selectedDateTo = null;
        $scope.selectedDateFrom = null;

    };
    $scope.years = [];
    var date = new Date();
    var year = 2014;
    function setYears(){
        if(year < new Date().getFullYear()){
            date.setFullYear(year, 1, 1);
            $scope.years.push(date.getFullYear());
            year += 1;
            setYears()
        }
    }
    setYears();

    $scope.years.push(new Date().getFullYear());

    $('.ui.dropdown').dropdown();
    $(".monthPicker").focus(function() {
        $("#ui-datepicker-div").position({
            my: "center top",
            at: "right bottom",
            of: $(this)
        });
    });

    function tableInit() {
        $scope.tableParams = new ngTableParams({page: 1, count: 15}, {
            total: 14,
            getData: function($defer, params) {
                // $rootScope.loading = true;
                $scope.statisticParam.number = params.$params.page - 1;
                $scope.statisticParam.count = params.$params.count - 1;
                $scope.statisticParam.page = {number: params.$params.page, count: params.$params.count};

                Person.getAllPersons($scope.statisticParam, function(resp) {
                    $scope.persons = [];
                    $scope.associativePerson = resp.object; // этот "!!
                    $scope.vacancyCreatorStatCount = 0;
                    $scope.vacancyResponsibleCompletedStatCount = 0;
                    $scope.vacancyResponsibleCompletedTimeStatSum = 0;
                    $scope.vacancyResponsibleCompletedTimeStatCount = 0;
                    $scope.candidateCreatorStatCount = 0;
                    $scope.vacancyCreatedInterviewCount = 0;
                    var iter = 0;
                    $scope.seriesVac = [];
                    $scope.seriesInt = [];
                    $scope.seriesRes = [];
                    $scope.seriesCan = [];
                    $scope.sortType = 'firstName';
                    $scope.sortReverse = true;
                    angular.forEach($scope.associativePerson, function(val, key) {
                        iter++;
                        var person = $scope.associativePerson[key];
                        var check = false;
                        if($scope.stat && (person.userId !== undefined)){
                            angular.forEach($scope.stat.vacancyCreatorStat, function(val) {
                                if (val.person.userId === person.userId) {
                                    person.vacancyCreatorStat = val;
                                    check = true;
                                    $scope.vacancyCreatorStatCount += val.count;
                                    if (frontMode === 'demo') {
                                        var compl = angular.copy(val);
                                        compl.count = ((compl.count - 1) > 0) ? compl.count - 1 : "";
                                        person.vacancyResponsibleCompletedStat = compl;
                                        $scope.vacancyResponsibleCompletedStatCount = 7;
                                        var vactime = angular.copy(compl);
                                        vactime.count = vactime.count * 3600 * 147;
                                        person.vacancyResponsibleCompletedTimeStat = vactime;
                                        check = true;
                                        $scope.vacancyResponsibleCompletedTimeStatSum += vactime.count;
                                        if (vactime.count > 0) {
                                            $scope.vacancyResponsibleCompletedTimeStatCount++;
                                        }
                                    }
                                    $scope.seriesVac.push({text: person.firstName + " " + Math.round(val.count * 100 / $scope.stat.vacancyCount) + "%  (" + val.count + ")", values: [val.count]});
                                }
                            });
                            angular.forEach($scope.stat.toInterviewStateStat, function(val) {
                                if (val.person.userId === person.userId) {
                                    person.vacancyCreatedInterview = val;
                                    check = true;
                                    $scope.vacancyCreatedInterviewCount += val.count;
                                    $scope.seriesInt.push({text: person.firstName + " " + Math.round(val.count * 100 / $scope.stat.interviewCount) + "% (" + val.count + ")", values: [val.count]});
                                }
                            });
                            angular.forEach($scope.stat.vacancyResponsibleCompletedStat, function(val) {
                                if (val.person.userId === person.userId) {
                                    person.vacancyResponsibleCompletedStat = val;
                                    check = true;
                                    $scope.vacancyResponsibleCompletedStatCount += val.count;
                                    $scope.seriesRes.push({text: person.firstName + " " + Math.round(val.count * 100 / $scope.stat.vacancyCompletedCount) + "% (" + val.count + ")", values: [val.count]});
                                }
                            });
                            angular.forEach($scope.stat.vacancyResponsibleCompletedTimeStat, function(val) {
                                if (val.person.userId === person.userId) {
                                    person.vacancyResponsibleCompletedTimeStat = val;
                                    check = true;
                                    $scope.vacancyResponsibleCompletedTimeStatSum += val.count;
                                    $scope.vacancyResponsibleCompletedTimeStatCount++;
                                }
                            });
                            angular.forEach($scope.stat.candidateCreatorStat, function(val) {
                                if (val.person.userId === person.userId) {
                                    person.candidateCreatorStat = val;
                                    check = true;
                                    $scope.candidateCreatorStatCount += val.count;
                                    $scope.seriesCan.push({text: person.firstName + " " + Math.round(val.count * 100 / $scope.stat.candidateCount) + "% (" + val.count + ")", values: [val.count]});
                                }
                            });
                            angular.forEach($scope.stat.addedCandidatesWithoutNameOrContacts, function (val) {
                                if(val.person.userId === person.userId) {
                                    person.addedCandidatesWithoutNameOrContacts = val.count;
                                }
                            });
                            angular.forEach($scope.stat.percentOfAddedCandidatesWithoutNameOrContacts, function (val) {
                                if(val.person.userId === person.userId) {
                                    person.percentOfAddedCandidatesWithoutNameOrContacts = val.count + '%';
                                }
                            });
                            angular.forEach($scope.stat.vacancyResponsibleInWorkStat, function (val) {
                                if(val.person.userId === person.userId) {
                                    person.vacancyResponsibleInWorkStat = val.count;
                                }
                            });
                        }
                        if (check)
                            $scope.persons.push($scope.associativePerson[key]);
                    });
                    angular.forEach($scope.persons,function(person){
                        if(person.candidateCreatorStat && person.candidateCreatorStat.count){
                            person.candidateCreatorPercent= Math.round(person.candidateCreatorStat.count * 100 / $scope.candidateCreatorStatCount) + '%';
                        } else {
                            person.candidateCreatorStat = {};
                            person.candidateCreatorStat.count = 0;
                            person.candidateCreatorPercent = '0%';
                        }
                    });
                    angular.forEach($scope.persons,function(person){
                        if(person.vacancyCreatedInterview && person.vacancyCreatedInterview.count){
                            person.vacancyCreatedInterviewPercent= Math.round(person.vacancyCreatedInterview.count * 100 / $scope.vacancyCreatedInterviewCount) + '%';
                        }else {
                            person.vacancyCreatedInterview = {};
                            person.vacancyCreatedInterview.count = 0;
                            person.vacancyCreatedInterviewPercent = '0%';
                        }
                    });
                    angular.forEach($scope.persons,function(person){
                        if(person.vacancyCreatorStat && person.vacancyCreatorStat.count){
                            person.vacancyCreatorStatPercent= Math.round(person.vacancyCreatorStat.count * 100 / $scope.vacancyCreatorStatCount) + '%';
                        }else {
                            person.vacancyCreatorStat = {};
                            person.vacancyCreatorStat.count = 0;
                            person.vacancyCreatorStatPercent = '0%';
                        }
                    });
                    angular.forEach($scope.persons,function(person){
                        if(person.vacancyResponsibleCompletedStat && person.vacancyResponsibleCompletedStat.count){
                            person.vacancyResponsibleCompletedStatPercent= Math.round(person.vacancyResponsibleCompletedStat.count * 100 / $scope.vacancyResponsibleCompletedStatCount) + '%';
                        }else {
                            person.vacancyResponsibleCompletedStat = {};
                            person.vacancyResponsibleCompletedStat.count = 0;
                            person.vacancyResponsibleCompletedStatPercent = '0%';
                        }
                    });
/*******************************************************************hide navigation bar********************/

                    var data = $filter('orderBy')($scope.persons, params.orderBy());
                    $defer.resolve(data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
                    $scope.tableParams.$params.total = $scope.persons.length;
                    params.total($scope.persons.length);
                    $rootScope.objectSize = $scope.persons.length;
                    $scope.paginationParams = {
                        currentPage: $scope.statisticParam.page.number,
                        totalCount: $rootScope.objectSize
                    };
                    $defer.resolve($filter('orderBy')(angular.copy($scope.persons), params.orderBy()));
                    $scope.countRowShow = true;
                    $scope.a.searchNumber = $scope.tableParams.page();
                });
            }
        });
    }
    tableInit();
    $scope.pageInfo = function(stat, isReloadTable) {
        $scope.stat = stat;
        function getName(person) {
            if (person === undefined) {
                return 'Нет';
            }
            return person.cutFullName;
        }
        $scope.tableParams.reload();
    };

    var getStatFirstTime = function () {
        Statistic.getOrgInfoWithParams({
            from: 1288323623006,
            to: 1588323623006,
            personId: $rootScope.onlyMe ? $rootScope.userId : null,
            types: $scope.candWithoutContacts ? statWithoutCandCont : statWithCandCont,
        }, function(resp) {
            $rootScope.loading = false;
            $scope.pageInfo(resp, true);

        });
    };
    getStatFirstTime();

    $scope.search = function() {
        console.log('without', $scope.candWithoutContacts, $scope.activeSearchName, $scope.selectedDateFrom, $scope.selectedDateTo);
        if ($scope.activeSearchName === 'Forever') {
            $rootScope.loading = true;
            $scope.selectedDate = null;
            Statistic.getOrgInfoWithParams({
                from: 1288323623006,
                to: 1588323623006,
                personId: $rootScope.onlyMe ? $rootScope.userId : null,
                types: $scope.candWithoutContacts ? statWithoutCandCont : statWithCandCont,
            }, function(resp) {
                $rootScope.loading = false;
                $scope.pageInfo(resp, true);
                $scope.tableParams.reload();
            });
        } else if ($scope.selectedDateFrom !== null && $scope.selectedDateTo !== null) {
            $rootScope.loading = true;
            Statistic.getOrgInfoWithParams({
                personId: $rootScope.onlyMe ? $rootScope.userId : null,
                types: $scope.candWithoutContacts ? statWithoutCandCont : statWithCandCont,
                "from": $scope.selectedDateFrom.getTime(),
                "to": $scope.selectedDateTo.getTime()
            }, function(resp) {
                $scope.pageInfo(resp, true);
                $rootScope.loading = false;
            });
        } else {
            $rootScope.loading = true;
            Statistic.getOrgInfoWithParams({
                from: 1288323623006,
                to: 1588323623006,
                personId: $rootScope.onlyMe ? $rootScope.userId : null,
                types: $scope.candWithoutContacts ? statWithoutCandCont : statWithCandCont,
            }, function(resp) {
                $rootScope.loading = false;
                $scope.candWithoutContacts = 'loaded';
                withoutContactsLoaded = true;
                $scope.pageInfo(resp, true);

            });
        }
    };
    listenerForScopeLight($scope, $rootScope);

    $scope.candidatesWithoutContacts = function () {

        if(!$scope.candWithoutContacts) {
            if(!withoutContactsLoaded) {
                $scope.candWithoutContacts = true;
                $scope.search();
            } else {
                $scope.candWithoutContacts = 'loaded';
            }
        } else {
            $scope.candWithoutContacts = false;
        }
    };
    $scope.callbackAddLogo = function(photo) {
        $rootScope.companyLogo = photo;
        $rootScope.logoLink = $scope.serverAddress + "/getapp?id=" + $rootScope.companyLogo + "&d=true";
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };
    $scope.getFirstLetters = function(str){
        return firstLetters(str)
    };
    
}]);

controller.controller('CandidateAddController', ["$rootScope", "$http", "$scope", "$translate", "FileInit", "$location", "Service", "Candidate", "notificationService", "$filter",
    "$localStorage", "$cookies", "$window", "serverAddress","$routeParams", "$uibModal", "CustomField",
    function($rootScope, $http, $scope, $translate, FileInit, $location, Service, Candidate, notificationService, $filter, $localStorage,
             $cookies, $window, serverAddress,$routeParams, $uibModal, CustomField) {
    Service.toAddCandidate("/candidates/");


    $scope.serverAddress = serverAddress;
    $scope.type = "add";
    $scope.objType = 'candidate';
    $scope.candidate = {};
    $scope.addedFromResume = false;
    $scope.addLinkErrorShow = false;
    $scope.showAddedLinks = false;
    $scope.showAddedFiles = false;
    $scope.showAddLink = false;
    $scope.currency = Service.currency();
    $scope.industries = Service.getIndustries();
    $scope.experience = Service.experience();
    $scope.lang = Service.lang();
    $scope.googleMapOption = false;
    $location.hash('');
    $scope.regionToRelocate = [];
    $scope.duplicatesByEmail = [];
    $scope.duplicatesByPhone = [];
    $scope.duplicatesBySkype = [];
    $scope.duplicatesByLinkedin = [];
    $scope.candidate = {
        customFields: [{
            fieldValue: {
                objType: "candidate",
                fieldValueId: '',
                value: '',
                field : {
                    fieldId: ''
                }
            }
        }]
    };
    $scope.showResumeFromLinkSiteErrorFlag = false;
    $scope.showResumeFromLinkErrorFlag = false;
    $scope.saveButtonIsPressed = false;
        $scope.getFullCustomFields = function(){
            CustomField.getFullFields({
                objectType: 'candidate'
            }, function(resp) {
                if (resp.status == "ok") {
                    $scope.allObjCustomField = resp.objects;
                    $scope.checkDuplicatesByNameAndContacts();
                } else {
                    notificationService.error(resp.message);
                }
            });
        };

        $scope.getFullCustomFields();

        setTimeout(function(){
            if(!$rootScope.resumeToSave && !$rootScope.resumeFromText && !$rootScope.resumeFromLink) {
                $scope.addedFromResume = true;
            }
            if($rootScope.resumeToSave){
                Candidate.convert($scope, $rootScope.resumeToSave.data.object);
                if ($rootScope.resumeToSave.data.object.position) {
                    $scope.setPositionAutocompleterValue($rootScope.resumeToSave.data.object.position);
                }
                $scope.candidate.source = 'cvfile';
                $scope.callbackFile($rootScope.resumeToSave.data.objects[0],  $rootScope.file.filename);
                $rootScope.resumeToSave = undefined;
                $rootScope.file = undefined;
            }
            if($rootScope.resumeFromText){
                Candidate.convert($scope, $rootScope.resumeFromText);
                if ($rootScope.resumeFromText.position) {
                    $scope.setPositionAutocompleterValue($rootScope.resumeFromText.position);
                }
                $rootScope.fastCandResumeText = undefined;
                $rootScope.resumeFromText = undefined;
            }
            if($rootScope.resumeFromLink){
                Candidate.convert($scope, $rootScope.resumeFromLink);
                if (res.object.employmentType != undefined) {
                    $scope.setSelect2EmploymentType(res.object.employmentType.split(", "));
                }
                if (res.object.position) {
                    $scope.setPositionAutocompleterValue(res.object.position);
                }
                $rootScope.resumeFromLink = undefined;
                $rootScope.fastCandResumeLinkSite = undefined;
            }
        },0);

    $scope.addLinkToCandidate = {
        name: '',
        url: ''
    };

    $scope.deleteRegion2ToRelocate = function(index) {
        $scope.regionToRelocate.splice(index, 1);
    };

    $scope.contacts = {
        skype: "",
        mphone: "",
        email: "",
        linkedin: "",
        facebook: "",
        googleplus: "",
        homepage: ""
    };

    $scope.map = {
        center: {
            latitude: 48.379433,
            longitude: 31.165579999999977
        },
        zoom: 6,
        options: {
            panControl: true,
            zoomControl: true,
            scaleControl: true,
            mapTypeControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
    };
    $scope.marker = {
        id: 1,
        title: "",
        coords: {
            latitude: null,
            longitude: null
        }
    };

    $scope.showResumeError =function(){
        $scope.showResumeFromLinkSiteErrorFlag = true;
    };
    $scope.showResumeLinkError =function(){
        $scope.showResumeFromLinkErrorFlag = true;
    };

    $scope.getPlugin = function () {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            $window.open("https://chrome.google.com/webstore/detail/cleverstaff-extension/komohkkfnbgjojbglkikdfbkjpefkjem");
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
            $window.open("/extension/CleverstaffExtension4Firefox.xpi");
        } else {
            $("#bad-browser-modal").modal("show");
        }
    };
    $scope.getBrowser = function () {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            $scope.resumeBrowser = "Chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            $scope.resumeBrowser = "Firefox";
        } else {
            $scope.resumeBrowser = $filter("translate")("browser");
        }
    };
    $scope.getBrowser();
    $scope.fromLinkSite = function(value) {
        var link;
        if ($("#fastCandResumeLinkSite").val()) {
            link = $("#fastCandResumeLinkSite").val();
        } else if (value) {
            link = value;
            $scope.fastCandResumeLinkSite = value;
        }
        if ($scope.fastCandResumeLinkSite === undefined && (link.indexOf('http://') === -1 || link.indexOf('https://') === -1 || link.indexOf('ftp://') === -1)) {
            $scope.fastCandResumeLinkSite = 'http://' + link;
        }
        if ($scope.fastCandResumeLinkSite !== undefined) {
            if ($scope.fastCandResumeLinkSite.indexOf("docs.google.com") === -1 && $scope.fastCandResumeLinkSite.indexOf("drive.google.com") === -1) {
                if ($scope.fastCandResumeLinkSite.indexOf("linkedin.com/profile/view") === -1) {
                    $scope.fastCandLoading = true;
                    Candidate.fromLinkSite({url: $scope.fastCandResumeLinkSite}, function(res) {
                        if (angular.equals(res.status, "ok")) {
                            Candidate.convert($scope, res.object);
                            if (res.object.employmentType != undefined) {
                                $scope.setSelect2EmploymentType(res.object.employmentType.split(", "));
                            }
                            if (res.object.position) {
                                $scope.setPositionAutocompleterValue(res.object.position);
                            }
                        } else if (angular.equals(res.status, "error")) {
                            notificationService.error(res.message);
                        } else {
                            //notificationService.error($filter('translate')('service temporarily unvailable'));
                        }
                        $scope.fastCandLoading = false;
                    }, function(val) {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $scope.fastCandLoading = false;
                    });
                } else {
                    notificationService.error($filter('translate')('Incorrect link of LinkedinIn public profile. You can get correct link at the Contact Info.'));
                }
            }else {
                notificationService.error($filter('translate')('Candidate data will be uploaded incorrectly if you use Google Drive links. Please upload resumes from your PC/Mac after you save them from Google Drive.'));
            }

        } else {
            notificationService.error($filter('translate')('Enter a valid url'));
        }
    };
        $scope.imgWidthFunc = function(id){
            var img = new Image();
            img.onload = function() {
                var width = this.width;
                var height = this.height;
                var minus = width - height;
                if(width >= height && minus > 40 && minus <=100){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if((width >= 300 && width <= 349) || width == height){
                    $('#page-avatar').css({'width': '100%', 'object-fit': 'fill', 'margin': 'inherit'});
                }else if(width >= 350){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if(width >= 266){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto'});
                }else{
                    $('#page-avatar').css({'width': 'inherit', 'height': 'inherit', 'display': 'block', 'margin': '0 auto'});
                }
            };
            if($location.$$host == '127.0.0.1'){
                img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $scope.serverAddress + '/getapp?id=' + id + '&d=' + $rootScope.me.personId;
            }else{
                img.src = $location.$$protocol + '://' + $location.$$host + $scope.serverAddress + '/getapp?id=' + id + '&d=' + $rootScope.me.personId;
            }
        };
    $scope.callbackAddPhoto = function(photo) {
        $scope.candidate.photo = photo;
        $scope.photoLink = $scope.serverAddress + "/getapp?id=" + photo + "&d=true";
        $scope.imgWidthFunc();
        Candidate.progressUpdate($scope, true);
        $rootScope.closeModal();
    };
    FileInit.addPhotoByReference($scope, $rootScope, $scope.callbackAddPhoto);
    if ($rootScope.candidateExternalLink) {
        $scope.fromLinkSite($rootScope.candidateExternalLink);
        $rootScope.candidateExternalLink = null;
    } else if ($localStorage.isExist("candidateForSave")) {
        $scope.candidate = angular.fromJson($localStorage.get("candidateForSave"));
        if ($scope.candidate.photoUrl) {
            $scope.photoUrl = $scope.candidate.photoUrl;
            $scope.addPhotoByReference();
        }
        $localStorage.remove("candidateForSave");
        if ($scope.candidate.db) {
            $scope.data = new Date($scope.candidate.db);
        }
        $scope.candidate.db = null;
        if ($scope.candidate.contacts) {
            angular.forEach($scope.candidate.contacts, function(val) {
                if (angular.equals(val.type, "email")) {
                    $scope.contacts.email = val.value;
                }
                if (angular.equals(val.type, "mphone")) {
                    $scope.contacts.mphone = val.value;
                }
                if (angular.equals(val.type, "skype")) {
                    $scope.contacts.skype = val.value;
                }
                if (angular.equals(val.type, "linkedin")) {
                    $scope.contacts.linkedin = val.value;
                }
                if (angular.equals(val.type, "facebook")) {
                    $scope.contacts.facebook = val.value;
                }
                if (angular.equals(val.type, "googleplus")) {
                    $scope.contacts.googleplus = val.value;
                }
                if (angular.equals(val.type, "homepage")) {
                    $scope.contacts.homepage = val.value;
                }
            });
        }
        $scope.candidate.contacts = null;
    } else {
        $scope.candidate = {
            status: "active_search",
            relatedRegions: null,
            skills: []
        };

    }

    $scope.errorMessage = {
        show: false,
        message: ""
    };
    $scope.dateOptions = {
        changeYear: true,
        changeMonth: true,
        yearRange: '1930:-0',
        initialDate: "01/01/1990"
    };
    $scope.fileForSave = [];
    $scope.linksForSave = [];


    FileInit.initCandFileOption($scope, "", "", false);
    $scope.callbackFile = function(resp, names) {
        $scope.fileForSave.push({"attId": resp, "fileName": names});
    };

    $scope.removeFile = function(id) {
        angular.forEach($scope.fileForSave, function(val, ind) {
            if (val.attId === id) {
                $scope.fileForSave.splice(ind, 1);
            }
        });
        $scope.progressUpdate();
    };
    $scope.removeLink = function(id) {
        angular.forEach($scope.linksForSave, function(val, ind) {
            if (val.fileName === id) {
                $scope.linksForSave.splice(ind, 1);
            }
        });
        $scope.progressUpdate();
    };
        $('.datepickerOfBirth').datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            language: $translate.use(),
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            initialDate:  new Date(1167609600000),
            startDate: new Date(-1262304000000),
            endDate: new Date(1199134800000)
        });

    $scope.status = Candidate.getStatus();
    $scope.employmentType = Service.employmentType();

    $scope.cancel = function() {
        $location.path("/candidates/");
    };

    $scope.progressUpdate = function() {
        Candidate.progressUpdate($scope, true);
    };

    $rootScope.addPhoto = function() {
        $('#photoFile').click();
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };
    Candidate.setPhoto($scope);
    Candidate.fromFile($scope,$rootScope, $location);

    $scope.removePhoto = function() {
        $scope.candidate.photo = "";
        $scope.progressUpdate();
    };
        $scope.candidate.fieldValues = [];
        $scope.editCustomField = function(text, id) {
            $scope.candidate.fieldValues.push({
                objType: "candidate",
                value: text,
                field: {
                    fieldId: id
                }
            });
        };
        $scope.editCustomField = function (e, id) {
            $scope.editCustomValue = e.currentTarget.value;
            $scope.editCustomId = id;
        };
        $scope.addCustomFieldParams = function (text, id) {
            $scope.candidate.fieldValues.push({
                objType: "candidate",
                value: text,
                field: {
                    fieldId: id
                }
            });
        };

        $scope.sendCustomFieldId = function (id) {
            $scope.editCustomId = id;
        };

        $scope.roundMinutes = function(date) {
            var date2 = new Date();

            angular.copy(date, date2);

            date2.setHours(date2.getHours() - 3 + Math.round(date2.getMinutes()/60));
            date2.setMinutes(0);

            return date2;
        };

        if ($scope.candidate.fieldValues) {
            angular.forEach($scope.candidate.fieldValues, function (val) {
                if (angular.equals(val.type, "string")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "select")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "date")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
                if (angular.equals(val.type, "datetime")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
            });
        }
        $scope.addedLang = [];
        var myListener =  $scope.$on('addedLang', function (event, data) {
            if (data != undefined) {
                $scope.addedLang = data;
                $scope.changeLevel = function(level, id){
                    angular.forEach($scope.addedLang, function (val) {
                        if(val.id == id){
                            val.level = level;
                        }
                    });
                };
            }
        });
        $scope.$on('$destroy', myListener);
    $scope.saveCandidate = function() {
        $localStorage.set("candidate_currency", $scope.candidate.currency);
        var salaryBol = true;
        $scope.candidate.position=$scope.getPositionAutocompleterValue();
        if ($scope.candidate.salary != undefined && $scope.candidate.salary != "" && /[^[0-9]/.test($scope.candidate.salary)) {
            $scope.errorMessage.show = true;
            $scope.errorMessage.message = $filter("translate")("desired_salary_should_contains_only_numbers");
            salaryBol = false;
        }
        if ($scope.candidateForm.$valid && salaryBol && !$scope.saveButtonIsPressed) {
            $scope.saveButtonIsPressed = true;
            var candidate = $scope.candidate;
            candidate.languages = [];
            if($scope.addedLang != undefined){
                angular.forEach($scope.addedLang, function (val) {
                    if(val.level != undefined && val.level != ''){
                        candidate.languages.push({ name: val.text, level: val.level});
                    }
                });
            }
            candidate.employmentType = $scope.getSelect2EmploymentType();
            if ($scope.candidate.photo) {
                candidate.photo = $scope.candidate.photo;
            }
            candidate.contacts = [];
            if ($scope.contacts.email) {
                candidate.contacts.push({type: "email", value: $scope.contacts.email});
            }
            if ($scope.contacts.mphone) {
                candidate.contacts.push({type: "mphone", value: $scope.contacts.mphone});
            }
            if ($scope.contacts.skype) {
                candidate.contacts.push({type: "skype", value: $scope.contacts.skype});
            }
            if ($scope.contacts.linkedin) {
                candidate.contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
            }
            if ($scope.contacts.facebook) {
                candidate.contacts.push({type: "facebook", value: $scope.contacts.facebook});
            }
            if ($scope.contacts.googleplus) {
                candidate.contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
            }
            if ($scope.contacts.github) {
                candidate.contacts.push({type: "github", value: $scope.contacts.github});
            }
            if ($scope.contacts.homepage) {
                candidate.contacts.push({type: "homepage", value: $scope.contacts.homepage});
            }
            if ($("#pac-input").val().length == 0) {
                candidate.region = null;
            } else if ($("#pac-input").val().length > 0) {
                candidate.region = $scope.region;
            }


            candidate.db = $('.datepickerOfBirth').datetimepicker('getDate') != null ? $('.datepickerOfBirth').datetimepicker('getDate').getTime() : null;
            candidate.relatedRegions = $scope.regionToRelocate;
            candidate.origin = $scope.getOriginAutocompleterValue();
            deleteUnnecessaryFields(candidate);
            Candidate.add(candidate, function(val) {
                if (angular.equals(val.status, "ok")) {
                    $scope.saveButtonIsPressed = false;
                    notificationService.success($filter('translate')('Candidate saved'));
                    if ($scope.fileForSave.length > 0) {
                        angular.forEach($scope.fileForSave, function(valI, i) {
                            Candidate.addFile({
                                "attId": valI.attId,
                                "candidateId": val.object.candidateId,
                                "fileName": valI.fileName
                            }, function(resp) {
                            });
                            if ($scope.fileForSave.length - 1 == i) {
                                $location.path("/candidates/" + val.object.localId);
                            }
                        });
                    } else {
                        $location.path("/candidates/" + val.object.localId);
                    }
                    if ($scope.linksForSave.length > 0) {
                        angular.forEach($scope.linksForSave, function(valI, i) {
                            Candidate.addLink({
                                "url": valI.url,
                                "candidateId": val.object.candidateId,
                                "name": valI.fileName
                            }, function(resp) {
                            });
                            if ($scope.linksForSave.length - 1 == i) {
                                $location.path("/candidates/" + val.object.localId);
                            }
                        });
                    } else {
                        $location.path("/candidates/" + val.object.localId);
                    }


                } else {
                    $scope.saveButtonIsPressed = false;
                    $scope.errorMessage.show = true;
                    $scope.errorMessage.message = val.message;
                }
            }, function() {
                $scope.saveButtonIsPressed = false;
                //notificationService.error($filter('translate')('service temporarily unvailable'));
                $localStorage.set("candidateForSave", candidate);
                $cookies.url = $location.$$url;
                $cookies.cfauth = 'false';
                $window.location.replace('/');
            });
        } else {
            $scope.candidateForm.name.$pristine = false;
            $('html, body').animate({scrollTop: 0}, 'fast');
            $scope.candidateForm.position.$pristine = false;
            $scope.candidateForm.salary.$pristine = false;
        }
    };
    $scope.checkDuplicatesByNameAndContacts = function() {
        Candidate.checkDuplicatesByNameAndContacts($scope);
    };
    //$scope.checkDuplicatesByEmail = function() {
    //    Candidate.checkDuplicatesByEmail($scope);
    //};
    //$scope.checkDuplicatesByPhone = function() {
    //    Candidate.checkDuplicatesByPhone($scope);
    //};
    //$scope.checkDuplicatesByName = function() {
    //    Candidate.checkDuplicatesByName($scope);
    //};
    //$scope.checkDuplicatesBySkype = function() {
    //    Candidate.checkDuplicatesBySkype($scope);
    //};
    //$scope.checkDuplicatesByLinkedin = function() {
    //    Candidate.checkDuplicatesByLinkedin($scope);
    //};
    $('.ui.dropdown').dropdown();

    $('#pac-input').blur(function() {
        if (!$(this).val()) {
            $scope.progressUpdate();
        }
    });

    $scope.fromLinkFile = function() {
        if ($scope.fastCandResumeLinkFile !== undefined) {
            $scope.fastCandLoading = true;
            Candidate.fromLinkFile({url: $scope.fastCandResumeLinkFile}, function(res) {
                if (angular.equals(res.status, "ok")) {
                    Candidate.convert($scope, res.object);
                    if (res.object.position) {
                        $scope.setPositionAutocompleterValue(res.object.position);
                    }
                } else if (angular.equals(res.status, "error")) {
                    notificationService.error(res.message);
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $scope.fastCandLoading = false;
            }, function(val) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
                $scope.fastCandLoading = false;
            });
        } else {
            notificationService.error($filter('translate')('Enter a valid url'));
        }
    };


    $scope.fromText = function() {
        $scope.fastCandLoading = true;
        Candidate.fromText({text: $scope.fastCandResumeText}, function(res) {
            if (angular.equals(res.status, "ok")) {
                Candidate.convert($scope, res.object);
                if (res.object.position) {
                    $scope.setPositionAutocompleterValue(res.object.position);
                }
            } else if (angular.equals(res.status, "error")) {
                notificationService.error(res.message);
            } else {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            }
            $scope.fastCandLoading = false;
        }, function(val) {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
            $scope.fastCandLoading = false;
        });
    };

    $scope.fastCandResumeClick = function() {
        if ($scope.fastCandResume) {
            $scope.fastCandResume = false;
            $scope.imgWidthFunc();
        } else {
            $scope.fastCandResume = true;
            $scope.fastCandText = false;
            $scope.fastCandSite = false;
        }

    };
    $scope.fastCandTextClick = function() {
        if ($scope.fastCandText) {
            $scope.fastCandText = false;
        } else {
            $scope.fastCandResume = false;
            $scope.fastCandText = true;
            $scope.fastCandSite = false;
        }
    };
    $scope.fastCandSiteClick = function() {
        if ($scope.fastCandSite) {
            $scope.fastCandSite = false;
        } else {
            $scope.fastCandResume = false;
            $scope.fastCandText = false;
            $scope.fastCandSite = true;
        }
    };
    $scope.langs = Candidate.getLangInOrg(function (resp){
        if(resp.object){
            //resp.object.splice(0, 1);
            $scope.setLangs(resp.object);
        } else {
            $scope.setLangs([]);
        }
    });


    if ($localStorage.isExist("candidate_currency")) {
        $scope.candidate.currency = $localStorage.get("candidate_currency");
    } else {
        $scope.candidate.currency = "USD";
    }
    Candidate.ZIP($scope);

    $scope.showAddLinkFunc = function(){
        $scope.showAddLink = true;
    };
    $scope.closeAddLinkFunc = function(){
        $scope.showAddLink = false;
        $scope.addLinkToCandidate.name = null;
        $scope.addLinkToCandidate.url = null;
        $scope.addLinkErrorShow = false;
    };
    $scope.addLinkInCandidateStart = function(){
        if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
            $scope.linksForSave.push({"url": $scope.addLinkToCandidate.url, "fileName": $scope.addLinkToCandidate.name});
            $scope.addLinkToCandidate.name = '';
            $scope.addLinkToCandidate.url = '';
            $scope.showAddLink = false;
        } else{
            $scope.addLinkErrorShow = true;
        }
    };

    $scope.editOriginName = function () {
        $scope.originOldName = $scope.getOriginAutocompleterValue();
        $rootScope.originName = $scope.originOldName;
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/origin-name-edit.html',
            size: '',
            resolve: {

            }
        });
    };
    $rootScope.saveOriginName = function () {
        Candidate.editOriginAll({originOld: $scope.originOldName, originNew: $rootScope.originName}, function (resp) {
            if(resp.status == "ok") {
                notificationService.success($filter('translate')('Origin_name_saved'));
            }
        });
        $scope.setOriginAutocompleterValue($rootScope.originName);
        $rootScope.closeModal();
    };

    $scope.changeRating = function(skill,rating){
        skill.level = rating;
    };
    $scope.deleteSkill = function(skill){
        $scope.candidate.skills.splice($scope.candidate.skills.indexOf(skill), 1);
    };

    $scope.resetBirthDate = function () {
        $('.datepickerOfBirth').val('');
    };

    $scope.showModalAddPhoto = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-photo-candidate.html',
            size: '',
            resolve: function(){

            }
        });
    };

        $scope.deleteDate = function(id){
            angular.forEach($('.editDate'), function (nval) {
                if (id == nval.name) {
                    nval.placeholder = '';
                    nval.value = '';
                }
            });
        };

    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    $rootScope.changeSearchType = function(param){
        $window.location.replace('/!#/candidates');
        $rootScope.changeSearchTypeNotFromCandidates = param;
    }
}]);

controller.controller('CandidateAddFromEmailController', ["Notice", "$localStorage", "$translate", "Service", "$scope", "ngTableParams", "Candidate", "$location", "$rootScope", "$filter", "$cookies", "serverAddress", "notificationService", "googleService", "$window",
    function (Notice, $localStorage, $translate, Service, $scope, ngTableParams, Candidate, $location, $rootScope, $filter, $cookies, serverAddress, notificationService, googleService, $window) {
        $scope.serverAddress = serverAddress;
        $rootScope.addToQueueData = {email: "", password: "", loading: false, host: ""};
        $rootScope.repeatPassword = '';
        $rootScope.validEmail = {email: ""};
        $rootScope.removeFromQueueData = {email: "", loading: false};
        $scope.emailDatas = false;
        $scope.emailHistory = undefined;
        $scope.showHistory = true;
        $scope.notices = [];
        $scope.checkedGMail = [];
        $scope.minutesLeft = 60 - new Date().getMinutes();
        var noticeDate = new Date();
        noticeDate.setMonth(noticeDate.getMonth() - 1);
        noticeDate.setHours(0);
        noticeDate.setMinutes(0);

        $scope.getMoreHistory = function () {
            $scope.getMoreHistoryLoading = true;
            noticeDate.setMonth(noticeDate.getMonth() - 1);
            Service.notice({
                from: noticeDate.getTime(),
                types: ["parserAddCandidate", "parserEditCandidate"]
            }, function (resp) {
                $scope.notices = resp.objects != undefined ? resp.objects : [];
                $scope.getMoreHistoryLoading = false;
            }, function (resp) {
                $scope.getMoreHistoryLoading = false;
            });
        };
        Notice.registerNoticeView(function (id) {
            angular.forEach($scope.notices, function (val) {
                if (val.noticeId == id) {
                    val.read = true;
                }
            });
        }, "CandidateAddFromEmailController");

        var mailPattern = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/i;

        Service.notice({
            from: noticeDate.getTime(),
            "types": ["parserAddCandidate", "parserEditCandidate"]
        }, function (res) {
            $scope.notices = res.objects != undefined ? res.objects : [];
            $scope.showHistory = res.objects != undefined;
        });

        function updateData() {
            Candidate.getParseEmailData(function (resp) {
                if (resp.status && resp.status === "ok") {
                    $scope.emailDatas = resp.objects != undefined ? resp.objects : [];
                } else if (resp.message) {
                    notificationService.error(resp.message);
                }
            }, function (resp) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        }

        function closeAddModal() {
            return setTimeout(function () {
                $(".addEmailToParseQueue").modal("hide");
                $rootScope.addToQueueData = {email: "", password: "", loading: false};
            }, 8000)
        }

        updateData();

        $scope.showAddModal = function () {
            $rootScope.repeatPassword = '';
            $(".addEmailToParseQueue").modal("show");
        };

        $scope.showRemoveModal = function (isNotGmail) {
            $(".removeEmailFromParseQueue").modal("show");
            $rootScope.isNotGmailToRemove = isNotGmail;
        };

        $rootScope.addFromGmail = function () {
            googleService.gmailAuth("readonly", function (result) {
                if (result.status == 'ok') {
                    $scope.checkedGMail.push(result.email);
                    $(".addEmailToParseQueue").modal("hide");
                    Candidate.addToParserQueue({email: result.email, password: result.code, host: "gmail"},
                        function (resp) {
                            if (resp.status && resp.status === "ok") {
                                $scope.emailDatas = resp.objects != undefined ? resp.objects : [];
                                $scope.checkNow = true;
                            } else if (resp.message) {
                                notificationService.error(resp.message);
                            }
                        },
                        function (resp) {
                            console.log(resp)
                        });
                }
            });
        };
        $rootScope.checkValidEmail = function () {
            if($rootScope.repeatPassword == $rootScope.addToQueueData.password){
                $rootScope.validEmail.email = $rootScope.addToQueueData.email;
                Candidate.checkMailbox($rootScope.validEmail, function (resp) {
                    if (resp.status && resp.status === "ok") {
                        $rootScope.addEmailToParserQueue();
                    }
                    else if (resp.message) {
                        $rootScope.addFromGmail()
                    }
                });
            }else{
                notificationService.error($filter('translate')('not_match'));
            }
        };

        $rootScope.addEmailToParserQueue = function () {
            if ($rootScope.addToQueueData.email === "" || !mailPattern.test($rootScope.addToQueueData.email)) {
                notificationService.error($filter('translate')('Not valid email'));
            } else if ($rootScope.addToQueueData.password === "") {
                notificationService.error($filter('translate')('Please enter your password'));
            } else if ($rootScope.addToQueueData.email.indexOf("@gmail.com") != -1) {
                $rootScope.addFromGmail();
            } else {
                $rootScope.addToQueueData.loading = true;
                $rootScope.addToQueueData.host = "email";
                var timeout_id = closeAddModal();
                Candidate.addToParserQueue($rootScope.addToQueueData, function (resp) {
                    clearTimeout(timeout_id);
                    if (resp.status && resp.status === "ok") {
                        $rootScope.addToQueueData = {email: "", password: "", loading: false};
                        $(".addEmailToParseQueue").modal("hide");
                        $scope.emailDatas = resp.objects != undefined ? resp.objects : [];
                        $scope.isActiveLastEmail = resp.object == "ok";
                        $scope.checkNow = true;
                    } else if (resp.message) {
                        notificationService.error(resp.message);
                        $rootScope.addToQueueData.loading = false;
                    }
                }, function (resp) {
                    clearTimeout(timeout_id);
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                    $rootScope.addToQueueData.loading = false;
                });
            }
        };


        $scope.editPassword = function (email) {
            $rootScope.addToQueueData.email = email;
            $scope.showAddModal();
        };


        $rootScope.removeEmailFromParserQueue = function () {
            Candidate.removeFromParserQueue({email: $rootScope.removeFromQueueData.email}, function (resp) {
                if (resp.status && resp.status === "ok") {
                    $scope.emailDatas = resp.objects != undefined ? resp.objects : [];
                    $(".removeEmailFromParseQueue").modal("hide");
                } else if (resp.message) {
                    notificationService.error(resp.message);
                }
                $scope.isActiveLastEmail = null;
            }, function (resp) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };

        var sendReadRequest = [];
        $scope.readNotice = function (n) {

            if (!n.read && sendReadRequest.indexOf(n.noticeId) == -1) {
                Notice.updateNoticesView(n.noticeId, "CandidateAddFromEmailController");
                sendReadRequest.push(n.noticeId);
                var index = sendReadRequest.indexOf(n.noticeId);
                Service.readNotice(n.noticeIds, function (resp) {
                    if (resp.status && resp.status == "ok") {
                        n.read = true;
                        document.dispatchEvent(new CustomEvent('cleverstaffExtensionReloadCountUnreadNotice'));
                    } else if (resp.message) {
                        notificationService.error(resp.message);
                    }
                    sendReadRequest.splice(index, 1);
                }, function (resp) {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));

                    sendReadRequest.splice(index, 1);
                });
            } else {
            }
        };

        $scope.checkedEmail = function (email) {
            return $.inArray(email, $scope.checkedGMail) != -1;
        };

        $rootScope.changeSearchType = function (param) {
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        }
    }]);

controller.controller('CandidateAddFromZipController', ["Notice", "$localStorage", "$translate", "Service",
    "$scope", "ngTableParams", "Candidate", "$location", "$rootScope", "$filter",
    "$cookies", "serverAddress", "notificationService", "googleService", "$window","$interval",
    function(Notice, $localStorage, $translate, Service, $scope, ngTableParams, Candidate, $location,
             $rootScope, $filter, $cookies, serverAddress, notificationService, googleService, $window,$interval) {

        $scope.regionzip = [];
        Candidate.ZIP($scope, $interval, $rootScope);
        $scope.loading = true;

        $scope.updateZipList = function () {
            console.log(1);
            $scope.loading = true;
            $.ajax({
                url: "/hr/uploads",
                type: "GET",
                data: null,
                dataType: "json",
                success: function(data) {
                    $scope.$apply(function () {
                        $scope.zipUploads = data;
                        $scope.loading = false;
                    });
                }
            });
        };
        $scope.updateZipList();
        //Candidate.one(function(resp) {
        //    if (angular.equals(resp.status, "ok")) {
        //        $scope.regionzip = resp.object.relatedRegions != undefined ? resp.object.relatedRegions : [];
        //    }
        //});
        $scope.deleteRegionzip = function(index) {
            $scope.regionzip.splice(index, 1);
        };

        //$scope.limitStrict = function () {
        //    var fileName = $(".fileName");
        //    if(fileName) fileName.val(fileName.val().substr(0,10));
        //};
        //$scope.limitStrict();

        $scope.openHelpZip1 = function(event) {
            console.log(event);
            var helpZip1 = $("#helpZip1");
            if (helpZip1.css('display') == 'none') {
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0.11)"});
                helpZip1.show('slide', {direction: 'left'}, 400);
                $(document).mouseup(function(e) {
                    var noticesElement = $("#agreedQuestionOuter");
                    if ($("#agreedQuestionOuter").has(e.target).length === 0) {
                        helpZip1.hide();
                        $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                        $(document).off('mouseup');
                    }
                });
            } else {
                helpZip1.hide();
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                $(document).off('mouseup')
            }
        };
        $scope.openHelpZip2 = function() {
            var helpZip2 = $("#helpZip2");
            if (helpZip2.css('display') == 'none') {
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0.11)"});
                helpZip2.show('slide', {direction: 'left'}, 400);
                $(document).mouseup(function(e) {
                    var noticesElement = $("#agreedQuestionOuter");
                    if ($("#agreedQuestionOuter").has(e.target).length === 0) {
                        helpZip2.hide();
                        $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                        $(document).off('mouseup');
                    }
                });
            } else {
                helpZip2.hide();
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                $(document).off('mouseup')
            }
        };
        $scope.openHelpZip3 = function() {
            var helpZip3 = $("#helpZip3");
            if (helpZip3.css('display') == 'none') {
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0.11)"});
                helpZip3.show('slide', {direction: 'left'}, 400);
                $(document).mouseup(function(e) {
                    var noticesElement = $("#agreedQuestionOuter");
                    if ($("#agreedQuestionOuter").has(e.target).length === 0) {
                        helpZip3.hide();
                        $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                        $(document).off('mouseup');
                    }
                });
            } else {
                helpZip3.hide();
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                $(document).off('mouseup')
            }
        };
        $scope.checkValidZip = function() {
           if(!$scope.radioType){
               $('.mainFormZip').css('box-shadow','rgb(245, 19, 19) 0px 0px 10px');
               setTimeout(function(){
                   $('.mainFormZip').css('box-shadow','none');
               },1000);
           }
            if($scope.regionzip.length==0){
                $('#pac-input3').css('box-shadow','rgb(245, 19, 19) 0px 0px 10px');
                setTimeout(function(){
                    $('#pac-input3').css('box-shadow','none');
                },1000);
           }
            if(!$scope.radioInclude){
                $('.minorFormZip').css('box-shadow','rgb(245, 19, 19) 0px 0px 10px');
                setTimeout(function(){
                    $('.minorFormZip').css('box-shadow','none');
                },1000);
            }
        };
        $scope.getZipBrowser = function () {
            if (navigator.saysWho.indexOf("Chrome") != -1) {
                $scope.zipBrowser = "Chrome";
            } else if (navigator.saysWho.indexOf("Firefox") != -1) {
                $scope.zipBrowser = "Firefox";
            } else {
                $scope.zipBrowser = $filter("translate")("browser");
            }
        };
        $scope.getZipBrowser();
        $scope.fakeZip = function(){
            $('.zipFake').popup({
                on: 'click',
                position: 'top center'
            });
        };
        $scope.fakeZip();
        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        }
    }]);

function CandidateAllController($localStorage, $translate, Service, $scope, ngTableParams, Candidate, $location,
                                $rootScope, $filter, $cookies, serverAddress, notificationService, googleService, $window,
                                ScopeService, frontMode, Vacancy, Company, vacancyStages, $sce, $analytics, Mail, FileInit, $uibModal, Person, $timeout, CandidateGroup, $anchorScroll) {
    $scope.experience = Service.experience();
    $rootScope.objectSize = null;
    $scope.enableExcelUploadAll = 'N';
    $scope.a = {};
    $scope.a.searchNumber = 1;
    $scope.candidatesAddToVacancyIds = [];
    $scope.checkAllCandidates = false;
    $scope.showTagsForMass = false;
    $scope.previousFlag = true;
    $scope.placeholder = $filter('translate')('by position');
    $rootScope.candidatesAddToVacancyIds = $scope.candidatesAddToVacancyIds;
    vacancyStages.get(function (resp) {
        $scope.customStages = resp.object.interviewStates;
        $rootScope.customStages = resp.object.interviewStates;
    });
    $scope.imgWidthFunc = function(id){
        var img = new Image();
        img.onload = function() {
            var width = this.width;
            var height = this.height;
            var minus = width - height;
            if(width >= height && minus > 40 && minus <=100){
                $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
            }else if((width >= 300 && width <= 349) || width == height){
                $('#page-avatar').css({'width': '100%', 'object-fit': 'fill', 'margin': 'inherit'});
            }else if(width >= 350){
                $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
            }else if(width >= 266){
                $('#page-avatar').css({'width': '100%', 'height': 'auto'});
            }else{
                $('#page-avatar').css({'width': 'inherit', 'height': 'inherit', 'display': 'block', 'margin': '0 auto'});
            }
        };
        if($location.$$host == '127.0.0.1'){
            img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $scope.serverAddress + '/getapp?id=' + id + '&d=' + $rootScope.me.personId;
        }else{
            img.src = $location.$$protocol + '://' + $location.$$host + $scope.serverAddress + '/getapp?id=' + id + '&d=' + $rootScope.me.personId;
        }
    };
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    $rootScope.closeModalAfterActivity = function(){
        $rootScope.modalInstance.close();
    };
    Company.getParam({name: 'enableExcelUploadAll'}, function (resp) {
        if (angular.equals(resp.status, "ok")) {
            $scope.enableExcelUploadAll = resp.object;
        }
    });
    $scope.filterForChange = 'dm';
    $scope.filterSort = [{
        name: $filter('translate')('Relevancy'),
        values : 'relevance'
    }, {
        name: $filter('translate')('date added to database'),
        values : 'dc'
    }, {
        name: $filter('translate')('Date of last activity'),
        values : 'dm'
    }, {
        name: $filter('translate')('Date of last comment'),
        values : 'lastCommentDate'
    }, {
        name: $filter('translate')('Employment start date'),
        values : 'hireDate'
    }];
    $rootScope.addCandidateInVacancy = {
        id: "",
        comment: "",
        status: "longlist",
        date: null,
        showSelect: "",
        showText: false,
        text: ""
    };

    $scope.currentDocPreviewPage = 0;

    $rootScope.addCandidateInVacancySelect2Obj = {
        status: null
    };
    Candidate.fromFile($scope, $rootScope, $location);
    $rootScope.errorMessageForAddCandidateInVacancy = {
        show: false,
        text: ""
    };
    setTimeout(function(){
        if($rootScope.me.recrutRole != 'client'){
            if ($rootScope.questStatus.growYourDatabasePopup == 'Y'){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/HelloQuest/helloQuestCandidatesStart.html',
                    size: '',
                    backdrop: 'static',
                    keyboard: false,
                    resolve: function(){

                    }
                });
                Person.changeUserParam({
                    name: 'letsCelebratePopup',
                    value: 'N'
                }, function (resp) {
                    if (resp.status == "ok") {
                        $rootScope.updateQuestStatus();
                        $rootScope.closeModalAfterActivity();
                    }else{
                        notificationService.error(resp.message);
                    }
                });
                $rootScope.continueQuest = function (key) {
                    Person.changeUserParam({
                        name: 'growYourDatabasePopup',
                        value: 'N'
                    }, function (resp) {
                        if (resp.status == "ok") {
                            $rootScope.updateQuestStatus();
                            $rootScope.closeModal();
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                };
                $rootScope.doItLater = function(){
                    Person.changeUserParam({
                        name: 'onboardingQuestPopup',
                        value: 'Y'
                    }, function (resp) {
                        if (resp.status == "ok") {
                            Person.changeUserParam({
                                name: 'growYourDatabasePopup',
                                value: 'N'
                            }, function (data) {
                                if(data.status == "ok"){
                                    $rootScope.updateQuestStatus();
                                    $timeout(function(){
                                        $rootScope.closeModal();
                                        $location.path("/organizer");
                                    },500)
                                }
                            });
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                };
            }
        }
    },0);
    $scope.menuOptions = [
        [$filter('translate')('Open in new tab'), function ($itemScope) {
            $window.open($location.absUrl() + "/" + $itemScope.user.localId, "_blank");
        }],
        [$filter('translate')('Add to vacancy'), function ($itemScope) {
            var state = null;
            var showSelect = true;
            var showText = false;
            $rootScope.clickedAddVacancyInCandidate = false;
            $scope.toAddVacancyForm = function (state, showSelect, showText, candidate) {
                $rootScope.candidateIdForVacancyId = candidate.candidateId;
                state = null;
                $rootScope.addCandidateInVacancy.showText = false;
                $rootScope.addCandidateInVacancy.showSelect = true;
                $rootScope.VacancyStatusFiltered = null;
                $rootScope.addCandidateInVacancy.inVacancy = false;
                $rootScope.addCandidateInVacancy.statusObject = null;
                $rootScope.addCandidateInVacancy.comment = '';
                $("#candidateAddToVacancy").select2("val", null);
                $rootScope.addCandidateInVacancy.status = state !== null ? state : {
                    value: "longlist",
                    withDate: false,
                    defaultS: true,
                    single: false,
                    added: true,
                    active_color: "longlist_color",
                    useAnimation: false,
                    count: 0,
                    forAdd: true
                };
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/candidate-add-in-vacancy.html',
                    resolve: {
                        items: function () {
                            return $scope.items;
                        }
                    }
                });
                $scope.modalInstance.opened.then(function() {
                    setTimeout(function(){
                        $(".addCandidateInvacancyPicker").datetimepicker({
                            format: "dd/mm/yyyy hh:ii",
                            startView: 2,
                            minView: 0,
                            autoclose: true,
                            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                            language: $translate.use()
                        }).on('changeDate', function (data) {
                            $rootScope.addCandidateInVacancy.date = data.date;
                        }).on('hide', function () {
                            if ($('.addCandidateInvacancyPicker').val() == "") {
                                $rootScope.addCandidateInVacancy.date = null;
                            }else{
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInvacancyPicker').datetimepicker('getDate').getTime(), true));
                                $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInvacancyPicker').datetimepicker('getDate').getTime(), true));
                                tinyMCE.get('addCandidateInVacancyMCE').setContent($rootScope.emailTemplateInModal.text);
                            }
                            $('.addCandidateInvacancyPicker').blur();
                        });
                    },0)
                });
                $scope.modalInstance.closed.then(function() {
                    tinyMCE.remove()
                });
                $rootScope.candidateForUpdateResume = $itemScope.user;
                createEmailTemplateFunc($scope,$rootScope,'addCandidateInVacancyMCE', Mail);
                $rootScope.candnotify = {};
                Candidate.getContacts({"candidateId": $itemScope.user.candidateId}, function (resp) {
                    var email = "";
                    angular.forEach(resp.objects, function (c) {
                        if (c.type == "email") {
                            email = c.value;
                        }
                    });
                    $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                    $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
                });
                $rootScope.candnotify.show = false;
                $rootScope.candnotify.fullName = $itemScope.user.fullName;
                $rootScope.candnotify.send = $localStorage.get("candnotify") != "false";

            };

            $rootScope.addVacancyInCandidate = function ( sendTemplate) {
                if (!$rootScope.clickedAddVacancyInCandidate) {
                    $rootScope.clickedAddVacancyInCandidate = true;


                    if ($("#candidateAddToVacancy").select2('data') == null) {
                        $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                        $rootScope.errorMessageForAddCandidateInVacancy.text = $filter('translate')('You must specify the position');
                        $rootScope.clickedAddVacancyInCandidate = false;
                        return;
                    }
                    var vacancyId = $("#candidateAddToVacancy").select2('data').id;
                    $rootScope.errorMessageForAddCandidateInVacancy.show = false;

                    $rootScope.addCandidateInVacancy.date = $('.addCandidateInvacancyPicker').datetimepicker('getDate') != null && ($rootScope.addCandidateInVacancy.status.withDate ||
                        $rootScope.addCandidateInVacancy.status.type == 'interview')
                        ? $('.addCandidateInvacancyPicker').datetimepicker('getDate') : null;
                    if ($rootScope.addCandidateInVacancy.status.customInterviewStateId) {
                        vacancyAddInterview(Vacancy, vacancyId, null,
                            $itemScope.user.candidateId,
                            $rootScope.addCandidateInVacancy.comment,
                            $rootScope.addCandidateInVacancy.status.customInterviewStateId,
                            $rootScope.addCandidateInVacancy.date, function (resp) {
                                resp.object.vacancyId.interviewStatusNotTouchable = resp.object.vacancyId.interviewStatus;
                                if (!$itemScope.user.interviews) {
                                    $itemScope.user.interviews = [];
                                }
                                $rootScope.clickedAddVacancyInCandidate = false;
                                $rootScope.addCandidateInVacancy.comment = "";
                                $rootScope.addCandidateInVacancy.id = null;
                                $itemScope.user.interviews.push(resp.object);
                                angular.forEach($itemScope.user.interviews, function (interview) {
                                    if (interview.vacancyId.interviewStatus == undefined) {
                                        interview.vacancyId.interviewStatus = "longlist,shortlist,interview,approved,notafit,declinedoffer";
                                        interview.vacancyId.interviewStatusNotTouchable = interview.vacancyId.interviewStatus
                                    }
                                });
                                angular.forEach($itemScope.user.interviews, function (value) {
                                    var array = value.vacancyId.interviewStatus.split(",");
                                    angular.forEach($scope.customStages, function (resp) {
                                        if (value.state == resp.customInterviewStateId) {
                                            value.state = resp.name
                                        }
                                        angular.forEach(array, function (res) {
                                            if (resp.customInterviewStateId == res) {
                                                array[array.indexOf(resp.customInterviewStateId)] = resp.name;
                                            }
                                        });
                                    });
                                    value.vacancyId.interviewStatus = array.toString();
                                });
                                $rootScope.addCandidateInVacancy.status = null;
                                $rootScope.addCandidateInVacancy.date = null;
                                $rootScope.VacancyStatusFiltered = '';
                                $rootScope.closeModal();
                            }, function (resp) {
                                $rootScope.clickedAddVacancyInCandidate = false;
                                $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                                $rootScope.errorMessageForAddCandidateInVacancy.text = resp.message;
                            }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
                    } else {
                        vacancyAddInterview(Vacancy, vacancyId, null,
                            $itemScope.user.candidateId,
                            $rootScope.addCandidateInVacancy.comment,
                            $rootScope.addCandidateInVacancy.status.value,
                            $rootScope.addCandidateInVacancy.date, function (resp) {
                                resp.object.vacancyId.interviewStatusNotTouchable = resp.object.vacancyId.interviewStatus;
                                if (!$itemScope.user.interviews) {
                                    $itemScope.user.interviews = [];
                                }
                                $rootScope.clickedAddVacancyInCandidate = false;
                                $rootScope.addCandidateInVacancy.comment = "";
                                $rootScope.addCandidateInVacancy.id = null;
                                $itemScope.user.interviews.push(resp.object);
                                angular.forEach($itemScope.user.interviews, function (interview) {
                                    if (interview.vacancyId.interviewStatus == undefined) {
                                        interview.vacancyId.interviewStatus = "longlist,shortlist,interview,approved,notafit,declinedoffer";
                                        interview.vacancyId.interviewStatusNotTouchable = interview.vacancyId.interviewStatus;
                                    }
                                });
                                angular.forEach($itemScope.user.interviews, function (value) {
                                    var array = value.vacancyId.interviewStatus.split(",");
                                    angular.forEach($scope.customStages, function (resp) {
                                        if (value.state == resp.customInterviewStateId) {
                                            value.state = resp.name
                                        }
                                        angular.forEach(array, function (res) {
                                            if (resp.customInterviewStateId == res) {
                                                array[array.indexOf(resp.customInterviewStateId)] = resp.name;
                                            }
                                        });
                                    });
                                    value.vacancyId.interviewStatus = array.toString();
                                });
                                $rootScope.addCandidateInVacancy.status = null;
                                $rootScope.addCandidateInVacancy.date = null;
                                $rootScope.VacancyStatusFiltered = '';
                                $rootScope.closeModal();
                            }, function (resp) {
                                $rootScope.clickedAddVacancyInCandidate = false;
                                $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                                $rootScope.errorMessageForAddCandidateInVacancy.text = resp.message;
                            }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
                    }
                    if($rootScope.candnotify.show && sendTemplate){
                        var candnotify = $rootScope.candnotify;
                        var changeObj = $rootScope.addCandidateInVacancy;
                        Mail.sendMailByTemplateVerified({
                            toEmails: candnotify.sendMail,
                            vacancyId: $rootScope.VacancyAddedInCandidate.vacancyId,
                            candidateId: $rootScope.candidateForUpdateResume.candidateId,
                            fullName: $rootScope.candidateForUpdateResume.fullName,
                            email: $rootScope.emailTemplateInModal.email,
                            date: $rootScope.addCandidateInVacancy.date,
                            lang: $scope.lang,
                            template: {
                                type: $rootScope.emailTemplateInModal.type,
                                title: $rootScope.emailTemplateInModal.title,
                                text: $rootScope.emailTemplateInModal.text,
                                fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                            }
                        }, function (resp) {
                            if(resp.status == 'ok'){
                                notificationService.success($filter('translate')('Letter sent'));
                                $rootScope.closeModal();
                            }else{
                                notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                            }
                        });
                    }
                }
            };
            $scope.toAddVacancyForm(state, showSelect, showText, $itemScope.user);

        }],
        [$filter('translate')('Edit candidate'), function ($itemScope) {
            if($rootScope.me.recrutRole != 'client'){
                $window.open($location.protocol() + "://" + $location.host() + "/!#/candidate/edit/" + $itemScope.user.localId, "_blank");
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can editing candidates'));
            }
        }],
        [$filter('translate')('Remove candidate'), function ($itemScope) {
            $scope.deleteCandidate($itemScope.user);
        }]
    ];
    $rootScope.transferCandidateInOtherVacancyStatus = function () {
        var status = $("#candidateAddToVacancy").select2('data').status;
        if (status == 'approved' && $rootScope.me.recrutRole != 'admin') {
            $rootScope.errorMessageForAddCandidate.text = $filter('translate')('Transfer from the status of approved can only Admin');
            $rootScope.errorMessageForAddCandidate.show = true;
            return;
        }


        $rootScope.changeStatusOfInterviewInVacancy = $rootScope.addCandidateInVacancy;
        $rootScope.changeStatusOfInterviewInVacancy.vacancyId = $("#candidateAddToVacancy").select2('data').id;
        var data = $('.addCandidateInvacancyPicker').datetimepicker('getDate') != null && $rootScope.addCandidateInVacancy.status.withDate
            ? $('.addCandidateInvacancyPicker').datetimepicker('getDate') : null;
        $rootScope.saveStatusInterviewInVacancy(data);
        $('.addCandidateInVacancy').modal('hide');
        $rootScope.candidateAddedInVacancy = false;
        $('.addCandidateInvacancyPicker').val("");
    };
    $rootScope.saveStatusInterviewInVacancy = function (customDate) {
        if (!$rootScope.clickedSaveStatusInterviewInVacancy) {
            $rootScope.clickedSaveStatusInterviewInVacancy = true;
            $rootScope.changeStatusOfInterviewInVacancy.errorMessage = false;
            var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
            if (changeObj.status.value == 'declinedoffer' && changeObj.comment == '') {
                $rootScope.changeStatusOfInterviewInVacancy.errorMessage = true;
                $rootScope.clickedSaveStatusInterviewInVacancy = false;
                return;
            }
            if ($rootScope.showEmployedFields) {
                changeObj.date = $('.changeStatusOfInterviewEmployed').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewEmployed').datetimepicker('getDate') : customDate != undefined ? customDate : null;
            } else {
                changeObj.date = $('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate') : customDate != undefined ? customDate : null;
            }
            if ($rootScope.showEmployedFields) {
                Vacancy.editInterview({
                    "personId": $scope.personId,
                    "vacancyId": $rootScope.changeStatusOfInterviewInVacancy.vacancyId,
                    "candidateId":  $rootScope.candidateForUpdateResume.candidateId,
                    "interviewId": changeObj.candidate.interviewId,
                    "interviewState": changeObj.status.customInterviewStateId ? changeObj.status.customInterviewStateId : changeObj.status.value,
                    "comment": changeObj.comment,
                    "lang": $translate.use(),
                    "probationaryPeriod": $rootScope.probationaryPeriod,
                    "dateEmployee": changeObj.date != null ? changeObj.date.getTime() : null
                }, function (resp) {
                    if (resp.status == "ok") {
                        if(changeObj.status.customInterviewStateId){
                            var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                        }else{
                            var id = resp.object.interviewId + changeObj.status.value;
                        }
                        $scope.showChangeStatusValue = null;
                        //angular.forEach($scope.candidate.interviews, function (i) {
                        //    if (i.vacancyId.vacancyId == $rootScope.changeStatusOfInterviewInVacancy.vacancyId) {
                        //        i.state = changeObj.status.value;
                        //    }
                        //});
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        if ($rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                            var candnotify = $rootScope.candnotify;
                            var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                            Mail.sendMailByTemplate({
                                toEmails: candnotify.sendMail,
                                vacancyId: $rootScope.changedStatusVacancy ? $rootScope.changedStatusVacancy.vacancyId:$rootScope.VacancyAddedInCandidate.vacancyId,
                                candidateId: $rootScope.candidateForUpdateResume.candidateId,
                                fullName: $rootScope.candidateForUpdateResume.fullName,
                                email: $rootScope.emailTemplateInModal.email,
                                date: changeObj.date != null ? changeObj.date.getTime() : null,
                                lang: $scope.lang,
                                template: {
                                    type: $rootScope.emailTemplateInModal.type,
                                    title: $rootScope.emailTemplateInModal.title,
                                    text: $rootScope.emailTemplateInModal.text,
                                    fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                    fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                                }
                            }, function (resp) {
                                if(resp.status == 'ok'){
                                    notificationService.success($filter('translate')('Letter sent'));
                                    $rootScope.closeModal();
                                }else{
                                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                                }
                            });
                        }
                        $rootScope.changeStatusOfInterviewInVacancy = {
                            candidate: {},
                            comment: "",
                            status: "",
                            date: null,
                            exportgoogle: false
                        };
                        $rootScope.addCandidateInInterviewbuttonClicked = false;
                        $rootScope.closeModal();
                        $('.changeStatusOfInterviewInVacancyPick').val("");
                        $scope.getLastEvent();
                    } else if (resp.status == "error") {
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        notificationService.error(resp.message);
                    }
                }, function (err) {
                    $scope.showChangeStatusValue = null;
                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                    $rootScope.addCandidateInInterviewbuttonClicked = false;
                });
            }else{
                Vacancy.editInterview({
                    "personId": $scope.personId,
                    "vacancyId": $rootScope.changeStatusOfInterviewInVacancy.vacancyId,
                    "candidateId": $rootScope.candidateForUpdateResume.candidateId,
                    "interviewState": changeObj.status.name ? changeObj.status.customInterviewStateId : changeObj.status.value,
                    "comment": changeObj.comment,
                    "date": changeObj.date != null ? changeObj.date.getTime() : null,
                    "lang": $translate.use()
                }, function (resp) {
                    if (resp.status == "ok") {
                        var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                        if(changeObj.status.customInterviewStateId){
                            var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                        }else{
                            var id = resp.object.interviewId + changeObj.status.value;
                        }
                        if(changeObj.date){
                            if($rootScope.calendarShow){
                                googleCalendarCreateEvent(googleService, changeObj.date, changeObj.
                                        $scope.candidate.candidateId.fullName,
                                    $rootScope.changeStatusOfInterviewInVacancy.position,
                                    $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null,
                                    changeObj.comment, id, $filter);
                            }
                        }
                        $scope.showChangeStatusValue = null;
                        //angular.forEach($scope.candidate.interviews, function (i) {
                        //    if (i.vacancyId.vacancyId == $rootScope.changeStatusOfInterviewInVacancy.vacancyId) {
                        //        i.state = changeObj.status.value;
                        //    }
                        //});
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        if ($rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                            var candnotify = $rootScope.candnotify;
                            var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                            Mail.sendMailByTemplate({
                                toEmails: candnotify.sendMail,
                                vacancyId: $rootScope.changedStatusVacancy ? $rootScope.changedStatusVacancy.vacancyId:$rootScope.VacancyAddedInCandidate.vacancyId,
                                candidateId: $rootScope.candidateForUpdateResume.candidateId,
                                fullName: $rootScope.candidateForUpdateResume.fullName,
                                email: $rootScope.emailTemplateInModal.email,
                                date: changeObj.date != null ? changeObj.date.getTime() : null,
                                lang: $scope.lang,
                                template: {
                                    type: $rootScope.emailTemplateInModal.type,
                                    title: $rootScope.emailTemplateInModal.title,
                                    text: $rootScope.emailTemplateInModal.text,
                                    fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                    fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                                }
                            }, function (resp) {
                                if(resp.status == 'ok'){
                                    notificationService.success($filter('translate')('Letter sent'));
                                    $rootScope.closeModal();
                                }else{
                                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                                }
                            });
                        }
                        $rootScope.changeStatusOfInterviewInVacancy = {
                            candidate: {},
                            comment: "",
                            status: "",
                            date: null,
                            exportgoogle: false
                        };
                        $rootScope.addCandidateInInterviewbuttonClicked = false;
                        $rootScope.closeModal();
                        $('.changeStatusOfInterviewInVacancyPick').val("");
                    } else if (resp.status == "error") {
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        notificationService.error(resp.message);
                    }
                }, function (err) {
                    $scope.showChangeStatusValue = null;
                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                    $rootScope.addCandidateInInterviewbuttonClicked = false;
                });
            }
        }
    };
    $scope.serverAddress = serverAddress;
    $scope.candidateFound = false;
    $scope.regionId = null;
    $rootScope.changeStateInCandidate = {
        status: "",
        comment: "",
        fullName: null,
        placeholder: null,
        candidate: null
    };
    $scope.statusAssoc = Candidate.getStatusAssociative();
    $scope.employmentType = Service.employmentType();
    $scope.experience = Service.experience();
    $scope.extensionHas = false;
    Service.getRegions2(function (countries,cities) {
        $scope.countries = countries;
        $scope.cities = cities;
        var optionsHtml = '<option value="null" style="color:#999">'+$filter('translate')('region')+'</option>';
        var optionsHtmlCity = '<option value="null" style="color:#999">'+$filter('translate')('city')+'</option>';
        angular.forEach($scope.countries, function (value) {
            optionsHtml += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
        });
        angular.forEach($scope.cities, function (value) {
            optionsHtmlCity += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
        });
        $('#cs-region-filter-select, #cs-region-filter-select-for-linkedin').html(optionsHtml);
        $('#cs-region-filter-select-cities, #cs-region-filter-select-for-linkedin-cities').html(optionsHtmlCity);
    });
    Service.getGroups(function (resp) {
        $scope.candidateGroups = resp.objects;
        var emptyList = [];
        $scope.setGroups($scope.candidateGroups, emptyList);
    });
    $scope.textSearchType = [
        {name: "words through AND", value: "AllWords"},
        {name: "words through OR", value: "any"},
        {name: "exact match", value: "whole"},
        {name: "Only by position", value: "byPosition"}
    ];
    $scope.textSearchTypeModel = $scope.textSearchType[0].value;
    $scope.changeTextSearchType = function (val) {
        if (val == "any") {
            $scope.searchParam.searchFullTextType = 'or';
        } else if (val == "whole") {
            $scope.searchParam.searchFullTextType = 'full_match';
        } else if (val == "byPosition") {
            $scope.searchParam.searchFullTextType = 'position';
        } else if (val == "AllWords") {
            $scope.searchParam.searchFullTextType = 'and';
        }
    };

    $scope.boxParam = {
        cs: {
            text_chooser: true,
            reserve: true,
            region: true,
            salary: true,
            type: true,
            industry: true,
            sex: true,
            status: true,
            age: true,
            language: true,
            skill:true
        }
    };
    $scope.box = $scope.boxParam.cs;
    $scope.lang = $translate;
    $scope.ageSearchFrom = [];
    $scope.ageSearchTo = [];
    Service.gender($scope);
    for (var i = 15; i <= 80; i++) {
        $scope.ageSearchFrom.push(i);
        $scope.ageSearchTo.push(i);
    }
    $rootScope.loading = false;
    $scope.isSearched = false;
    $rootScope.searchCheck = $rootScope.searchCheck == undefined ? false : $rootScope.searchCheck;
    $rootScope.searchCheckExternal = $rootScope.searchCheckExternal == undefined ? false : $rootScope.searchCheckExternal;
    $scope.industries = Service.getIndustries();


    function scope_update(val) {
        $scope.tableParams.reload();
    }

    ScopeService.setCurrentControllerUpdateFunc(scope_update);

    //listenerForScope($scope, $rootScope);

    $rootScope.clear = function () {
        Candidate.setOptions("sort", 'dm');
        $scope.searchParam.searchType = "AllWords";
        $scope.searchParam.name = null;
        $scope.searchParam.regionId = null;
        $scope.searchParam.regionIdCity = null;
        $scope.searchParam.salary = null;
        $scope.searchParam.status = 'null';
        $scope.searchParam.sex = 'null';
        $scope.searchParam.employmentType = 'null';
        $scope.searchParam.industry = 'null';
        $scope.searchParam.ageFrom = null;
        $scope.searchParam.ageTo = null;
        $scope.searchParam.words = null;
        $scope.searchParam.company = null;
        $scope.searchParam.position = null;
        $scope.searchParam.candidateGroups = null;
        $scope.searchParam.candidateGroupIds = 'null';
        $scope.searchParam.searchFullTextType = null;
        $scope.searchParam.responsibleId = 'null';
        $scope.searchParam.personId = Candidate.searchOptions().personId;
        $scope.searchParam.personNameWhoSearching = $rootScope.usernameThatIsSearching;
        $scope.searchParam.pages = {count: $scope.startPagesShown};
        $scope.searchParam.experience = null;
        $scope.searchParam.lang =  'null';
        $scope.searchParam.origin = null;
        $scope.searchParam.skills = [];
        $scope.setSkillAutocompleterValueForSearch('');
        $scope.setOriginAutocompleterValue('');
    };
    $rootScope.clearSearchRegion = function(){
        $scope.searchParam.regionId = 'null';
    };
    if (localStorage.countCandidate) {
        $scope.startPagesShown = localStorage.countCandidate;
    } else {
        $scope.startPagesShown = 15;
    }
    $scope.initSearchParam = function () {
        $scope.searchParam = {
            searchType: "AllWords",
            salary: null,
            status: 'null',
            sex: 'null',
            employmentType: 'null',
            industry: 'null',
            ageFrom: null,
            ageTo: null,
            sort: 'dm',
            sortOrder: 'DESC',
            words: null,
            position: null,
            searchCs: true,
            candidateGroups: null,
            searchExternal: false,
            searchSocial: false,
            searchIn: false,
            regionId: 'null',
            candidateGroupIds: null,
            searchFullTextType: 'and',
            withPersonalContacts: 'null',
            responsibleId: null,
            personId: Candidate.searchOptions().personId,
            personNameWhoSearching: $rootScope.usernameThatIsSearching,
            pages: {count: $scope.startPagesShown},
            experience: null,
            lang: 'null',
            skills: []
        };
        $scope.staticSearchParam = [];
        $scope.staticSearchParam.push({
            searchType: "AllWords",
            salary: null,
            status: 'null',
            sex: 'null',
            employmentType: 'null',
            industry: 'null',
            ageFrom: null,
            ageTo: null,
            sort: 'dm',
            sortOrder: 'DESC',
            words: null,
            position: null,
            withPersonalContacts: 'null',
            searchCs: true,
            candidateGroups: null,
            searchExternal: false,
            searchSocial: false,
            searchIn: false,
            regionId: 'null',
            candidateGroupIds: null,
            searchFullTextType: 'and',
            responsibleId: 'null',
            personId: Candidate.searchOptions().personId,
            personNameWhoSearching: $rootScope.usernameThatIsSearching,
            pages: {count: $scope.startPagesShown},
            experience: null,
            lang: 'null',
            skills: []
        })
    };
    $scope.initSearchParam();


    $scope.loadingExcel = false;
    $scope.exportToExcel = function () {
        $rootScope.loading = true;
        if($scope.loadingExcel == false){
            $scope.loadingExcel = true;
            if($scope.criteriaForExcel.words == null) {
                $scope.criteriaForExcel.searchFullTextType = null;
            }
            Candidate.createExcel($scope.criteriaForExcel, function (resp) {
                if (resp.status == 'ok') {
                    var sr = $rootScope.frontMode == "war" ? "/hr/" : "/hrdemo/";
                    $('#export_in_excel')[0].href = sr + 'getapp?id=' + resp.object;
                    $('#export_in_excel')[0].click();
                }
                if (resp.code == 'emptyExportExcel') {
                    notificationService.error($filter('translate')('No candidates for export according to criteria'));
                    $scope.loadingExcel = false;
                }
                $scope.loadingExcel = false;
                $rootScope.loading = false;

            });
        }
    };
    $scope.toExcelHistory = function () {
        $location.path("excelHistory");
    };
    $scope.externalData = [];


    $scope.deleteSearchByUser = function () {
        $scope.searchParam.personId = null;
        $scope.searchParam.personNameWhoSearching = null;
        $scope.tableParams.reload();
    };
    $scope.hideDetailElement = function () {
        $scope.showMessageAboutChangeTypeOfOtherSiteSearch = false;
    };
    $scope.showDetail = function () {
        $scope.showMessageAboutChangeTypeOfOtherSiteSearch = true;
        $scope.showMessageAboutChangeTypeOfOtherSiteSearchmouseover = true
    };

    $scope.tableParams = new ngTableParams({
        page: 1,
        count: $scope.searchParam.pages.count
    }, {
        total: 0,
        getData: function ($defer, params) {
            $rootScope.loading = true;
            if ($rootScope.previousLocation == '/candidates/:id') {
                if ($rootScope.searchParamInCandidate != undefined) {
                    $scope.searchParam = $rootScope.searchParamInCandidate;
                    $rootScope.searchParamInCandidate = null;
                }
                if($scope.previousFlag){
                    $scope.tableParams.page($rootScope.previousSearchNumber);
                    $scope.previousFlag = !$scope.previousFlag;
                }
            }
            if (ScopeService.isInit()) {
                var activeParam = ScopeService.getActiveScopeObject();
                $scope.activeScopeParam = activeParam;
                Candidate.setOptions("personId", $scope.searchParam.personId != undefined ? $scope.searchParam.personId : activeParam.name == 'onlyMy' ? $rootScope.userId : null);
                Candidate.setOptions("page", {number: (params.$params.page - 1), count: params.$params.count});
                if( params.$params.count <= 120) {
                    localStorage.countCandidate = params.$params.count;
                } else {
                    localStorage.countCandidate = 15;
                }

                $scope.searchParam.pages.count = params.$params.count;
                if ($scope.searchParam['regionId'] == 'null') {
                    $scope.searchParam['regionId'] = null;
                }
                if ($scope.searchParam['regionIdCity'] == 'null') {
                    $scope.searchParam['regionIdCity'] = null;
                }
                if ($scope.searchParam['regionId']) {
                    if($scope.searchParam['regionIdCity']){
                        var json = JSON.parse($scope.searchParam['regionIdCity']);
                        if (json && json.type) {
                            Candidate.setOptions("city", json.value);
                        }
                    }else{
                        var json = JSON.parse($scope.searchParam['regionId']);
                        Candidate.setOptions("country", json.value);
                    }
                } else {
                    Candidate.setOptions("country", activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null);
                    Candidate.setOptions("city", activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null);
                }
                Candidate.setOptions("allContainsWords", $scope.searchParam.allContainsWords);
                Candidate.setOptions("name", $scope.searchParam.name);
                Candidate.setOptions("position", $scope.searchParam.position);
                Candidate.setOptions("experience", $scope.searchParam.experience);
                Candidate.setOptions("searchWordsInPosition", $scope.searchParam.searchWordsInPosition);
                Candidate.setOptions("requiredAllContainsWords", $scope.searchParam.requiredAllContainsWords);
                Candidate.setOptions("dateTo", isNotBlank($scope.searchParam['ageFrom']) ?
                    new Date(new Date().setFullYear(new Date().getFullYear() - $scope.searchParam['ageFrom'])).getTime() : null);
                Candidate.setOptions("dateFrom", isNotBlank($scope.searchParam['ageTo']) ?
                    new Date(new Date().setFullYear(new Date().getFullYear() - $scope.searchParam['ageTo'])).getTime() : null);
                Candidate.setOptions("state", isNotBlank($scope.searchParam['status']) ? $scope.searchParam['status'] : null);
                Candidate.setOptions("words", isNotBlank($scope.searchParam['words']) ? $scope.searchParam['words'] : null);
                Candidate.setOptions("salaryTo", $scope.searchParam['salary'] ? $scope.searchParam['salary'] : null);
                Candidate.setOptions("sex", isNotBlank($scope.searchParam['sex']) ? $scope.searchParam['sex'] : null);
                Candidate.setOptions("employmentType", isNotBlank($scope.searchParam['employmentType']) ? $scope.searchParam['employmentType'] : null);
                Candidate.setOptions("responsibleId", isNotBlank($scope.searchParam['responsibleId']) ? $scope.searchParam['responsibleId'] : null);
                Candidate.setOptions("industry", isNotBlank($scope.searchParam['industry']) ? $scope.searchParam['industry'] : null);
                Candidate.setOptions("candidateGroupIds", $scope.searchParam['candidateGroupIds'] ? $scope.searchParam['candidateGroupIds'] : null);
                Candidate.setOptions("experience", isNotBlank($scope.searchParam['experience']) ? $scope.searchParam['experience'] : null);
                Candidate.setOptions("lang", isNotBlank($scope.searchParam['lang']) ? $scope.searchParam['lang'] : null);
                Candidate.setOptions("searchFullTextType", isNotBlank($scope.searchParam['searchFullTextType']) ? $scope.searchParam['searchFullTextType'] : null);
                Candidate.setOptions("sort", isNotBlank($scope.filterForChange) ? $scope.filterForChange : null);
                Candidate.setOptions("withPersonalContacts", $scope.searchParam['withPersonalContacts'] == 'null' ? null: $scope.searchParam['withPersonalContacts'] == "true");
                //Candidate.setOptions("skills", isNotBlank($scope.searchParam.skills.name) ? $scope.searchParam.skills.name : null);
                Candidate.setOptions("skills",$scope.searchParam.skills.name ? [{name: $scope.getSkillAutocompleterValueForSearch(),type: $scope.searchParam.skills.type}] : null);
                Candidate.setOptions("origin", isNotBlank($scope.searchParam['origin']) ? $scope.searchParam['origin'] : null);
                $scope.criteriaForExcel = angular.copy(Candidate.searchOptions());
                $scope.candidateSearchOptions = Candidate.searchOptions();
                $rootScope.searchParamInCandidate = $scope.searchParam;

                function getCandidates(page, count) {
                    if(page || count) {
                        Candidate.setOptions("page", {number: page, count: count});
                        $scope.candidateSearchOptions.page.number = page;
                        $scope.candidateSearchOptions.page.count = count;
                    } else {
                        $scope.isShowMore = false;
                        if(document.getElementById('scrollup'))
                            document.getElementById('scrollup').style.display = 'none';
                        $timeout(function() {
                            $anchorScroll('mainTable');
                        });
                    }
                    Candidate.all($scope.candidateSearchOptions, function (response) {
                        $scope.searchParam['withPersonalContacts'] = $scope.searchParam['withPersonalContacts'].toString();
                        $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
                        $rootScope.objectSizeCand = $rootScope.objectSize;
                        $rootScope.searchParam = $scope.searchParam;
                        params.total(response['total']);
                        $scope.paginationParams = {
                            currentPage: $scope.candidateSearchOptions.page.number,
                            totalCount: $rootScope.objectSize
                        };
                        let pagesCount = Math.ceil(response['total']/$scope.candidateSearchOptions.page.count);
                        if(pagesCount == $scope.candidateSearchOptions.page.number + 1) {
                            $('#show_more').hide();
                        } else {
                            $('#show_more').show();
                        }
                        $scope.candidateFound = response['total'] >= 1;
                        $scope.criteriaForExcel["page"] = {
                            number: 0,
                            count: $scope.objectSize
                        };
                        $scope.limitReached = response['limitReached'];
                        if(page) {
                            $scope.candidates = $scope.candidates.concat(response['objects'])
                        } else {
                            $scope.candidates = response['objects'];
                        }
                        $defer.resolve($scope.candidates);

                        Candidate.init();
                        $scope.searchParam.searchCs = true;
                        $rootScope.loading = false;
                    }, function () {
                        $rootScope.loading = false;
                    });
                }
                getCandidates();
                $scope.showMore = function () {
                    $scope.isShowMore = true;
                    Service.dynamicTableLoading(params.total(), $scope.candidateSearchOptions.page.number, $scope.candidateSearchOptions.page.count, getCandidates)
                };
                $scope.a.searchNumber = $scope.tableParams.page();
                $rootScope.previousSearchNumber = $scope.a.searchNumber;
            }
        }
    });

    $scope.changeFilter = function(sort){
        if($scope.searchParam.words == null && sort == 'relevance'){
            notificationService.error($filter('translate')('Sort by relevance impossible until you enter a value in the Text Search'));
        }else{
            Candidate.setOptions("sort", sort);
            Candidate.setOptions("sortOrder", 'DESC');
            $scope.filterForChange = sort;
            if(!$scope.clickBtnSort){
                $scope.tableParams.reload();
            }
        }
    };
    $scope.$watch('filterForChange', function (newVal, oldVal) {
        if(newVal != undefined && oldVal != newVal){
            $scope.changeFilter(newVal);
        }
    });
    Person.getAllPersons(function (resp) {
        $scope.persons = [];
        $rootScope.persons = [];
        $rootScope.personsNotChanged = [];
        $scope.associativePerson = resp.object;
        angular.forEach($scope.associativePerson, function (val, key) {
            $scope.persons.push($scope.associativePerson[key]);
            $rootScope.persons.push($scope.associativePerson[key]);
            $rootScope.personsNotChanged.push($scope.associativePerson[key]);
        });
    });

    $scope.changeInputPage = function(params,searchNumber){
        var searchNumber = Math.round(searchNumber);
        var maxValue = $filter('roundUp')(params.settings().total/params.count());
        if(searchNumber){
            if(searchNumber >= 1 && searchNumber <= maxValue){
                params.page(searchNumber);
                $scope.a.searchNumber = searchNumber;
            }
        }
    };

    $scope.clickExternalMenu = function () {
        $scope.showExternalMenu = !$scope.showExternalMenu;
        if (!$scope.source.openSettingsMenu) {
            $scope.source.openSettingsMenu = true;
            $localStorage.set("search_external", JSON.stringify($scope.source));
        }
    };

    $scope.showAdvancedSearchCandidateFunc = function() {
        $scope.showAdvancedSearchCandidate = !$scope.showAdvancedSearchCandidate;
        $(".AdvancedSearchCandidate").show("slide", { direction: "right" }, 10);
    };
    $scope.showAdvancedSearchCandidateFuncHide = function(){
        $scope.showAdvancedSearchCandidate = !$scope.showAdvancedSearchCandidate;
        $(".AdvancedSearchCandidate").hide("slide", { direction: "right" }, 10);
    };

    $(document).click(function (){
        if($(".AdvancedSearchCandidate").css('display') != 'none'){
            $scope.showAdvancedSearchCandidateFuncHide();
            $scope.$apply();
        }
    });
    $(".AdvancedSearchCandidate,.sortBy").click(function (e){
        e.stopPropagation();
    });
    $scope.closeSearchTags = function (param){
        if(param == 'industry'){
            $scope.staticSearchParam[0].industry = 'null';
            $scope.searchParam.industry = null;
            $scope.searchParam[param] = 'null';
            $scope.setSelect2Industry('');
        }else if(param == 'skills.name'){
            $scope.staticSearchParam[0].skills.name = null;
            $scope.staticSearchParam[0].skills.type = '_all';
            $scope.searchParam.skills.name = null;
            $scope.searchParam.skills.type = '_all';
        }else if(param == 'skills.type'){
            $scope.staticSearchParam[0].skills.type = '_all';
            $scope.searchParam.skills.type = '_all';
        }else if(param == 'sex'){
            $scope.staticSearchParam[0].sex = 'null';
            $scope.searchParam.sex = 'null';
        }else if(param == 'salary'){
            $scope.staticSearchParam[0].salary = null;
            $scope.searchParam.salary = null;
        }else if(param == 'status'){
            $scope.staticSearchParam[0].status = 'null';
            $scope.searchParam.status = 'null';
        }else if(param == 'ageFrom'){
            $scope.staticSearchParam[0].ageFrom = null;
            $scope.searchParam.ageFrom = null;
        }else if(param == 'ageTo'){
            $scope.staticSearchParam[0].ageTo = null;
            $scope.searchParam.ageTo = null;
        }else if(param == 'lang'){
            $scope.staticSearchParam[0].lang = 'null';
            $scope.searchParam.lang = 'null';
        }else if(param == 'experience'){
            $scope.staticSearchParam[0].experience = 'null';
            $scope.searchParam.experience = 'null';
        }else if(param == 'candidateGroupIds'){
            $scope.staticSearchParam[0].candidateGroupIds = null;
            $scope.searchParam.candidateGroupIds = null;
        }else if(param == 'words'){
            $scope.staticSearchParam[0].words = null;
            $scope.searchParam.words = null;
            $scope.searchParam.searchFullTextType = null;
        }else if(param == 'name'){
            $scope.staticSearchParam[0].name = null;
            $scope.searchParam.name = null;
        }else if(param == 'position'){
            $scope.staticSearchParam[0].position = null;
            $scope.searchParam.position = null;
            $scope.searhcForSure = true;
            $scope.setPositionAutocompleterValue('');
            $('#s2id_position-autocompleter .select2-chosen').html($scope.placeholder)
        }else if(param == 'sort'){
            $scope.staticSearchParam[0].sort = $scope.filterForChange;
            $scope.filterForChange = $scope.filterForChange;
        }else if(param == 'responsibleId'){
            $scope.staticSearchParam[0].responsibleId = 'null';
            $scope.searchParam.responsibleId = 'null';
        }else if(param == 'regionId'){
            $scope.staticSearchParam[0].regionId = 'null';
            $scope.searchParam.regionId = null;
            $scope.searchParam.regionIdCity = null;
        }else if(param == 'withPersonalContacts'){
            $scope.staticSearchParam[0].withPersonalContacts = 'null';
            $scope.searchParam.withPersonalContacts = 'null';
        }else if(param == 'origin'){
            $scope.staticSearchParam[0].origin = null;
            $scope.searchParam.origin = null;
            $scope.setOriginAutocompleterValue('');
        }else if(param == 'skillsName'){
            $scope.staticSearchParam[0].skills = 'null';
            $scope.searchParam.skills = 'null';
            $scope.setSkillAutocompleterValueForSearch('');
        }else{
            $scope.staticSearchParam[0][param] = 'null';
            $scope.searchParam[param] = null;
        }
    };

    $scope.searchLangs = '';
    $scope.chosenLangs = ['null','null','null'];
    $scope.currentLang = 'null';
    $scope.addSearchLang = function (lang) {
        if($scope.chosenLangs[0] != 'null' && $scope.chosenLangs[1] != 'null' && $scope.chosenLangs[2] != 'null'){
            notificationService.error($filter('translate')('Select no more than three languages'));
        }else if($scope.chosenLangs[0] == lang || $scope.chosenLangs[1] == lang || $scope.chosenLangs[2] == lang){
            notificationService.error($filter('translate')('the language is already selected'));
        }else{
            if($scope.chosenLangs[0] == 'null'){
                $scope.chosenLangs[0] = lang;
            }else if($scope.chosenLangs[1] == 'null'){
                $scope.chosenLangs[1] = lang;
            }else if($scope.chosenLangs[2] == 'null'){
                $scope.chosenLangs[2] = lang;
            }
            $scope.updateSearchLangs();
        }
    };
    $scope.updateSearchLangs = function () {
        $scope.searchParam.lang = '';
        if($scope.chosenLangs[0] != 'null'){
            $scope.searchParam.lang = $scope.searchParam.lang + $scope.chosenLangs[0];
            if($scope.chosenLangs[1] != 'null' || $scope.chosenLangs[2] != 'null'){
                $scope.searchParam.lang = $scope.searchParam.lang + ',';
            }
        }
        if($scope.chosenLangs[1] != 'null'){
            $scope.searchParam.lang = $scope.searchParam.lang + $scope.chosenLangs[1];
            if($scope.chosenLangs[2] != 'null'){
                $scope.searchParam.lang = $scope.searchParam.lang + ',';
            }
        }
        if($scope.chosenLangs[2] != 'null'){
            $scope.searchParam.lang = $scope.searchParam.lang + $scope.chosenLangs[2];
        }
    };
    $scope.deleteSearchLang = function (selectedLang) {
        $scope.chosenLangs[selectedLang] = 'null';
        $scope.currentLang = 'null';
        $scope.updateSearchLangs();
    };
    $scope.inHover = function () {
        $scope.showRegionSearchInfoPop = true;
    };
    $scope.outHover = function () {
        $scope.showRegionSearchInfoPop = false;
    };
    $scope.cleanTags = function(){
        $scope.clear();
        $scope.clearTags();
        $rootScope.clickSearch();
    };
    $rootScope.clickSearch = function () {
        if(($scope.searchParam.salary != null || $scope.searchParam.status != 'null' ||
                $scope.searchParam.sex != 'null' || $scope.searchParam.employmentType != 'null' ||
                $scope.searchParam.industry != 'null' || $scope.searchParam.ageFrom != null ||
                $scope.searchParam.ageTo != null || $scope.filterForChange != 'dm' ||
                $scope.searchParam.sortOrder != 'DESC' || $scope.searchParam.words != null || $scope.searchParam.name != null ||
                $scope.searchParam.position != null || $scope.searchParam.candidateGroups != null ||
                $scope.searchParam.regionId != null || $scope.searchParam.regionIdCity != null ||
                $scope.searchParam.candidateGroupIds != null || $scope.searchParam.searchFullTextType != null ||
                $scope.searchParam.responsibleId != 'null' || $scope.searchParam.personId != null ||
                $scope.searchParam.experience != 'null' || $scope.searchParam.lang != 'null' ||
                $scope.searchParam.skills.type != '_all' || $scope.searchParam.withPersonalContacts != 'null') || ($scope.searhcForSure)){
            $scope.searhcForSure = false;
            $scope.showExternalMenu = false;
            $scope.clickBtnSort = true;
            $scope.searchParam.candidateGroupIds = $scope.groupIdsForSearch;
            if($scope.searchParam.words){
                Candidate.setOptions("sort", 'relevance');
                $scope.filterForChange = 'relevance';
            }else{
                Candidate.setOptions("sort", $scope.filterForChange = 'dm');
                //$scope.searchParam.sort = 'dm';
            }
            if($scope.getSelect2Group().length > 0 && $rootScope.searchParamInCandidate && $rootScope.searchParamInCandidate.candidateGroupIds && $rootScope.searchParamInCandidate.candidateGroupIds.length == 0){
                notificationService.error($filter('translate')('This tag is not added to any candidate'));
            }
            var array = [];
            array.push({
                searchType: '',
                salary: $scope.searchParam.salary,
                status: $scope.searchParam.status,
                sex: $scope.searchParam.sex,
                employmentType: $scope.searchParam.employmentType,
                industry: $scope.searchParam.industry,
                ageFrom: $scope.searchParam.ageFrom,
                ageTo: $scope.searchParam.ageTo,
                sort: $scope.filterForChange,
                sortOrder: $scope.searchParam.sortOrder,
                words: $scope.searchParam.words,
                name: $scope.searchParam.name,
                position: $scope.searchParam.position,
                searchCs: true,
                candidateGroups: $scope.searchParam.candidateGroups,
                searchExternal: false,
                searchSocial: false,
                searchIn: false,
                regionId: $scope.searchParam.regionId,
                regionIdCity: $scope.searchParam.regionIdCity,
                candidateGroupIds: $scope.searchParam.candidateGroupIds,
                searchFullTextType: $scope.searchParam.searchFullTextType,
                responsibleId: $scope.searchParam.responsibleId,
                personId: Candidate.searchOptions().personId,
                personNameWhoSearching: $rootScope.usernameThatIsSearching,
                pages: {count: $scope.startPagesShown},
                experience: $scope.searchParam.experience,
                lang: $scope.searchParam.lang,
                skills: $scope.searchParam.skills,
                origin: $scope.searchParam.origin,
                withPersonalContacts: $scope.searchParam.withPersonalContacts
            });
            $scope.staticSearchParam = array;
            if ($scope.searchParam['name'] ||
                $scope.searchParam['salary'] ||
                $scope.searchParam['status'] ||
                $scope.searchParam['words'] ||
                $scope.searchParam['ageTo'] ||
                $("#regionExternalSearchRegion").select2('data') ||
                $scope.searchParam['ageFrom'] ||
                $scope.searchParam['employmentType'] ||
                $scope.searchParam['candidateGroupIds'] ||
                $scope.searchParam['industry'] ||
                $scope.searchParam['sex'] ||
                $scope.searchParam['responsibleId'] ||
                $scope.searchParam['sort'] ||
                $scope.searchParam['regionId'] ||
                $scope.searchParam['regionIdCity']
            ) {
                $scope.tableParams.$params.page = 1;
                if ($scope.searchParam.searchCs) {
                    $scope.tableParams.reload();
                }
                //if ($scope.searchParam.sex == 'null') {
                //    $scope.searchParam.sex = null;
                //}
                $rootScope.searchCheck = true;
                if ($scope.searchParam.searchIn) {
                    $scope.clickSearchLink();
                }
            } else if ($rootScope.searchCheck) {
                $scope.tableParams.reload();
                $rootScope.searchCheck = false;
            }
            $scope.isSearched = true;
            setTimeout(function(){
                $scope.clickBtnSort = false;
            },0)
        }
        else{
            notificationService.error($filter('translate')('Enter the data'));
        }
    };

    $scope.toOneCandidate = function (candidate) {
        $location.path("candidates/" + candidate.localId);
    };
    $scope.toAdd = function () {
        Service.toAddCandidate();
    };
    $scope.toEdit = function (id) {
        if($rootScope.me.recrutRole != 'client'){
            Service.toEditCandidate(id);
        }else{
            notificationService.error($filter('translate')('Only recruiters, admins and freelancers can edit candidate info'));
        }
    };
    $scope.toParseEmail = function () {
        $location.path("candidate/add/email");
    };
    $scope.toZip = function () {
        $location.path("candidate/add/zip");
    };
    $scope.deleteCandidate = function (candidate) {
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/candidate-remove.html',
            size: ''
        });
        $rootScope.changeStateInCandidate.status = "archived";
        $rootScope.changeStateInCandidate.fullName = candidate.fullName;
        $rootScope.changeStateInCandidate.candidate = candidate;
        $rootScope.changeStateInCandidate.placeholder = $filter('translate')('Write a comment why you want remove this candidate');
    };
    $rootScope.saveStatusOfCandidate = function () {
        if ($rootScope.changeStateInCandidate.status != "") {
            Candidate.changeState({
                candidateId: $rootScope.changeStateInCandidate.candidate.candidateId,
                comment: $rootScope.changeStateInCandidate.comment,
                candidateState: $rootScope.changeStateInCandidate.status
            }, function (resp) {
                if (resp.status == "ok") {
                    $rootScope.changeStateInCandidate.candidate.status = resp.object.status;
                    notificationService.success($filter('translate')('candidate') + " " + $rootScope.changeStateInCandidate.candidate.fullName + " " + $filter('translate')('was_deleted'));
                    if($scope.candidates.length == 1 && $scope.a.searchNumber > 0) {
                        $scope.tableParams.page($scope.a.searchNumber - 1);
                        $scope.tableParams.reload();
                    } else {
                        $scope.tableParams.reload();
                    }
                }
            });
            //    function (err) {
            //    //notificationService.error($filter('translate')('service temporarily unvailable'));
            //});
            $rootScope.closeModal();
            $rootScope.changeStateInCandidate.status = "";
            $rootScope.changeStateInCandidate.comment = "";
        }
    };
    $scope.selectRegion = function (val) {
        if ($scope.searchParam.regionId != null) {
            var json = JSON.parse($scope.searchParam.regionId);
            return json != null && val.value == json.value;
        }
    };
    $rootScope.addFromGmail = function () {
        googleService.gmailAuth("readonly", function (result) {
            if (result.status == 'ok') {
                $(".addEmailToParseQueue").modal("hide");
                Candidate.addToParserQueue({email: result.email, password: result.code, host: "gmail"},
                    function (resp) {
                        if (resp && resp.status == 'ok') {
                        } else if (resp.message) {
                            notificationService.error(resp.message);
                        }
                    },
                    function (resp) {
                    });
            }
        });
    };
    $scope.ageEmptyFieldAdd = function (whatAge) {
        if(whatAge == 'ageFrom') {
            if($scope.ageSearchFrom.indexOf(null) == -1) {
                $scope.ageSearchFrom.unshift(null);
            }
        } else {
            if($scope.ageSearchTo.indexOf(null) == -1) {
                $scope.ageSearchTo.unshift(null);
            }
        }
    };
    $scope.status = Candidate.getStatus();
    if ($localStorage.isExist("candidateSearchObject")) {
        var json = JSON.parse($localStorage.get("candidateSearchObject"));
        $scope.searchExternalObject = json.searchExternalObject;
        $scope.loadingExternal = false;
        $("#select_2_region").val(json.searchParam.regionId);
        $scope.searchParamVkRequestObject = json.searchParamVkRequestObject;
        $scope.searchParamVkReqest = json.searchParamVkReqest;
        //$scope.searchParam = json.searchParam;
        $scope.box = json.box;
    }
//    $localStorage.delete("candidateSearchObject")
    $scope.updateLinkHistorySearch = function () {
        Candidate.getSearchHistoryUniqueLink(function (resp) {
            var mas = {};
            var today = new Date();
            var yesterday = new Date().setDate(today.getDate() - 1);
            angular.forEach(resp, function (r, i) {
                if (r.words || r.position || r.company || r.country) {
                    var d = new Date(r.dc);
                    var key;
                    if (today.getFullYear() == d.getFullYear() && today.getMonth() == d.getMonth() && today.getDate() == d.getDate()) {
                        key = $filter("dateFormat")(r.dc) + "today";
                    } else if (today.getFullYear() == d.getFullYear() && today.getMonth() == d.getMonth() && today.getDate() - 1 == d.getDate()) {
                        key = $filter("dateFormat")(r.dc) + "yesterday";
                    } else {
                        key = $filter("dateFormat")(r.dc);
                    }
                    if (mas[key]) {
                        mas[key].push(r);
                    } else {
                        mas[key] = [r];
                    }
                }
            });
            $scope.linkHistorySearch = mas;
            $scope.linkHistorySearchKey = Object.keys(mas).sort().reverse();
            $scope.emptyLinkHistory = JSON.stringify($scope.linkHistorySearch) == '{}';
        });
    };
    $scope.updateLinkHistorySearch();

    if ($rootScope.eventListenerPing) {
        document.removeEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    }
    $rootScope.eventListenerPing = function (event) {
        $scope.extensionHas = true;
    };
    document.addEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    document.dispatchEvent(new CustomEvent('cleverstaffExtensionPing'));

    $scope.getPlugin = function () {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            $window.open("https://chrome.google.com/webstore/detail/cleverstaff-extension/mefmhdnojajocbdcpcajdjnbccggbnha");
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
            $window.open("/extension/CleverstaffExtension4Firefox.xpi");
        } else {
            $("#bad-browser-modal").modal("show");
        }
    };
    $scope.getBrowser = function () {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            return "Chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            return "Firefox";
        } else {
            return $filter("translate")("browser");
        }
    };
    $scope.isGoodBrowser = function () {
        return $scope.getBrowser() === "Chrome" || $scope.getBrowser() === "Firefox";
    };

    navigator.saysWho = (function () {
        var ua = navigator.userAgent, tem,
            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(M[1])) {
            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE ' + (tem[1] || '');
        }
        if (M[1] === 'Chrome') {
            tem = ua.match(/\bOPR\/(\d+)/);
            if (tem != null) return 'Opera ' + tem[1];
        }
        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
        if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
        return M.join(' ');
    })();
    Candidate.ZIP($scope);

    $scope.langs = Candidate.getLangInOrg(function (resp) {
        if (resp.object) {
            $scope.langsReceived = resp.object;
            angular.forEach($scope.langsReceived, function (val) {
                if(val.name != undefined){
                    $scope.langsSearch = val;
                }
            });
        } else {
            $scope.setLangs([]);
        }
    });
    $scope.tofullinformation = function(event,user){
        if(event.button == 0){
            $location.path('candidates/' + user.localId);
        }
    };
    $scope.setSearchedRegion = function(){
        $scope.searchParam.regionIdCity = null;
        var obj = JSON.parse($scope.searchParam.regionId);
        if(obj.type == 'country'){
            $scope.searchedRegion = JSON.parse($scope.searchParam.regionId);
            $('#cs-region-filter-select-cities').find('option').remove();
            var optionsHtmlCity = '<option value="null" style="color:#999">'+$filter('translate')('city')+'</option>';
            angular.forEach($scope.cities, function (value) {
                if(value.type == 'city' && value.country == $scope.searchedRegion.country){
                    optionsHtmlCity += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
                }
            });
            $('#cs-region-filter-select-cities, #cs-region-filter-select-for-linkedin-cities').html(optionsHtmlCity);
        }else{
            $scope.searchedRegionCity = JSON.parse($scope.searchParam.regionIdCity);
        }
    };
    if($rootScope.changeSearchTypeNotFromCandidates){
        $scope.changeSearchType($rootScope.changeSearchTypeNotFromCandidates);
        $rootScope.changeSearchTypeNotFromCandidates = null;
    }
    $scope.parJson = function (json) {
        return JSON.parse(json);
    };
    $rootScope.setDocCounter = function(){
        $scope.currentDocPreviewPage = 0;
    };
    $scope.prevDoc = function(){
        $scope.currentDocPreviewPage -= 1;
    };
    $scope.nextDoc = function(){
        $scope.currentDocPreviewPage += 1;
    };
    $scope.fileForSave = [];
    $rootScope.fileForSave = [];    /*For modal window*/

    FileInit.initVacancyTemplateInCandidateFileOption($scope, $rootScope, "", "", false, $filter);
    $scope.callbackFileTemplateInCandidate = function(resp, names) {
        $scope.fileForSave.push({"fileId": resp, "fileName": names});
        $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
    };
    $scope.removeFile = function(id) {
        angular.forEach($scope.fileForSave, function(val, ind) {
            if (val.attId === id) {
                $scope.fileForSave.splice(ind, 1);
            }
        });
    };
    $rootScope.removeFile = function(id) {
        angular.forEach($rootScope.fileForSave, function(val, ind) {
            if (val.attId === id) {
                $rootScope.fileForSave.splice(ind, 1);
            }
        });
    };
    $scope.showCandidateFiles = function(id){
        $scope.candidateIdFiles = id;
        $('body').mouseup(function (e) {
            if ($(".saveCandidateFile").has(e.target).length === 0) {
                $scope.candidateIdFiles = null;
                $scope.$apply();
            }
        });
    };
    $scope.showAddResumeFromText = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-resume-from-text.html',
            size: 'lg',
            resolve: function(){

            }
        });
    };
    $rootScope.checkTextForResume = function(){
        $rootScope.loading = true;
        Candidate.fromText({text: $rootScope.fastCandResumeText}, function(res) {
            if (angular.equals(res.status, "ok")) {
                //Candidate.convert($scope, res.object);
                //if (res.object.position) {
                //    $scope.setPositionAutocompleterValue(res.object.position);
                //}
                $rootScope.resumeFromText = res.object;
                $rootScope.loading = false;
                $location.path("candidate/add");
                $rootScope.closeModal();
            } else if (angular.equals(res.status, "error")) {
                notificationService.error(res.message);
            } else {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            }
            $scope.fastCandLoading = false;
        }, function(val) {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });
    };
    $scope.showAddResumeFromLink = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-resume-from-link.html',
            size: 'lg',
            resolve: function(){

            }
        });
    };
    $rootScope.checkTextForLink = function(){
        var link;
        if ($("#fastCandResumeLinkSite").val()) {
            link = $("#fastCandResumeLinkSite").val();
        } else if (value) {
            link = value;
            $rootScope.fastCandResumeLinkSite = value;
        }
        if ($rootScope.fastCandResumeLinkSite === undefined && (link.indexOf('http://') === -1 || link.indexOf('https://') === -1 || link.indexOf('ftp://') === -1)) {
            $rootScope.fastCandResumeLinkSite = 'http://' + link;
        }
        if ($rootScope.fastCandResumeLinkSite !== undefined) {
            if ($rootScope.fastCandResumeLinkSite.indexOf("docs.google.com") === -1 && $rootScope.fastCandResumeLinkSite.indexOf("drive.google.com") === -1) {
                if ($rootScope.fastCandResumeLinkSite.indexOf("linkedin.com/profile/view") === -1) {
                    $rootScope.loading = true;
                    $scope.fastCandLoading = true;
                    Candidate.fromLinkSite({url: $rootScope.fastCandResumeLinkSite}, function(res) {
                        if (angular.equals(res.status, "ok")) {
                            //Candidate.convert($scope, res.object);
                            //if (res.object.employmentType != undefined) {
                            //    $scope.setSelect2EmploymentType(res.object.employmentType.split(", "));
                            //}
                            //if (res.object.position) {
                            //    $scope.setPositionAutocompleterValue(res.object.position);
                            //}
                            $rootScope.resumeFromLink = res.object;
                            $location.path("candidate/add");
                            $rootScope.closeModal();
                        } else if (angular.equals(res.status, "error")) {
                            notificationService.error(res.message);
                        } else {
                            //notificationService.error($filter('translate')('service temporarily unvailable'));
                        }
                        $scope.fastCandLoading = false;
                        $rootScope.loading = false;
                    }, function(val) {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $scope.fastCandLoading = false;
                        $rootScope.loading = false;
                    });
                } else {
                    notificationService.error($filter('translate')('Incorrect link of LinkedinIn public profile. You can get correct link at the Contact Info.'));
                }
            }else {
                notificationService.error($filter('translate')('Candidate data will be uploaded incorrectly if you use Google Drive links. Please upload resumes from your PC/Mac after you save them from Google Drive.'));
            }

        } else {
            notificationService.error($filter('translate')('Enter a valid url'));
        }
    };
    $scope.getFirstLetters = function(string){
        return firstLetters(string)
    };
    $scope.pushCandidateToVacancy = function(candidate){
        if(candidate.added){
            var candidateAdded = false;
            for(var key in $scope.candidatesAddToVacancyIds){
                if(candidate.candidateId == $scope.candidatesAddToVacancyIds[key])
                    candidateAdded = true;
            }
            if(!candidateAdded){
                $scope.candidatesAddToVacancyIds.push(candidate.candidateId)
            }
        }else{
            $scope.candidatesAddToVacancyIds.splice($scope.candidatesAddToVacancyIds.indexOf(candidate.candidateId), 1);
        }
    };
    $scope.pushAllCandidatesToVacancy = function () {
        $scope.checkAllCandidates = !$scope.checkAllCandidates;
        angular.forEach($scope.candidates, function(resp){
            if($scope.checkAllCandidates){
                resp.added = true
            }else{
                resp.added = false;
            }
            if(!$scope.checkAllCandidates){
                $scope.candidatesAddToVacancyIds.splice(0, $scope.candidatesAddToVacancyIds.length-1);
            }
            $scope.pushCandidateToVacancy(resp);
        });
    };
    $scope.showAddCandidatesInVacancy = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/candidates-add-in-vacancy.html',
            size: '',
            resolve: function(){
            }
        });
    };
    $rootScope.addCandidatesToVacancy = function(){
        Vacancy.setInterviewList({
            candidateIds: $scope.candidatesAddToVacancyIds,
            vacancyId: $("#candidatesAddToVacancy").select2('data').id,
            state: 'longList',
            status: 'in_process'
        },function(resp){
            if(resp.status == 'ok'){
                $rootScope.closeModal();
                if($scope.candidatesAddToVacancyIds.length == 1){
                    notificationService.success($filter('translate')('Candidate added in vacancy'));
                }else if($scope.candidatesAddToVacancyIds.length > 1){
                    notificationService.success($filter('translate')('Candidates added in vacancy'));
                }
            }else{
                notificationService.error(resp.message);
            }
        });
    };
    $scope.showTagsForMassModal = function(){
        $rootScope.candidatesAddToVacancyIds = $scope.candidatesAddToVacancyIds;
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/candidates-add-tags-multiple.html',
            size: '',
            resolve: function(){
            }
        });
        $scope.modalInstance.opened.then(function() {
            setTimeout(function(){
                $rootScope.setGroupsForMass($scope.candidateGroups, [], $scope);
            },0)
        });
    };
    $scope.editOriginName = function () {
        $scope.originOldName = $scope.getOriginAutocompleterValue();
        $rootScope.originName = $scope.originOldName;
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/origin-name-edit.html',
            size: '',
            resolve: {

            }
        });
    };
    $rootScope.saveOriginName = function () {
        Candidate.editOriginAll({originOld: $scope.originOldName, originNew: $rootScope.originName}, function (resp) {
            if(resp.status == "ok") {
                notificationService.success($filter('translate')('Origin_name_saved'));
            }
        });
        $scope.setOriginAutocompleterValue($rootScope.originName);
        $rootScope.closeModal();
    };
    $scope.editTagName = function (tagObject) {
        $rootScope.tagForEdit = {};
        var tagSelected = false;
        $rootScope.tagForEdit.name = $(tagObject).parent().children().first().html();
        $scope.oldTagName = $rootScope.tagForEdit.name;
        angular.forEach($scope.groupsForEdit, function (group) {
            if(group.name == $rootScope.tagForEdit.name && !tagSelected) {
                tagSelected = true;
                $rootScope.tagForEdit.id = group.candidateGroupId;
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/tag-name-edit.html',
                    size: '',
                    resolve: {

                    }
                });
            }
        });
    };
    $rootScope.saveEditTagName = function () {
        var oldId = $rootScope.tagForEdit.id;
        CandidateGroup.editGroup({candidateGroupId: $rootScope.tagForEdit.id, name: $rootScope.tagForEdit.name},function (resp) {
            if(resp.status == 'ok') {
                notificationService.success($filter('translate')('Tag_name_saved'));
                $('.select2-search-choice').each(function () {
                    if($(this).children().first().html() == $scope.oldTagName) {
                        $(this).children().first().text($rootScope.tagForEdit.name)
                    }
                    angular.forEach($scope.groupIdsForSearch, function (tagId, tagIndex) {
                        if(tagId == oldId) {
                            $scope.groupIdsForSearch[tagIndex] = resp.object.candidateGroupId;
                        }
                    });
                    angular.forEach($scope.groupsForEdit, function (group) {
                        if(group.name == $scope.oldTagName) {
                            group.name = $rootScope.tagForEdit.name;
                            group.candidateGroupId = resp.object.candidateGroupId;
                        }
                    });
                    // angular.forEach($scope.groupsForEdit, function (group) {
                    //     if(group.name == $rootScope.tagForEdit.name && !tagSelected) {
                    //         tagSelected = true;
                    //         $rootScope.tagForEdit.id = group.candidateGroupId;
                    //     }
                    //     });
                    angular.forEach($scope.candidateGroups, function (group) {
                        if(group.name == $scope.oldTagName) {
                            group.name = $rootScope.tagForEdit.name;
                            group.candidateGroupId = resp.object.candidateGroupId;
                        }
                    })
                })
            }else {
                notificationService.error()
            }
        });
        $rootScope.closeModal();
    };
    $rootScope.addTagsForMass = function(){
        CandidateGroup.addList({
            names: $scope.getSelect2GroupForMass().split(","),
            candidatesIds: $scope.candidatesAddToVacancyIds
        }, function (res) {
            if(res.status == 'ok'){
                $scope.candidatesAddToVacancyIds = [];
                $scope.checkAllCandidates = false;
                angular.forEach($scope.tableParams.data,function(candidate){
                    candidate.added = false;
                });
                notificationService.success($filter('translate')('Tags added'));
                $rootScope.closeModal();
            }else{
                notificationService.error(res.message);
            }
        });
    };
    FileInit.initFileExcellUpload($rootScope, $scope, "candidate", {allowedType: ["xls", "xlsx"]}, $filter);
}
controller.controller('CandidateController', ["$localStorage", "$translate", "Service", "$scope", "ngTableParams",
    "Candidate", "$location", "$rootScope", "$filter", "$cookies", "serverAddress", "notificationService", "googleService",
    "$window", "ScopeService", "frontMode", "Vacancy", "Company", "vacancyStages", "$sce", "$analytics", "Mail", "FileInit",
    "$uibModal", "Person", "$timeout", "CandidateGroup", "$anchorScroll", CandidateAllController]);

function CandidateEmailSend($scope, $rootScope, $routeParams, Vacancy, Person, googleService, Candidate, notificationService, $location, Client, $filter, vacancyStages) {
    $scope.pageObject = {
        emails: [],
        candidates: [],
        toEmails: null,
        text: "",
        vacancy: null,
        clientEmails: [],
        candidateForShow: [],
        loading: true,
        client: null,
        mail: {
            fromEmail: null,
            toEmails: null,
            subject: null,
            text: "<p style='margin: 0px;'><p style='margin: 0px;' id=\"candidates\">&nbsp;</p></p>",
            candidateIds: []
        },
        vacancyStatus: [],
        error: {
            type: 0,
            message: ""
        },
        send: false,
        showEmailSelectMenu: false
    };

    $rootScope.addEmailAccessObject = {
        errorMessage: null
    };

    vacancyStages.get(function(resp){
        var array = [];
        $scope.customStages =resp.object.interviewStates;
        angular.forEach($scope.customStages, function(res){
            res.added = false;
            res.count = 0;
            if(res.status != "D"){
                array.push(res);
            }
        });
        $scope.customStages = array;
        $scope.customStagesFull =resp.object.interviewStates;
    });

    Vacancy.one({localId: $routeParams.vacancyId}, function(resp) {
        if (!resp.object.interviews || resp.object.interviews.length == 0) {
            console.log("returning!",resp.object);
            $location.path("/vacancies/" + $routeParams.vacancyId);
            return;
        } else {
            console.log(resp.object);
        }
        $scope.pageObject.mail.vacancyId = resp.object.vacancyId;
        $rootScope.title = $filter('translate')('Sending email to the customer') + " | CleverStaff";
        $scope.pageObject.mail.subject = $filter('translate')("Candidates for") + " " + resp.object.position +
        " " + $filter('translate')("vacancy");
        if (resp.object.interviews) {
            $scope.pageObject.vacancy = resp.object;
            var candidateIds = [];
            angular.forEach(resp.object.interviews, function(resp) {
                candidateIds.push(resp.candidateId.candidateId);
            });

            Candidate.all({ids: candidateIds}, function(respC) {
                angular.forEach(respC.objects, function(val) {
                    angular.forEach(resp.object.interviews, function(valI) {
                        if (valI.candidateId.candidateId == val.candidateId) {
                            if (val.contacts) {
                                angular.forEach(val.contacts, function(valC) {
                                    if (valC.type == 'linkedin') {
                                        valI.candidateId.contact = valC;
                                    }
                                });
                            }
                        }
                    });
                });
            });
            $scope.pageObject.clientEmails = [];
            Client.one({id: resp.object.clientId.clientId}, function(resp) {
                if (resp.status == "ok") {
                    $scope.pageObject.client = resp.object;
                    angular.forEach(resp.object.contactClientList, function(val) {
                        angular.forEach(val.contacts, function(valC) {
                            if (valC.type == 'email') {
                                var text = "";
                                if (val.firstName) text = text + val.firstName;
                                if (val.lastName) text = text + " " + val.lastName;
                                text = text + " <" + valC.value + ">";
                                $scope.pageObject.clientEmails.push({id: valC.value, text: text});
                            }
                        })
                    });
                    var inputText = '';
                    $("#toEmails").select2({
                        tags: $scope.pageObject.clientEmails,
                        tokenSeparators: [",", " "],
                        formatNoMatches: function(term) {
                            return "<div class='select2-result-label' style='cursor: s-resize;'><span class='select2-match'></span>" + $filter('translate')("Enter a source of this candidate") + "</div>"
                        },

                        createSearchChoice: function(term, data) {
                            if ($(data).filter(function() {
                                    return this.text.localeCompare(term) === 0;
                                }).length === 0) {
                                inputText = term;
                                return {id: term, text: term};
                            }
                        },
                        initSelection: function(element, callback) {
                            var data = {id: element.val(), text: element.val()};
                            callback(data);
                        }
                    }).on("select2-close", function(e) {
                        if (inputText.length > 0) {
                            var data = $(this).select2("data");
                            data.push({id: inputText, text: inputText});
                            $(this).select2('data', data);
                        }
                    }).on("select2-selecting", function(e) {
                        inputText = "";
                    });
                }
                $scope.pageObject.loading = false;
            });
            if (!resp.object.interviewStatus) {
                angular.forEach(Vacancy.interviewStatusNew()[0].status, function(val) {
                    addCandidateInList(resp.object.interviews, val.value, $scope.pageObject.vacancyStatus);
                });
            } else {
                var status = resp.object.interviewStatus.split(",");
                angular.forEach(status, function(val) {
                    addCandidateInList(resp.object.interviews, val, $scope.pageObject.vacancyStatus);
                })
            }
            if ($scope.pageObject.vacancyStatus.length > 0) {
                $scope.status = $scope.pageObject.vacancyStatus[0].value;
                $scope.pageObject.vacancyStatus[0].show = true;
                $scope.pageObject.candidateForShow = $scope.pageObject.vacancyStatus[0].candidates;
            }
        }


    });
    function queryAddEmail(email, password, name) {
        Person.addEmail({email: email, password: password, type: "google", ownerName: name}, function(resp) {
            if (resp.status == 'ok') {
                $(".addEmailToMail").modal('hide');
                $scope.pageObject.emails = [];

                $scope.pageObject.error.message = "";
                $scope.pageObject.error.type = 0;
                $scope.pageObject.emails.push(resp.object);
                $scope.pageObject.mail.fromEmail = resp.object.email;
                $scope.pageObject.showEmailSelectMenu = false;
            } else {
                $rootScope.addEmailAccessObject.errorMessage = resp.message;
                $scope.pageObject.error.type = 5;
                $scope.pageObject.showEmailSelectMenu = true;
            }
        });
    }


    $scope.openModalAddEmail = function() {
        $rootScope.addEmailAccessObject.errorMessage = null;
        $(".addEmailToMail").modal('show');
    };

    $scope.addGoogleEmailToMailDb = function() {
        googleService.gmailAuth("compose", function(result) {
            if (result.status == 'ok') {
                if ($scope.pageObject.emails && $scope.pageObject.emails.length == 1) {
                    Person.deleteEmail({objectId: $scope.pageObject.emails[0].personEmailAccessId}, function(resp) {
                        queryAddEmail(result.email, result.code, result.ownerName)
                    });
                } else {
                    queryAddEmail(result.email, result.code, result.ownerName);
                }
            }
        });
    };
    $scope.candidateIds = [];
    $scope.addCandidateLinkToText = function(candidateObj) {
        if(candidateObj.checked){
            $scope.candidateIds.push(candidateObj.candidateId);
            var linkedInLink = candidateObj.contact != undefined ? candidateObj.contact.value : "";
            var newCandidateList = "<span style='font-size: 14px;display: block' ng-show=\"candidateObj.checked\" id=\"span" + candidateObj.candidateId + "\"><a id=" + candidateObj.candidateId + " href=\"#/candidates/" + candidateObj.localId + " \">" + candidateObj.fullName + "</a>&nbsp;&nbsp;&nbsp;" + linkedInLink + "</span>";
            var candidatesFrame = $("#candidateText_ifr");
            if (candidatesFrame.contents().find('#candidates').length == 0) {
                candidatesFrame.contents().find('#tinymce').prepend("<p style='margin: 0px;' id=\"candidates\"><span id=\"candidateTitle\">$</span></br></p>" +  $filter('translate')('Thank you_1'));
            }
            var candidateAElement = candidatesFrame.contents().find('body').find("#span" + candidateObj.candidateId);
            var candidateTitleElement = candidatesFrame.contents().find('#candidates').find("#candidateTitle");
            if (candidateAElement.length == 1) {
                candidateAElement.replaceWith(newCandidateList);
            } else {
                var candidatesElement = candidatesFrame.contents().find('#candidates').contents().find("a").length;
                var candidatePElement = candidatesFrame.contents().find('#candidates');
                if (candidatesElement >= 1) {
                    candidatePElement[0].childNodes[2].textContent = $filter('translate')('I would appreciate hearing your feedback regarding those candidates');
                }else {
                    candidateTitleElement.replaceWith($filter('translate')('Hi') + "</br>" + $filter('translate')('I would appreciate hearing your feedback regarding this candidate'));
                }
                candidatesFrame.contents().find('#candidates').append(newCandidateList);
            }
        }else{
            var countForAdded = 0;
            var candidatesFrame2 = $("#candidateText_ifr");
            angular.forEach($scope.pageObject.vacancyStatus, function(val) {
                angular.forEach(val.candidates, function(nval) {
                    var candidateAElement = candidatesFrame2.contents().find('body').find("#span" + nval.candidateId);
                    var candidateTitleElement2 = candidatesFrame2.contents().find('#candidates').find("#span" + nval.candidateId);
                    var candidatesElement = candidatesFrame2.contents().find('#candidates').contents().find("a").length;
                    var candidatePElement = candidatesFrame2.contents().find('#candidates');
                    if(candidateAElement[0] != undefined && candidateObj.candidateId == candidateAElement[0].firstChild.id){
                        if (candidateAElement.length == 1) {
                            candidateAElement.remove();
                            nval.checked = false;
                        } else {
                            countForAdded++;
                        }
                        if (candidatesElement > 2) {
                            if (candidateTitleElement2.text().length != 0) {
                                candidateTitleElement2.replaceWith($filter('translate')('Hi') + "</br>" + $filter('translate')('I would appreciate hearing your feedback regarding those candidates'));
                            }
                        } else {
                            if (candidateTitleElement2.text().length != 0) {
                                candidatePElement[0].childNodes[2].textContent = $filter('translate')('I would appreciate hearing your feedback regarding this candidate');
                            }
                        }
                    }
                    if(nval.candidateId == candidateObj.candidateId){
                        var index = $scope.candidateIds.indexOf(candidateObj.candidateId);
                        if (index > -1) {
                            $scope.candidateIds.splice(index, 1);
                        }
                    }
                });
            });
        }
    };


    $scope.cancel = function() {
        $location.path("/vacancies/" + $routeParams.vacancyId);
    };

    $scope.send = function() {
        $scope.pageObject.error.message = "";
        $scope.pageObject.error.type = 0;
        if (!$scope.pageObject.mail.fromEmail) {
            $scope.pageObject.send = false;
            $scope.pageObject.error.type = 1;
            pageScrollOnTop();
            return;
        }
        $scope.pageObject.mail.toEmails = $('#toEmails').select2('val');
        if ($scope.pageObject.mail.toEmails.length == 0) {
            $scope.pageObject.error.type = 2;
            pageScrollOnTop();
            return;
        }

        var unValidEmail = "";
        angular.forEach($scope.pageObject.mail.toEmails, function(val) {
            if (validEmail(val)) {
                if (unValidEmail.length > 0)  unValidEmail += ", ";
                unValidEmail += val;
            }
        });
        if (unValidEmail.length > 0) {
            $scope.pageObject.error.type = 3;
            $scope.pageObject.error.message = unValidEmail;
            $scope.pageObject.send = false;
            pageScrollOnTop();
            return;
        }
        $scope.pageObject.mail.text = $(tinymce.get('candidateText').getBody()).html();
        $scope.pageObject.send = true;
        $scope.pageObject.mail.toEmails = $scope.pageObject.mail.toEmails.join();
        $scope.pageObject.mail.candidateIds = $scope.candidateIds;
        Candidate.sendToMail($scope.pageObject.mail, function(resp) {
            if (resp.status == "ok") {
                notificationService.success($filter('translate')("Letter sent"));
                $scope.pageObject.send = false;
                $('#toEmails').select2('data', null);
                $scope.pageObject.mail.subject = "";
                $scope.pageObject.text = "";
                $location.path("/vacancies/" + $routeParams.vacancyId);
                tinymce.get("candidateText").setContent('');
            } else {
                $scope.pageObject.error.type = 5;
                pageScrollOnTop();
                //$scope.pageObject.error.message = ('Ввведите email еше раз');
                //resp.message;
                $scope.pageObject.send = false;
                $scope.pageObject.showEmailSelectMenu = true;
            }
        });
    };

    $scope.chooseFromEmail = function(val) {
        $scope.pageObject.showEmailSelectMenu = false;
        $scope.pageObject.mail.fromEmail = val;
    };
    $scope.openSelectMenu = function() {
        $scope.pageObject.showEmailSelectMenu = true;
    };

    Person.personEmails({'type': 'send'}, function(resp) {
        $scope.pageObject.emails = resp.objects;
        if ($scope.pageObject.emails && $scope.pageObject.emails.length == 1) {
            $scope.pageObject.mail.fromEmail = $scope.pageObject.emails[0].email;
        } else {
            $scope.pageObject.showEmailSelectMenu = true;
        }
    });

    $scope.chooseShowEmail = function(status) {
        $scope.status = status;
        angular.forEach($scope.pageObject.vacancyStatus, function(val) {
            if (val.value == status) {
                val.show = true;
                $scope.pageObject.candidateForShow = val.candidates;
            } else {
                val.show = false;
            }
        });
    };

    $scope.tinyMcePlugin = [];
    $scope.addToEmails = function(email){
        $scope.pageObject.mail.fromEmail = email.email;
    };
    if($rootScope.me.emails.length == 1){
        $scope.addToEmails($rootScope.me.emails[0]);
    }
    function addCandidateInList(interviews, value, vacancyStatusAssoc) {
        var candidates = [];
        angular.forEach(interviews, function(valI) {
            if (valI.state == value) {
                valI.candidateId.added = false;
                candidates.push(valI.candidateId);
            }
        });
        if (candidates.length > 0) {
            angular.forEach($scope.customStagesFull, function(resp) {
                if(resp.customInterviewStateId == value){
                    value = resp.name
                }
            });
            vacancyStatusAssoc.push({value: value, candidates: candidates, show: false});
        }
    }
}

controller.controller("CandidateEmailSend", ['$scope', '$rootScope', '$routeParams', 'Vacancy', 'Person', 'googleService', 'Candidate', 'notificationService', '$location', 'Client', '$filter', 'vacancyStages', CandidateEmailSend]);
controller.filter('slice', function() {
    return function(arr, start, end) {
        return (arr || []).slice(start, end);
    };
});

function validEmail(email, notificationService) {
    if (email == undefined) return true;
    var r = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/gi;
    return !email.match(r);
}
controller.controller('CandidateEditController', ["$http", "$rootScope", "$scope", "FileInit", "$translate", "$routeParams", "$location", "Service", "Candidate", "CacheCandidates", "notificationService", "$filter", "serverAddress", "$window", "$uibModal", "$document",
    function($http, $rootScope, $scope, FileInit, $translate, $routeParams, $location, Service, Candidate, CacheCandidates, notificationService, $filter, serverAddress, $window, $uibModal, $document) {
        Service.toEditCandidate($routeParams.id, "/candidates/" + $routeParams.id);
        $scope.test = {date: new Date()};
        $scope.type = "edit";
        $scope.saveButtonIsPressed = false;
        $scope.serverAddress = serverAddress;
        $scope.addLinkErrorShow = false;
        $scope.showAddedLinks = false;
        $scope.showAddedFiles = false;
        $scope.showAddLink = false;
        $scope.objType = 'candidate';
        $scope.currency = Service.currency();
        $scope.candidateOrigin = '';
        $scope.experience = Service.experience();
        $scope.industries = Service.getIndustries();
        $scope.contacts = {skype: "", mphone: "", email: ""};
        $scope.fieldValues = {
            objType: "candidate",
            fieldValueId: '',
            value: '',
            dateTimeValue: '',
            field : {
                fieldId: ''
            }
        };
        $scope.objType = 'candidate';

        $scope.deleteRegion2ToRelocate = function(index) {
            $scope.regionToRelocate.splice(index, 1);
        };
        $scope.addLinkToCandidate = {
            name: '',
            url: ''
        };

        $scope.linksForSave = [];
        $rootScope.changeStateInCandidate = {status: "", comment: "", fullName: null, placeholder: null};
        $scope.map = {
            center: {
                latitude: 48.379433,
                longitude: 31.165579999999977
            },
            zoom: 5,
            options: {
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                mapTypeControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
        };

        $scope.marker = {
            id: 1,
            title: "",
            coords: {
                latitude: null,
                longitude: null
            }
        };
        $scope.showModalAddPhoto = function(){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-photo-candidate.html',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $scope.modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.addPhoto = function() {
            $('#photoFile').click();
        };
        $scope.lang = Service.lang();

        $scope.errorMessage = {
            show: false,
            message: ""
        };
        FileInit.initCandFileOption($scope, "candidate", "", false, $filter);
        FileInit.initFileOptionForEditFromResume($scope, "candidate");
        $scope.callbackFile = function(resp, name) {
            if (!$scope.candidate.files) {
                $scope.candidate.files = [];
            }
            $scope.candidate.files.push(resp);
            if ($scope.candidate.files.length > 0) {
                Candidate.progressUpdate($scope, false);
            }
            $scope.progressUpdate();
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.deleteCandidate = function() {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-candidate.html',
                size: '',
                resolve: {

                }
            });
            //$('.changeStatusOfCandidate.modal').modal('show');
            $rootScope.changeStateInCandidate.status = "archived";
            $rootScope.changeStateInCandidate.fullName = $scope.candidate.fullName;
            $rootScope.changeStateInCandidate.placeholder = $filter('translate')('Write a comment why you want remove this candidate');
        };
        $scope.langs = Candidate.getLangInOrg(function (resp){
            if(resp.object){
                //resp.object.splice(0, 1);
                $scope.setLangs(resp.object);
            } else {
                $scope.setLangs([]);
            }
        });
        $rootScope.saveStatusOfCandidate = function() {
            if ($rootScope.changeStateInCandidate.status != "") {
                Candidate.changeState({
                    candidateId: $scope.candidate.candidateId,
                    comment: $rootScope.changeStateInCandidate.comment,
                    candidateState: $rootScope.changeStateInCandidate.status
                }, function(resp) {
                    if (resp.status == "ok") {
                        $scope.candidate.status = resp.object.status;
                        notificationService.success($filter('translate')('candidate') + " " + $scope.candidate.fullName + " " + $filter('translate')('was_deleted'));
                        $location.path('/candidates');

                    }
                }, function(err) {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
                $rootScope.closeModal();
                //$('.changeStatusOfCandidate.modal').modal('hide');
                $rootScope.changeStateInCandidate.status = "";
                $rootScope.changeStateInCandidate.comment = "";
            }
        };

        $scope.deleteDate = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
            angular.forEach($scope.candidate.fieldValues, function (val, ind) {
                if(val.fieldValueId == fieldValueId){
                    $scope.candidate.fieldValues.splice(ind, 1);
                    angular.forEach($('.editDate'), function (nval) {
                        console.log(nval.name);
                        if(id == nval.name){
                            nval.placeholder = '';
                            nval.value = '';
                        }
                    });
                }
            });
        };

        $scope.removeFile = function(id) {
            Candidate.removeFile({"candidateId": $scope.candidate.candidateId, "fileId": id}, function(resp) {
            });
            angular.forEach($scope.candidate.files, function(val, ind) {
                if (val.fileId === id) {
                    $scope.candidate.files.splice(ind, 1);
                }
            });
            if ($scope.candidate.files.length === 0) {
                delete $scope.candidate.files;
                Candidate.progressUpdate($scope, false);
            }
            $scope.progressUpdate();
        };

        $scope.dateOptions = {
            changeYear: true,
            changeMonth: true,
            yearRange: '1930:-0',
            defaultDate: "01/01/1990"
        };
        $scope.cancel = function() {
            $location.path("/candidates/" + $routeParams.id);
        };

        $(".datepickerOfBirth")
            .datetimepicker({
                format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                startView: 4,
                minView: 2,
                autoclose: true,
                language: $translate.use(),
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                initialDate:  new Date(1167609600000),
                startDate: new Date(-1262304000000),
                endDate: new Date(1199134800000)
            })
            .on('hide', function(val) {
                if (val.date != undefined) {
                    $scope.candidate.db = val.date.getTime();
                }
                $('.datepickerOfBirth').blur();
                $scope.progressUpdate();
            });

        $('#pac-input').blur(function() {
            if (!$(this).val()) {
                $scope.progressUpdate();
            }
        });
        $scope.updateCandidate = function(){
            Candidate.one({"localId": $routeParams.id}, function(resp) {
                if (angular.equals(resp.status, "ok")) {

                    $scope.setOriginAutocompleterValue(resp.object.origin);
                    $scope.candidateOrigin = resp.object.origin;
                    $scope.setPositionAutocompleterValue(resp.object.position);
                    if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                        $scope.region = resp.object.region;
                        $scope.map.center.latitude = resp.object.region.lat;
                        $scope.map.center.longitude = resp.object.region.lng;
                        $scope.marker.coords.latitude = resp.object.region.lat;
                        $scope.marker.coords.longitude = resp.object.region.lng;

                        $scope.regionInput = resp.object.region.displayFullName;
                        $('#pac-input').val(resp.object.region.displayFullName);

                        $scope.progressUpdate();
                    }
                    $scope.photoLink = $scope.serverAddress + "/getapp?id=" + resp.object.photo + "&d=true";
                    $scope.regionToRelocate = resp.object.relatedRegions != undefined ? resp.object.relatedRegions : [];
                    var name = "";
                    resp.object.fullName != undefined ? name + resp.object.fullName.replace(/\W+/g, '_') : "";
                    resp.object.position != undefined ? name + resp.object.position.replace(/\W+/g, '_') : "";
                    resp.object.salary == 0 ? resp.object.salary = null : null;
                    if (name.length > 0) {
                        $location.hash($filter('transliteration')(name)).replace();
                    }

                    $scope.candidate = resp.object;


                    $scope.checkDuplicatesByNameAndContacts();
                    if(!$scope.candidate.customFields){
                        $scope.candidate.customFields = [];
                    }

                    $rootScope.localIdOfMerged = $scope.candidate.localId;
                    $scope.imgWidthFunc();
                    if($scope.candidate.files){
                        if($scope.candidate.files.length != undefined && $scope.candidate.files.length != 0){
                            angular.forEach($scope.candidate.files, function (val) {
                                initDocuments(val);
                            });
                        }
                    }
                    $scope.objectLang = [];
                    $scope.objectId = $scope.candidate.candidateId;
                    if(resp.object.languages!=undefined){
                        angular.forEach(resp.object.languages, function (val) {
                            if(val.name != undefined){
                                $scope.objectLang.push({id: val.languageId, text: val.name, level: val.level});
                                setTimeout(function(){
                                    $scope.setSelect2Lang($scope.objectLang);
                                },2000);
                            }
                        });
                    }

                    if (resp.object.employmentType != undefined) {
                        $scope.setSelect2EmploymentType(resp.object.employmentType.split(","));
                    }
                    if (resp.object.industry) {
                        $scope.setSelect2Industry(resp.object.industry)
                    }
                    if (resp.object.db) {
                        $scope.data = new Date(resp.object.db);
                    }
                    if (resp.object.db != undefined) {
                        $(".datepickerOfBirth").datetimepicker("setDate", new Date(resp.object.db));
                    }
                    if (resp.object.contacts) {
                        angular.forEach(resp.object.contacts, function(val) {
                            if (angular.equals(val.type, "email")) {
                                $scope.contacts.email = val.value;
                            }
                            if (angular.equals(val.type, "mphone")) {
                                $scope.contacts.mphone = val.value;
                            }
                            if (angular.equals(val.type, "skype")) {
                                $scope.contacts.skype = val.value;
                            }
                            if (angular.equals(val.type, "linkedin")) {
                                $scope.contacts.linkedin = val.value;
                            }
                            if (angular.equals(val.type, "facebook")) {
                                $scope.contacts.facebook = val.value;
                            }
                            if (angular.equals(val.type, "googleplus")) {
                                $scope.contacts.googleplus = val.value;
                            }
                            if (angular.equals(val.type, "github")) {
                                $scope.contacts.github = val.value;
                            }
                            if (angular.equals(val.type, "homepage")) {
                                $scope.contacts.homepage = val.value;
                            }
                        });
                    }
                    $scope.candidate.fieldValues = [];

                    if (resp.object.customFields) {
                        angular.forEach(resp.object.customFields, function(val) {
                            if(val.fieldValue != undefined){
                                if (angular.equals(val.type, "string")) {
                                    $scope.candidate.fieldValues.push({
                                        objType: "candidate",
                                        fieldValueId: val.fieldValue.fieldValueId,
                                        value:  val.fieldValue.value,
                                        field: {
                                            fieldId: val.fieldId
                                        }
                                    });
                                }
                                if (angular.equals(val.type, "select")) {
                                    $scope.candidate.fieldValues.push({
                                        objType: "candidate",
                                        fieldValueId: val.fieldValue.fieldValueId,
                                        value:  val.fieldValue.value,
                                        field: {
                                            fieldId: val.fieldId
                                        }
                                    });
                                }
                                if (angular.equals(val.type, "date")) {
                                    $scope.candidate.fieldValues.push({
                                        objType: "candidate",
                                        fieldValueId: val.fieldValue.fieldValueId,
                                        dateTimeValue: val.fieldValue.dateTimeValue,
                                        field: {
                                            fieldId: val.fieldId
                                        }
                                    });
                                }
                                if (angular.equals(val.type, "datetime")) {
                                    $scope.candidate.fieldValues.push({
                                        objType: "candidate",
                                        fieldValueId: val.fieldValue.fieldValueId,
                                        dateTimeValue: val.fieldValue.dateTimeValue,
                                        field: {
                                            fieldId: val.fieldId
                                        }
                                    });
                                }
                            }
                        });
                    }
                    console.log($scope.candidate);
                    $scope.progressUpdate();
                } else {
                    notificationService.error($filter('translate')('candidate not found'));
                    $location.path('/candidates');
                }
            }, function(err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        $scope.updateCandidate();
        $scope.status = Candidate.getStatus();
        $scope.employmentType = Service.employmentType();


        $scope.progressUpdate = function() {
            Candidate.progressUpdate($scope, true);
        };

        $scope.imgWidthFunc = function(){
            var img = new Image();
            img.onload = function() {
                var width = this.width;
                var height = this.height;
                var minus = width - height;
                if(width >= height && minus > 40 && minus <=100){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if((width >= 300 && width <= 349) || width == height){
                    $('#page-avatar').css({'width': '100%', 'object-fit': 'fill', 'margin': 'inherit'});
                }else if(width >= 350){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if(width >= 266){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto'});
                }else{
                    $('#page-avatar').css({'width': 'inherit', 'height': 'inherit', 'display': 'block', 'margin': '0 auto'});
                }
            };
            if($location.$$host == '127.0.0.1'){
                img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }else{
                img.src = $location.$$protocol + '://' + $location.$$host + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }
        };
        $scope.callbackAddPhoto = function(photo) {
            $scope.candidate.photo = photo;
            $scope.photoLink = $scope.serverAddress + "/getapp?id=" + $scope.candidate.photo + "&d=true";
            $scope.imgWidthFunc();
            //$scope.hideModalAddPhoto();
            $rootScope.closeModal();
            Candidate.progressUpdate($scope, true);
        };
        FileInit.addPhotoByReference($scope, $scope.callbackAddPhoto);

        $scope.callbackErr = function(err) {
            notificationService.error(err);
        };
        Candidate.setPhoto($scope);

        $scope.removePhoto = function() {
            $scope.candidate.photo = "";
            $scope.progressUpdate();
        };
        $scope.editCustomField = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                console.log(1);
                if(value == ''){
                    console.log(3);
                    angular.forEach($scope.candidate.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.candidate.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    console.log(4);
                    angular.forEach($scope.candidate.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                console.log(2);
                $scope.candidate.fieldValues.push({
                    objType: "candidate",
                    // fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };

        $scope.addCustomFieldParams = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                console.log(1);
                if(value == ''){
                    console.log(3);
                    angular.forEach($scope.candidate.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.candidate.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    console.log(4);
                    angular.forEach($scope.candidate.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                console.log(2);
                $scope.candidate.fieldValues.push({
                    objType: "candidate",
                    //fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };
        $scope.sendCustomFieldId = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
        };
        // setTimeout(function(){
        //     $(".datepickerOfCustomEdit").datetimepicker({
        //         format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        //         startView: 4,
        //         minView: 2,
        //         autoclose: true,
        //         language: $translate.use(),
        //         weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        //         initialDate: new Date(),
        //         startDate: new Date()
        //     }).on('changeDate', function (val) {
        //         if (val.date != undefined) {
        //             $scope.editCustomValueDate = val.date.getTime();
        //             console.log(val.date.getTime());
        //             if($scope.editCustomFieldValueId != undefined){
        //                 console.log(1);
        //                 angular.forEach($scope.candidate.fieldValues, function(val) {
        //                     if (val.fieldValueId === $scope.editCustomFieldValueId) {
        //                         val.dateTimeValue = $scope.editCustomValueDate;
        //                     }
        //                 });
        //             }else{
        //                 console.log(2);
        //                 $scope.candidate.fieldValues.push({
        //                     objType: "candidate",
        //                     dateTimeValue: $scope.editCustomValueDate,
        //                     field : {
        //                         fieldId:  $scope.editCustomId
        //                     }
        //                 });
        //             }
        //         }
        //     }).on('hide', function() {
        //         if ($('.datepickerOfCustomEdit').name == $scope.editCustomId) {
        //             angular.forEach($scope.candidate.fieldValues, function (nval) {
        //                 if($('.datepickerOfCustomEdit').value != ''){
        //                     if($scope.editCustomId == nval.field.fieldId){
        //                         nval.dateTimeValue = "";
        //                     }
        //                 }
        //             });
        //         }
        //         $(".datepickerOfCustomEdit").blur();
        //     });
        // },850);

        $scope.roundMinutes = function(date) {
            var date2 = new Date();

           angular.copy(date, date2);

            date2.setHours(date2.getHours() - 3 + Math.round(date2.getMinutes()/60));
            date2.setMinutes(0);

            return date2;
        };
        // setTimeout(function(){
        //     $(".datepickerOfCustomEditTime").datetimepicker({
        //         format: "dd/mm/yyyy hh:00",
        //         startView: 2,
        //         minView: 1,
        //         autoclose: true,
        //         language: $translate.use(),
        //         weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        //         initialDate: new Date(),
        //         startDate: new Date()
        //     }).on('changeDate', function (val) {
        //         if (val.date != undefined) {
        //             $scope.editCustomValueDate = val.date;
        //             $scope.editCustomValueDate = $scope.editCustomValueDate - $scope.editCustomValueDate.getMinutes()* 60000 - $scope.editCustomValueDate.getSeconds()*1000 - 3600000*3;
        //             console.log( $scope.editCustomValueDate, '$scope.editCustomValueDate');
        //
        //             if($scope.editCustomFieldValueId != undefined){
        //                 console.log(1);
        //                 if($('.editDate').placeholder != undefined){
        //                     angular.forEach($scope.candidate.fieldValues, function(val) {
        //                         if (val.fieldValueId === $scope.editCustomFieldValueId) {
        //                             val.dateTimeValue = $scope.editCustomValueDate;
        //                         }
        //                     });
        //                 }else{
        //                     $scope.candidate.fieldValues.push({
        //                         objType: "candidate",
        //                         dateTimeValue: $scope.editCustomValueDate,
        //                         field : {
        //                             fieldId:  $scope.editCustomId
        //                         }
        //                     });
        //                 }
        //             }else{
        //                 console.log(2);
        //                 $scope.candidate.fieldValues.push({
        //                     objType: "candidate",
        //                     dateTimeValue: $scope.editCustomValueDate,
        //                     field : {
        //                         fieldId:  $scope.editCustomId
        //                     }
        //                 });
        //             }
        //         }
        //     }).on('hide', function() {
        //         if ($('.datepickerOfCustomEditTime').name == $scope.editCustomId) {
        //             angular.forEach($scope.candidate.fieldValues, function (nval) {
        //                 if($('.datepickerOfCustomEditTime').value != ''){
        //                     if($scope.editCustomId == nval.field.fieldId){
        //                         nval.dateTimeValue = "";
        //                     }
        //                 }
        //             });
        //         }
        //         $(".datepickerOfCustomEditTime").blur();
        //     });
        // },850);

        $scope.deleteDate = function(id, fieldValueId, elem){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
            var flag = false,
                index = 0;

                angular.forEach($scope.candidate.fieldValues, function (val, ind) {
                    if (val.fieldValueId == fieldValueId) {
                        $scope.candidate.fieldValues.splice(ind, 1);
                        angular.forEach($('.editDate'), function (nval) {
                            if (id == nval.name) {
                                nval.placeholder = '';
                                nval.value = '';
                            }
                        });
                    }
                });
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $rootScope.mergedCandidate = $routeParams.id;
        $rootScope.toMerge = function (id) {
            $rootScope.closeModal();
            if($rootScope.me.recrutRole != 'client'){
                if($scope.candidate.status != 'archived'){
                    Service.toMergeCandidate(id);
                }else{
                    notificationService.error($filter('translate')('Remote candidates can not be edited.'));
                }
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can editing candidates'));
            }
        };
        $scope.toMergeModal = function (id){
        $rootScope.candidateForMerge = undefined;
            if($rootScope.me.recrutRole != 'client' && $rootScope.me.recrutRole != 'salesmanager'){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/candidate-merge-modal.html',
                    resolve: {
                        items: function () {
                            return $scope.items;
                        }
                    }
                });
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can adding candidates in vacancy'));
            }
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $rootScope.mergedCandidate = $routeParams.id;
        $rootScope.toMerge = function (id) {
            $rootScope.closeModal();
            if($rootScope.me.recrutRole != 'client'){
                if($scope.candidate.status != 'archived'){
                    Service.toMergeCandidate(id);
                }else{
                    notificationService.error($filter('translate')('Remote candidates can not be edited.'));
                }
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can editing candidates'));
            }
        };
        $scope.toMergeModal = function (id){
        $rootScope.candidateForMerge = undefined;
            if($rootScope.me.recrutRole != 'client' && $rootScope.me.recrutRole != 'salesmanager'){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/candidate-merge-modal.html',
                    resolve: {
                        items: function () {
                            return $scope.items;
                        }
                    }
                });
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can adding candidates in vacancy'));
            }
        };
        setTimeout(function(){
            var myListener = $scope.$on('addedLang', function (event, data) {
                if (data != undefined) {
                    $('.addingLangs').show();
                    $scope.addedLang = data;
                    $scope.changeLevel = function(level, id){
                        angular.forEach($scope.addedLang, function (val) {
                            if(val.id == id){
                                val.level = level;
                            }
                        });
                    };
                }
            });
            $scope.$on('$destroy', myListener);
        },0);
        $scope.saveCandidate = function() {
            var salaryBol = true;
            if ($scope.candidate.salary != undefined && $scope.candidate.salary != "" && /[^[0-9]/.test($scope.candidate.salary)) {
                $scope.errorMessage.show = true;
                $scope.errorMessage.message = $filter("translate")("desired_salary_should_contains_only_numbers");
                salaryBol = false;
            }
            console.log($scope.candidateForm.$valid);
            console.log($scope.candidateForm);
            console.log($scope.saveButtonIsPressed);
            if ($scope.candidateForm.$valid && salaryBol && !$scope.saveButtonIsPressed) {
                $scope.saveButtonIsPressed = true;
                var candidate = $scope.candidate;
                candidate.languages = [];
                if($scope.addedLang != undefined){
                    angular.forEach($scope.addedLang, function (val) {
                        if(val.level != undefined && val.level != ''){
                            candidate.languages.push({ name: val.text, level: val.level});
                        }
                    });
                }
                candidate.employmentType = $scope.getSelect2EmploymentType();
                candidate.position=$scope.getPositionAutocompleterValue();
                if ($scope.candidate.source) {
                    candidate.source = $scope.candidate.source;
                }
                if ($scope.candidate.photo) {
                    candidate.photo = $scope.candidate.photo;
                }
                candidate.contacts = [];
                if ($scope.contacts.email) {
                    candidate.contacts.push({type: "email", value: $scope.contacts.email});
                }
                if ($scope.contacts.mphone) {
                    candidate.contacts.push({type: "mphone", value: $scope.contacts.mphone});
                }
                if ($scope.contacts.skype) {
                    candidate.contacts.push({type: "skype", value: $scope.contacts.skype});
                }
                if ($scope.contacts.linkedin) {
                    candidate.contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
                }
                if ($scope.contacts.facebook) {
                    candidate.contacts.push({type: "facebook", value: $scope.contacts.facebook});
                }
                if ($scope.contacts.googleplus) {
                    candidate.contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
                }
                if ($scope.contacts.github) {
                    candidate.contacts.push({type: "github", value: $scope.contacts.github});
                }
                if ($scope.contacts.homepage) {
                    candidate.contacts.push({type: "homepage", value: $scope.contacts.homepage});
                }
                if ($("#pac-input").val().length == 0) {
                    candidate.region = null;
                } else if ($("#pac-input").val().length > 0 && (candidate.region == undefined || $("#pac-input").val() != candidate.region.fullName)) {
                    if ($scope.region)
                        candidate.region = $scope.region;
                }
                candidate.db = $('.datepickerOfBirth').datetimepicker('getDate') != null ? $('.datepickerOfBirth').datetimepicker('getDate').getTime() : null;
                if ($scope.fieldValues.dateTimeValue != undefined) {
                    $(".datepickerOfCustom").datetimepicker("setDate", new Date($scope.editCustomValueDate));
                }
                if ($scope.fieldValues.dateTimeValue != undefined) {
                    $(".datepickerOfCustomTime").datetimepicker("setDate", new Date($scope.editCustomValueDate));
                }
                candidate.relatedRegions = $scope.regionToRelocate;
                candidate.origin = $scope.getOriginAutocompleterValue();

                deleteUnnecessaryFields(candidate);
                console.log(candidate, 'candidate');
                Candidate.edit(candidate, function(val) {
                    if (angular.equals(val.status, "ok")) {
                        notificationService.success($filter('translate')('Candidate saved'));
                        CacheCandidates.update(val.object);
                        if ($scope.linksForSave.length > 0) {
                            angular.forEach($scope.linksForSave, function(valI, i) {
                                Candidate.addLink({
                                    "url": valI.url,
                                    "candidateId": val.object.candidateId,
                                    "name": valI.fileName
                                }, function(resp) {
                                });
                                if ($scope.linksForSave.length - 1 == i) {
                                    $location.path("/candidates/" + val.object.localId);
                                }
                            });
                        } else {
                            $location.path("/candidates/" + val.object.localId);
                        }
                        $location.path("/candidates/" + val.object.localId);
                    } else {
                        $scope.saveButtonIsPressed = false;
                        $scope.errorMessage.show = true;
                        $scope.errorMessage.message = val.message;
                    }
                }, function(err) {
                    $scope.saveButtonIsPressed = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            } else {
                $scope.candidateForm.name.$pristine = false;
                $scope.candidateForm.position.$pristine = false;
                $('html, body').animate({scrollTop: 0}, 'fast');
                $scope.candidateForm.salary.$pristine = false;
                $scope.candidateForm.education.$pristine = false;
                $scope.candidateForm.currentWorkPlace.$pristine = false;
                $scope.candidateForm.currentPosition.$pristine = false;
//            $scope.candidateForm.region.$pristine = false;
            }
        };

        //$scope.checkDuplicatesByName = function() {
        //    Candidate.checkDuplicatesByName($scope);
        //};
        $scope.checkDuplicatesByNameAndContacts = function() {
            Candidate.checkDuplicatesByNameAndContacts($scope);
        };

        $scope.removeLink = function(id) {
            angular.forEach($scope.linksForSave, function(val, ind) {
                console.log(val);
                if (val.fileName === id) {
                    $scope.linksForSave.splice(ind, 1);
                }
            });
            $scope.progressUpdate();
        };

        $scope.showAddLinkFunc = function(){
            $scope.showAddLink = true;
        };
        $scope.closeAddLinkFunc = function(){
            $scope.showAddLink = false;
            $scope.addLinkToCandidate.name = null;
            $scope.addLinkToCandidate.url = null;
            $scope.addLinkErrorShow = false;
        };
        $scope.addLinkInCandidateStart = function(){
            if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
                Candidate.addLink({
                    "url": $scope.addLinkToCandidate.url,
                    "candidateId": $scope.candidate.candidateId,
                    "name": $scope.addLinkToCandidate.name
                }, function(resp) {
                    if(resp.status == 'ok'){
                        $scope.updateCandidate();
                        notificationService.success($filter('translate')('history_info.added_link'));
                    }else{
                        notificationService.error($filter('translate')(resp.message));
                    }
                });
                //$scope.linksForSave.push({"url": $scope.addLinkToCandidate.url, "fileName": $scope.addLinkToCandidate.name});
                $scope.addLinkToCandidate.name = '';
                $scope.addLinkToCandidate.url = '';
                $scope.showAddLink = false;
            } else{
                $scope.addLinkErrorShow = true;
            }
        };


        $scope.editOriginName = function () {
            $scope.originOldName = $scope.getOriginAutocompleterValue();
            $rootScope.originName = $scope.originOldName;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/origin-name-edit.html',
                size: '',
                resolve: {

                }
            });
        };


        $scope.removeSource = function () {
            $scope.removableSource = $scope.getOriginAutocompleterValue();
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/origin-remove.html',
                scope: $scope,
                size: '',
                resolve: {

                }
            });
        };

        $scope.confirmDeleteOrigin = function () {
            $http.post(serverAddress + '/candidate/removeOriginAll?origin=' + $scope.removableSource).success(function (resp) {
            });

        };


        $rootScope.saveOriginName = function () {
            Candidate.editOriginAll({originOld: $scope.originOldName, originNew: $rootScope.originName}, function (resp) {
                if(resp.status == "ok") {
                    notificationService.success($filter('translate')('Origin_name_saved'));
                }
            });
            $scope.setOriginAutocompleterValue($rootScope.originName);
            $rootScope.closeModal();
        };
        $scope.changeRating = function(skill,rating){
            skill.level = rating;
        };
        $scope.deleteSkill = function(skill){
            $scope.candidate.skills.splice($scope.candidate.skills.indexOf(skill), 1);
        };
        $scope.showModalConfirmationResumeUpdate = function(){
            $('.confirmationResumeUpdate.modal').modal('show');
        };

        $scope.resetBirthDate = function () {
            $('.datepickerOfBirth').val('');
        };

        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        };
    }]);

controller.controller('CandidateLINKController',["$localStorage", "$translate", "Service", "$scope", "ngTableParams", "Candidate", "$location", "$rootScope", "$filter", "$cookies", "serverAddress",
    function($localStorage, $translate, Service, $scope, ngTableParams, Candidate, $location, $rootScope, $filter, $cookies, serverAddress) {
    $scope.searchExternalObject = {
        candidateExternalFound: false
    };
    $scope.resultLINK = [];
    $scope.found_link = false;
    $scope.count = false;
    $scope.extensionHas = false;
    $scope.lang = $translate;
    $scope.serverAddress = serverAddress;
    $scope.candidateFound = null;
    $scope.regionId = null;
    $scope.regionSelect = null;
    Service.getRegions2(function(resp) {
        $scope.regions = resp;
    });
    $scope.filterLink = {
        searchPosition: '',
        company: '',
        regionSelect: null,
        page: 1
    };

    $scope.lang = $translate;


    $scope.loader = false;
    $scope.isSearched = false;
    $scope.selectRegion = function(val) {
        if ($scope.regionId != null) {
            var json = JSON.parse($scope.regionId);
            if (val.value == json.value) {
                $scope.regionSelect = json;
                return true;
            } else {
                return false;
            }
        }
    };

    $scope.sendFilterToPlugin = function(eventName) {
        delete $scope.filterLink['regionSelect'];
        if ($scope.regionSelect) {
            if ($scope.regionSelect.type == 'country') {
                angular.forEach(Service.getCountryLinkedIn(), function(val, ind) {
                    if (val.value == $scope.regionSelect.value) {
                        $scope.filterLink.regionSelect = val.key;
                    }
                });
            } else {
                var indSelect = -1;
                angular.forEach($scope.regions, function(val, ind) {
                    if (val.value == $scope.regionSelect.value) {
                        indSelect = ind;
                    }
                });
                if (indSelect > 0) {
                    for (var i = indSelect; i > -1; i--) {
                        if ($scope.regions[i].type == 'country') {
                            angular.forEach(Service.getCountryLinkedIn(), function(val, ind) {
                                if (val.value == $scope.regions[i].value) {
                                    $scope.filterLink.regionSelect = val.key;
                                }
                            });
                            break;
                        }
                    }
                }
            }
        }
        document.dispatchEvent(new CustomEvent(eventName, {'detail': $scope.filterLink}));
    };
    $scope.clickSearch = function() {
        $scope.filterLink.page = 1;
        $scope.resultLINK = [];
        $scope.sendFilterToPlugin('searchLinkedIn');
    };
    $scope.clickExtShow = function() {
        $scope.sendFilterToPlugin('showLinkedIn');
    };
    $scope.data = {};
    if ($rootScope.eventListenerSearch) {
        document.removeEventListener('resultLinkedIn', $rootScope.eventListenerSearch);
    }
    $rootScope.eventListenerSearch = function(event) {
        $scope.data = event.detail;
        $scope.count = $scope.data.content.page.voltron_unified_search_json.search.baseData.resultCount;
        angular.forEach($scope.data.content.page.voltron_unified_search_json.search.results, function(val) {
            if (val.person) {
                $scope.resultLINK.push(val);
            }
        });
        $scope.tableParamsExteranl.reload();
    };
    document.addEventListener('resultLinkedIn', $rootScope.eventListenerSearch);
    if ($rootScope.eventListenerPing) {
        document.removeEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    }
    $rootScope.eventListenerPing = function(event) {
        console.log('extension has');
        $scope.extensionHas = true;
    };
    document.addEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    document.dispatchEvent(new CustomEvent('cleverstaffExtensionPing'));

    $scope.nextListLinkedIn = function() {
        $scope.filterLink.page++;
        $scope.sendFilterToPlugin();
    };

    $scope.tableParamsExteranl = new ngTableParams({
        page: 1,
        count: 10
    }, {
        total: 10000,
        getData: function($defer, params) {
            if ($scope.resultLINK && $scope.resultLINK.length > 0) {
                $scope.found_link = true;
            } else {
                $scope.found_link = false;
            }
            $defer.resolve($filter('orderBy')(angular.copy($scope.resultLINK), params.orderBy()));
        }
    });

    $scope.toAddFromLink = function(user) {
        var replace1 = 'https://www.linkedin.com/profile/view?id=';
        var replace2 = 'http://www.linkedin.com/profile/view?id=';
        var linkid = user.person.link_nprofile_view_3.replace(replace1, '').replace(replace2, '').split('&')[0];
        console.log('linkid ' + linkid);
        $scope.selectedCandidateLink = user.person;
        $scope.selectedCandidateLink.linkid = linkid;
        document.dispatchEvent(new CustomEvent('getContactsFromLinkedIn', {'detail': {id: linkid}}));
    };
    $scope.linkAdd = function(contact_detail) {
        var candidate = {
            fullName: $scope.selectedCandidateLink.fmt_name,
            contacts: [],
            photoUrl: $scope.selectedCandidateLink.logo_result_base.media_picture_link.replace('shrink_60_60', 'shrink_200_200'),
            position: String($scope.selectedCandidateLink.fmt_headline).replace(/<[^>]+>/gm, ''),
            city: $scope.selectedCandidateLink.fmt_location
        };
        candidate.contacts.push({
            type: "homepage",
            value: 'https://www.linkedin.com/profile/view?id=' + $scope.selectedCandidateLink.linkid
        });
        if (contact_detail.status == 'success') {

        }
        $localStorage.set("candidateForSave", candidate);
        console.log(candidate);
        $rootScope.$apply(function() {
            $location.path("candidate/add/")
        });
    };
    if ($rootScope.eventListenerGetContact) {
        document.removeEventListener('contactFromLinkedIn', $rootScope.eventListenerGetContact);
    }
    $rootScope.eventListenerGetContact = function(event) {
        console.log(event.detail);
        $scope.linkAdd(event.detail);
    };
    document.addEventListener('contactFromLinkedIn', $rootScope.eventListenerGetContact);
}]);

controller.controller('CandidateMergeController', ["$http", "$rootScope", "$scope", "FileInit", "$translate", "$routeParams", "$location", "$localStorage", "Service", "Candidate", "CacheCandidates", "notificationService", "$filter", "serverAddress", "$window", "$uibModal",
    function($http, $rootScope, $scope, FileInit, $translate, $routeParams, $location, $localStorage, Service, Candidate, CacheCandidates, notificationService, $filter, serverAddress, $window, $uibModal) {
        Service.toMergeCandidate($routeParams.id, "/candidates/" + $routeParams.id);
        $scope.test = {date: new Date()};
        $scope.type = "merge";
        $scope.saveButtonIsPressed = false;
        $scope.serverAddress = serverAddress;
        $scope.addLinkErrorShow = false;
        $scope.showAddedLinks = false;
        $scope.showAddedFiles = false;
        $scope.showAddLink = false;
        $scope.currency = Service.currency();
        $scope.experience = Service.experience();
        $scope.industries = Service.getIndustries();
        $scope.contacts = {skype: "", mphone: "", email: ""};
        $scope.contacts2 = {skype: "", mphone: "", email: ""};
        $scope.src = {salary: '1', education: '1', fullName: '1', education: '1', coreSkills: '1'};
        $scope.deleteRegion2ToRelocate = function(index) {
            $scope.regionToRelocate.splice(index, 1);
        };
        $scope.addLinkToCandidate = {
            name: '',
            url: ''
        };
        $scope.linksForSave = [];
        $rootScope.changeStateInCandidate = {status: "", comment: "", fullName: null, placeholder: null};
        $scope.map = {
            center: {
                latitude: 48.379433,
                longitude: 31.165579999999977
            },
            zoom: 5,
            options: {
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                mapTypeControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
        };

        $scope.marker = {
            id: 1,
            title: "",
            coords: {
                latitude: null,
                longitude: null
            }
        };
        $scope.showModalAddPhoto = function(){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-photo-candidate.html',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $scope.modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.addPhoto = function() {
            $('#photoFile').click();
        };
        $scope.lang = Service.lang();

        $scope.errorMessage = {
            show: false,
            message: ""
        };
        FileInit.initCandFileOption($scope, "candidate", "", false, $filter);
        FileInit.initFileOptionForEditFromResume($scope, "candidate");
        $scope.callbackFile = function(resp, name) {
            if (!$scope.candidate.files) {
                $scope.candidate.files = [];
            }
            $scope.candidate.files.push(resp);
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.deleteCandidate = function() {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-candidate.html',
                size: '',
                resolve: {

                }
            });
            //$('.changeStatusOfCandidate.modal').modal('show');
            $rootScope.changeStateInCandidate.status = "archived";
            $rootScope.changeStateInCandidate.fullName = $scope.candidate.fullName;
            $rootScope.changeStateInCandidate.placeholder = $filter('translate')('Write a comment why you want remove this candidate');
        };
        $scope.langs = Candidate.getLangInOrg(function (resp){
            //console.log(resp);
            if(resp.objects){
                resp.objects.splice(0, 1);
                $scope.setLangs(resp.objects);
            } else {
                $scope.setLangs([]);
            }
        });
        $rootScope.saveStatusOfCandidate = function() {
            if ($rootScope.changeStateInCandidate.status != "") {
                Candidate.changeState({
                    candidateId: $scope.candidate.candidateId,
                    comment: $rootScope.changeStateInCandidate.comment,
                    candidateState: $rootScope.changeStateInCandidate.status
                }, function(resp) {
                    if (resp.status == "ok") {
                        $scope.candidate.status = resp.object.status;
                        notificationService.success($filter('translate')('candidate') + " " + $scope.candidate.fullName + " " + $filter('translate')('was_deleted'));
                        $location.path('/candidates');

                    }
                }, function(err) {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
                $rootScope.closeModal();
                //$('.changeStatusOfCandidate.modal').modal('hide');
                $rootScope.changeStateInCandidate.status = "";
                $rootScope.changeStateInCandidate.comment = "";
            }
        };


        $scope.removeFile = function(id, second) {
            if (second) {
                Candidate.removeFile({"candidateId": $scope.candidate2.candidateId, "fileId": id}, function(resp) {
                });
                angular.forEach($scope.candidate2.files, function(val, ind) {
                    if (val.fileId === id) {
                        $scope.candidate2.files.splice(ind, 1);
                    }
                });
                if ($scope.candidate2.files.length === 0) {
                    delete $scope.candidate2.files;
                }
            }else {
                Candidate.removeFile({"candidateId": $scope.candidate.candidateId, "fileId": id}, function(resp) {
                });
                angular.forEach($scope.candidate.files, function(val, ind) {
                    if (val.fileId === id) {
                        $scope.candidate.files.splice(ind, 1);
                    }
                });
                if ($scope.candidate.files.length === 0) {
                    delete $scope.candidate.files;
                }
            }

        };

        $scope.dateOptions = {
            changeYear: true,
            changeMonth: true,
            yearRange: '1930:-0',
            defaultDate: "01/01/1990"
        };
        $scope.cancel = function() {
            $location.path("/candidates/" + $routeParams.id);
        };

        $(".datepickerOfBirth")
            .datetimepicker({
                format: "dd/mm/yyyy",
                startView: 4,
                minView: 2,
                autoclose: true,
                language: $translate.use(),
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                initialDate: new Date(315550800000)
            })
            .on('hide', function(val) {
                if (val.date != undefined) {
                    $scope.candidate.db = val.date.getTime();
                }
                $('.datepickerOfBirth').blur();
            });
        $scope.updateCandidate = function(){
            Candidate.one({"localId": $routeParams.id}, function(resp) {
                if (angular.equals(resp.status, "ok")) {
                    $scope.setOriginAutocompleterValue(resp.object.origin);
                    $scope.setPositionAutocompleterValue(resp.object.position);
                    if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                        $scope.region = resp.object.region;
                        $scope.map.center.latitude = resp.object.region.lat;
                        $scope.map.center.longitude = resp.object.region.lng;
                        $scope.marker.coords.latitude = resp.object.region.lat;
                        $scope.marker.coords.longitude = resp.object.region.lng;

                        $scope.regionInput = resp.object.region.displayFullName;
                        $('#pac-input').val(resp.object.region.displayFullName);

                    }
                    $scope.photoLink = $scope.serverAddress + "/getapp?id=" + resp.object.photo + "&d=true";
                    $scope.regionToRelocate = resp.object.relatedRegions != undefined ? resp.object.relatedRegions : [];
                    var name = "";
                    resp.object.fullName != undefined ? name + resp.object.fullName.replace(/\s/g, '_') : "";
                    resp.object.position != undefined ? name + resp.object.position.replace(/\s/g, '_') : "";
                    resp.object.salary == 0 ? resp.object.salary = null : null;
                    if (name.length > 0) {
                        $location.hash($filter('transliteration')(name)).replace();
                    }
                    $scope.candidate = resp.object;
                    $scope.imgWidthFunc();
                    if($scope.candidate.files){
                        if($scope.candidate.files.length != undefined && $scope.candidate.files.length != 0){
                            angular.forEach($scope.candidate.files, function (val) {
                                initDocuments(val);
                            });
                        }
                    }
                    $scope.objectId = $scope.candidate.candidateId;
                    if(resp.object.languages!=undefined){
                        $scope.setSelect2Lang(resp.object.languages.split(","));
                    }

                    if (resp.object.employmentType != undefined) {
                        $scope.setSelect2EmploymentType(resp.object.employmentType.split(","));
                    }
                    if (resp.object.db) {
                        $scope.data = new Date(resp.object.db);
                    }
                    if (resp.object.db != undefined) {
                        $(".datepickerOfBirth").datetimepicker("setDate", new Date(resp.object.db));
                    }
                    if (resp.object.contacts) {
                        angular.forEach(resp.object.contacts, function(val) {
                            if (angular.equals(val.type, "email")) {
                                $scope.contacts.email = val.value;
                            }
                            if (angular.equals(val.type, "mphone")) {
                                $scope.contacts.mphone = val.value;
                            }
                            if (angular.equals(val.type, "skype")) {
                                $scope.contacts.skype = val.value;
                            }
                            if (angular.equals(val.type, "linkedin")) {
                                $scope.contacts.linkedin = val.value;
                            }
                            if (angular.equals(val.type, "facebook")) {
                                $scope.contacts.facebook = val.value;
                            }
                            if (angular.equals(val.type, "googleplus")) {
                                $scope.contacts.googleplus = val.value;
                            }
                            if (angular.equals(val.type, "github")) {
                                $scope.contacts.github = val.value;
                            }
                            if (angular.equals(val.type, "homepage")) {
                                $scope.contacts.homepage = val.value;
                            }
                        });
                        $scope.candidateBeforeMerge = angular.copy($scope.candidate);
                        $scope.contactsBeforeMerge = angular.copy($scope.contacts);
                    }
                } else {
                    notificationService.error($filter('translate')('candidate not found'));
                    $location.path('/candidates');
                }
            }, function(err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        $scope.updateCandidate();
        $scope.status = Candidate.getStatus();
        $scope.employmentType = Service.employmentType();

        $scope.candidate2 = angular.fromJson($localStorage.get("candidateForMerge"));
        $scope.updateCandidate2 = function(){
            Candidate.one({"localId": $scope.candidate2.localId}, function(resp) {
                if (angular.equals(resp.status, "ok")) {
                    // if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                    //     $scope.region = resp.object.region;
                    //     $scope.map.center.latitude = resp.object.region.lat;
                    //     $scope.map.center.longitude = resp.object.region.lng;
                    //     $scope.marker.coords.latitude = resp.object.region.lat;
                    //     $scope.marker.coords.longitude = resp.object.region.lng;
                    //
                    //     $scope.regionInput = resp.object.region.displayFullName;
                    //     $('#pac-input').val(resp.object.region.displayFullName);
                    //
                    // }
                    var name = "";
                    resp.object.fullName != undefined ? name + resp.object.fullName.replace(/\s/g, '_') : "";
                    resp.object.position != undefined ? name + resp.object.position.replace(/\s/g, '_') : "";
                    resp.object.salary == 0 ? resp.object.salary = null : null;
                    if (name.length > 0) {
                        $location.hash($filter('transliteration')(name)).replace();
                    }
                    $scope.candidate2 = resp.object;
                    if($scope.candidate2.files){
                        if($scope.candidate2.files.length != undefined && $scope.candidate2.files.length != 0){
                            angular.forEach($scope.candidate2.files, function (val) {
                                initDocuments(val);
                            });
                        }
                    }
                    $scope.objectId = $scope.candidate2.candidateId;
                    // if(resp.object.languages!=undefined){
                    //     $scope.setSelect2Lang(resp.object.languages.split(","));
                    // }

                    // if (resp.object.employmentType != undefined) {
                    //     $scope.setSelect2EmploymentType(resp.object.employmentType.split(","));
                    // }
                    if (resp.object.contacts) {
                        angular.forEach(resp.object.contacts, function(val) {
                            if (angular.equals(val.type, "email")) {
                                $scope.contacts2.email = val.value;
                            }
                            if (angular.equals(val.type, "mphone")) {
                                $scope.contacts2.mphone = val.value;
                            }
                            if (angular.equals(val.type, "skype")) {
                                $scope.contacts2.skype = val.value;
                            }
                            if (angular.equals(val.type, "linkedin")) {
                                $scope.contacts2.linkedin = val.value;
                            }
                            if (angular.equals(val.type, "facebook")) {
                                $scope.contacts2.facebook = val.value;
                            }
                            if (angular.equals(val.type, "googleplus")) {
                                $scope.contacts2.googleplus = val.value;
                            }
                            if (angular.equals(val.type, "github")) {
                                $scope.contacts2.github = val.value;
                            }
                            if (angular.equals(val.type, "homepage")) {
                                $scope.contacts2.homepage = val.value;
                            }
                        });
                    }
                } else {
                    notificationService.error($filter('translate')('candidate not found'));
                    $location.path('/candidates');
                }
            }, function(err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        $scope.updateCandidate2();

        $scope.selectSource = function (src, isContact, type) {
            var sourceForRegion = function () {
                var source;
                if(src == '1') {
                    source = $scope.candidateBeforeMerge;
                } else if(src == '2') {
                    source = $scope.candidate2;
                } else {
                    $scope.candidate.region = undefined;
                    source = $scope.candidate;
                }
                if (source.region != undefined && source.region.lat != undefined && source.region.lng != undefined) {
                    $scope.region = source.region;
                    $scope.map.center.latitude = source.region.lat;
                    $scope.map.center.longitude = source.region.lng;
                    $scope.marker.coords.latitude = source.region.lat;
                    $scope.marker.coords.longitude = source.region.lng;

                    $scope.regionInput = source.region.displayFullName;
                    $('#pac-input').val(source.region.displayFullName);
                }else {
                    $scope.region = undefined;
                    $scope.map.center.latitude = undefined;
                    $scope.map.center.longitude = undefined;
                    $scope.marker.coords.latitude = undefined;
                    $scope.marker.coords.longitude = undefined;

                    $scope.regionInput = undefined;
                    $('#pac-input').val(undefined);
                }
            };
            var sourceForLanguage = function () {
                if(src === '1') {
                    if($scope.candidateBeforeMerge.languages !== undefined){
                        $scope.setSelect2Lang($scope.candidateBeforeMerge.languages.split(","));
                    }else {
                        $scope.setSelect2Lang($scope.candidateBeforeMerge.languages);
                    }
                }else if(src === '2') {
                    if($scope.candidate2.languages !== undefined){
                        $scope.setSelect2Lang($scope.candidate2.languages.split(","));
                    }else {
                        $scope.setSelect2Lang($scope.candidate2.languages);
                    }
                } else {
                    $scope.setSelect2Lang(undefined);
                }
            };
            var sourceForPosition = function () {
                if(src === '1') {
                    $scope.candidate[type] = $scope.candidateBeforeMerge[type];
                    $scope.setPositionAutocompleterValue($scope.candidateBeforeMerge.position);
                }else if(src === '2') {
                    $scope.candidate[type] = $scope.candidate2[type];
                    $scope.setPositionAutocompleterValue($scope.candidate2.position);
                }else {
                    $scope.candidate[type] = undefined;
                    $scope.setPositionAutocompleterValue(undefined);
                }
            };
            var sourceForEmploymentType = function () {
                if(src === '1') {
                    $scope.setSelect2EmploymentType($scope.candidateBeforeMerge.employmentType.split(","));
                }else if(src === '2') {
                    $scope.setSelect2EmploymentType($scope.candidate2.employmentType.split(","));
                }else {
                    $scope.setPositionAutocompleterValue(undefined);
                }
            };
            var sourceForSalary = function () {
                    if(src === '1') {
                        $scope.candidate[type] = $scope.candidateBeforeMerge[type];
                        $scope.candidate['currency'] = $scope.candidateBeforeMerge['currency'];
                    }else if(src === '2') {
                        $scope.candidate[type] = $scope.candidate2[type];
                        $scope.candidate['currency'] = $scope.candidate2['currency'];
                    }else {
                        $scope.candidate[type] = undefined;
                        $scope.candidate['currency'] = undefined;
                    }
            };
            var sourceForOrigin = function () {
                if(src === '1') {
                    $scope.setOriginAutocompleterValue($scope.candidateBeforeMerge.origin);
                }else if(src === '2') {
                    $scope.setOriginAutocompleterValue($scope.candidate2.origin);
                }else {
                    $scope.setOriginAutocompleterValue(undefined);
                }
            };
            var sourceForCoreSkills = function () {
                if(src === '1') {
                    $scope.candidate[type] = $scope.candidateBeforeMerge[type];
                    $scope.src.coreSkills = '1';
                }else if(src === '2') {
                    $scope.candidate[type] = $scope.candidate2[type];
                    $scope.src.coreSkills = '2';
                }
            };
            var sourceForDescription = function () {
                if(src === '1') {
                    $scope.candidate[type] = $scope.candidateBeforeMerge[type];
                    $scope.src.descr = '1';
                }else if(src === '2') {
                    $scope.candidate[type] = $scope.candidate2[type];
                    $scope.src.descr = '2';
                }
            };
            var sourceByDefault = function () {
                if(isContact) {
                    if(src === '1') {
                        $scope.contacts[type] = $scope.contactsBeforeMerge[type];
                    }else if(src === '2') {
                        $scope.contacts[type] = $scope.contacts2[type];
                    }else {
                        $scope.contacts[type] = undefined;
                    }
                }else {
                    if(src === '1') {
                        $scope.candidate[type] = $scope.candidateBeforeMerge[type];
                    }else if(src === '2') {
                        $scope.candidate[type] = $scope.candidate2[type];
                    }else {
                        $scope.candidate[type] = undefined;
                    }
                }
            };

            switch (type) {
                case  'position':
                    sourceForPosition();
                    break;
                case 'salary':
                    sourceForSalary();
                    break;
                case 'languages':
                    sourceForLanguage();
                    break;
                case 'region':
                    sourceForRegion();
                    break;
                case 'employmentType':
                    sourceForEmploymentType();
                    break;
                case 'origin':
                    sourceForOrigin();
                    break;
                case 'coreSkills':
                    sourceForCoreSkills();
                    break;
                case 'descr':
                    sourceForDescription();
                    break;
                default:
                    sourceByDefault();
            }
        };

        $scope.imgWidthFunc = function(){
            var img = new Image();
            img.onload = function() {
                var width = this.width;
                if(width >= 300){
                    $('.photoWidth').css({'width': '100%', 'height': 'auto'});
                }else{
                    $('.photoWidth').css({'width': 'inherit', 'display': 'block', 'margin': '0 auto'});
                }
            };
            if($location.$$host == '127.0.0.1'){
                img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }else{
                img.src = $location.$$protocol + '://' + $location.$$host + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }
        };
        $scope.callbackAddPhoto = function(photo) {
            $scope.candidate.photo = photo;
            $scope.photoLink = $scope.serverAddress + "/getapp?id=" + $scope.candidate.photo + "&d=true";
            $scope.imgWidthFunc();
            //$scope.hideModalAddPhoto();
            $rootScope.closeModal();
        };
        FileInit.addPhotoByReference($scope, $scope.callbackAddPhoto);

        $scope.callbackErr = function(err) {
            notificationService.error(err);
        };
        Candidate.setPhoto($scope);

        $scope.removePhoto = function() {
            $scope.candidate.photo = "";
        };
        $scope.saveCandidate = function() {
            var salaryBol = true;
            if ($scope.candidate.salary != undefined && $scope.candidate.salary != "" && /[^[0-9]/.test($scope.candidate.salary)) {
                $scope.errorMessage.show = true;
                $scope.errorMessage.message = $filter("translate")("desired_salary_should_contains_only_numbers");
                salaryBol = false;
            }
            if ($scope.candidateForm.$valid && salaryBol && !$scope.saveButtonIsPressed) {
                $scope.saveButtonIsPressed = true;
                var candidate = $scope.candidate;
                candidate.languages = $scope.getSelect2Lang();
                candidate.employmentType = $scope.getSelect2EmploymentType();
                candidate.position=$scope.getPositionAutocompleterValue();
                if ($scope.candidate.source) {
                    candidate.source = $scope.candidate.source;
                }
                if ($scope.candidate.photo) {
                    candidate.photo = $scope.candidate.photo;
                }
                candidate.contacts = [];
                if ($scope.contacts.email) {
                    candidate.contacts.push({type: "email", value: $scope.contacts.email});
                }
                if ($scope.contacts.mphone) {
                    candidate.contacts.push({type: "mphone", value: $scope.contacts.mphone});
                }
                if ($scope.contacts.skype) {
                    candidate.contacts.push({type: "skype", value: $scope.contacts.skype});
                }
                if ($scope.contacts.linkedin) {
                    candidate.contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
                }
                if ($scope.contacts.facebook) {
                    candidate.contacts.push({type: "facebook", value: $scope.contacts.facebook});
                }
                if ($scope.contacts.googleplus) {
                    candidate.contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
                }
                if ($scope.contacts.github) {
                    candidate.contacts.push({type: "github", value: $scope.contacts.github});
                }
                if ($scope.contacts.homepage) {
                    candidate.contacts.push({type: "homepage", value: $scope.contacts.homepage});
                }
                if ($("#pac-input").val().length == 0) {
                    candidate.region = null;
                } else if ($("#pac-input").val().length > 0 && (candidate.region == undefined || $("#pac-input").val() != candidate.region.fullName)) {
                    if ($scope.region)
                        candidate.region = $scope.region;
                }
                candidate.db = $('.datepickerOfBirth').datetimepicker('getDate') != null ? $('.datepickerOfBirth').datetimepicker('getDate').getTime() : null;
                deleteUnnecessaryFields(candidate);
                candidate.relatedRegions = $scope.regionToRelocate;
                candidate.origin = $scope.getOriginAutocompleterValue();
                var mergeData  = $scope.candidate2.candidateId;

                $http.put(serverAddress + '/candidate/' + 'mergeCandidates?duplicateId=' + mergeData, candidate).then(function (val) {
                    console.log(val);
                    if (angular.equals(val.data.status, "ok")) {
                        notificationService.success($filter('translate')('You successfully merged candidates’ profiles'));
                        CacheCandidates.update(val.data.object);
                        if ($scope.linksForSave.length > 0) {
                            angular.forEach($scope.linksForSave, function(valI, i) {
                                Candidate.addLink({
                                    "url": valI.url,
                                    "candidateId": val.data.object.candidateId,
                                    "name": valI.fileName
                                }, function(resp) {
                                });
                                if ($scope.linksForSave.length - 1 == i) {
                                    $location.path("/candidates/" + val.data.object.localId);
                                }
                            });
                        } else {
                            $location.path("/candidates/" + val.data.object.localId);
                        }

                        $location.path("/candidates/" + val.data.object.localId);
                    } else {
                        $scope.saveButtonIsPressed = false;
                        $scope.errorMessage.show = true;
                        $scope.errorMessage.message = val.data.message;
                    }
                    $localStorage.remove("candidateForMerge");
                }, function (error) {
                    $scope.saveButtonIsPressed = false;
                });

            } else {
                $scope.candidateForm.name.$pristine = false;
                $scope.candidateForm.position.$pristine = false;
                $('html, body').animate({scrollTop: 0}, 'fast');
                $scope.candidateForm.salary.$pristine = false;
                $scope.candidateForm.education.$pristine = false;
                $scope.candidateForm.currentWorkPlace.$pristine = false;
                $scope.candidateForm.currentPosition.$pristine = false;
//            $scope.candidateForm.region.$pristine = false;
            }
        };

        $scope.checkDuplicatesByName = function() {
            Candidate.checkDuplicatesByName($scope);
        };

        $scope.removeLink = function(id) {
            angular.forEach($scope.linksForSave, function(val, ind) {
                console.log(val);
                if (val.fileName === id) {
                    $scope.linksForSave.splice(ind, 1);
                }
            });
        };

        $scope.showAddLinkFunc = function(){
            $scope.showAddLink = true;
        };
        $scope.closeAddLinkFunc = function(){
            $scope.showAddLink = false;
            $scope.addLinkToCandidate.name = null;
            $scope.addLinkToCandidate.url = null;
            $scope.addLinkErrorShow = false;
        };
        $scope.addLinkInCandidateStart = function(){
            if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
                Candidate.addLink({
                    "url": $scope.addLinkToCandidate.url,
                    "candidateId": $scope.candidate.candidateId,
                    "name": $scope.addLinkToCandidate.name
                }, function(resp) {
                    if(resp.status == 'ok'){
                        $scope.updateCandidate();
                        notificationService.success($filter('translate')('history_info.added_link'));
                    }else{
                        notificationService.error($filter('translate')(resp.message));
                    }
                });
                //$scope.linksForSave.push({"url": $scope.addLinkToCandidate.url, "fileName": $scope.addLinkToCandidate.name});
                $scope.addLinkToCandidate.name = '';
                $scope.addLinkToCandidate.url = '';
                $scope.showAddLink = false;
            } else{
                $scope.addLinkErrorShow = true;
            }
        };
        $scope.changeRating = function(skill,rating){
            skill.level = rating;
        };
        $scope.deleteSkill = function(skill){
            $scope.candidate.skills.splice($scope.candidate.skills.indexOf(skill), 1);
        };
        $scope.showModalConfirmationResumeUpdate = function(){
            $('.confirmationResumeUpdate.modal').modal('show');
        };
        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        }
    }]);

controller.controller('CandidateOneController', ["CacheCandidates", "$localStorage", "$scope", "frontMode", "$translate", "googleService", "$location", "$routeParams", "Candidate",
    "Service", "$rootScope", "Person", "serverAddress", "FileInit", "notificationService", "$filter", "Vacancy",
    "Action", "vacancyStages", "Task", "File", "$sce", "$window", "Mail", "$uibModal", "$timeout", "$route", "Test", "CandidateGroup",
    function (CacheCandidates, $localStorage, $scope, frontMode, $translate, googleService, $location, $routeParams, Candidate, Service, $rootScope, Person, serverAddress, FileInit,
              notificationService, $filter, Vacancy, Action, vacancyStages, Task, File, $sce, $window, Mail, $uibModal, $timeout, $route, Test, CandidateGroup) {
        $scope.serverAddress = serverAddress;
        $localStorage.remove("candidateForTest");
        if($location.$$absUrl.indexOf('&task=') != -1) {
            $scope.urlTaskId = $location.$$absUrl.split('&task=')[1];
        }
        if($localStorage.get('calendarShow') != undefined){
            $rootScope.calendarShow = $localStorage.get('calendarShow');
            if($rootScope.calendarShow == 'true'){
                $rootScope.calendarShow = true;
            }else if($scope.calendarShow == 'false'){
                $rootScope.calendarShow = false;
            }
        }else{
            $rootScope.calendarShow = true;
        }
        $scope.historyLimit = 20;
        $scope.lang = $translate.use();
        $scope.variableForTooltip = $sce.trustAsHtml($filter('translate')('Email log displays all your email correspondence with a candidate via email import')
        + $filter('translate')('This feature works only after you integrate your email with your CleverStaff account. If you did not integrate your email, do it here: https://cleverstaff.net/!#/email-integration')
        + $filter('translate')('CleverStaff updates the email history 1 time per 1 hour. The time and date of the last integration + the number of imported emails are listed below'));
        $rootScope.staticEmailTemplate = {
            candidateName: "John Dou",
            date: 1463749200000,
            recruiterName: $rootScope.me.fullName,
            recruiterEmail: $rootScope.me.emails.length > 0 ? $rootScope.me.emails[0].email : $rootScope.me.login
        };
        angular.forEach($rootScope.me.contacts, function (val) {
            if(val.contactType == 'phoneWork'){
                $rootScope.staticEmailTemplate.phoneWork = val.value;
            }
            if(val.contactType == 'skype'){
                $rootScope.staticEmailTemplate.skype = val.value;
            }
            if(val.contactType == 'linkedin'){
                $rootScope.staticEmailTemplate.linkedin = val.value;
            }
            if(val.contactType == 'facebook'){
                $rootScope.staticEmailTemplate.facebook = val.value;
            }
        });
        $scope.advicesLimit = 3;
        $scope.showAddLink = false;
        $scope.editCommentFlag = false;
        $scope.vacancy = null;
        $rootScope.inactiveVacancies = false;
        $scope.addLinkErrorShow = false;
        $scope.showAddedLinks = false;
        $scope.showAddedFiles = false;
        $scope.linked = false;
        $scope.currentTab = 'profile';
        $scope.showHistoryForPrint = false;
        $scope.showEditFileName = false;
        $rootScope.responsiblePersonsEdit =[];
        $scope.showMenuEdDelFile = false;
        $rootScope.showEmployedFields  = false;
        $rootScope.saveFromAdviceClicked = false;
        $scope.todayDate = new Date().getTime();
        $scope.onlyComments = false;
        $rootScope.showEditNameTask = false;
        $rootScope.editableTaskOuter = false;
        $rootScope.showEditTextTask = false;
        $scope.toggleDescription = true;
        $scope.todayDate = new Date().getTime();
        $rootScope.clickedSaveStatusOfCandidate = false;
        $rootScope.clickedAddVacancyInCandidate = false;
        $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        if($rootScope.me.recrutRole != 'client'){
           setTimeout(function(){
               if ($rootScope.questStatus && $rootScope.questStatus.addFirstCandidatePopup == 'Y'){
                   $scope.modalInstance = $uibModal.open({
                       animation: true,
                       templateUrl: '../partials/modal/HelloQuest/helloQuestCandidateEnd.html',
                       size: 'lg',
                       backdrop: 'static',
                       keyboard: false,
                       resolve: function(){

                       }
                   });
               }
           },0);
            $rootScope.continueQuest = function(){
                Person.changeUserParam({
                    name: 'onboardingQuestPopup',
                    value: 'Y'
                }, function (resp) {
                    if (resp.status == "ok") {
                        Person.changeUserParam({
                            name: 'addFirstCandidatePopup',
                            value: 'N'
                        }, function (resp){
                            $rootScope.updateQuestStatus();
                            $timeout(function(){
                                $rootScope.closeModal();
                                $location.path("/organizer");
                            },500)
                        });
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            };
            //Person.changeUserParam({
            //    userId: 'userId',
            //    name: 'addFirstCandidatePopup',
            //    value: 'Y'
            //}, function (resp){});
        }
        $rootScope.newTask = {
            title: '',
            text: '',
            targetDate: '',
            candidateId: '',
            responsibleIds: [],
            type: 'Task'
        };
        $scope.addLinkToCandidate = {
            name: '',
            url: ''
        };
        $rootScope.changeStatusOfInterviewEmployed = {
            candidate: "",
            comment: "",
            status: "",
            date: null,
            exportgoogle: false
        };
        $scope.tests = [];
        $rootScope.changeStateInCandidate = {status: "", comment: "", placeholder: null, status_old: null};
        $scope.status = Candidate.getStatus();
        $scope.statusAssoc = Candidate.getStatusAssociative();
        Task.task($scope, $rootScope, $location, $translate, $uibModal, $route);
        $scope.showMap = $localStorage.get("vacancyShowMap") != undefined ? JSON.parse($localStorage.get("vacancyShowMap")) : true;
        $scope.showHideMap = function () {
            $scope.showMap = !$scope.showMap;
            $localStorage.set("vacancyShowMap", $scope.showMap)
        };

        $scope.candProgress = function () {
            Candidate.progressUpdate($scope, false);
        };
        $scope.addLinkToCandidate = {
            name: '',
            url: ''
        };
        if(google){
            $scope.map = {
                center: {
                    latitude: 48.379433,
                    longitude: 31.165579999999977
                },
                zoom: 5,
                options: {
                    panControl: true,
                    zoomControl: true,
                    scaleControl: true,
                    mapTypeControl: true,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }
            };
            $scope.marker = {
                id: 1,
                title: "",
                coords: {
                    latitude: null,
                    longitude: null
                }
            };
        }
        $rootScope.statusInter = Vacancy.getInterviewStatus();

        $rootScope.addCandidateInVacancySelect2Obj = {
            status: null
        };

        $rootScope.addCandidateInVacancy = {
            id: "",
            comment: "",
            status: "longlist",
            date: null,
            showSelect: "",
            showText: false,
            text: ""
        };
        $rootScope.errorMessageForAddCandidateInVacancy = {
            show: false,
            text: ""
        };

        //if (frontMode === 'war') {
        //    googleService.checkAuthTimeout();
        //}
        $scope.changeTab = function(tabs){
            $scope.currentTab = tabs;
        };

        $scope.toAddVacancyForm = function (state, showSelect, showText) {
            if ($scope.candidate.status != 'archived') {
                $rootScope.addCandidateInVacancy.showText = showText;
                $rootScope.addCandidateInVacancy.showSelect = showSelect;
                $rootScope.addCandidateInVacancy.inVacancy = false;
                $rootScope.addCandidateInVacancy.statusObject = null;
                $rootScope.VacancyStatusFiltered = null;
                $rootScope.candidateAddedInVacancy = null;
                $rootScope.addCandidateInVacancy.comment = '';
                $("#candidateAddToVacancy").select2("val", null);
                $rootScope.addCandidateInVacancy.status = state !== null ? state : {
                    value: "sent_offer",
                    withDate: false,
                    defaultS: true,
                    single: false,
                    added: true,
                    active_color: "longlist_color",
                    useAnimation: false,
                    count: 0,
                    forAdd: true
                };
                if($rootScope.me.recrutRole != 'client' && $rootScope.me.recrutRole != 'salesmanager'){
                        $scope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/candidate-add-in-vacancy.html',
                            resolve: {
                                items: function () {
                                    return $scope.items;
                                }
                            }
                        });
                    $scope.modalInstance.opened.then(function() {
                        setTimeout(function(){
                            $(".addCandidateInvacancyPicker").datetimepicker({
                                format: "dd/mm/yyyy hh:ii",
                                startView: 2,
                                minView: 0,
                                autoclose: true,
                                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                                language: $translate.use()
                            }).on('changeDate', function (data) {
                                $rootScope.addCandidateInVacancy.date = data.date;
                            }).on('hide', function () {
                                if ($('.addCandidateInvacancyPicker').val() == "") {
                                    $rootScope.addCandidateInVacancy.date = null;
                                }else{
                                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInvacancyPicker').datetimepicker('getDate').getTime(), true));
                                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInvacancyPicker').datetimepicker('getDate').getTime(), true));
                                    tinyMCE.get('addCandidateInVacancyMCE').setContent($rootScope.emailTemplateInModal.text);
                                }
                                $('.addCandidateInvacancyPicker').blur();
                            });
                        },0)
                });
                    $scope.modalInstance.closed.then(function() {
                        tinyMCE.remove();
                        delete $rootScope.vacancyForAddCandidate;
                    });
                }else{
                    notificationService.error($filter('translate')('Only recruiters, admins and freelancers can adding candidates in vacancy'));
                }
                $rootScope.candnotify = {};
                Candidate.getContacts({"candidateId": $scope.candidate.candidateId}, function (resp) {
                    var email = "";
                    angular.forEach(resp.objects, function (c) {
                        if (c.type == "email") {
                            email = c.value;
                        }
                    });
                    $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                    $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
                });
                $rootScope.candnotify.show = false;
                $rootScope.candnotify.fullName = $scope.candidate.fullName;
                //$rootScope.candnotify.send = $localStorage.get("candnotify") != "false";
                //Service.addCandidateInVacancy(state, showSelect, showText);
            } else {
                notificationService.error($filter('translate')('Remote candidates can not be added to the job'));
            }
            createEmailTemplateFunc($scope,$rootScope,'addCandidateInVacancyMCE', Mail, $location);

        };
        $rootScope.addVacancyInCandidate = function (sendTemplate, flag) {
            if(!$rootScope.candnotify.sendMail && flag){
                notificationService.error($filter('translate')("enter_email_candidate"));
                return;
            }
            if (!$rootScope.clickedAddVacancyInCandidate) {
                $rootScope.clickedAddVacancyInCandidate = true;


                if ($("#candidateAddToVacancy").select2('data') == null) {
                    $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                    $rootScope.errorMessageForAddCandidateInVacancy.text = $filter('translate')('You must specify the position');
                    $rootScope.clickedAddVacancyInCandidate = false;
                    return;
                }
                var vacancyId = $("#candidateAddToVacancy").select2('data').id;
                $rootScope.errorMessageForAddCandidateInVacancy.show = false;
                $rootScope.addCandidateInVacancy.date = $('.addCandidateInvacancyPicker').datetimepicker('getDate') != null && ($rootScope.addCandidateInVacancy.status.withDate || $rootScope.addCandidateInVacancy.status.type == 'interview') ? $('.addCandidateInvacancyPicker').datetimepicker('getDate') : null;
                if($rootScope.addCandidateInVacancy.status){
                    vacancyAddInterview(Vacancy, vacancyId, null,
                        $scope.candidate.candidateId,
                        $rootScope.addCandidateInVacancy.comment,
                        ($rootScope.addCandidateInVacancy.status.customInterviewStateId)?$rootScope.addCandidateInVacancy.status.customInterviewStateId:$rootScope.addCandidateInVacancy.status.value,
                        $rootScope.addCandidateInVacancy.date, function (resp) {
                            resp.object.vacancyId.interviewStatusNotTouchable = resp.object.vacancyId.interviewStatus;
                            $scope.getLastEvent();
                            $scope.updateCandidate();
                            if (!$scope.candidate.interviews) {
                                $scope.candidate.interviews = [];
                            }
                            $rootScope.clickedAddVacancyInCandidate = false;
                            $rootScope.addCandidateInVacancy.comment = "";
                            $rootScope.addCandidateInVacancy.id = null;
                            $scope.candidate.interviews.push(resp.object);
                            angular.forEach($scope.candidate.interviews, function (interview) {
                                if (interview.vacancyId.interviewStatus == undefined) {
                                    interview.vacancyId.interviewStatus = "longlist,shortlist,interview,approved,notafit,declinedoffer";
                                    interview.vacancyId.interviewStatusNotTouchable = interview.vacancyId.interviewStatus
                                }
                            });
                            angular.forEach($scope.candidate.interviews, function(value){
                                var array = value.vacancyId.interviewStatus.split(",");
                                angular.forEach($scope.customStages, function(resp){
                                    if (value.state == resp.customInterviewStateId){
                                        value.state = resp.name
                                    }
                                    angular.forEach(array,function(res){
                                        if(resp.customInterviewStateId == res){
                                            array[array.indexOf(resp.customInterviewStateId)] = resp.name;
                                        }
                                    });
                                });
                                value.vacancyId.interviewStatus = array.toString();
                                if(value.vacancyId.status != 'completed' && value.vacancyId.status != 'deleted' && value.vacancyId.status != 'canceled'){
                                    $scope.participationInVacancy = true;
                                }
                            });
                            $rootScope.addCandidateInVacancy.status = null;
                            $rootScope.addCandidateInVacancy.date = null;
                            $rootScope.VacancyStatusFiltered = '';
                            $rootScope.candidateAddedInVacancy = null;
                            $rootScope.closeModal();
                        }, function (resp) {
                            $rootScope.clickedAddVacancyInCandidate = false;
                            $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                            $rootScope.errorMessageForAddCandidateInVacancy.text = resp.message;
                        }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
                }else{
                    vacancyAddInterview(Vacancy, vacancyId, null,
                        $scope.candidate.candidateId,
                        $rootScope.addCandidateInVacancy.comment,
                        $rootScope.addCandidateInVacancy.status.value,
                        $rootScope.addCandidateInVacancy.date, function (resp) {
                            resp.object.vacancyId.interviewStatusNotTouchable = resp.object.vacancyId.interviewStatus;
                            $scope.getLastEvent();
                            $scope.updateCandidate();
                            if (!$scope.candidate.interviews) {
                                $scope.candidate.interviews = [];
                            }
                            $rootScope.clickedAddVacancyInCandidate = false;
                            $rootScope.addCandidateInVacancy.comment = "";
                            $rootScope.addCandidateInVacancy.id = null;
                            $scope.candidate.interviews.push(resp.object);
                            angular.forEach($scope.candidate.interviews, function (interview) {
                                if (interview.vacancyId.interviewStatus == undefined) {
                                    interview.vacancyId.interviewStatus = "longlist,shortlist,interview,approved,notafit,declinedoffer";
                                    interview.vacancyId.interviewStatusNotTouchable = interview.vacancyId.interviewStatus;
                                }
                            });
                            angular.forEach($scope.candidate.interviews, function(value){
                                var array = value.vacancyId.interviewStatus.split(",");
                                angular.forEach($scope.customStages, function(resp){
                                    if (value.state == resp.customInterviewStateId){
                                        value.state = resp.name
                                    }
                                    angular.forEach(array,function(res){
                                        if(resp.customInterviewStateId == res){
                                            array[array.indexOf(resp.customInterviewStateId)] = resp.name;
                                        }
                                    });
                                });
                                value.vacancyId.interviewStatus = array.toString();
                                if(value.vacancyId.status != 'completed' && value.vacancyId.status != 'deleted' && value.vacancyId.status != 'canceled'){
                                    $scope.participationInVacancy = true;
                                }
                            });
                            $rootScope.addCandidateInVacancy.status = null;
                            $rootScope.addCandidateInVacancy.date = null;
                            $rootScope.VacancyStatusFiltered = '';
                            $rootScope.candidateAddedInVacancy = null;
                            $rootScope.closeModal();
                        }, function (resp) {
                            $rootScope.clickedAddVacancyInCandidate = false;
                            $rootScope.errorMessageForAddCandidateInVacancy.show = true;
                            $rootScope.errorMessageForAddCandidateInVacancy.text = resp.message;
                        }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
                }
                if($rootScope.candnotify.show && sendTemplate){
                    var candnotify = $rootScope.candnotify;
                    var changeObj = $rootScope.addCandidateInVacancy;
                    Mail.sendMailByTemplateVerified({
                        toEmails: candnotify.sendMail,
                        vacancyId: $rootScope.VacancyAddedInCandidate.vacancyId,
                        candidateId: $scope.candidate.candidateId,
                        fullName: $scope.candidate.fullName,
                        email: $rootScope.emailTemplateInModal.email,
                        date: $rootScope.addCandidateInVacancy.date,
                        lang: $scope.lang,
                        template: {
                            type: $rootScope.emailTemplateInModal.type,
                            title: $rootScope.emailTemplateInModal.title,
                            text: $rootScope.emailTemplateInModal.text,
                            fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                            fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                        }
                    }, function (resp) {
                        if(resp.status == 'ok'){
                            notificationService.success($filter('translate')('Letter sent'));
                            $rootScope.closeModal();
                        }else{
                            notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                        }
                    });
                }
            }
        };
        $(".addFromAdvicePicker").datetimepicker({
            format: "dd/mm/yyyy hh:ii",
            startView: 2,
            minView: 0,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            autoclose: true,
            language: $translate.use()
        }).on('changeDate', function (data) {
            $rootScope.addFromAdvice.date = data.date;
        }).on('hide', function () {
            if ($('.addFromAdvicePicker').val() == "") {
                $rootScope.addFromAdvice.date = null;
            }
            $('.addFromAdvicePicker').blur();
        });
        $rootScope.addFromAdvice = {
            id: "",
            comment: "",
            status: "longlist",
            date: null,
            showSelect: "",
            showText: false,
            text: "",
            state: ""
        };
        $rootScope.errorAddFromAdvice = {
            show: false,
            text: ""
        };
        $scope.showFromAdvice = function (vacancyId, vacancyPosition) {
            var vacancyStatus = Vacancy.interviewStatusNew();
            $rootScope.addFromAdvice.statusObject = $filter('filter')(vacancyStatus[0].status, {forAdd: true});
            if (vacancyId.interviewStatus) {
                var array = vacancyId.interviewStatus.split(",");
                var sortedStages = [];
                angular.forEach(vacancyStatus, function (vStatus) {
                    if (vStatus.used) {
                        var statusNotDef = $filter('filter')(vStatus.status, {defaultS: false});
                        angular.forEach(statusNotDef, function(statusND) {
                            angular.forEach(array, function(statusA) {
                                if (statusND.value == statusA) {
                                    statusND.added = true;
                                } else if(statusND.value != statusA && (statusND.value == 'shortlist' || statusND.value == 'interview')){
                                    statusND.added = false;
                                }
                            })
                        })
                    }
                });
                var i = 0;
                angular.forEach(array, function(resp) {
                    angular.forEach(vacancyStatus, function(vStatus) {
                        if (vStatus.used) {
                            if(i == 0){
                                angular.forEach($scope.customStages, function(res) {
                                    res.value = res.name;
                                    res.movable = true;
                                    res.added = false;
                                    res.count = 0;
                                    vStatus.status.push(res);
                                    i = i+1;
                                });
                            }
                            angular.forEach(vStatus.status, function(vStatusIn) {
                                if(resp == vStatusIn.value){
                                    vStatusIn.added = true;
                                    sortedStages.push(vStatusIn);
                                } else if(resp == vStatusIn.customInterviewStateId){
                                    vStatusIn.added = true;
                                    sortedStages.push(vStatusIn);
                                }
                            })
                        }
                    })
                });
                $scope.VacancyStatusFiltered = sortedStages;
                $rootScope.addFromAdvice.statusObject = $scope.VacancyStatusFiltered;
            }
            $('.addFromAdvicePicker').val("");
            $rootScope.addFromAdvice.status = {
                value: "longlist",
                withDate: false,
                defaultS: true,
                single: false,
                added: true,
                active_color: "longlist_color",
                useAnimation: false,
                count: 0,
                forAdd: true
            };
            $rootScope.addFromAdvice.vacancyId = vacancyId.vacancyId;
            $rootScope.addFromAdvice.title = vacancyPosition;
            $rootScope.addFromAdvice.state = "candidate";
            $('.addFromAdvice').modal('show');
            $rootScope.candnotify = {};
            Candidate.getContacts({"candidateId": $scope.candidate.candidateId}, function (resp) {
                var email = "";
                angular.forEach(resp.objects, function (c) {
                    if (c.type == "email") {
                        email = c.value;
                    }
                });
                $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
            });
            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = $scope.candidate.fullName;
            //if ($localStorage.get("candnotify") == "false") {
            //    $rootScope.candnotify.send = false;
            //} else {
            //    $rootScope.candnotify.send = true;
            //}
        };

        vacancyStages.get(function(resp){
            $scope.customStages = resp.object.interviewStates;
            $rootScope.customStages = resp.object.interviewStates;
            $scope.updateCandidate();
        });

        $scope.updateCandidate = function(){
            $scope.showAddedLinks = false;
            $scope.showAddedFiles = false;
            $rootScope.loading = true;
            Candidate.one({"localId": $routeParams.id}, function (resp) {
                if (angular.equals(resp.status, "error")) {
                    notificationService.error($filter('translate')('candidate not found'));
                    $location.path('/candidates');
                    return;
                }
                if($rootScope.me.recrutRole == 'client' || $rootScope.me.recrutRole == 'freelancer' || $rootScope.me.recrutRole == 'researcher'){
                    if(resp.object.access == false){
                        $scope.limitedAccessCandidate();
                    }
                }
                //var actions = resp.object.actions.objects;
                //if (actions) {
                //    angular.forEach(actions, function() {
                //        for (var i = 0; i <= actions.length - 1; i++) {
                //            var action = actions[i];
                //            if (action.descr.length > 0 && (action.type != 'candidate_add_to_group' && action.type != 'candidate_remove_from_group' && action.type != 'candidate_add_file' && action.type != 'candidate_remove_file')) {
                //                $scope.lastMessage = action;
                //                break;
                //            }
                //        }
                //    });
                //}
                if ($scope.lastMessage == null) {
                    Service.history({
                        "page": {"number": 0, "count": 1},
                        type: "candidate_message",
                        "candidateId": resp.object.candidateId
                    }, function (res) {
                        if (res.objects != undefined && res.objects.length != 0) {
                            $scope.lastMessage = res.objects[0];
                        }

                    });
                }

                if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                    $scope.map.center.latitude = resp.object.region.lat;
                    $scope.map.center.longitude = resp.object.region.lng;

                    $scope.marker.coords.latitude = resp.object.region.lat;
                    $scope.marker.coords.longitude = resp.object.region.lng;
                }
                $scope.urlTaskId = getUrlVars($location.$$absUrl).task;
                //$location.hash('');
                var name = "";
                name = resp.object.fullName != undefined ? name + resp.object.fullName.replace(/\W+/g, '_') : "";
                if(resp.object.position.length > 1){
                    name = resp.object.position != undefined ? name + "_" + resp.object.position.replace(/\W+/g, '_') : "";
                }
                if (name.length > 0) {
                    $location.search($filter('transliteration')(name)).replace();
                }
                if (!resp.object.fullName && resp.object.source == 'add_from_hh') {
                    $rootScope.title = $filter('translate')("Hidden by hh") + " | CleverStaff";
                }
                else if (!resp.object.fullName) {
                    $rootScope.title = $filter('translate')("Hidden") + " | CleverStaff";
                }
                else {
                    $rootScope.title = resp.object.fullName + " | CleverStaff";
                }
                if (resp.object.interviews !== undefined) {
                    angular.forEach(resp.object.interviews, function (interview) {
                        if (interview.vacancyId.interviewStatus === undefined) {
                            interview.vacancyId.interviewStatus = "longlist,shortlist,interview,approved,notafit,declinedoffer"
                        }
                    })
                }
                $scope.candidate = resp.object;
                $rootScope.candidate = resp.object;
                $localStorage.set('candidateForTest', $rootScope.candidate);
                $scope.locationBeforeCustomFields = $location.$$path.replace('/candidates/' + $scope.candidate.localId, 'candidates');
                $localStorage.set('previousHistoryCustomFields', $scope.locationBeforeCustomFields);
                $scope.changeStatus = $scope.candidate.status;
                cascadeStages();

                $scope.imgWidthFunc();
                $rootScope.newTask.candidateId = $scope.candidate.candidateId;
                angular.forEach($scope.candidate.interviews, function(value){
                    value.vacancyId.interviewStatusNotTouchable = value.vacancyId.interviewStatus;
                    var array = value.vacancyId.interviewStatus.split(",");
                    angular.forEach($scope.customStages, function(resp){
                        if (value.state == resp.customInterviewStateId){
                            value.state = resp.name;
                            value.customInterviewStateId = resp.customInterviewStateId
                        }
                        angular.forEach(array,function(res){
                            if(resp.customInterviewStateId == res){
                                array[array.indexOf(resp.customInterviewStateId)] = resp.name;
                            }
                        });
                    });
                    value.vacancyId.interviewStatus = array.toString();
                    if(value.vacancyId.status != 'completed' && value.vacancyId.status != 'deleted' && value.vacancyId.status != 'canceled'){
                        $scope.participationInVacancy = true;
                    }else {
                        $rootScope.inactiveVacancies = true;
                    }
                });
                $rootScope.candidateForUpdateResume = resp.object;
                if($scope.candidate.files){
                    if($scope.candidate.files.length != undefined && $scope.candidate.files.length != 0){
                        angular.forEach($scope.candidate.files, function (val) {
                            if(val.url){
                                $scope.showAddedLinks = true;
                            }
                            if(!val.url){
                                $scope.showAddedFiles = true;
                            }
                            initDocuments(val);
                        });
                    }
                } else{
                    $scope.showAddedLinks = false;
                    $scope.showAddedFiles = false;
                }
                var homepages = [],
                    emails;
                $scope.countEmail = 0;
                angular.forEach($scope.candidate.contacts, function (contacts) {
                    if(contacts.type == 'homepage') {
                        homepages = contacts.value.split(/,/);
                    }else if(contacts.type == 'email'){
                        emails = contacts.value.split(/[\s,"/", ";"]+/);
                    }
                    if(contacts.type == 'email'){
                        $scope.countEmail = 1;
                    }
                });

                $scope.homepages = [],
                $scope.emails = [];

                angular.forEach(homepages, function (item) {
                   $scope.homepages.push(item.trim());
                });

                angular.forEach(emails, function (item) {

                    $scope.emails.push(item.trim());

                });
                //getcandidateproperties start
                Candidate.getCandidateProperties({candidateId: $scope.candidate.candidateId}, function (res) {
                    if(res.status == 'ok' && res.object) {

                        $scope.candidateProperties = res.object;

                        //setGroups start
                        if ($scope.candidate.groups !== undefined) {
                            if ($scope.candidateProperties.candidateGroups !== undefined) {
                                $scope.setGroups($scope.candidateProperties.candidateGroups, $scope.candidate.groups);
                            } else {
                                var emptyList = [];
                                $scope.setGroups(emptyList, $scope.candidate.groups);
                            }
                        } else {
                            var emptyList = [];
                            if ($scope.candidateProperties.candidateGroups != undefined) {
                                $scope.setGroups($scope.candidateProperties.candidateGroups, emptyList);
                            } else {
                                $scope.setGroups(emptyList, emptyList);
                            }
                        }
                        //setGroups end
                        //testAppointments start
                        if($rootScope.me.recrutRole == 'admin' || $rootScope.me.recrutRole == 'recruter') {
                                if($scope.candidateProperties.testAppointmentContents !== undefined) {
                                    $scope.totalTestsCount = $scope.candidateProperties.testTestTotaElementsl;
                                    $scope.tests = [];
                                    for(var iter = 0; iter < 3 && iter < $scope.candidateProperties.testAppointmentContents.length; iter++ ) {
                                        $scope.tests[iter] = $scope.candidateProperties.testAppointmentContents[iter];
                                    }
                                }else if (angular.equals(resp.status, "error")){
                                    notificationService.error(resp.message);
                                }
                        }
                        //testAppointments end
                        //updateCand links start
                        $scope.updateCandidateLinksNew = function(){
                            if ($scope.candidateProperties.candidateLinks !== undefined){
                                $scope.linkedCandidate = $scope.candidateProperties.candidateLinks;
                                angular.forEach($scope.linkedCandidate,function(res){
                                    $scope.linkedOneCandidate = res;
                                    if(res.resourseType == 'linkedin' ||
                                        res.resourseType == 'superJob' ||
                                        res.resourseType == 'workua' ||
                                        res.resourseType == 'trelloCardId' ||
                                        res.resourseType == 'rabotaua' ||
                                        res.resourseType == 'recruforce' ||
                                        res.resourseType == 'hh' ||
                                        res.resourseType == 'zoho_id' ||
                                        res.resourseType == 'firebird_id' ||
                                        res.resourseType == 'linkedin_d' ||
                                        res.resourseType == 'cvlv' ||
                                        res.resourseType == 'estaffId'){
                                        $scope.linked = true;
                                    }else if(res.resourseType == 'linkedinNew'){
                                        res.resourseType = 'linkedinNew' ? 'linkedin' : 'linkedin';
                                        $scope.linked = true;
                                    }
                                });
                            }
                        };
                        $scope.updateCandidateLinksNew();
                        //updateCand links end

                        //updateTasks start
                                $scope.candidateTasks = $scope.candidateProperties.taskContents;
                                if($scope.urlTaskId){
                                    $rootScope.responsiblePersonsEdit = [];
                                    angular.forEach($scope.candidateTasks, function(resp){
                                        if(resp.taskId == $scope.urlTaskId){
                                            $rootScope.editableTask = resp;
                                            $scope.showModalEditTaskToCandidate($rootScope.editableTask);
                                            $location.$$absUrl = $location.$$absUrl.split("&")[0];
                                        }
                                    });
                                    if($rootScope.editableTask && $location.$$absUrl.indexOf('&task=') == -1){
                                        $location.$$absUrl = $location.$$absUrl + '&task=' + $scope.urlTaskId;
                                        angular.forEach($rootScope.editableTask.responsiblesPerson,function(resp){
                                            angular.forEach($rootScope.persons,function(res){
                                                if(resp.responsible.userId == res.userId){
                                                    $rootScope.responsiblePersonsEdit.push(res);
                                                    res.notShown = true;
                                                    //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                                                }
                                            });
                                        });
                                        $('.editTaskInCandidate').modal('setting',{
                                            onHide: function(){
                                                $scope.urlTaskId = null;
                                                $location.$$absUrl = $location.$$absUrl.split("&")[0];
                                                $scope.$apply();
                                            }
                                        }).modal('show');
                                    }
                                }
                        //updateTasks end
                    }
                    //setGroups start
                    if ($scope.candidate.groups != undefined) {
                        var groupNameList = [];
                        angular.forEach($scope.candidate.groups, function (val, key) {
                            groupNameList.push(val.name);
                        });
                        $scope.setSelect2Group(groupNameList);
                    }
                    //setGroups end
                });
                //getcandidateproperties end

                $('#candidateEducation').html($scope.candidate.education);
                $('.candidateCoreSkills').html($scope.candidate.coreSkills);


                Service.history({
                    "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
                    "page": {"number": 0, "count": $scope.historyLimit},
                    "onlyWithComment": false
                }, function (res) {
                    historyButton($scope, res, Service, CacheCandidates);
                });


                $scope.objectId = resp.object.candidateId;
                $rootScope.candidateIdForVacancyId = resp.object.candidateId;
                $("#descr").html($scope.candidate.descr);
                //Candidate.progressUpdate($scope, false);
                $scope.candProgress();
                FileInit.initFileOption($scope, "candidate", undefined, $filter);
                FileInit.initFileOptionForEditFromResume($scope, "candidate");
                $scope.fileForSave = [];
                $scope.linksForSave = [];
                $rootScope.fileForSave = [];    /*For modal window*/

                FileInit.initVacancyTemplateInCandidateFileOption($scope, $rootScope, "", "", false, $filter);
                $scope.callbackFileTemplateInCandidate = function(resp, names) {
                    $scope.fileForSave.push({"fileId": resp, "fileName": names});
                    $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
                };
                $scope.removeFile = function(id) {
                    Candidate.removeFile({"candidateId": $scope.candidate.candidateId, "fileId": id}, function (resp) {
                        if (resp.status == "ok") {
                            $scope.getLastEvent();
                        }
                    });
                    $scope.updateCandidate();
                    angular.forEach($scope.fileForSave, function(val, ind) {
                        if (val.attId === id) {
                            $scope.fileForSave.splice(ind, 1);
                        }
                    });
                    if ($scope.candidate.files.length === 0) {
                        delete $scope.candidate.files;
                        Candidate.progressUpdate($scope, false);
                    }
                };
                $rootScope.removeFile = function(id) {
                    angular.forEach($rootScope.fileForSave, function(val, ind) {
                        if (val.attId === id) {
                            $rootScope.fileForSave.splice(ind, 1);
                        }
                    });
                };
                $scope.updateCandidateLinks = function(){
                    Candidate.getCandidateLinks({
                        "id": $scope.candidate.candidateId
                    },function(resp){
                        $scope.linkedCandidate = resp.object;
                        angular.forEach($scope.linkedCandidate,function(res){
                            $scope.linkedOneCandidate = res;
                            if(res.resourseType == 'linkedin' ||
                                res.resourseType == 'superJob' ||
                                res.resourseType == 'workua' ||
                                res.resourseType == 'trelloCardId' ||
                                res.resourseType == 'rabotaua' ||
                                res.resourseType == 'recruforce' ||
                                res.resourseType == 'hh' ||
                                res.resourseType == 'zoho_id' ||
                                res.resourseType == 'firebird_id' ||
                                res.resourseType == 'linkedin_d' ||
                                res.resourseType == 'cvlv' ||
                                res.resourseType == 'estaffId'){
                                $scope.linked = true;
                            }else if(res.resourseType == 'linkedinNew'){
                                res.resourseType = 'linkedinNew' ? 'linkedin' : 'linkedin';
                                $scope.linked = true;
                            }
                        });
                    });
                };
                $scope.updateTasks = function(){
                    Task.get({
                        //'creator': $rootScope.me.userId,
                        'candidateId': $scope.candidate.candidateId
                    },function(resp){
                        $scope.candidateTasks = resp.objects;
                        if($scope.urlTaskId){
                            $rootScope.responsiblePersonsEdit = [];
                            angular.forEach($scope.candidateTasks, function(resp){
                                if(resp.taskId == $scope.urlTaskId){
                                    $rootScope.editableTask = resp;
                                }
                            });
                            if($rootScope.editableTask && $location.$$absUrl.indexOf('&task=') == -1){
                                $location.$$absUrl = $location.$$absUrl + '&task=' + $scope.urlTaskId;
                                angular.forEach($rootScope.editableTask.responsiblesPerson,function(resp){
                                    angular.forEach($rootScope.persons,function(res){
                                        if(resp.responsible.userId == res.userId){
                                            $rootScope.responsiblePersonsEdit.push(res);
                                            res.notShown = true;
                                            //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                                        }
                                    });
                                });
                                $('.editTaskInCandidate').modal('setting',{
                                    onHide: function(){
                                        $scope.urlTaskId = null;
                                        $location.$$absUrl = $location.$$absUrl.split("&")[0];
                                        $scope.$apply();
                                    }
                                }).modal('show');
                            }
                        }
                    })
                };
                $rootScope.loading = false;
            }, function (err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });

        };
        $scope.editTagName = function (tagObject) {
            $rootScope.tagForEdit = {};
            $rootScope.tagForEdit.name = $(tagObject).parent().children().first().html();
            $scope.oldTagName = $rootScope.tagForEdit.name;
            angular.forEach($scope.candidate.groups, function (group) {
                if(group.name == $rootScope.tagForEdit.name) {
                    $rootScope.tagForEdit.id = group.candidateGroupId;
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/tag-name-edit.html',
                        size: '',
                        resolve: {

                        }
                    });
                }
            });
        };
        $rootScope.saveEditTagName = function () {
            var newGroupList = $scope.getSelect2Group().split(",");
            if(newGroupList.indexOf($rootScope.tagForEdit.name) === -1) {
                CandidateGroup.editGroup({candidateGroupId: $rootScope.tagForEdit.id, name: $rootScope.tagForEdit.name},function (resp) {
                    if(resp.status == 'ok') {
                        notificationService.success($filter('translate')('Tag_name_saved'));
                        var beforeEdit = $scope.getSelect2Group().split(",");
                        angular.forEach(beforeEdit, function (tagName, index) {
                            if( tagName == $scope.oldTagName) {
                                beforeEdit[index] = $rootScope.tagForEdit.name;
                                $scope.setSelect2Group(beforeEdit);
                                angular.forEach($scope.candidate.groups, function (group) {
                                    if(group.name == $scope.oldTagName) {
                                        group.name = $rootScope.tagForEdit.name;
                                        group.candidateGroupId = resp.object.candidateGroupId;
                                    }
                                });
                                $('a.select2-search-choice-edit').attr("title", $filter('translate')('Edit tag for all candidates'));
                                $('a.select2-search-choice-edit').off().on('click',function (e) {
                                    $scope.editTagName(e.currentTarget);
                                });
                            }
                        });
                        // $('.select2-search-choice').each(function () {
                        //     if($(this).children().first().html() == $scope.oldTagName) {
                        //         $(this).children().first().text($rootScope.tagForEdit.name)
                        //     }
                        //
                        // })
                    }else {
                        notificationService.error(resp.message);
                    }
                });
            }else {
                notificationService.error($filter('translate')('This tag has already assigned'));
            }

            $rootScope.closeModal();
        };
        Person.getAllPersons(function (resp) {
            $scope.persons = [];
            $rootScope.persons = [];
            $rootScope.personsNotChanged = [];
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                $scope.persons.push($scope.associativePerson[key]);
                $rootScope.persons.push($scope.associativePerson[key]);
                $rootScope.personsNotChanged.push($scope.associativePerson[key]);
            });
            //$rootScope.persons = $scope.persons;
        });

        $scope.imgWidthFunc = function(){
            var img = new Image();
            img.onload = function() {
                var width = this.width;
                var height = this.height;
                var minus = width - height;
                if(width >= height && minus > 40 && minus <=100){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if((width >= 300 && width <= 349) || width == height){
                    $('#page-avatar').css({'width': '100%', 'object-fit': 'fill', 'margin': 'inherit'});
                }else if(width >= 350){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto', 'margin': 'inherit'});
                }else if(width >= 266){
                    $('#page-avatar').css({'width': '100%', 'height': 'auto'});
                }else{
                    $('#page-avatar').css({'width': 'inherit', 'height': 'inherit', 'display': 'block', 'margin': '0 auto'});
                }
            };
            if($location.$$host == '127.0.0.1'){
                img.src = $location.$$protocol + '://' + $location.$$host + ':8080' + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }else{
                img.src = $location.$$protocol + '://' + $location.$$host + $scope.serverAddress + '/getapp?id=' + $scope.candidate.photo + '&d=' + $rootScope.me.personId;
            }
        };
        $scope.pathName = "candidate";
        $scope.callbackFile = function (resp, name) {
            if (!$scope.candidate.files) {
                $scope.candidate.files = [];
            }
            $scope.candidate.files.push(resp);
            if ($scope.candidate.files.length > 0) {
                Candidate.progressUpdate($scope, false);
            }
            $scope.getLastEvent();
        };

        $scope.removeFile = function (id) {
            Candidate.removeFile({"candidateId": $scope.candidate.candidateId, "fileId": id}, function (resp) {
                if (resp.status == "ok") {
                    $scope.getLastEvent();
                }
            });
            $scope.updateCandidate();
            if ($scope.candidate.files.length === 0) {
                delete $scope.candidate.files;
                Candidate.progressUpdate($scope, false);
            }
        };

        $rootScope.changeResponsibleUserInCandidate = {
            id: "",
            comment: ""
        };

        //$scope.showModalAddCommentToCandidate = function () {
        //    $('.addMessageInCandidate').modal('show');
        //};
        $scope.showModalAddCommentToCandidate = function () {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-comment-candidate.html',
                size: '',
                resolve: {

                }
            });
            $(document).unbind("keydown").keydown(function(e) {
                if (e.ctrlKey == true && e.which == 13) {
                    $rootScope.addCommentInCandidate();
                }
            });
        };

        $rootScope.commentCandidate = {
            comment: "",
            loading: false
        };
        $rootScope.addCommentInCandidate = function () {
            if ($rootScope.commentCandidate.comment != undefined && $rootScope.commentCandidate.comment.length > 0) {
                $rootScope.commentCandidate.loading = true;
                Candidate.setMessage({
                    comment: $rootScope.commentCandidate.comment,
                    candidateId: $scope.candidate.candidateId
                }, function (resp) {
                    //$scope.lastMessage = resp.object.actions.objects[0];
                    $rootScope.commentCandidate.loading = false;
                    //$('.addMessageInCandidate').modal('hide');
                    $rootScope.closeModal();
                    $rootScope.commentCandidate.comment = null;
                    if (resp.status == 'ok') {
                        $scope.getLastEvent();
                    }
                }, function (error) {
                    $rootScope.commentCandidate.loading = false;
                    notificationService.error(error.message);
                });
            } else {
                notificationService.error($filter('translate')('enter a comment'));
            }
        };

        $scope.showAddResponsibleUser = function (id) {
            //$('.responsibleOfCandidate.modal').modal('show');
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/candidate-adding-responsible.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.changeResponsibleUserInCandidate.id = id;
        };

        $rootScope.saveResponsibleUserInCandidate = function () {
            if (!$rootScope.clickedSaveResponsibleUserInCandidate) {
                $rootScope.clickedSaveResponsibleUserInCandidate = true;
                Candidate.setResponsible({
                    candidateId: $scope.candidate.candidateId,
                    personId: $rootScope.changeResponsibleUserInCandidate.id,
                    comment: $rootScope.changeResponsibleUserInCandidate.comment,
                    lang: $translate.use()
                }, function (resp) {
                    if (resp.status == "ok") {
                        $scope.candidate.responsible = resp.object.responsible;
                        $scope.responsibleName = $scope.candidate.responsible.fullName;
                        notificationService.success($filter('translate')('set responsible'));
                        $scope.getLastEvent();
                    }
                    $rootScope.closeModal();
                    //$('.responsibleOfCandidate.modal').modal('hide');
                    $rootScope.changeResponsibleUserInCandidate.id = "";
                    $rootScope.changeResponsibleUserInCandidate.commnet = "";
                    $rootScope.clickedSaveResponsibleUserInCandidate = false;

                }, function (err) {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };
        $scope.showChangeStatusOfCandidate = function (status) {
            //$('.changeStatusOfCandidate.modal').modal('show');
             $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/candidate-change-status-in-candidate.html',
                 size: '',
                 resolve: function(){

                 }
            });

            $rootScope.changeStateInCandidate.status = status;
            $rootScope.changeStateInCandidate.status_old = $scope.candidate.status;
            $rootScope.changeStateInCandidate.placeholder = $filter('translate')('write_a_comment_why_do_you_change_candidate_status');

        };
        $rootScope.saveStatusOfCandidate = function () {
            if ($rootScope.changeStateInCandidate.status != "" && !$rootScope.clickedSaveStatusOfCandidate) {
                $rootScope.clickedSaveStatusOfCandidate = true;
                Candidate.changeState({
                    candidateId: $scope.candidate.candidateId,
                    comment: $rootScope.changeStateInCandidate.comment,
                    candidateState: $rootScope.changeStateInCandidate.status
                }, function (resp) {
                    if (resp.status == "ok") {
                        $scope.candidate.status = resp.object.status;
                        $scope.changeStatusModel = $scope.candidate.status;
                        notificationService.success($filter('translate')('set_status_1') + $scope.candidate.fullName + $filter('translate')('set_status_2'));
                        if($scope.onlyComments){
                            $scope.showCommentsFirstTime();
                        }else{
                            $scope.showDetails();
                        }
                    }
                    $rootScope.clickedSaveStatusOfCandidate = false;
                    $rootScope.closeModal();
                    //$('.changeStatusOfCandidate.modal').modal('hide');
                    $rootScope.changeStateInCandidate.status = "";
                    $rootScope.changeStateInCandidate.comment = "";
                }, function (err) {
                    $('.changeStatusOfCandidate.modal').modal('hide');
                    $rootScope.clickedSaveStatusOfCandidate = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };

        $scope.toEdit = function (id) {
            if($rootScope.me.recrutRole != 'client'){
                if($scope.candidate.status != 'archived'){
                    Service.toEditCandidate(id);
                }else{
                    notificationService.error($filter('translate')('Remote candidates can not be edited.'));
                }
            }else{
                notificationService.error($filter('translate')('Only recruiters, admins and freelancers can editing candidates'));
            }
        };

        $rootScope.changeStatusOfInterviewInVacancy = {
            candidate: {},
            comment: "",
            status: "",
            date: null,
            exportgoogle: false
        };
        $rootScope.addCandidateInInterview = {
            id: "",
            comment: "",
            status: "longlist",
            buttonClicked: false,
            date: null,
            showSelect: "",
            showText: false,
            text: "",
            addedInVacancy: false,
            select2Obj: null
        };

        $scope.showChangeStatus = function (vacancyId) {
            var popWithstages = 'changeStatePop' + vacancyId,
                labelsPosition = ($('#' + popWithstages).children().length * 25)/2;

            $('#' + popWithstages).css({
                "top" : "-" + labelsPosition + "px"
            });


            if ($scope.showChangeStatusValue == vacancyId) {
                $scope.showChangeStatusValue = null;
            } else {
                $scope.showChangeStatusValue = vacancyId;
            }
        };

        $scope.toChangeStatusInterview = function (status, vacancyId, interviewStatusNotTouchable, vacancyPosition, vacancy) {
            var array = interviewStatusNotTouchable.split(",");
            var vacancyStatus = Vacancy.interviewStatusNew();
            if (vacancyStatus) {
                angular.forEach(vacancyStatus, function (v) {
                    if (v.status) {
                        angular.forEach(v.status, function (s) {
                            angular.forEach($scope.customStages, function(resp){
                                if(resp.name == status){
                                    angular.forEach(array, function(res){
                                        if(res == resp.customInterviewStateId){
                                            s = resp;
                                        }
                                    });
                                }
                            });
                            if (status == s.value) {
                                $rootScope.changeStatusOfInterviewInVacancy.status = s;
                            }
                        });
                    }
                });
            }
            if ($rootScope.changeStatusOfInterviewInVacancy.status == undefined) {
                $rootScope.changeStatusOfInterviewInVacancy.status = {
                    value: status,
                    withDate: false,
                    defaultS: true,
                    single: false,
                    added: true,
                    active_color: "longlist_color",
                    useAnimation: false,
                    count: 0,
                    forAdd: true
                };
            }

            $rootScope.changeStatusOfInterviewInVacancy.vacancyId = vacancyId;
            $rootScope.changeStatusOfInterviewInVacancy.position = vacancyPosition;
            $rootScope.changedStatusVacancy = vacancy;
            if ($scope.candidate.state == 'approved' && $rootScope.me.recrutRole != 'admin') {
                notificationService.error($filter('translate')('Transfer from the status of approved can only Admin'));
                return;
            }
            $rootScope.changeStatusOfInterviewInVacancy.candidate.candidateId = $scope.candidate;
            $rootScope.changeStatusOfInterviewInVacancy.approvedCount = $scope.approvedCount;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/candidate-change-status-in-vacancy.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $scope.modalInstance.closed.then(function() {
                $rootScope.candnotify.show = false;
                tinyMCE.remove()
            });
            $scope.modalInstance.opened.then(function(){
                setTimeout(function(){
                    createEmailTemplateFunc($scope,$rootScope,'changeStatusCandidateInVacancyMCE', Mail, $location);
                    $rootScope.changeTemplateInChangeStatusCandidate($rootScope.changeStatusOfInterviewInVacancy.status);
                    $(".changeStatusOfInterviewInVacancyPick").datetimepicker({
                        format: "dd/mm/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        autoclose: true,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.changeStatusOfInterviewInVacancy.date = data.date;
                    }).on('hide', function () {
                        if ($('.changeStatusOfInterviewInVacancyPick').val() == "") {
                            $rootScope.changeStatusOfInterviewInVacancy.date = null;
                        }else{
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate').getTime(), true));
                            $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate').getTime(), true));
                            tinyMCE.get('changeStatusCandidateInVacancyMCE').setContent($rootScope.emailTemplateInModal.text);
                        }
                        $('.changeStatusOfInterviewInVacancyPick').blur();
                    });
                    $(".changeStatusOfInterviewEmployed").datetimepicker({
                        format: "dd/mm/yyyy",
                        startView: 2,
                        minView: 2,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.changeStatusOfInterviewEmployed.date = data.date;
                    }).on('hide', function () {
                        if ($('.changeStatusOfInterviewEmployed').val() == "") {
                            $rootScope.changeStatusOfInterviewEmployed.date = null;
                        }
                        $('.changeStatusOfInterviewEmployed').blur();
                    });
                },0);
            });

            $scope.showChangeStatusValue = null;
            $rootScope.candnotify = {};
            var email = "";
            angular.forEach($scope.candidate.contacts, function (c) {
                if (c.type == "email") {
                    email = c.value;
                }
            });
            $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
            $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];

            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = $scope.candidate.fullName;
            if (status == 'approved') {
                $rootScope.showEmployedFields = true;
                $rootScope.probationaryPeriod = null;
            } else {
                $rootScope.showEmployedFields = false;
            }
            //$rootScope.candnotify.send = $localStorage.get("candnotify") != "false";
        };

        $rootScope.changeStatusInAddCandidate = function () {
            if (!$rootScope.addCandidateInInterviewbuttonClicked) {
                var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                var candidateObj = $rootScope.addCandidateInInterview;
                var date = $('.addCandidateInInterviewPicker').datetimepicker('getDate') != null && candidateObj.status.withDate ? $('.addCandidateInInterviewPicker').datetimepicker('getDate') : null;

                if (changeObj.candidate.state == 'approved' && $rootScope.me.recrutRole != 'admin') {
                    $rootScope.errorMessageForAddCandidate.text = $filter('translate')('Transfer from the status of approved can only Admin');
                    $rootScope.errorMessageForAddCandidate.show = true;
                    return;
                }
                changeObj.status = candidateObj.status;
                changeObj.comment = candidateObj.comment;
                $rootScope.addCandidateInInterviewbuttonClicked = true;
                $rootScope.saveStatusInterviewInVacancy(date);
                $('.addCandidateInInterviewPicker').val("");
                $('.addCandidateInInterview.modal').modal('hide');
            }
        };

        $rootScope.transferCandidateInOtherVacancyStatus = function () {
            var status = $("#candidateAddToVacancy").select2('data').status;
            if (status == 'approved' && $rootScope.me.recrutRole != 'admin') {
                $rootScope.errorMessageForAddCandidate.text = $filter('translate')('Transfer from the status of approved can only Admin');
                $rootScope.errorMessageForAddCandidate.show = true;
                return;
            }


            $rootScope.changeStatusOfInterviewInVacancy = $rootScope.addCandidateInVacancy;
            $rootScope.changeStatusOfInterviewInVacancy.vacancyId = $("#candidateAddToVacancy").select2('data').id;
            var data = $('.addCandidateInvacancyPicker').datetimepicker('getDate') != null && $rootScope.addCandidateInVacancy.status.withDate
                ? $('.addCandidateInvacancyPicker').datetimepicker('getDate') : null;
            $rootScope.saveStatusInterviewInVacancy(data);
            $('.addCandidateInVacancy').modal('hide');
            $rootScope.candidateAddedInVacancy = false;
            $('.addCandidateInvacancyPicker').val("");
        };
        $scope.initDirective = {};

        $rootScope.saveStatusInterviewInVacancy = function (customDate, flag) {
            if(!$rootScope.candnotify.sendMail && flag){
                notificationService.error($filter('translate')("enter_email_candidate"));
                return;
            }
                if (!$rootScope.clickedSaveStatusInterviewInVacancy) {
                $rootScope.clickedSaveStatusInterviewInVacancy = true;
                $rootScope.changeStatusOfInterviewInVacancy.errorMessage = false;
                var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                if (changeObj.status.value == 'declinedoffer' && changeObj.comment == '') {
                    $rootScope.changeStatusOfInterviewInVacancy.errorMessage = true;
                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                    //return;
                }
                if ($rootScope.showEmployedFields) {
                    changeObj.date = $('.changeStatusOfInterviewEmployed').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewEmployed').datetimepicker('getDate') : customDate != undefined ? customDate : null;
                } else {
                    changeObj.date = $('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewInVacancyPick').datetimepicker('getDate') : customDate != undefined ? customDate : null;
                }
                if ($rootScope.showEmployedFields) {
                    Vacancy.editInterview({
                        "personId": $scope.personId,
                        "vacancyId": $rootScope.changeStatusOfInterviewInVacancy.vacancyId,
                        "candidateId":  $scope.candidate.candidateId,
                        "interviewId": changeObj.candidate.interviewId,
                        "interviewState": changeObj.status.customInterviewStateId ? changeObj.status.customInterviewStateId : changeObj.status.value,
                        "comment": changeObj.comment,
                        "lang": $translate.use(),
                        "probationaryPeriod": $rootScope.probationaryPeriod,
                        "dateEmployee": changeObj.date != null ? changeObj.date.getTime() : null
                    }, function (resp) {
                        if (resp.status == "ok") {
                            if(changeObj.status.customInterviewStateId){
                                var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                            }else{
                                var id = resp.object.interviewId + changeObj.status.value;
                            }
                            $scope.showChangeStatusValue = null;
                            //angular.forEach($scope.candidate.interviews, function (i) {
                            //    if (i.vacancyId.vacancyId == $rootScope.changeStatusOfInterviewInVacancy.vacancyId) {
                            //        i.state = changeObj.status.value;
                            //    }
                            //});
                            $rootScope.clickedSaveStatusInterviewInVacancy = false;
                            if ((changeObj.status.withDate || changeObj.status.type == 'interview') && changeObj.date && $rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                                var candnotify = $rootScope.candnotify;
                                Vacancy.sendInterviewCreateMail({
                                        "email": candnotify.sendMail,
                                        "vacancyId": $rootScope.changeStatusOfInterviewInVacancy.vacancyId,
                                        "candidateId": changeObj.candidate.candidateId.candidateId,
                                        "fullName": candnotify.fullName,
                                        "date": changeObj.date,
                                        "lang": $translate.use()
                                    },
                                    function (resp) {
                                    });
                            }
                            $rootScope.changeStatusOfInterviewInVacancy = {
                                candidate: {},
                                comment: "",
                                status: "",
                                date: null,
                                exportgoogle: false
                            };
                            $rootScope.addCandidateInInterviewbuttonClicked = false;
                            $rootScope.closeModal();
                            $('.changeStatusOfInterviewInVacancyPick').val("");
                            $scope.updateCandidate();
                            $scope.getLastEvent();
                        } else if (resp.status == "error") {
                            $rootScope.clickedSaveStatusInterviewInVacancy = false;
                            notificationService.error(resp.message);
                        }
                    }, function (err) {
                        $scope.showChangeStatusValue = null;
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $rootScope.addCandidateInInterviewbuttonClicked = false;
                    });
                }else{
                    Vacancy.editInterview({
                        "personId": $scope.personId,
                        "vacancyId": $rootScope.changeStatusOfInterviewInVacancy.vacancyId,
                        "candidateId": $scope.candidate.candidateId,
                        "interviewState": changeObj.status.name ? changeObj.status.customInterviewStateId : changeObj.status.value,
                        "comment": changeObj.comment,
                        "date": changeObj.date != null ? changeObj.date.getTime() : null,
                        "lang": $translate.use()
                    }, function (resp) {
                        if (resp.status == "ok") {
                            var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                            if(changeObj.status.customInterviewStateId){
                                var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                            }else{
                                var id = resp.object.interviewId + changeObj.status.value;
                            }
                            $scope.showChangeStatusValue = null;
                            //angular.forEach($scope.candidate.interviews, function (i) {
                            //    if (i.vacancyId.vacancyId == $rootScope.changeStatusOfInterviewInVacancy.vacancyId) {
                            //        i.state = changeObj.status.value;
                            //    }
                            //});
                            $rootScope.clickedSaveStatusInterviewInVacancy = false;
                            if ($rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                                var candnotify = $rootScope.candnotify;
                                var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                                Mail.sendMailByTemplateVerified({
                                    toEmails: candnotify.sendMail,
                                    vacancyId: $rootScope.changedStatusVacancy ? $rootScope.changedStatusVacancy.vacancyId:$rootScope.VacancyAddedInCandidate.vacancyId,
                                    candidateId: $scope.candidate.candidateId,
                                    fullName: $scope.candidate.fullName,
                                    email: $rootScope.emailTemplateInModal.email,
                                    date: changeObj.date != null ? changeObj.date.getTime() : null,
                                    lang: $scope.lang,
                                    template: {
                                        type: $rootScope.emailTemplateInModal.type,
                                        title: $rootScope.emailTemplateInModal.title,
                                        text: $rootScope.emailTemplateInModal.text,
                                        fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                        fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                                    }
                                }, function (resp) {
                                    if(resp.status == 'ok'){
                                        notificationService.success($filter('translate')('Letter sent'));
                                        $rootScope.closeModal();
                                    }else{
                                        notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                                    }
                                });
                            }
                            $rootScope.changeStatusOfInterviewInVacancy = {
                                candidate: {},
                                comment: "",
                                status: "",
                                date: null,
                                exportgoogle: false
                            };
                            $rootScope.addCandidateInInterviewbuttonClicked = false;
                            $rootScope.closeModal();
                            $('.changeStatusOfInterviewInVacancyPick').val("");
                            $scope.updateCandidate();
                            $scope.getLastEvent();
                        } else if (resp.status == "error") {
                            $rootScope.clickedSaveStatusInterviewInVacancy = false;
                            notificationService.error(resp.message);
                        }
                    }, function (err) {
                        $scope.showChangeStatusValue = null;
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $rootScope.addCandidateInInterviewbuttonClicked = false;
                    });
                }
            }
        };
        $scope.changeTestStatus = function (appointmentId, status) {
            Test.editAppointment({appointmentId: appointmentId, passed: status}, function (resp) {
            });
        };
        //Candidate.getParseEmailData(function(resp){
        //    $scope.emailData = resp.objects;
        //});
        $scope.initDirectiveVar = {
            valiable: "asdasd",
            test: 0
        };
        $scope.close_modal = function () {
            $scope.show_modal = false;
        };
        $('.ui.dropdown').dropdown();
        $scope.showFastChangeStatus = $localStorage.get("showFastChangeStatus") != undefined ? $localStorage.get("showFastChangeStatus") : true;
        $scope.changeShowFastChangeStatus = function (change) {
            $scope.showFastChangeStatus = change;
            $localStorage.set("showFastChangeStatus", change);
        };
        $scope.changeCommentFlag = function(history){
            history.editCommentFlag = !history.editCommentFlag;
            $scope.editComment = history.descr;
        };
        $scope.changeComment = function(action, comment){
            if(comment && comment.length > 0) {
                Action.editAction({"comment": comment, "actionId": action.actionId}, function(resp){
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    }
                    else {
                        action.editCommentFlag = false;
                        action.descr = resp.object.descr;
                        action.new_komment = '';
                        action.dateEdit = resp.object.dateEdit;
                    }
                });
            } else {
                notificationService.error($filter('translate')('enter a comment'))
            }

        };

        $scope.showDeleteComment = function(resp) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-comment-candidate.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $rootScope.commentRemove = resp;
            $rootScope.commentRemoveId = resp.actionId;
        };

        $rootScope.deleteComment = function() {
            Action.removeMessageAction({
                actionId: $rootScope.commentRemoveId
            },function(resp){
                if (resp.status === "ok") {
                    //Service.history();
                    $scope.showComments();
                    notificationService.success($filter('translate')('Comment removed'));
                    if(!$scope.onlyComments){
                        $scope.getLastEvent();
                    }
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $rootScope.closeModal();
            })
        };
        $scope.showAddLinkFunc = function(){
            $scope.showAddLink = true;
        };
        $scope.closeAddLinkFunc = function(){
            $scope.showAddLink = false;
            $scope.addLinkToCandidate.name = null;
            $scope.addLinkToCandidate.url = null;
            $scope.addLinkErrorShow = false;
        };
        $scope.addLinkInCandidate = function(){
            if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
                if($rootScope.me.recrutRole != 'client'){
                    Candidate.addLink({
                        "candidateId": $scope.candidate.candidateId,
                        "name" : $scope.addLinkToCandidate.name,
                        "url" : $scope.addLinkToCandidate.url
                    }, function (resp){
                        if(resp.status === 'ok'){
                            $scope.addLinkToCandidate.name = null;
                            $scope.addLinkToCandidate.url = null;
                            $scope.addLinkErrorShow = false;
                            $scope.showAddLink = false;
                            //$scope.candidate.files.push(resp.object);
                            $scope.updateCandidate();
                            notificationService.success($filter('translate')('history_info.added_link'));
                        } else{
                            notificationService.error(resp.message);
                        }
                    });
                }else{
                    notificationService.error($filter('translate')('This feature is available only to administrators and recruiters'));
                }
            } else{
                $scope.addLinkErrorShow = true;
                if(!$scope.addLinkToCandidate.name)
                notificationService.error($filter('translate')('Enter a URL name'));
            }
        };
        $scope.showCommentsFirstTime = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            Service.history({
                "page": {"number": 0, "count": 5},
                "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
                "onlyWithComment":false
            }, function(res) {
                $scope.historyLimit = res.size;
                $scope.historyTotal = res.total;
                $scope.history = res.objects;
                $scope.onlyComments = false;
            });
        };
        $scope.showComments = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            $scope.historyLimit = 5;
            Service.history({
                "vacancyId": $scope.vacancy != undefined ? $scope.vacancy.vacancyId : null,
                "page": {"number": 0, "count": 5},
                "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
                "onlyWithComment":true
            }, function(res) {
                $scope.showHistoryForPrint = true;
                $scope.historyLimit = res.size;
                $scope.historyTotal = res.total;
                $scope.history = res.objects;
                angular.forEach($scope.history, function(resp){
                    $scope.countComments++
                });
                $scope.onlyComments = true;
                $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
                //$("html, body").animate({ scrollTop: $(document).height() }, "slow");
            });
        };
        $scope.showDetails = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            $scope.historyLimit = 5;
            Service.history({
                "page": {"number": 0, "count": 5},
                "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
                "onlyWithComment":false
            }, function(res) {
                var keepGoing = true;
                angular.forEach($scope.history, function(val) {
                    if(keepGoing) {
                        if(val.type == 'vacancy_message' ||
                            val.type == 'candidate_message' ||
                            val.type == 'interview_message' ||
                            val.type == 'client_message'){
                            $scope.showHistoryForPrint = true;
                            keepGoing = false;
                        }
                    }
                });
                $scope.historyLimit = res.size;
                $scope.historyTotal = res.total;
                $scope.history = res.objects;
                $scope.onlyComments = false;
                $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
                //$("html, body").animate({ scrollTop: $(document).height() }, "slow");
            });
        };
        $scope.showCommentsSwitch = function () {
            if($scope.onlyComments) {
                $scope.showDetails();
            }  else {
                $scope.showComments();
            }
        };
        $scope.removeLinkedinConnect = function(resourseType){
            $scope.resourseType = resourseType;
            angular.forEach($scope.linkedCandidate,function(resp){
                if(resp.resourseType == resourseType){
                    Candidate.removeCandidateLink({
                        "id": resp.linkId
                    },function(res){
                        if(res.status == 'error'){
                            notificationService.error(res.message);
                        }else{
                            $scope.updateCandidateLinks();
                            $scope.linked = false;
                        }
                    })
                }
            });
        };
        $scope.showEditFileNameFunc = function(file){
            file.showEditFileName = !file.showEditFileName;
            file.showMenuEdDelFile = !file.showMenuEdDelFile;
            $scope.showMenuEdDelFile = false;
        };
        $scope.editFileName = function(data){
            File.changeFileName({
                "fileId":data.fileId,
                "name":data.fileName
            },function(resp){
                if(resp.status == 'ok'){
                    data.showEditFileName = false;
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.MenuEdDelFile = function(file){
            file.showMenuEdDelFile = true;
            $('body').mouseup(function (e) {
                var element = $(".editFileMenu");
                if ($(".editFileMenu").has(e.target).length == 0) {
                    file.showMenuEdDelFile = false;
                    $(document).off('mouseup');
                    $scope.$apply();
                }
            });
        };

        $scope.toggleDescriptionFunc = function (param) {
            var elem = $('div.content-description');
            var titleElem = $('.candidate-profile-rezume .centerBar .description h4');
                if($scope.toggleDescription || param == 'expand') {
                    elem.css({'max-height': 'none'});
                    elem.toggleClass('showAfter');
                    $scope.toggleDescription = false;
                    titleElem.prop('title', $filter('translate')('Hide full description'));
                } else {
                    elem.css({'max-height': '100px'});
                    elem.toggleClass('showAfter');
                    $scope.toggleDescription = true;
                    titleElem.prop('title', $filter('translate')('Show full description'));
                }
        };


        $('body').mouseup(function (e) {
            var element = $(".clever-window");
            if ($(".clever-window").has(e.target).length == 0) {
                $scope.showRegion2Map = false;
                $(document).off('mouseup');
                $scope.$apply();
            }
        });
        $scope.roundMinutes = function(date) {
            date.setHours(date.getHours());
            date.setMinutes(0);
            return date;
        };
        setTimeout(function(){
        $(".withoutTimeTask").datetimepicker({
            format: "dd/mm/yyyy HH:00",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        }).on('changeDate', function (data) {
            $rootScope.editableTask.targetDate = $('.withoutTimeTask').datetimepicker('getDate');
            $scope.roundMinutes($rootScope.editableTask.targetDate);
            Task.changeTargetDate({
                "taskId": $rootScope.editableTask.taskId,
                "date":$rootScope.editableTask.targetDate
            }, function(resp){
                $scope.updateTasks();
                $scope.getLastEvent();
            })
        }).on('hide', function () {
            if ($('.withoutTimeTask').val() == "") {
                $rootScope.editableTask.date = "";
            }
            $('.withoutTimeTask').blur();
        });

        //$scope.showModalAddTaskToCandidate = function () {
        //    $rootScope.responsiblePersons = [];
        //    $('.addTaskInCandidate').modal('show');
        //};
        $scope.showModalAddTaskToCandidate = function (size) {
            $rootScope.responsiblePersons = [];
            angular.forEach($rootScope.persons,function(res){
                    res.notShown = false;
            });
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/adding-task.html',
                size: size,
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $scope.modalInstance.opened.then(function() {
                setTimeout(function(){
                    $(".changeDateNewTask").datetimepicker({
                        format: "dd/mm/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use(),
                        initialDate: new Date(),
                        startDate: new Date()
                    }).on('changeDate', function (data) {
                        $rootScope.newTask.targetDate = $('.changeDateNewTask').datetimepicker('getDate');
                        function roundMinutes(date) {

                            date.setHours(date.getHours() + Math.round(date.getMinutes()/60));
                            date.setMinutes(0);

                            return date;
                        }
                        // $scope.roundMinutes($rootScope.newTask.targetDate)
                    }).on('hide', function () {
                        if ($('.changeDateNewTask').val() == "") {
                            $rootScope.newTask.date = "";
                        }
                        $('.changeDateNewTask').blur();
                    });
                },1)
            });
        };
        $scope.showModalConfirmationResumeUpdate = function(){
            $('.confirmationResumeUpdate.modal').modal('show');
        };
        $scope.showModalConfirmationResumeEdit = function(file){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/candidate-replace-with-resume.html',
                size: ''
            });
            $rootScope.editResumeFile = file;
        };
        $rootScope.changeCandidateFromExistingResume = function(){
            Candidate.updateFromFile({
                candidateId: $rootScope.candidateForUpdateResume.candidateId,
                fileId: $rootScope.editResumeFile.fileId
            },function(resp){
                if(resp.status == 'ok'){
                    $scope.updateCandidate();
                    $rootScope.closeModal();
                }else{
                    notificationService.error(resp.message);
                }
            })
        };
        $scope.showModalResume = function(file){
            showModalResume(file,$scope,$rootScope,$location,$sce,$uibModal);
        };
        $rootScope.closeModalResume = function(){
            $rootScope.closeModal();
        };
        $scope.downloadDoc = function(){
            $scope.loading = true;
            Candidate.getCV({"localId": $scope.candidate.localId},function(resp){
                if(resp.status == 'ok'){
                    $scope.loading = false;
                    pdfId = resp.object;
                    $('#downloadDoc')[0].href = '/hr/' + 'getapp?id=' + pdfId;
                    $('#downloadDoc')[0].click();
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        };

        $rootScope.changeTabOnTask = function(val){
            if (val == "Task") {
                $rootScope.editableTask.type = 'Task';
            } else if (val == "Call") {
                $rootScope.editableTask.type = 'Call';
            } else if (val == "Meeting") {
                $rootScope.editableTask.type = 'Meeting';
            }
            $rootScope.editNameTask(true);
            $scope.updateTasks();
        };
        $rootScope.changeTabOnTaskForNewTask = function(val){
            if (val == "Task") {
                $rootScope.newTask.type = 'Task';
            } else if (val == "Call") {
                $rootScope.newTask.type = 'Call';
            } else if (val == "Meeting") {
                $rootScope.newTask.type = 'Meeting';
            }
            $scope.updateTasks();
        };

        //$scope.deleteComment = function(action){
        //    Action.removeMessageAction({"actionId": action.actionId}, function(resp){
        //        if (resp.status && angular.equals(resp.status, "error")) {
        //            notificationService.error(resp.message);
        //        }
        //    });
        //};
    });
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        $scope.addOurEmployee = function (size) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-add-candidate.html',
                size: size,
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
        };
        function cascadeStages() {
            setTimeout(function () {
                angular.forEach($scope.candidate.interviews, function (interview, index) {
                    var popWithstages = 'changeStatePop' + interview.vacancyId.vacancyId;
                    $('#' + popWithstages).children().each(function (index) {
                        var stageName = $(this).attr('id');
                        var isStandartStageRefuse = (stageName == 'notafit' || stageName == 'declinedoffer' || stageName == 'is_not_looking_for_job' || stageName == 'no_response' || stageName == 'no_contacts' || stageName == 'accepted_counter_offer' || stageName == 'found_another_job');
                        if(isStandartStageRefuse) {
                            $(this).addClass('refusal')
                        } else {
                            if(stageName !== undefined) {
                                for(var i = $scope.customStages.length; i--; i > 0) {
                                    if($scope.customStages[i].type == 'refuse' && $scope.customStages[i].name == stageName) {
                                        $(this).addClass('refusal');
                                        break;
                                    }
                                }
                            }
                        }
                    })


                });
            },0);

        }
        $scope.showRefusal = function (id) {
            var popWithstages = 'changeStatePop' + id;


            $('#' + popWithstages).find('.refusal').each(function () {
                $('#' + popWithstages).append(this);
                $(this).animate({height: '25px' }, 100);
            });
        };

        $scope.hideRefusal = function (id) {
            var popWithstages = 'changeStatePop' + id;
            $('#' + popWithstages).find('.refusal').each(function () {
                $(this).animate({height: '0px' }, 100);
            });
        };

        ///////////////////////////////////////////////////////////////Email chat with candidate

        $scope.openChat = function(){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/candidate-email-chat.html',
                size: '',
                resolve: {

                }
            });
        };
        $scope.gotoBottom = function() {
            document.getElementById('history').scrollIntoView()
        };
        $scope.limitedAccessCandidate = function(){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/limited-access-candidate.html',
                size: '',
                backdrop: 'static',
                resolve: {

                }
            });
        };

        ////////////////////////////////////////////////////////////End of email chat with candidate
        ///////////////////////////////////////////////////////////////Sent Email candidate
        $rootScope.emailTemplateInModal = {
            text: "Hi [[candidate name]]!<br/><br/>--<br/>Best, <br/>[[recruiter's name]]"
        };
        $scope.showCandidateSentEmail = function(){
            if($rootScope.me.emails.length == 0){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/no-synch-email.html',
                    size: '',
                    resolve: {

                    }
                });
            }else{
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/candidate-send-email.html',
                    size: '',
                    resolve: {

                    }
                });
                $scope.modalInstance.closed.then(function() {
                    tinyMCE.remove();
                });
                $scope.modalInstance.opened.then(function(){
                    setTimeout(function(){
                        tinymce.init({
                            selector: '#modalMCE',
                            mode: 'exact',
                            theme: "modern",
                            height: 145,
                            language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                            browser_spellcheck: true,
                            menubar: false,
                            statusbar: false,
                            theme_advanced_resizing: true,
                            plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                                "searchreplace visualblocks visualchars code fullscreen",
                                "insertdatetime media nonbreaking save table directionality",
                                "template paste textcolor  "],
                            fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                            toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                            image_advtab: true,
                            toolbar_items_size: 'small',
                            relative_urls: false,
                            setup: function (ed) {
                                ed.on('SetContent', function (e) {

                                });
                                ed.on('change', function(e) {
                                    $rootScope.emailTemplateInModal.text = tinyMCE.get('modalMCE').getContent();
                                });
                            }
                        });
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $scope.candidate.fullName);
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                        setTimeout(function(){
                            tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                        },100);
                    },0);
                });
                angular.forEach($scope.candidate.contacts,function(resp){
                    if(resp.type == 'email'){
                        $rootScope.emailToSend = resp.value;
                    }
                });
            }
        };
        FileInit.initVacancyTemplateFileOption($scope, "", "", false, $filter);
        $scope.callbackFileForTemplate = function(resp, names) {
            $scope.fileForSave.push({"fileId": resp, "fileName": names});
            $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
        };
        $rootScope.addEmailFromWhatSend = function(email){
            if($rootScope.emailThatAlreadyUsed){
                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace($rootScope.emailThatAlreadyUsed.email, email.email);
            }
            $rootScope.emailTemplateInModal.email = [];
            $rootScope.emailThatAlreadyUsed = email;
            localStorage.emailThatAlreadyUsed = email.email;
            $rootScope.emailTemplateInModal.email = $rootScope.emailTemplateInModal.email + email.email;
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.emailTemplateInModal.email);
            tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
        };
        $rootScope.sentEmail = function(){
            Mail.sendMailByTemplateVerified({
                    toEmails: $rootScope.emailToSend,
                    candidateId: $scope.candidate.candidateId,
                    fullName: $scope.candidate.fullName,
                    email: $rootScope.emailTemplateInModal.email,
                    date: null,
                    lang: $scope.lang,
                    template: {
                        type: $rootScope.emailTemplateInModal.type,
                        title: $rootScope.emailTemplateInModal.title,
                        text: $rootScope.emailTemplateInModal.text,
                        fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                        fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                    }
                },
                function (resp) {
                    if (resp.status != 'ok') {
                        notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                    }else{
                        notificationService.success($filter('translate')('Letter sent'));
                        $rootScope.closeModal();
                        $rootScope.emailToSend = null;
                        $rootScope.fileForSave = [];
                        $rootScope.emailTemplateInModal = {
                            text: "Hi [[candidate name]]!<br/><br/>--<br/>Best, <br/>[[recruiter's name]]"
                        };
                    }
                });
        };

        ///////////////////////////////////////////////////////////////End of Sent Email candidate
    }]);



controller.controller('testResults', ["$scope", "Test", "notificationService", "$filter", "$rootScope", "$uibModal", "$window", "$routeParams", "$location", "ngTableParams", function ($scope, Test, notificationService, $filter, $rootScope, $uibModal, $window, $routeParams, $location, ngTableParams) {

    $scope.a = {};
    $scope.a.searchNumber = 1;
    $scope.requestParams = {};
    $scope.objectSize = 0;
    $scope.test = {};
    $scope.detailedInfo = {};

    if($location.path().match('candidate/tests/results')) {
        $scope.typeOfResults = 'candidate';
        $scope.requestParams = {
            candidateId: $routeParams.id,
            page: {number: 0, count: 15}
        };
    } else if($location.path().match('candidate/test/results')) {
        $scope.typeOfResults = 'test';
        $scope.requestParams = {
            testId: $routeParams.id,
            page: {number: 0, count: 15}
        };
        Test.getTest({id: $routeParams.id}, function (resp) {
            if(resp.status == "ok"){
                $scope.test = resp.object;
            } else {
                notificationService.error(resp.message)
            }
        });
    } else if($location.path().match('/candidate/test/details/')){
        $scope.typeOfResults = 'detailed';
        Test.getAppointment({id: $routeParams.id}, function (resp) {
            if(resp.status == "ok") {
                $scope.detailedInfo = {};
                angular.copy(resp.object, $scope.detailedInfo);
                $scope.detailedInfo.maxPoints = 0;
                var withoutAnswers = [];
                angular.forEach(resp.object.answers,function (answer) {
                    withoutAnswers.push(answer.questionId);
                });
                angular.forEach(resp.object.test.questions, function (question, questInd) {
                    $scope.detailedInfo.test.questions[questInd].variantsArray = [];
                    if(!withoutAnswers.includes(question.id)) {
                        resp.object.answers.push({questionId: question.id, points: 0});
                    }
                    angular.forEach(resp.object.answers, function (answer, answId) {
                        if(answer.questionId == question.id) {
                            angular.forEach(question.variantsArray, function (variant, variantInd) {
                                if(answer.variantsArray) {
                                    if(answer.variantsArray.includes(variant)){
                                        if(question.rightAnswersArray.includes(variant)){
                                            $scope.detailedInfo.test.questions[questInd].variantsArray.push({value: variant, isCorrect: true, chosen: true});
                                        } else {
                                            $scope.detailedInfo.test.questions[questInd].variantsArray.push({value: variant, isCorrect: false, chosen: true});
                                        }
                                    } else {
                                        $scope.detailedInfo.test.questions[questInd].variantsArray.push({value: variant, isCorrect: false, chosen: false});
                                    }
                                } else {
                                    if(question.rightAnswersArray.includes(variant)){
                                        $scope.detailedInfo.test.questions[questInd].variantsArray.push({value: variant, isCorrect: true, chosen: false});
                                    } else {
                                        $scope.detailedInfo.test.questions[questInd].variantsArray.push({value: variant, isCorrect: false, chosen: false});
                                    }
                                }
                            });
                            if(answer.text) {
                                $scope.detailedInfo.test.questions[questInd].textAnswer = answer.text;
                            }
                            if($scope.detailedInfo.test.questions[questInd].points !== undefined) {
                                $scope.detailedInfo.maxPoints += $scope.detailedInfo.test.questions[questInd].points;
                            }
                            if(answer.points !== undefined) {
                                $scope.detailedInfo.test.questions[questInd].points = answer.points;
                            }
                            $scope.detailedInfo.test.questions[questInd].answerId = answer.answerId;
                        }
                    });

                });

                console.log('detailed',$scope.detailedInfo)
            } else {
                notificationService.error(resp.message);
            }
        });
    }

    if($scope.typeOfResults == 'test' || $scope.typeOfResults == 'candidate') {
        $scope.tableParams = new ngTableParams({
            page: 1,
            count: $scope.requestParams.page.count
        }, {
            total: 0,
            getData: function($defer, params) {
                $rootScope.loading = true;
                $scope.requestParams.page.number = params.$params.page - 1;
                $scope.requestParams.page.count = params.$params.count;
                $scope.count = 0;
                Test.getAppointments($scope.requestParams, function(response) {
                    if(response.status == "ok") {
                        $rootScope.loading = false;
                        angular.forEach(response.objects,function (val) {
                            if(val.percentile != undefined){
                                $scope.count++;
                            }
                        });
                        $scope.paginationParams = {
                            currentPage: $scope.requestParams.page.number,
                            totalCount: response['total']
                        };
                        $scope.candidateName = response.objects[0].candidateName;
                        $scope.candidateLocalId = response.objects[0].candidateLocalId;
                        $scope.objectSize =  response['objects'] != undefined ? response['total'] : 0;
                        params.total(response['total']);

                        $defer.resolve(response['objects']);
                        $scope.a.searchNumber = $scope.tableParams.page();
                    } else {
                        notificationService.error(response.message)
                    }
                });

            }
        });
    }

    $scope.changeInputPage = function(params,searchNumber){
        var searchNumber = Math.round(searchNumber);
        var maxValue = $filter('roundUp')(params.settings().total/params.count());
        if(searchNumber){
            if(searchNumber >= 1 && searchNumber <= maxValue){
                params.page(searchNumber);
                $scope.a.searchNumber = searchNumber;
                $scope.requestParams.page.number = $scope.a.searchNumber - 1;
            }
        }
    };

    $scope.changePoints = function (answerId, points, inited) {
        if(inited) {
            Test.editAnswer({answerId: answerId, points: points}, function (resp) {
                if(resp.status != "ok"){
                    notificationService.error(resp.message)
                }
            });
        }
    };
    $scope.changeStatus = function (appointmentId, status) {
            Test.editAppointment({appointmentId: appointmentId, passed: status}, function (resp) {
                if(resp.status != "ok"){
                    notificationService.error(resp.message)
                }
            });
    };

}]);
controller.controller('testsAndForms', ["$scope", "Test", "notificationService", "$filter", "$rootScope", "$uibModal", "$window", "$routeParams", "$location", "FileInit", "serverAddress", "Vacancy", "$localStorage",
    function ($scope, Test, notificationService, $filter, $rootScope, $uibModal, $window, $routeParams, $location, FileInit, serverAddress, Vacancy, $localStorage) {
        $scope.optionTab = 'show';
        $scope.textType = false;
        $scope.fieldCheck = false;
        $scope.timeLimit = {hh: null, mm: null};
        $rootScope.sendOneTest = {
            id: null
        };
        $scope.newTestParamInit = function () {
            $scope.timeLimit = {hh: null, mm: null};
            $scope.newTestParam = {
                testName: null,
                description: null,
                timeLimit: null,
                questions: [
                    {
                        text: null,
                        points: null,
                        answerType: false,
                        variantsArray: [{value: null, isCorrect: true}],
                        rightAnswersArray: [],
                        num: 1,
                        imageId: null
                    }
                ]
            };
            $scope.testPreview = null;
        };
        $scope.newTestParamInit();
        $scope.allTests = [];
        $scope.getAllTests = function () {
            Test.getTests(function (resp) {
                if(resp.status == "ok") {
                    $scope.allTests = resp.objects;
                    if(!$scope.allTests || $scope.allTests.length === 0) {
                        $scope.changeTab('add');
                    }
                } else {
                    notificationService.error(resp.message);
                }
            },function (err) {
                notificationService.error(err.message);
            });
        };
        $scope.getAllTests();
        $rootScope.testQuestionLogo = [];
        $scope.callbackTestQuestionLogo = function(photo, index) {
            $rootScope.testQuestionLogo[index] = photo;
            $rootScope.testQuestionLogoLink = $scope.serverAddress + "/getapp?id=" + photo + "&d=true";
        };

        $scope.changeTab = function (tab, TestId) {
            var toEdit = function () {
                $scope.editTestId = TestId;
                Test.getTest({id: TestId}, function (resp) {
                    if(resp.status == "ok") {
                        var editTestParam = {};
                        angular.copy(resp.object, editTestParam);
                        $scope.testQuestion = resp.object.questions;
                        angular.forEach(resp.object.questions, function (question, questId) {
                            editTestParam.questions[questId] = {};
                            $scope.numMenu = question.num;
                            editTestParam.questions[questId].num = question.num;
                            editTestParam.questions[questId].id = question.id;
                            editTestParam.questions[questId].text = question.text;
                            editTestParam.questions[questId].points = question.points;
                            editTestParam.questions[questId].imageId = question.imageId;
                            $rootScope.testQuestionLogo.push(question.imageId);
                            editTestParam.questions[questId].variantsArray = [];
                            editTestParam.questions[questId].rightAnswersArray = [];
                            editTestParam.questions[questId].answerType = !(question.answerType == 'few_answers' || question.answerType == 'one_answer');
                            angular.forEach(question.variantsArray, function (variant, index) {
                                var isCorrectAnsw = false;
                                if(question.rightAnswersArray.includes(variant)){
                                    isCorrectAnsw = true;
                                }
                                var variantFOrPush = {value: variant, isCorrect: isCorrectAnsw};
                                editTestParam.questions[questId].variantsArray.push(variantFOrPush);
                            });
                        });
                        $scope.newTestParamInit();
                        $scope.newTestParam.testName = editTestParam.testName ? editTestParam.testName : null;
                        $scope.newTestParam.timeLimit = editTestParam.timeLimit ? editTestParam.timeLimit : null;
                        $scope.newTestParam.questions = editTestParam.questions ? editTestParam.questions : null;
                        $scope.newTestParam.norms = editTestParam.norms ? editTestParam.norms : null;
                        $scope.newTestParam.description = editTestParam.description ? editTestParam.description : null;
                        $scope.newTestParam.id = editTestParam.id;
                        $scope.timeLimit.hh = Math.floor(editTestParam.timeLimit / 3600);
                        $scope.timeLimit.mm = Math.floor((editTestParam.timeLimit - ($scope.timeLimit.hh * 3600)) / 60);
                    } else {
                        notificationService.error(resp.message)
                    }
                }, function (err) {
                    notificationService.error(err.message);
                })
            };

            $scope.optionTab = tab;
            if(tab == 'show') {
                $scope.getAllTests();
                $scope.newTestParamInit();
                $scope.fieldCheck = false;
            } else if(tab == 'edit') {
                $scope.fieldCheck = false;
                toEdit();
            } else if($scope.optionTab == 'add') {
                $scope.newTestParamInit();
            }
        };
        $scope.changeAnswerType = function ($event, questInd) {
            $scope.newTestParam.questions[questInd].answerType = !$scope.newTestParam.questions[questInd].answerType;
            if($scope.newTestParam.questions[questInd].answerType) {
                $scope.newTestParam.questions[questInd].variantsArray = [];
                $scope.newTestParam.questions[questInd].rightAnswersArray = [];
                $($event.currentTarget).find('#cmn-toggle-9').prop('checked', true);
            } else {
                $scope.newTestParam.questions[questInd].variantsArray.push({value: null, isCorrect: true});
                $($event.currentTarget).find('#cmn-toggle-9').prop('checked', false);
            }
        };
        $scope.answerAdd = function (questInd) {
            $scope.newTestParam.questions[questInd].variantsArray.push({value: null, isCorrect: false});
        };
        $scope.questAdd = function () {
            $scope.newTestParam.questions.push({
                text: null,
                points: null,
                answerType: false,
                variantsArray: [{value: null, isCorrect: true}],
                rightAnswersArray: [],
                num: null,
                imageId: null
            })
        };
        $scope.deleteQuestion = function (questIndex) {
            $scope.newTestParam.questions.splice(questIndex, 1);
        };
        $scope.deleteAnswer = function (questIndex, answIndex) {
            $scope.newTestParam.questions[questIndex].variantsArray.splice(answIndex, 1);
        };
        $scope.removeObligatory = function () {
            $(".obligatory").each(function () {
                if($(this)[0].value == '' || $(this)[0].value === null) {
                    $(this).removeClass("empty");
                }
            });
        };
        $scope.removeLogoTestCandidateQuestion = function (questIndex, question, e) {
            $scope.questIndex = questIndex;
            console.log(questIndex);
            console.log(question);
            if(question.imageId == null){
                console.log($(e.target).offsetParent());
                $(e.target).offsetParent().hide();
                $(e.target).offsetParent().offsetParent().find('.img_wrap' + questIndex).hide();
                $rootScope.testQuestionLogo[questIndex] = undefined;
                $('#logo-button' + questIndex).show();
            }else{

            }
            console.log($rootScope.testQuestionLogo);
            console.log($scope.testQuestion);
            angular.forEach($scope.testQuestion, function(val) {
                if(val.id === question.id){
                    $rootScope.testQuestionLogo[questIndex] = undefined;
                    //$rootScope.testQuestionLogo.splice(questIndex, 1);
                    $(".owner_photo_wrap" + questIndex).find('img').hide();
                    $(".owner_photo_wrap" + questIndex).find('#owner_photo_bubble_wrap').hide();
                }
            });
        };
        $scope.saveTest = function () {
            var emptyQuestion = false;
            $scope.fieldCheck = false;
            angular.forEach($scope.newTestParam.questions, function (question) {
                if((question.text === '' || question.text === null || question.points === null || question.points === '') && !question.answerType){
                    emptyQuestion = true;
                }
                angular.forEach(question.variantsArray,function (variant) {
                    if((variant.value == '' || variant.value == null)){
                        emptyQuestion = true;
                    }
                });
            });
            if($scope.newTestParam.testName !== null && $scope.newTestParam.testName !== '' && !emptyQuestion) {
                var testForSend = {};
                angular.copy($scope.newTestParam, testForSend);
                angular.forEach($scope.newTestParam.questions, function (quest, key) {
                    testForSend.questions[key].num = key + 1;
                    testForSend.questions[key].rightAnswersArray = [];
                    testForSend.questions[key].imageId = $rootScope.testQuestionLogo[key];
                    angular.forEach(quest.variantsArray, function (variant, index) {
                        if(variant.isCorrect) {
                            if(variant.value)
                                testForSend.questions[key].rightAnswersArray.push(variant.value);
                        }
                    })
                });
                angular.forEach($scope.newTestParam.questions, function (quest, key) {
                    testForSend.questions[key].variantsArray = [];
                    angular.forEach(quest.variantsArray, function (answ, ind) {
                        if(answ.value) {
                            testForSend.questions[key].variantsArray.push(answ.value);
                        }
                    });
                    if(quest.answerType) {
                        testForSend.questions[key].answerType = 'task_question'
                    } else {
                        if(testForSend.questions[key].rightAnswersArray.length == 1) {
                            testForSend.questions[key].answerType = 'one_answer'
                        } else {
                            testForSend.questions[key].answerType = 'few_answers'
                        }
                    }
                });

                testForSend.timeLimit = ($scope.timeLimit.hh*60 + $scope.timeLimit.mm)*60;
                testForSend.status = 'A';
                Test.saveTest(testForSend, function (resp) {
                    if(resp.status == "ok") {
                        if($scope.optionTab == 'add') {
                            notificationService.success($filter('translate')('You created the new test:') + ' ' + testForSend.testName);
                        } else {
                            notificationService.success($filter('translate')('Changes are saved') + ' ' + testForSend.testName);
                        }
                        $scope.changeTab('show');
                    }else {
                        notificationService.error(resp.message);
                    }
                }, function (err) {
                    notificationService.error(err.message);
                });
            } else {

                $(".obligatory").each(function () {
                    if($(this)[0].value == '' || $(this)[0].value === null) {
                        $(this).addClass("empty")
                    }
                });
                notificationService.error($filter('translate')('You should fill all obligatory fields.'))
            }
        };

        $scope.showDeleteTest = function (testId, testName) {
            $rootScope.testForDelete = {testId: testId, testName: testName};
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/test-delete.html',
                size: '',
                resolve: function(){
                }
            });
        };

        if($rootScope.activePage == "Test page") {
            $scope.testPreview = {};
            Test.getTest({
                id: $routeParams.id
            }, function(resp) {
                if (resp.status == "ok") {
                    angular.copy(resp.object, $scope.testPreview);
                    angular.forEach(resp.object.questions, function (question, questInd) {
                        $scope.testPreview.questions[questInd].variantsArray = [];
                        angular.forEach(question.variantsArray, function (variant, variantInd) {
                            if(question.rightAnswersArray.includes(variant)){
                                $scope.testPreview.questions[questInd].variantsArray.push({value: variant, isCorrect: true});
                            } else {
                                $scope.testPreview.questions[questInd].variantsArray.push({value: variant, isCorrect: false});
                            }
                        });
                    });
                } else {
                    notificationService.error(resp.message);
                }
            });
        }

        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $rootScope.deleteTest = function (testId) {
            Test.deleteTest({id: testId}, function () {
                notificationService.success($filter('translate')('The test was deleted'));
                $scope.changeTab('show');
            }, function (err) {
                notificationService.error(err.message);
            });
            $rootScope.closeModal();
        };
        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        };
        $scope.getTestFunc = function () {
            Test.getTest({
                id: $routeParams.id
            }, function(resp) {
                if (resp.status == "ok") {
                    $rootScope.sendOneTest = resp.object;
                    $rootScope.linkTest = $location.$$protocol + "://" + $location.$$host + "/i#/pass_the_test/" + $rootScope.sendOneTest.id;
                    $scope.emailTestCandidate = $filter('translate')('Please pass the') + '"' + $rootScope.sendOneTest.testName + '"' + $filter('translate')('test');
                    $scope.textEmailTestCandidate = $filter('translate')('Hi!') + '<br>'+ '<br>' + $filter('translate')('Please pass the') + '"' + $rootScope.sendOneTest.testName + '"' + $filter('translate')('test via this link:') + '<br>' + '<br>' + $filter('translate')('{here will be individual link for test for each candidate}') + '<br>' + '<br>' + '--' + '<br>' + $filter('translate')('Best regards,') + '<br>' + $rootScope.me.fullName;
                } else {
                    notificationService.error(resp.message);
                }
            });
        };
        if($rootScope.activePage == 'Send test candidate to email'){
            $scope.getTestFunc();
        }
        $scope.sendTestRequest = [];
        $scope.$on('groupNameList', function(event, groupNameList) {
            $scope.sendTestRequest = [];
            console.log('groupnamelist',groupNameList);
            $scope.groupNameList = groupNameList;
            angular.forEach($scope.groupNameList, function(nval, ind) {
                if(nval !== undefined){
                    $scope.candidate = nval;
                    $rootScope.emailCandidate = nval.email[0].value;
                    $scope.sendTestRequest.push({
                        candidateId:  $scope.candidate.id ,
                        email:  $rootScope.emailCandidate
                    });
                }
            });
        });
        $('#testCandidate').on("change", function(e) {
            $("#testCandidate").select2('val', '');
        });
        $scope.deleteCandidate = function(candidate){
            angular.forEach($scope.groupNameList, function(nval, ind) {
                if (nval.id === candidate.id) {
                    $scope.groupNameList.splice(ind, 1);
                    angular.forEach($('.select2-search-choice'), function(val) {
                        if($(val).find('div')[0].innerText == nval.text){
                            document.getElementById("testCandidate").setAttribute('value', $scope.groupNameList);
                            $(val).remove();
                        }
                    });
                }
            });
        };
        setTimeout(function(){
            tinymce.init({
                selector: '#testCandidateMCE',
                mode: 'exact',
                theme: "modern",
                height: 145,
                language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                browser_spellcheck: true,
                menubar: false,
                statusbar: false,
                theme_advanced_resizing: true,
                plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                    "searchreplace visualblocks visualchars code fullscreen",
                    "insertdatetime media nonbreaking save table directionality",
                    "template paste textcolor  "],
                fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                image_advtab: true,
                toolbar_items_size: 'small',
                relative_urls: false,
                setup: function (ed) {
                    ed.on('SetContent', function (e) {

                    });
                    ed.on('change', function(e) {
                        $scope.textEmailTestCandidate = tinyMCE.get('testCandidateMCE').getContent();
                    });
                }
            });
        }, 0);
        $rootScope.changesEmail = function (text, id) {
            $scope.emailCandidateId  = id;
            $rootScope.emailCandidate = text;
        };
        $scope.changeEmailTestCandidate = function(groupList, candidate){
            console.log(groupList);
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/change-email-test-candidate.html',
                size: '',
                resolve: {
                }
            });
            if(candidate != undefined){
                $rootScope.groupNameList = groupList;
                angular.forEach(groupList.contacts, function (val) {
                    if(val.type == 'email'){
                        $rootScope.emailCandidate = val.value.split(" ")[0].replace(/,/g,"");
                    }
                });
            }else{
                $rootScope.groupNameList = groupList;
                $rootScope.emailCandidate = $rootScope.groupNameList.email[0].value.split(" ")[0].replace(/,/g,"");
            }
        };
        $rootScope.saveChangeEmailTestCandidate = function(candidate){
            var email = $('#changeEmailCandidate');
            console.log(email.val().indexOf('@'));
            console.log(email.val().indexOf('@') > 0);
            if(email.val().indexOf('@') > 0){
                email.css('border','2px solid #61B452');
                if(candidate != undefined){
                    angular.forEach($rootScope.groupNameList.contacts, function (val) {
                        if(val.type == 'email'){
                            val.value = $rootScope.emailCandidate;
                        }
                    });
                }else{
                    $rootScope.groupNameList.email[0].value = $rootScope.emailCandidate;
                }
                $scope.sendTestRequest.push({
                    candidateId: $scope.emailCandidateId,
                    email: $rootScope.emailCandidate
                });
                function removeDuplicates(arr, prop) {
                    var new_arr = [];
                    var lookup  = {};

                    for (var i in arr) {
                        lookup[arr[i][prop]] = arr[i];
                    }

                    for (i in lookup) {
                        new_arr.push(lookup[i]);
                    }
                    return new_arr;
                }

                var uniqueArray = removeDuplicates($scope.sendTestRequest, "candidateId");
                $scope.sendTestRequest = uniqueArray;
                $rootScope.closeModal();
            }else{
                email.css({'border': '2px solid #C62828', 'background-color': '#FFF6F7'});
                email.focus();
                $("#error-password").removeClass("hidden");
                $("#error-password").html('Кажется, вы ввели неверный email. Пожалуйста, попробуйте ещё раз.');
                //$("#error-password").html('Seems like email you entered is incorrect. Please enter the correct one.');
                setTimeout(function(){
                    $("#error-password").hide();
                },5000);
            }
        };
        if($rootScope.activePage == 'Send test candidate to email from candidate'){
            $rootScope.sendCandidateToTest();
            console.log($rootScope.candidateToTest);
            $scope.sendTestRequest.push({
                candidateId: $rootScope.emailCandidateId,
                email: $rootScope.emailCandidate
            });
            //if($rootScope.candidateToTest == undefined){
            //    notificationService.error($filter('translate')('Please add an email before sending a test to this candidate'));
            //}else{
            //
            //}
        }else if($rootScope.activePage == 'Send test candidate to email from vacancy'){
            setTimeout(function(){
                console.log('vik1');
                $rootScope.candidatesInStages = JSON.parse($localStorage.get('vacancyForTest'));
                $rootScope.activeCustomStageName = $localStorage.get('activeCustomStageName');
                $scope.activeCustomStageId = $localStorage.get('activeCustomStageId');
                $rootScope.vacancySearchParams = {
                    state: $scope.activeCustomStageId,
                    vacancyId: $rootScope.candidatesInStages[0].vacancyId.vacancyId,
                    withCandidates: true,
                    withVacancies: true
                };
                Vacancy.getCandidatesInStages($rootScope.vacancySearchParams, function(resp){
                    if(resp.objects.length == 0){

                    }else{
                        $rootScope.candidatesInStages = resp.objects;
                        $localStorage.set('vacancyForTest', $rootScope.candidatesInStages);
                        $location.path('/candidate/send-test-candidate-to-email-from-vacancy');
                    }
                });
            }, 0);

        }else{
            //$localStorage.remove("candidateForTest");
            //$localStorage.remove("vacancyForTest");
            //$localStorage.remove("activeCustomStageName");
        }
        $scope.sendTestToCandidate = function () {
            if($rootScope.activePage == 'Send test candidate to email'){
                $scope.textEmailTestCandidate = tinyMCE.get('testCandidateMCE').getContent();
                $location.path('/candidate/tests');
            }else if($rootScope.activePage == 'Send test candidate to email from vacancy'){
                $scope.textEmailTestCandidate = tinyMCE.get('testCandidateMCE2').getContent();
                $location.path('/vacancies/' + $rootScope.candidatesInStages[0].vacancyId.localId);
            }else if($rootScope.activePage == 'Send test candidate to email from candidate'){
                $scope.textEmailTestCandidate = tinyMCE.get('testCandidateMCE2').getContent();
                $location.path('/candidates/' + $rootScope.candidateToTest.localId);
            }
            Test.sendTest({
                testId: $rootScope.sendOneTest.id,
                appointments: $scope.sendTestRequest,
                text: $scope.textEmailTestCandidate
            }, function(resp) {
                if (resp.status == "ok") {
                    notificationService.success($filter('translate')('The email with a link to the test was successfully sent'));
                } else {
                    notificationService.error(resp.message);
                }
            });
        };

        $rootScope.setDocCounter = function(){
            $scope.currentDocPreviewPage = 0;
        };
        $scope.prevDoc = function(){
            $scope.currentDocPreviewPage -= 1;
        };
        $scope.nextDoc = function(){
            $scope.currentDocPreviewPage += 1;
        };
        $scope.objCandiateEmail = [];
        $scope.addCandidateLinkToText = function (objCandidate) {
            if(objCandidate.checked){
                if(objCandidate.candidateId.email != undefined){
                    $scope.objCandiateEmail.push({
                        candidateId:  objCandidate.candidateId.candidateId,
                        email:  objCandidate.candidateId.email.split(" ")[0].replace(/,/g,"")
                    });
                }else{
                    notificationService.error($filter('translate')('Please add an email before sending a test to this candidate'));
                }
            }else{
                angular.forEach($scope.objCandiateEmail, function(val, ind) {
                    if(val.candidateId == objCandidate.candidate){
                        $scope.objCandiateEmail.splice(ind, 1);
                    }
                });
            }
            $scope.sendTestRequest = $scope.objCandiateEmail;
            console.log($scope.objCandiateEmail);
        };
        setTimeout(function(){
            var myListener = $scope.$on('addedTest', function(event, data){
                console.log(data);
                if(data != undefined){
                    $('.select2-choice').find('abbr').css('margin-top', '-2px');
                    $('#testCandidateFromVacancyId').show();
                    $('.testCandidateFromCandidate').show();
                    $('.showLetter').show();
                    $rootScope.sendOneTest.id = data.id;
                    $scope.emailTestCandidate = $filter('translate')('Please pass the') + '"' + data.text + '"' + $filter('translate')('test');
                    $scope.textEmailTestCandidate = $filter('translate')('Hi!') + '<br>'+ '<br>' + $filter('translate')('Please pass the') + '"' + data.text + '"' + $filter('translate')('test via this link:') + '<br>' + '<br>' + $filter('translate')('{here will be individual link for test for each candidate}') + '<br>' + '<br>' + '--' + '<br>' + $filter('translate')('Best regards,') + '<br>' + $rootScope.me.fullName;
                    setTimeout(function(){
                        tinyMCE.get('testCandidateMCE2').setContent($scope.textEmailTestCandidate);
                    }, 0);
                }
            });
            $scope.$on('$destroy', myListener);
        }, 20);
        setTimeout(function(){
            tinymce.init({
                selector: '#testCandidateMCE2',
                mode: 'exact',
                theme: "modern",
                height: 145,
                language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                browser_spellcheck: true,
                menubar: false,
                statusbar: false,
                theme_advanced_resizing: true,
                plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                    "searchreplace visualblocks visualchars code fullscreen",
                    "insertdatetime media nonbreaking save table directionality",
                    "template paste textcolor  "],
                fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                image_advtab: true,
                toolbar_items_size: 'small',
                relative_urls: false,
                setup: function (ed) {
                    ed.on('SetContent', function (e) {

                    });
                    ed.on('change', function(e) {
                        $scope.textEmailTestCandidate = tinyMCE.get('testCandidateMCE2').getContent();
                    });
                }
            });
        }, 700);
        $scope.goBack = function(){
            history.back()
        };
    }]);
controller.controller('CandidateXRayLinkController', ["$localStorage", "$translate", "Service", "$scope", "ngTableParams", "Candidate", "$location", "$rootScope", "$filter", "$cookies", "serverAddress",
    function ($localStorage, $translate, Service, $scope, ngTableParams, Candidate, $location, $rootScope, $filter, $cookies, serverAddress) {

        $scope.regions = Service.getCountryLinkedIn();

        var arr = [];
        angular.forEach($scope.regions, function (val) {
            arr.push({id: val.key, text: val.value})
        });
        $(".search-region").select2({
            data: arr,
            minimumInputLength: 1,
            selectOnBlur: true,
            formatInputTooShort: function () {
                return "";
            }
        }).on("select2-close", function (e) {
            if ($(this).select2('data')) {
                $scope.filterLink.region = $(this).select2('data').id;
            } else {
                $scope.filterLink.region = 'all';
            }
        });

        $scope.filterLink = {
            job_title: '',
            keywords_include: '',
            keywords_exclude: '',
            region: 'all'
        };

        $scope.lang = $translate;

        $scope.clickExtShow = function () {
            console.log($scope.filterLink);
            $scope.showInGoogle();
        };

        $scope.showInGoogle = function () {
            var url = 'https://www.google.com.ua/search?q=-intitle:"profiles"+-inurl:"dir/+"';
            if ($scope.filterLink.region === 'all') {
                url += '+site:linkedin.com/in/+OR+site:linkedin.com/pub/';
            } else {
                url += '+site:' + $scope.filterLink.region + '.linkedin.com/in/+OR+site:' + $scope.filterLink.region + '.linkedin.com/pub/';
            }
            if ($scope.filterLink.job_title) {
                url += '+"'+encodeURIComponent($scope.filterLink.job_title)+'"';
            }
            if ($scope.filterLink.keywords_include) {
                angular.forEach($scope.filterLink.keywords_include.split(','), function(val, ind) {
                    url += '+"'+encodeURIComponent($.trim(val))+'"';
                });
            }
            if ($scope.filterLink.keywords_exclude) {
                angular.forEach($scope.filterLink.keywords_exclude.split(','), function(val, ind) {
                    url += '-"'+encodeURIComponent($.trim(val))+'"';
                });
            }
            window.open(url, '_blank');
        };

    }]);

controller.controller('ClientAddController', ["FileInit", "$scope", "Service", "Client", "$location", "notificationService", "$filter", "$localStorage", "$cookies", "$window", "serverAddress", "$rootScope", "Person", "CustomField", "$translate",
    function(FileInit, $scope, Service, Client, $location, notificationService, $filter, $localStorage, $cookies, $window, serverAddress, $rootScope, Person, CustomField, $translate) {
        if ($localStorage.isExist("clientForSave")) {
            $scope.client = angular.fromJson($localStorage.get("clientForSave"));
            $localStorage.remove("clientForSave");
        } else {
            $scope.client = {logoId: null};
        }
        $scope.objType = 'client';
        $scope.fieldValues = {
            objType: "client",
            value: '',
            dateTimeValue: '',
            field : {
                fieldId: ''
            }
        };
        $scope.client.fieldValues = [];
        $scope.clickedSaveClient = false;
        $scope.serverAddress = serverAddress;
        $scope.event = 'Add';
        $location.hash('');
        $scope.errorMessage = {
            show: false,
            message: ""
        };
        $scope.addPhoto = function() {
            $('#photoFile').click();
        };
        $scope.cancel = function() {
            $location.path("/clients");
        };
        FileInit.initFileOption($scope, "client");
        $scope.callbackFile = function(resp, names) {
            $scope.client.logoId = resp;
            $scope.hideModalAddPhoto();
        };
        FileInit.addPhotoByReference($scope, $scope.callbackFile);
        $scope.removePhoto = function() {
            $scope.client.logoId = undefined;
            $scope.progressUpdate();
        };


        $scope.industries = Service.getIndustries();
        $scope.state = Client.getState().splice(0, 2);


        $scope.editCustomField = function(text, id){
            console.log('in edit', text, id);
            $scope.client.fieldValues.push({
                objType: "client",
                value: text,
                field : {
                    fieldId: id
                }
            });
        };
        $scope.addCustomFieldParams = function(text, id){
            $scope.client.fieldValues.push({
                objType: "client",
                value: text,
                field : {
                    fieldId: id
                }
            });
        };

        $scope.sendCustomFieldId = function(id){
            $scope.editCustomId = id;
            console.log(id);
        };


        console.log($scope.client);
        if ($scope.client.fieldValues) {
            angular.forEach($scope.client.fieldValues, function(val) {
                console.log(val);
                if (angular.equals(val.type, "string")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "select")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "date")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
                if (angular.equals(val.type, "datetime")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
            });
        }
        console.log($scope.client);

        $scope.save = function() {
            if ($scope.clientForm.$valid && !$scope.clickedSaveClient) {
                $scope.clickedSaveClient = true;
                if ($scope.client.site) {
                    $scope.client.site = $scope.client.site.replace(/^(https?:\/\/)/, "");
                }

                if ($("#pac-input").val().length == 0) {
                    $scope.client.region = null;
                } else if ($("#pac-input").val().length > 0) {
                    $scope.client.region = $scope.region;
                }

                Client.add($scope.client, function(resp) {
                    $scope.errorMessage.show = false;
                    if (angular.equals(resp.status, "ok")) {
                        Client.all(Client.searchOptions(), function (response) {
                            $rootScope.clientsForInvite = response.objects;
                        });
                        notificationService.success($filter('translate')("client_save_1") + " " + $scope.client.name + $filter('translate')("client_save_2"));
                        $location.path("/clients/" + resp.object.localId);
                    } else {
                        notificationService.error(resp.message);
                        $scope.errorMessage.show = true;
                        $scope.clickedSaveClient = false;
                        $scope.errorMessage.message = resp.message;
                        $scope.errorMessage.clientName = resp.object.name;
                        $scope.errorMessage.localId = resp.object.localId;
                        $scope.errorMessage.clientRegion = resp.object.region.displayFullName;
                    }
                }, function() {
                    $localStorage.set("clientForSave", $scope.client);
                    $cookies.url = $location.$$url;
                    $scope.clickedSaveClient = false;
                    $cookies.cfauth = 'false';
                    $window.location.replace('/');

                });
            } else {
                console.log($scope.clientForm);
                $scope.clickedSaveClient = false;
                $scope.clientForm.name.$pristine = false;
            }
        };

        $scope.deleteDate = function(id){
            angular.forEach($('.editDate'), function (nval) {
                if(id == nval.name){
                    nval.placeholder = '';
                    nval.value = '';
                }
            });
        };

        $scope.getFullCustomFields = function(){
            CustomField.getFullFields({
                objectType: 'client'
            }, function(resp) {
                if (resp.status == "ok") {
                    $scope.allObjCustomField = resp.objects;
                } else {
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.getFullCustomFields();
    }]);

controller.controller('ClientsController', ["$scope", "$location", "Client", "ngTableParams", "$rootScope", "$filter", 'Person', 'ScopeService','notificationService', 'serverAddress', 'Service', '$timeout', '$anchorScroll',
    function($scope, $location, Client, ngTableParams, $rootScope, $filter, Person, ScopeService, notificationService, serverAddress, Service, $timeout, $anchorScroll) {
        $scope.status = Client.getStatusAssociated();
        $rootScope.searchCheckClient = $rootScope.searchCheckClient == undefined ? false : $rootScope.searchCheckClient;
        $scope.regionId = null;
        $scope.clientsFound = null;
        $scope.a = {};
        let sortDirection = 'desc';
        let previousSortParam = '';
        $scope.a.searchNumber = 1;
        $scope.previousFlag = true;
        $scope.serverAddress = serverAddress;
        $scope.loader = false;
        $scope.isSearched = false;
        $scope.client = {logoId: null};
        $scope.industries = Service.getIndustries();


    $scope.status = [
        {value: "future", name: "future"},
        {value: "in_work", name: "in work"},
        {value: "all_done", name: "all done"},
        {value: "canceled", name: "canceled"},
        {value: "deleted", name: "deleted"}
    ];
    $rootScope.toAdd = function() {
        $location.url('/client/add/');
        $location.path('/client/add/');
    };
    $scope.toClient = function(client) {
        $location.path('clients/' + client.localId);
    };
    if(localStorage.countClient){
        $scope.startPagesShown = localStorage.countClient;
    } else{
        $scope.startPagesShown = 15;
    }
    $scope.searchParam = {
        words: "",
        state: "",
        pages: {count: $scope.startPagesShown}
    };

    function scope_update(val) {
        $scope.tableParams.reload();
    }

    ScopeService.setCurrentControllerUpdateFunc(scope_update);
        Person.getAllPersons(function (resp) {
            $scope.persons = [];
            $rootScope.persons = [];
            $rootScope.personsNotChanged = [];
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                $scope.persons.push($scope.associativePerson[key]);
                $rootScope.persons.push($scope.associativePerson[key]);
                $rootScope.personsNotChanged.push($scope.associativePerson[key]);
            });
        });
    $scope.clickSearch = function() {
        $scope.tableParams.$params.page = 1;
        if($scope.searchParam.state.length == 0 && $scope.searchParam.words.length == 0 &&
            $scope.searchParam.name == null && $scope.searchParam.responsible == 'null' &&
            $scope.searchParam.industry == 'null' && $scope.searchParam.regionIdCity == 'null'){
            notificationService.error($filter('translate')('Enter the data'));
        }else{
            $scope.loader = true;
            if ($scope.searchParam['words'] || $scope.searchParam['responsible'] || $scope.searchParam['state'] || $scope.searchParam['']) {
                $scope.tableParams.reload();
                $rootScope.searchCheckClient = true;
            } else if ($rootScope.searchCheckClient) {
                $scope.tableParams.reload();
                $rootScope.searchCheckClient = false
            }
            $scope.isSearched = true;
        }
    };
        Service.getRegions2(function (countries,cities) {
            $scope.countries = countries;
            $scope.cities = cities;
            var optionsHtml = '<option value="null" style="color:#999">'+$filter('translate')('region')+'</option>';
            var optionsHtmlCity = '<option value="null" style="color:#999">'+$filter('translate')('city')+'</option>';
            angular.forEach($scope.countries, function (value) {
                optionsHtml += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
            });
            angular.forEach($scope.cities, function (value) {
                optionsHtmlCity += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
            });
            $('#cs-region-filter-select, #cs-region-filter-select-for-linkedin').html(optionsHtml);
            $('#cs-region-filter-select-cities, #cs-region-filter-select-for-linkedin-cities').html(optionsHtmlCity);
        });
        $scope.setSearchedRegion = function(){
            $scope.searchParam.regionIdCity = null;
            var obj = JSON.parse($scope.searchParam.regionId);
            if(obj.type == 'country'){
                $scope.searchedRegion = JSON.parse($scope.searchParam.regionId);
                $('#cs-region-filter-select-cities').find('option').remove();
                var optionsHtmlCity = '<option value="null" style="color:#999">'+$filter('translate')('city')+'</option>';
                angular.forEach($scope.cities, function (value) {
                    if(value.type == 'city' && value.country == $scope.searchedRegion.country){
                        optionsHtmlCity += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
                    }
                });
                $('#cs-region-filter-select-cities, #cs-region-filter-select-for-linkedin-cities').html(optionsHtmlCity);
            }else{
                $scope.searchedRegionCity = JSON.parse($scope.searchParam.regionIdCity);
            }
        };
        let pageNumber = 0;
    $scope.tableParams = new ngTableParams({
        page: 1,
        count: $scope.searchParam.pages.count
    }, {
        total: 0,
        getData: function($defer, params) {
            $rootScope.loading = true;
            if ($rootScope.previousLocation == '/clients/:id') {
                if ($rootScope.searchParamInClients != undefined) {
                    $scope.searchParam = $rootScope.searchParamInClients;
                    $rootScope.searchParamInClients = null;
                }
                if($scope.previousFlag){
                    $scope.tableParams.page($rootScope.previousSearchNumber);
                    pageNumber = $rootScope.previousSearchNumber;
                    $scope.previousFlag = !$scope.previousFlag;
                }
            }
            if (ScopeService.isInit()) {
                var activeParam = ScopeService.getActiveScopeObject();
                $scope.activeScopeParam = activeParam;
                Client.setOptions("page", {number: (params.$params.page - 1), count: params.$params.count});
                if(params.$params.count <= 120) {
                    localStorage.countClient = params.$params.count;
                } else {
                    localStorage.countClient = 15;
                }
                $scope.searchParam.pages.count = params.$params.count;
                if ($scope.searchParam['regionId'] && $scope.searchParam['regionId'] != 'null') {
                    if($scope.searchParam['regionIdCity'] && $scope.searchParam['regionIdCity'] != 'null'){
                        var json = JSON.parse($scope.searchParam['regionIdCity']);
                        if (json && json.type) {
                            Client.setOptions("city", json.value);
                        }
                    }else{
                        var json = JSON.parse($scope.searchParam['regionId']);
                        Client.setOptions("country", json.value);
                    }
                } else {
                    Client.setOptions("country", activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null);
                    Client.setOptions("city", activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null);
                }
                Client.setOptions("industry", isNotBlank($scope.searchParam['industry']) ? $scope.searchParam['industry'] : null);
                Client.setOptions("personId", activeParam.name == 'onlyMy' ? $rootScope.userId : null);
                Client.setOptions("responsible", $scope.searchParam.responsible && $scope.searchParam.responsible != 'null' ? $scope.searchParam.responsible : null);
                Client.setOptions("name", $scope.searchParam['name'] ? $scope.searchParam['name'] : null);
                Client.setOptions("words", $scope.searchParam['words'] ? $scope.searchParam['words'] : null);
                Client.setOptions("state", isNotBlank($scope.searchParam['state']) ? $scope.searchParam['state'] : null);

                function getClients(page,count) {
                    if(page || count) {
                        Client.setOptions("page", {number: page, count: count});
                        pageNumber = page;
                    } else {
                        $scope.isShowMore = false;
                        pageNumber = Client.searchOptions().page.number;
                        if(document.getElementById('scrollup'))
                            document.getElementById('scrollup').style.display = 'none';
                        $timeout(function() {
                            $anchorScroll('mainTable');
                        });
                    }
                    Client.all(Client.searchOptions(), function(response) {
                        $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
                        if(page) {
                            $scope.clients = $scope.clients.concat(response['objects'])
                        } else {
                            $scope.clients = response['objects'];
                        }
                        $scope.paginationParams = {
                            currentPage: Client.searchOptions().page.number,
                            totalCount: $rootScope.objectSize
                        };
                        let pagesCount = Math.ceil(response['total']/Client.searchOptions().page.count);
                        if(pagesCount == Client.searchOptions().page.number + 1) {
                            $('#show_more').hide();
                        } else {
                            $('#show_more').show();
                        }
                        $scope.clientsFound = response['total'] >= 1;
                        params.total(response['total']);
                        $defer.resolve($scope.clients);
                        $rootScope.loading = false;
                    });
                }
                getClients();
                $scope.showMore = function () {
                    $scope.isShowMore = true;
                    Service.dynamicTableLoading(params.total(), pageNumber, params.$params.count, getClients)
                };
                $rootScope.searchParamInClients = $scope.searchParam;
                $scope.a.searchNumber = $scope.tableParams.page();
                $rootScope.previousSearchNumber = $scope.a.searchNumber;
            }
        }
    });
        $scope.changeInputPage = function(params,searchNumber){
            var searchNumber = Math.round(searchNumber);
            var maxValue = $filter('roundUp')(params.settings().total/params.count());
            if(searchNumber){
                if(searchNumber >= 1 && searchNumber <= maxValue){
                    params.page(searchNumber);
                    $scope.a.searchNumber = searchNumber;
                    pageNumber = searchNumber;
                }
            }
        };
    $scope.showAdvancedSearchFunc = function() {
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
    $scope.showAdvancedSearchFuncHide = function(){
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
    $scope.addShortClient = function(){
        if($scope.shortAddClient.$valid){
            Client.add($scope.client, function(resp) {
                if(resp.status =='ok'){
                    $scope.tableParams.reload();
                    notificationService.success($filter('translate')("client_save_1") + " " + $scope.client.name + $filter('translate')("client_save_2"));
                }else{
                    notificationService.error(resp.message);
                }
            });
        }else{
            notificationService.error($filter('translate')('Please fill in all fields'));
        }
    };
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
    $(document).click(function (){
        if($(".advancedSearch").css('display') != 'none'){
            $scope.showAdvancedSearchFuncHide();
            $scope.$apply();
        }
    });
    $scope.sortTable = function (sortParam) {
        let parentObject = '';
        if (sortParam && $scope.clients) {
            if( sortDirection == 'desc') {
                ascSort();
            } else {
                descSort();
            }
            previousSortParam = sortParam;
        }

        function descSort() {
            $scope.clients.sort((a,b) => {
                if(parentObject && a[parentObject] && b[parentObject]) {
                    if(a[parentObject][sortParam] > b[parentObject][sortParam] || !a[parentObject][sortParam]) {
                        return 1;
                    }
                    if(a[parentObject][sortParam] < b[parentObject][sortParam] || !b[parentObject][sortParam]) {
                        return -1;
                    }
                } else {
                    if(a[sortParam] > b[sortParam] || !a[sortParam]) {
                        return 1;
                    }
                    if(a[sortParam] < b[sortParam] || !b[sortParam]) {
                        return -1;
                    }
                }
                return 0;
            });
            sortDirection = 'desc';
        }

        function ascSort() {
            $scope.clients.sort((a,b) => {
                if(parentObject && a[parentObject] && b[parentObject]) {
                    if(a[parentObject][sortParam] > b[parentObject][sortParam] || !a[parentObject][sortParam]) {
                        return -1;
                    }
                    if(a[parentObject][sortParam] < b[parentObject][sortParam] || !b[parentObject][sortParam]) {
                        return 1;
                    }
                } else {
                    if(a[sortParam] > b[sortParam] || !a[sortParam]) {
                        return -1;
                    }
                    if(a[sortParam] < b[sortParam] || !b[sortParam]) {
                        return 1;
                    }
                }
                return 0;
            });
            sortDirection = 'asc';
        }
    };
}]);

controller.controller('ClientsStatisticsController', ['$scope', 'Company', '$rootScope', 'Service', function($scope, Company, $rootScope, Service) {
    Service.getOrgLogoId({orgId: $rootScope.me.orgId}, function(logoResp) {
        if (logoResp.status === 'ok') {
            $scope.companyLogo = logoResp.object;
        }
    });
}]);
controller.controller('ClientEditController', ["$rootScope", "serverAddress", "FileInit", "$scope", "$routeParams", "$location", "Client", "Service", "notificationService", "$filter",'Person', '$uibModal', '$localStorage', "$translate",
    function($rootScope, serverAddress, FileInit, $scope, $routeParams, $location, Client, Service, notificationService, $filter,Person, $uibModal, $localStorage, $translate) {
        $scope.clickedSaveClient = false;
        $scope.fieldValues = {
            objType: "client",
            fieldValueId: '',
            value: '',
            dateTimeValue: '',
            field : {
                fieldId: ''
            }
        };

        $scope.objType = 'client';

        Client.one({"localId": $routeParams.id}, function(resp) {
            if (angular.equals(resp.status, "ok")) {
                if (resp.object.region && resp.object.region.fullName != undefined) {
                    $scope.regionInput = resp.object.region.displayFullName;
                }

                $location.hash($filter('transliteration')(resp.object.name.replace(/\W+/g, '_'))).replace();
                $scope.client = resp.object;
                if(!$scope.client.customFields){
                    $scope.client.customFields = [];
                }
                $scope.locationBeforeCustomFields = $location.$$path.replace('/client/edit/' + $scope.client.localId, 'clients');
                $localStorage.set('previousHistoryCustomFields', $scope.locationBeforeCustomFields);

                $scope.client.fieldValues = [];

                if (resp.object.customFields) {
                    angular.forEach(resp.object.customFields, function(val) {
                        if(val.fieldValue != undefined){
                            if (angular.equals(val.type, "string")) {
                                $scope.client.fieldValues.push({
                                    objType: "client",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "select")) {
                                $scope.client.fieldValues.push({
                                    objType: "client",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "date")) {
                                $scope.client.fieldValues.push({
                                    objType: "client",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "datetime")) {
                                $scope.client.fieldValues.push({
                                    objType: "client",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                        }
                    });
                }
                console.log($scope.client);
                angular.forEach($scope.client.vacancies.objects,function(val){
                    if(val.status =="open" || val.status == "inwork" || val.status == "expects"){
                        $scope.clientHaveActiveVacancy=true;
                    }
                });
                if (resp.object.industry) {
                    $scope.setSelect2Industry(resp.object.industry)
                }
                // console.log($scope.client);
            } else {
                notificationService.error($filter('translate')('client not found'));
                $location.path("clients");
            }
        });
        $scope.serverAddress = serverAddress;
        $scope.event = 'edit';
        $scope.errorMessage = {
            show: false,
            message: ""

        };

        $rootScope.changeStatusInClient = {
            "status": "deleted",
            comment: "",
            header: "",
            placeholder: ""
        };

        $scope.deleteClient = function() {
            if(!$scope.clientHaveActiveVacancy){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/delete-client.html',
                    size: '',
                    resolve: function(){

                    }
                });
                $rootScope.changeStatusInClient.header = $filter('translate')("Are you sure want delete client") + " " + $scope.client.name + "?";
                $rootScope.changeStatusInClient.placeholder = $filter('translate')('Write a comment why you want remove this candidate');
            }else{
                notificationService.info($filter('translate')("This client has active vacancy"));
            }
        };
        $rootScope.saveClientStatus = function() {
            $scope.client.state = "deleted";
            $rootScope.closeModal();
            Client.changeState({
                clientId: $scope.client.clientId,
                comment: $rootScope.changeStatusInClient.comment,
                clientState: $scope.client.state
            }, function(resp) {
                if (resp.status == "ok") {
//                notificationService.success($filter('translate')("client change state"));
                    Client.all(Client.searchOptions(), function (response) {
                        $rootScope.clientsForInvite = response.objects;
                    });
                    $rootScope.changeStatusInClient.comment = "";
                    $rootScope.changeStatusInClient.status = null;

                    notificationService.success($filter('translate')('client') + " " + $scope.client.name + " " + $filter('translate')('was_deleted'));
                    $location.path('/clients');


                } else {
                    notificationService.error(resp.message);
                }
            }, function() {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };


        $scope.cancel = function() {
            $location.path("/clients/" + $routeParams.id);
        };
        $scope.addPhoto = function() {
            $('#photoFile').click();
        };
        FileInit.initFileOption($scope, "client");
        $scope.callbackFile = function(resp, names) {
            $scope.client.logoId = resp;
            $scope.hideModalAddPhoto();
        };
        FileInit.addPhotoByReference($scope, $scope.callbackFile);


        $scope.removePhoto = function() {
            $scope.client.logoId = undefined;
            $scope.progressUpdate();
        };
        $scope.industries = Service.getIndustries();
        $scope.state = Client.getState();

        $scope.editCustomField = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                if(value == ''){
                    angular.forEach($scope.client.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.client.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    angular.forEach($scope.client.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                $scope.client.fieldValues.push({
                    objType: "client",
                    fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };
        $scope.addCustomFieldParams = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                console.log(1);
                if(value == ''){
                    console.log(3);
                    angular.forEach($scope.client.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.client.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    console.log(4);
                    angular.forEach($scope.client.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                console.log(2);
                $scope.client.fieldValues.push({
                    objType: "client",
                    fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };
        $scope.sendCustomFieldId = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
            console.log(id);
            console.log(fieldValueId);
        };
        $scope.deleteDate = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
            angular.forEach($scope.client.fieldValues, function (val, ind) {
                if(val.fieldValueId == fieldValueId){
                    $scope.client.fieldValues.splice(ind, 1);
                    angular.forEach($('.editDate'), function (nval) {
                        console.log(nval.name);
                        if(id == nval.name){
                            nval.placeholder = '';
                            nval.value = '';
                        }
                    });
                }
            });
            console.log($scope.client.fieldValues);
        };
        $scope.save = function() {
            if (!$scope.clickedSaveClient) {


                deleteUnnecessaryFields($scope.client);
                if ($scope.clientForm.$valid) {
                    if ($scope.client.site) {
                        $scope.client.site = $scope.client.site.replace(/^(https?:\/\/)/, "");
                    }
                    if ($("#pac-input").val().length == 0) {
                        $scope.client.region = null;
                    } else if ($("#pac-input").val().length > 0 && ($scope.client.region == undefined || $("#pac-input").val() != $scope.client.region.fullName)) {
                        if ($scope.region)
                            $scope.client.region = $scope.region;
                    }
                    $scope.clickedSaveClient=true;
                    Client.edit($scope.client, function(resp) {
                        if (angular.equals(resp.status, "ok")) {
                            notificationService.success($filter('translate')("client_save_1") + " " + $scope.client.name + $filter('translate')("client_save_2"));
                            $location.path("/clients/" + resp.object.localId);
                        } else {
                            notificationService.error(resp.message);
                            $scope.clickedSaveClient=false;
                            $scope.errorMessage.show = true;
                            $scope.errorMessage.message = resp.message;
                        }
                    }, function() {
                        $scope.clickedSaveClient=false;
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                    });
                }
            }
            else {
                $scope.clientForm.name.$pristine = false;
                $scope.clientForm.state.$pristine = false;
                $scope.clientForm.region.$pristine = false;
            }
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
    }]);

function ClientOneController(serverAddress, $scope, $routeParams, $location, Client, Service, Contacts, Vacancy, $rootScope, notificationService,
                             $filter, ngTableParams,Person, Action, Task, CacheCandidates, File, FileInit, $translate, $uibModal, $route, Mail, $localStorage) {
    $scope.status = Client.getState();
    $scope.contactLimit = 3;
    $scope.vacancyCounter = 0;
    $scope.historyLimit = 20;
    $scope.serverAddress = serverAddress;
    $scope.todayDate = new Date().getTime();
    $scope.showAddedLinks = false;
    $scope.showAddedFiles = false;
    $scope.linked = false;
    $scope.showEditFileName = false;
    $scope.showMenuEdDelFile = false;
    $scope.showAddLink = false;
    $rootScope.changeResponsibleInClient = {id: "", comment: "", text: null, name: null};
    $scope.vacancy = null;
    $scope.onlyComments = false;
    $rootScope.clickedSaveClientStatus = false;
    $rootScope.toAdd = function() {
        $location.url('/client/add/');
        $location.path('/client/add/');
    };
    if($location.$$absUrl.indexOf('&task=') != -1) {
        $scope.urlTaskId = $location.$$absUrl.split('&task=')[1];
    }
    $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
    $(window).scrollTop(0);
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    Task.task($scope, $rootScope, $location, $translate, $uibModal, $route);
    $rootScope.newTask = {
        text: "",
        title: "",
        clientId: "",
        targetDate: '',
        responsibleIds: [],
        type: 'Task'
    };
    $scope.addLinkToClient = {
        name: '',
        url: ''
    };
    $scope.persons = [];

    Person.getAllPersons(function (resp) {
        $scope.associativePerson = resp.object;
        angular.forEach($scope.associativePerson, function (val, key) {
            if (angular.equals(resp.status, 'ok')) {
                $scope.persons.push($scope.associativePerson[key]);
            }
        });
        $rootScope.persons = $scope.persons;
        var iUser = null;
        for (var i = 0; i <= $scope.persons.length - 1; i++) {
            if ($rootScope.me.userId == $scope.persons[i].userId) {
                iUser = $scope.persons[i];
                $scope.persons.splice(i, 1);
                break;
            }
        }
        if (iUser) {
            $scope.persons.unshift(iUser);
        }
    });
    $scope.showAddResponsibleUser = function (person) {
        $rootScope.clickedSaveResponsibleInVacancy = false;
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/client-adding-responsible.html',
            size: '',
            resolve: function(){

            }
        });
        $rootScope.changeResponsibleInClient.id = person.userId;
        $rootScope.changeResponsibleInClient.name = person.cutFullName;
    };
    $scope.showRemoveResponsibleUser = function (user) {
        var firstName = user.firstName != undefined ? user.firstName : "";
        var lastName = user.lastName != undefined ? user.lastName : "";

        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/remove-responsible-from-client.html',
            size: '',
            resolve: function(){

            }
        });
        $rootScope.changeResponsibleInClient.id = user.userId;
        $rootScope.changeResponsibleInClient.text = $filter('translate')('Do you want to remove the responsible')
        + " " + firstName + " " + lastName;
    };
    $rootScope.removeResponsibleUserInVacancy = function () {
            Client.removeResponsible({
                clientId: $scope.client.clientId,
                personId: $rootScope.changeResponsibleInClient.id,
                comment: $rootScope.changeResponsibleInClient.comment
            }, function (resp) {
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('vacancy remove responsible'));
                    $scope.updateClient();
                }else{
                    notificationService.error(resp.message);
                }
                $rootScope.closeModal();
                $rootScope.changeResponsibleInClient.comment = "";
                $rootScope.changeResponsibleInClient.id = "";
            }, function (err) {

            });
    };
    $rootScope.saveResponsibleUserInVacancy = function () {
            Client.addResponsible({
                clientId: $scope.client.clientId,
                personId: $rootScope.changeResponsibleInClient.id,
                comment: $rootScope.changeResponsibleInClient.comment
            }, function (resp) {
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('set responsible'));
                    $scope.updateClient();
                }else{
                    notificationService.error(resp.message);
                }

            }, function (err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
            $rootScope.closeModal();
            $rootScope.changeResponsibleInClient.comment = "";
            $rootScope.changeResponsibleInClient.id = "";
    };

    $scope.updateClient = function () {
        $scope.showAddedLinks = false;
        $scope.showAddedFiles = false;
        Client.one({"localId": $routeParams.id}, function(resp) {
            if (angular.equals(resp.status, "ok")) {
                $scope.client = resp.object;
                $rootScope.client = $scope.client;
                $scope.locationBeforeCustomFields = $location.$$path.replace('/clients/' + $scope.client.localId, 'clients');
                $localStorage.set('previousHistoryCustomFields', $scope.locationBeforeCustomFields);
                $rootScope.newTask.clientId = $rootScope.client.clientId;
                $scope.updateTasks(true);
                $rootScope.title = resp.object.name + " | CleverStaff";
                if($scope.client.files){
                    if($scope.client.files.length != undefined && $scope.client.files.length != 0){
                        angular.forEach($scope.client.files, function (val) {
                            if(val.url){
                                $scope.showAddedLinks = true;
                            }
                            if(!val.url){
                                $scope.showAddedFiles = true;
                            }
                            initDocuments(val);
                        });
                    }
                } else{
                    $scope.showAddedLinks = false;
                    $scope.showAddedFiles = false;
                }
                $scope.statisticObj = {
                    requestObj: {clientId: resp.object.clientId},
                    objId: resp.userId,
                    objType: "user"
//            name: resp.object.position
                };
                $location.hash('');
                var name = "";
                name = resp.object.name != undefined ? name + resp.object.name.replace(/\W+/g, '_') : "";
                $location.search($filter('transliteration')(name)).replace();
                Service.history({
                    "vacancyId": null,
                    "candidateId": null,
                    "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
                    "page": {"number": 0, "count": $scope.historyLimit},
                    "onlyWithComment": false
                }, function (res) {
                    historyButton($scope, res, Service, CacheCandidates);
                });
                $("#descr").html($scope.client.descr);
            } else {
                notificationService.error($filter('translate')('client not found'));
                $location.path("clients");
            }
            $rootScope.contactEmails = [];
            angular.forEach($scope.client.contactClientList, function(val) {
                angular.forEach(val.contacts, function(valC) {
                    if (valC.type == 'email') {
                        var text = "";
                        if (val.firstName) text = text + val.firstName;
                        if (val.lastName) text = text + " " + val.lastName;
                        //text = text + " <" + valC.value + ">";
                        $rootScope.contactEmails.push({id: valC.value, text: text});
                    }
                })
            });

            if($scope.client.files){
                if($scope.client.files.length != undefined && $scope.client.files.length != 0){
                    angular.forEach($scope.client.files, function (val) {
                        if(val.url){
                            $scope.showAddedLinks = true;
                        }
                        if(!val.url){
                            $scope.showAddedFiles = true;
                        }
                        initDocuments(val);
                    });
                }
            } else{
                $scope.showAddedLinks = false;
                $scope.showAddedFiles = false;
            }
            $scope.showEditFileNameFunc = function(file){
                file.showEditFileName = !file.showEditFileName;
                file.showMenuEdDelFile = !file.showMenuEdDelFile;
                $scope.showMenuEdDelFile = false;
            };
            $scope.editFileName = function(data){
                File.changeFileName({
                    "fileId":data.fileId,
                    "name":data.fileName
                },function(resp){
                    if(resp.status == 'ok'){
                        data.showEditFileName = false;
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            };
            $scope.MenuEdDelFile = function(file){
                file.showMenuEdDelFile = true;
                $('body').mouseup(function (e) {
                    var element = $(".editFileMenu");
                    if ($(".editFileMenu").has(e.target).length == 0) {
                        file.showMenuEdDelFile = false;
                        $(document).off('mouseup');
                        $scope.$apply();
                    }
                });
            };
            $scope.objectId = resp.object.clientId;
            FileInit.initFileOption($scope, "client", undefined, $filter);
            $scope.fileForSave = [];
            $scope.linksForSave = [];
            $rootScope.fileForSave = [];    /*For modal window*/

            $scope.callbackFileTemplateInClient = function(resp, names) {
                $scope.fileForSave.push({"fileId": resp, "fileName": names});
                $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
            };
            $scope.removeFile = function(file) {
                Client.removeFile({"clientId": $scope.client.clientId, "fileId": file.fileId}, function (resp) {
                    if (resp.status == "ok") {
                        file.showMenuEdDelFile = false;
                        $scope.getLastEvent();
                        console.log(file.showMenuEdDelFile);
                    }
                    $scope.updateClient();
                });
                angular.forEach($scope.fileForSave, function(val, ind) {
                    if (val.attId === id) {
                        $scope.fileForSave.splice(ind, 1);
                    }
                });
                if ($scope.client.files.length === 0) {
                    delete $scope.client.files;
                    Client.progressUpdate($scope, false);
                }
            };
            $scope.callbackFile = function (resp, name) {
                if (!$scope.client.files) {
                    $scope.client.files = [];
                }
                $scope.client.files.push(resp);
                $scope.getLastEvent();
            };
            $rootScope.removeFile = function(id) {
                angular.forEach($rootScope.fileForSave, function(val, ind) {
                    if (val.attId === id) {
                        $rootScope.fileForSave.splice(ind, 1);
                    }
                });
            };
            $scope.showAddLinkFunc = function(){
                $scope.showAddLink = true;
                console.log($scope.showAddLink);
            };
            $scope.closeAddLinkFunc = function(){
                $scope.showAddLink = false;
                $scope.addLinkToClient.name = null;
                $scope.addLinkToClient.url = null;
                $scope.addLinkErrorShow = false;
            };
            $scope.addLinkInClient = function(){
                console.log($scope.addLinkToClient);
                if($scope.addLinkToClient.name && $scope.addLinkToClient.url){
                    if($rootScope.me.recrutRole != 'client'){
                        Client.addLink({
                            "clientId": $scope.client.clientId,
                            "name" : $scope.addLinkToClient.name,
                            "url" : $scope.addLinkToClient.url
                        }, function (resp){
                            if(resp.status === 'ok'){
                                $scope.addLinkToClient.name = null;
                                $scope.addLinkToClient.url = null;
                                $scope.addLinkErrorShow = false;
                                $scope.showAddLink = false;
                                //$scope.candidate.files.push(resp.object);
                                $scope.updateClient();
                                notificationService.success($filter('translate')('history_info.added_link'));
                            } else{
                                notificationService.error(resp.message);
                            }
                        });
                    }else{
                        notificationService.error($filter('translate')('This feature is available only to administrators and recruiters'));
                    }
                } else{
                    $scope.addLinkErrorShow = true;
                    if(!$scope.addLinkToClient.name)
                        notificationService.error($filter('translate')('Enter a URL name'));
                }
            };
        }, function() {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });
    };
    $scope.updateClient();


    if ($rootScope.me.recrutRole == 'client') {
        Person.getAllPersons(function(resp) {
            $scope.tableParams = new ngTableParams({
                page: 1,
                count: 15
            }, {
                total: 10,
                getData: function($defer, params) {
                    $scope.usersFound = false;
                    $scope.personAll = [];
                    var persons = angular.copy(resp.object);
                    angular.forEach(persons, function(val, key) {
                        if (($scope.regionId === undefined || $scope.regionId === null) && persons[key].status === 'A') {
                            $scope.personAll.push(persons[key]);
                            $scope.usersFound = true;
                        } else if (persons[key].region !== undefined) {
                            if ($scope.regionIdType == 'country' && persons[key].region.country == $scope.regionId && persons[key].status === 'A') {
                                $scope.personAll.push(persons[key]);
                                $scope.usersFound = true;
                            } else if ($scope.regionIdType == 'city' && $scope.regionId == persons[key].region.regionId && persons[key].status === 'A') {
                                $scope.personAll.push(persons[key]);
                                $scope.usersFound = true;
                            }
                        }

                    });
                    var personSS=[];
                    angular.forEach($scope.personAll,function(resp){
                        if (resp.recrutRole == 'client') {
                            personSS.push(resp);
                        }
                    });
                    $defer.resolve($filter('orderBy')(personSS, params.orderBy()));
                }
            });
        });
    }

    $scope.persons = [];

    $scope.personId = $rootScope.me.personId;

    $scope.save = function() {
        Client.edit($scope.client, function(resp) {
        });
    };

    $rootScope.commentClient = {
        comment: "",
        loading: false
    };
    $scope.showModalAddCommentToClient = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-comment-client.html',
            size: '',
            resolve: function(){

            }
        });
        $(document).unbind("keydown").keydown(function(e) {
            if (e.ctrlKey == true && e.which == 13) {
                $rootScope.addCommentInClient();
            }
        });
    };
    $rootScope.addCommentInClient = function() {
        if ($rootScope.commentClient.comment != undefined && $rootScope.commentClient.comment.length > 0) {
            $rootScope.commentClient.loading = true;
            Client.setMessage({
                comment: $rootScope.commentClient.comment,
                clientId: $scope.client.clientId
            }, function(resp) {
                $rootScope.commentClient.loading = false;
                $('.addMessageInClient').modal('hide');
                $rootScope.commentClient.comment = null;
                if (resp.status == 'ok') {
                    $scope.getLastEvent();
                    $rootScope.closeModal();
                }
            }, function(error) {
                $rootScope.commentClient.loading = false;
            });
        }
    };
    $rootScope.changeStatusInClient = {
        status: "",
        comment: "",
        header: "",
        placeholder: "",
        status_old: "",
        type: "edit"
    };

    $scope.showChangeStatusOfClient = function(status) {
        //$('.changeStatusInClient.modal').modal('show');
        $rootScope.changeStatusInClient.status = status;
        $rootScope.changeStatusInClient.status_old = $scope.client.state;
        $rootScope.changeStatusInClient.header = $filter('translate')('change_client_status');
        $rootScope.changeStatusInClient.placeholder = $filter('translate')("Write a comment about changing client's status (optional)");
        $rootScope.saveClientStatus();
    };
    $rootScope.saveClientStatus = function() {
        if (!$rootScope.clickedSaveClientStatus) {
            $rootScope.clickedSaveClientStatus = true;
            $scope.client.state = $rootScope.changeStatusInClient.status;

            Client.changeState({
                clientId: $scope.client.clientId,
                comment: $rootScope.changeStatusInClient.comment,
                clientState: $rootScope.changeStatusInClient.status
            }, function(resp) {
                if (resp.status == "ok") {
                    $rootScope.clickedSaveClientStatus = false;
                    notificationService.success($filter('translate')("client change state"));
                    $rootScope.changeStatusInClient.comment = "";
                    $rootScope.changeStatusInClient.status = null;
                    $scope.getLastEvent();
                    $('.changeStatusInClient.modal').modal('hide');
                } else {
                    $rootScope.clickedSaveClientStatus = false;
                    notificationService.error(resp.message);
                }
            }, function() {
                $('.changeStatusInClient.modal').modal('hide');
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        }
    };
    $('.ui.dropdown').dropdown();
    $scope.toAddContact = function(id) {
        $rootScope.contactClientAddId = $scope.client.localId;
        $location.path("contact/add/" + $scope.client.localId);
    };
    $scope.toAllVacancy = function(id) {
        $rootScope.searchedClientId = id;
        Vacancy.setOptions("clientId", id);
        $rootScope.searchClientId = id;
        $location.path("/vacancies");
    };
    $scope.toAddVacancy = function(id) {
        $rootScope.addVacancyClientId = id;
        $location.path("/vacancy/add/");
    };

    $scope.changeCommentFlag = function(history){
        history.editCommentFlag = !history.editCommentFlag;
        $scope.editComment = history.descr;
    };
    $scope.changeComment = function(action, comment){
        Action.editAction({"comment": comment, "actionId": action.actionId}, function(resp){
            if (resp.status && angular.equals(resp.status, "error")) {
                notificationService.error(resp.message);
            }
            else {
                action.editCommentFlag = false;
                action.descr = resp.object.descr;
                action.new_komment = '';
                action.dateEdit = resp.object.dateEdit;
            }
        });
    };
    $scope.showDeleteComment = function(resp) {
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/delete-comment-candidate.html',
            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });
        $rootScope.commentRemove = resp;
        $rootScope.commentRemoveId = resp.actionId;
    };

    $rootScope.deleteComment = function() {
        Action.removeMessageAction({
            actionId: $rootScope.commentRemoveId
        },function(resp){
            if (resp.status === "ok") {
                notificationService.success($filter('translate')('Comment removed'));
                angular.forEach($scope.history, function(val) {
                    if($rootScope.commentRemoveId == val.actionId){
                        $scope.history.splice($scope.history.indexOf(val), 1);
                    }
                });
                $scope.getLastEvent();
            } else {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            }
           $rootScope.closeModal();
        })
    };
    $scope.showCommentsFirstTime = function(){
        //$scope.onlyComments = !$scope.onlyComments;
        Service.history({
            "vacancyId": null,
            "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
            "page": {"number": 0, "count": $scope.historyLimit},
            "onlyWithComment":false
        }, function(res) {
            $scope.historyLimit = res.size;
            $scope.historyTotal = res.total;
            $scope.history = res.objects;
            $scope.onlyComments = false;
        });
    };
    $scope.showComments = function(){
        //$scope.onlyComments = !$scope.onlyComments;
        Service.history({
            "vacancyId": null,
            "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
            "page": {"number": 0, "count": $scope.historyLimit},
            "onlyWithComment":true
        }, function(res) {
            console.log(res, 'res');
            $scope.historyLimit = res.size;
            $scope.historyTotal = res.total;
            $scope.history = res.objects;
            $scope.onlyComments = true;
            $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
            //$("html, body").animate({ scrollTop: $(document).height() }, "slow");
        });
    };
    $scope.showDetails = function(){
        //$scope.onlyComments = !$scope.onlyComments;
        Service.history({
            "vacancyId": null,
            "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
            "page": {"number": 0, "count": $scope.historyLimit},
            "onlyWithComment":false
        }, function(res) {
            $scope.historyLimit = res.size;
            $scope.historyTotal = res.total;
            $scope.history = res.objects;
            $scope.onlyComments = false;
            $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
            //$("html, body").animate({ scrollTop: $(document).height() }, "slow");
        });
    };
    $scope.showCommentsSwitch = function () {
        if($scope.onlyComments) {
            $scope.showDetails();
        }  else {
            $scope.showComments();
        }
    };
    $scope.updateTasks = function(needOpenModal){
        Task.get({
            //'creator': $rootScope.me.userId,
            'clientId': $rootScope.client.clientId
        },function(resp){
            if(resp.status == 'ok'){
                $scope.totalTasksNumber = 0;
                $scope.totalTasksNumber = resp.total;
                $scope.clientTasks = resp.objects;
                if($scope.urlTaskId){
                    $rootScope.responsiblePersonsEdit = [];
                    angular.forEach($scope.clientTasks, function(resp){
                        if(resp.taskId == $scope.urlTaskId && needOpenModal){
                            $rootScope.editableTask = resp;
                            $scope.showModalEditTaskToCandidate($rootScope.editableTask);
                            $location.$$absUrl = $location.$$absUrl.split("&")[0];
                        }
                    });
                    if($rootScope.editableTask && $location.$$absUrl.indexOf('&task=') == -1){
                        $location.$$absUrl = $location.$$absUrl + '&task=' + $scope.urlTaskId;
                        angular.forEach($rootScope.editableTask.responsiblesPerson,function(resp){
                            angular.forEach($rootScope.persons,function(res){
                                if(resp.responsible.userId == res.userId){
                                    $rootScope.responsiblePersonsEdit.push(res);
                                    res.notShown = true;
                                    //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                                }
                            });
                        });
                        $('.editTaskInCandidate').modal('setting',{
                            onHide: function(){
                                $scope.urlTaskId = null;
                                $location.$$absUrl = $location.$$absUrl.split("&")[0];
                                $scope.$apply();
                            }
                        }).modal('show');
                    }
                }
            }else{
                notificationService.error(resp.message);
            }
        })
    };

    $scope.roundMinutes = function(date) {

        date.setHours(date.getHours());
        date.setMinutes(0);

        return date;
    };
    $(".changeDateNewTask").datetimepicker({
        format: "dd/mm/yyyy hh:00",
        startView: 2,
        minView: 1,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use(),
        initialDate: new Date(),
        startDate: new Date()
    }).on('changeDate', function (data) {
        $rootScope.newTask.targetDate = $('.changeDateNewTask').datetimepicker('getDate');
        $scope.roundMinutes($rootScope.newTask.targetDate)
    }).on('hide', function () {
        if ($('.changeDateNewTask').val() == "") {
            $rootScope.newTask.date = "";
        }
        $('.changeDateNewTask').blur();
    });
    $rootScope.updateTaskInModal = function(){
        $scope.updateTasks();
        $scope.getLastEvent();
    };
    $("#editDateTaskVacancy").datetimepicker({
        format: "dd/mm/yyyy hh:00",
        startView: 2,
        minView: 1,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use(),
        initialDate: new Date(),
        startDate: new Date()
    }).on('changeDate', function (data) {
        $rootScope.editableTask.targetDate = $('#editDateTaskVacancy').datetimepicker('getDate');
        roundMinutes($rootScope.editableTask.targetDate);
        Task.changeTargetDate({
            "taskId": $rootScope.editableTask.taskId,
            "date":$rootScope.editableTask.targetDate
        }, function(resp){
            $rootScope.updateTaskInModal();
        })
    }).on('hide', function () {
        if ($('#editDateTaskVacancy').val() == "") {
            $rootScope.editableTask.date = "";
        }
    });
    $(".withoutTimeTask").datetimepicker({
        format: "dd/mm/yyyy hh:00",
        startView: 2,
        minView: 1,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use(),
        initialDate: new Date(),
        startDate: new Date()
    }).on('changeDate', function (data) {
        $rootScope.editableTask.targetDate = $('.withoutTimeTask').datetimepicker('getDate');
        $scope.roundMinutes($rootScope.editableTask.targetDate);
        Task.changeTargetDate({
            "taskId": $rootScope.editableTask.taskId,
            "date":$rootScope.editableTask.targetDate
        }, function(resp){
            $scope.updateTasks();
            $scope.getLastEvent();
        })
    }).on('hide', function () {
        if ($('.withoutTimeTask').val() == "") {
            $rootScope.editableTask.date = "";
        }
        $('.withoutTimeTask').blur();
    });

    $scope.showModalAddTaskToCandidate = function (size) {
        angular.forEach($rootScope.persons,function(res){
            res.notShown = false;
        });
        $rootScope.responsiblePersonsEdit = [];
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/adding-task.html',
            size: size,
            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });
        $scope.modalInstance.opened.then(function() {
            setTimeout(function(){
                $(".changeDateNewTask").datetimepicker({
                    format: "dd/mm/yyyy hh:00",
                    startView: 2,
                    minView: 1,
                    autoclose: true,
                    weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                    language: $translate.use(),
                    initialDate: new Date(),
                    startDate: new Date()
                }).on('changeDate', function (data) {
                    $rootScope.newTask.targetDate = $('.changeDateNewTask').datetimepicker('getDate');
                    function roundMinutes(date) {

                        date.setHours(date.getHours() + Math.round(date.getMinutes()/60));
                        date.setMinutes(0);

                        return date;
                    }
                    $scope.roundMinutes($rootScope.newTask.targetDate)
                }).on('hide', function () {
                    if ($('.changeDateNewTask').val() == "") {
                        $rootScope.newTask.date = "";
                    }
                    $('.changeDateNewTask').blur();
                });
            },1)
        });
    };

    $scope.isInactive = function (clientObj) {
        var inactive = false;
        $scope.inactiveVacancies = [];
        angular.forEach(clientObj, function (vac) {
            if(vac.status == 'completed'  || vac.status == 'canceled' || vac.status == 'deleted') {
                inactive = true;
                $scope.inactiveVacancies.push(vac);
            }
        });
        return inactive;
    };
    //$rootScope.deleteResponsibleInEdit = function(responsible){
    //    if($rootScope.responsiblePersons.length > 1){
    //        angular.forEach($rootScope.responsiblePersons, function(resp){
    //            if (resp.userId == responsible.userId){
    //                responsible.notShown = false;
    //                $rootScope.responsiblePersons.splice($rootScope.responsiblePersons.indexOf(resp), 1);
    //            }
    //        });
    //        $rootScope.editNameTask();
    //    }else{
    //        notificationService.error($filter('translate')('The task must have at least one responsible'));
    //    }
    //};
    $rootScope.changeTabOnTask = function(val){
        if (val == "Task") {
            $rootScope.editableTask.type = 'Task';
        } else if (val == "Call") {
            $rootScope.editableTask.type = 'Call';
        } else if (val == "Meeting") {
            $rootScope.editableTask.type = 'Meeting';
        }
        $rootScope.editNameTask();
        $scope.updateTasks();
    };
    $rootScope.changeTabOnTaskForNewTask = function(val){
        if (val == "Task") {
            $rootScope.newTask.type = 'Task';
        } else if (val == "Call") {
            $rootScope.newTask.type = 'Call';
        } else if (val == "Meeting") {
            $rootScope.newTask.type = 'Meeting';
        }
        $scope.updateTasks();
    };
    $scope.getFirstLetters = function(str){
        return firstLetters(str)
    };
    ///////////////////////////////////////////////////////////////Sent Email
    $rootScope.emailTemplateInModal = {
        text: "Hi!<br/><br/>--<br/>Best, <br/>[[recruiter's name]]"
    };

    $scope.showCandidateSentEmail = function(){
        if($rootScope.me.emails.length == 0){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/no-synch-email.html',
                size: '',
                resolve: {

                }
            });
        }else{
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/client-send-email.html',
                size: '',
                resolve: {

                }
            });
            $scope.modalInstance.closed.then(function() {
                tinyMCE.remove()
            });
            console.log($rootScope.emailTemplateInModal);
            $scope.modalInstance.opened.then(function(){
                setTimeout(function(){
                    tinymce.init({
                        selector: '#modalMCE',
                        mode: 'exact',
                        theme: "modern",
                        height: 145,
                        language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {

                            });
                            ed.on('change', function(e) {
                                $rootScope.emailTemplateInModal.text = tinyMCE.get('modalMCE').getContent();
                            });
                        }
                    });
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $scope.client.fullName);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    setTimeout(function(){
                        tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                    },100);
                },0);
            });
            //angular.forEach($scope.candidate.contacts,function(resp){
            //    if(resp.type == 'email'){
            //        $rootScope.emailToSend = resp.value;
            //    }
            //});
        }
    };
    FileInit.initVacancyTemplateFileOption($scope, "", "", false, $filter);
    $scope.callbackFileForTemplate = function(resp, names) {
        $scope.fileForSave.push({"fileId": resp, "fileName": names});
        $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
    };
    $rootScope.addEmailFromWhatSend = function(email){
        if($rootScope.emailThatAlreadyUsed){
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace($rootScope.emailThatAlreadyUsed.email, email.email);
        }
        $rootScope.emailTemplateInModal.email = [];
        $rootScope.emailThatAlreadyUsed = email;
        localStorage.emailThatAlreadyUsed = email.email;
        $rootScope.emailTemplateInModal.email = $rootScope.emailTemplateInModal.email + email.email;
        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.emailTemplateInModal.email);
        tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
    };
    $rootScope.sentEmail = function(){
        Mail.sendMailByTemplate({
                toEmails: $rootScope.emailToSend,
                fullName: $scope.client.fullName,
                email: $rootScope.emailTemplateInModal.email,
                date: null,
                lang: $scope.lang,
                template: {
                    type: $rootScope.emailTemplateInModal.type,
                    title: $rootScope.emailTemplateInModal.title,
                    text: $rootScope.emailTemplateInModal.text,
                    fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                    fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                }
            },
            function (resp) {
                if(resp.status != 'ok'){
                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                }else{
                    notificationService.success($filter('translate')('Letter sent'));
                    $rootScope.closeModal();
                    $rootScope.emailToSend = null;
                    $rootScope.fileForSave = [];
                    $rootScope.emailTemplateInModal = {
                        text: "Hi [[candidate name]]!<br/><br/>--<br/>Best, <br/>[[recruiter's name]]"
                    };
                }
            });
    };

    ///////////////////////////////////////////////////////////////End of Sent Email
}
controller.controller('ClientOneController', ["serverAddress", "$scope", "$routeParams", "$location", "Client", "Service", "Contacts", "Vacancy",
    "$rootScope", "notificationService", "$filter", "ngTableParams",'Person',"Action", "Task", "CacheCandidates", "File", "FileInit", "$translate", "$uibModal", "$route", "Mail", "$localStorage", ClientOneController]);

controller.controller('ContactAddController',["$scope", "$location", "$routeParams", "$cookies", "Contacts", "Client", "$rootScope", "notificationService", "$filter", "$localStorage", "$window", function($scope, $location, $routeParams, $cookies, Contacts, Client, $rootScope, notificationService, $filter, $localStorage, $window) {
    $scope.showAddClient = true;
    $scope.pageType = "add";

    $scope.contacts = {
        skype: null,
        email: null,
        phone: null,
        mphone: null,
        facebook: null,
        homepage: null,
        linkedin: null,
        googleplus: null,
        vk: null,
        other: null
    };
    $scope.saveType = false;

    if ($localStorage.isExist("contactForSave")) {
        $scope.contact = angular.fromJson($localStorage.get("contactForSave"));
        $localStorage.remove("contactForSave");
        if ($scope.contact.contacts) {
            angular.forEach($scope.contact.contacts, function(val) {
                if (angular.equals(val.type, "email")) {
                    $scope.contacts.email = val.value;
                }
                if (angular.equals(val.type, "mphone")) {
                    $scope.contacts.mphone = val.value;
                }
                if (angular.equals(val.type, "skype")) {
                    $scope.contacts.skype = val.value;
                }
                if (angular.equals(val.type, "linkedin")) {
                    $scope.contacts.linkedin = val.value;
                }
                if (angular.equals(val.type, "facebook")) {
                    $scope.contacts.facebook = val.value;
                }
                if (angular.equals(val.type, "googleplus")) {
                    $scope.contacts.googleplus = val.value;
                }
                if (angular.equals(val.type, "homepage")) {
                    $scope.contacts.homepage = val.value;
                }
            });
        }
        $scope.contact.contacts = null;
    } else {
        Client.one({"localId": $routeParams.id}, function(resp) {
            if (resp.status == "ok") {
                // console.log("RESP");
                // console.log( $scope.client);
                $scope.client = resp.object;
                $scope.contact = {
                    clientId: {
                        clientId: $scope.client.clientId
                    }
                };
            } else {

            }
        });

    }
    // console.log("INIT");
    $scope.cancel = function() {
        console.log($routeParams.id);
        $location.path("/clients/" + $routeParams.id);
    };
    $scope.errorMessage = {
        show: false,
        message: ""
    };
    $scope.contact = null;
    $scope.save = function() {
        $scope.buttonClicked = true;
        if ($scope.contactForm.$valid && ($scope.contacts.mphone || $scope.contacts.email || $scope.contacts.skype || $scope.contacts.linkedin || $scope.contacts.facebook || $scope.contacts.googleplus || $scope.contacts.homepage)) {
            $scope.buttonClicked = false;
            var contacts = [];
            if ($scope.contacts.email) {
                contacts.push({type: "email", value: $scope.contacts.email});
            }
            if ($scope.contacts.skype) {
                contacts.push({type: "skype", value: $scope.contacts.skype});
            }
            if ($scope.contacts.mphone) {
                contacts.push({type: "mphone", value: $scope.contacts.mphone});
            }
            if ($scope.contacts.facebook) {
                contacts.push({type: "facebook", value: $scope.contacts.facebook});
            }
            if ($scope.contacts.homepage) {
                contacts.push({type: "homepage", value: $scope.contacts.homepage});
            }
            if ($scope.contacts.linkedin) {
                contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
            }
            if ($scope.contacts.googleplus) {
                contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
            }
            $scope.contact.contacts = contacts;
           if($scope.saveType === false){
               Contacts.add($scope.contact, function(resp) {
                   $scope.errorMessage.show = false;
                   if (angular.equals(resp.status, "ok")) {
                       notificationService.success($filter('translate')("contact save"));
                       $location.path("/contacts/" + resp.object.localId);
                   } else {
                       $scope.errorMessage.show = true;
                       $scope.errorMessage.message = resp.message;
                   }
               }, function() {
                   //notificationService.error($filter('translate')('service temporarily unvailable'));
                   $localStorage.set("contactForSave", $scope.contact);
                   $cookies.url = $location.$$url;
                   $cookies.cfauth = 'false';
                   $window.location.replace('/');

               });
           }else{
               Contacts.addContactAndSignUp($scope.contact, function(resp) {
                   $scope.errorMessage.show = false;
                   if (angular.equals(resp.status, "ok")) {
                       notificationService.success($filter('translate')("contact save"));
                       $location.path("/contacts/" + resp.object.localId);
                   } else {
                       $scope.errorMessage.show = true;
                       $scope.errorMessage.message = resp.message;
                   }
               }, function() {
                   //notificationService.error($filter('translate')('service temporarily unvailable'));
                   $localStorage.set("contactForSave", $scope.contact);
                   $cookies.url = $location.$$url;
                   $cookies.cfauth = 'false';
                   $window.location.replace('/');

               });
           }
        } else {
            $scope.contactForm.name.$pristine = false;
            $scope.contactForm.lastName.$pristine = false;
            $scope.contactForm.position.$pristine = false;
            if($scope.contactForm.name.$invalid || $scope.contactForm.lastName.$invalid){
                $('html, body').animate({scrollTop: $('.AddingContact').offset().top}, 800);
            }
            //if($scope.contacts.mphone || $scope.contacts.email || $scope.contacts.skype || $scope.contacts.linkedin || $scope.contacts.facebook || $scope.contacts.googleplus || $scope.contacts.homepage){
            //    $('.please-fill').removeClass("errorTxt");
            //}else{
            //    $('.please-fill').addClass("errorTxt");
            //}
        }
    };

}]);

controller.controller('ContactsController',["$scope", "ngTableParams", "Contacts", "$location", "Client", "$rootScope", "$filter", function($scope, ngTableParams, Contacts, $location, Client, $rootScope, $filter) {

    $rootScope.searchCheckContacts = $rootScope.searchCheckContacts == undefined ? false : $rootScope.searchCheckContacts;
    $scope.contactsShow = null;
    $scope.regionId = null;
    $scope.loader = false;
    $scope.isSearched = false;

    $scope.searchParam = {
        firstName: "",
        lastName: "",
        clientId: Contacts.searchOptions().clientId,
        value: "",
        pages: {count: 15}
    };

    if ($rootScope.previousLocation == '/contacts/:id') {
        if ($rootScope.searchParamInContacts != undefined) {
            $scope.searchParam = $rootScope.searchParamInContacts;
            $rootScope.searchParamInContacts = null;
        }
    }
    Client.all(Client.searchOptions(), function(response) {
        $scope.clients = response.objects;
    });
    $scope.toAdd = function() {
        $location.path('contact/add');
    };

    $scope.toContact = function(contact) {
        $location.path('/contacts/' + contact.localId);
    };

    listenerForScope($scope, $rootScope);
    $scope.tableParams = new ngTableParams({
        page: 1,
        count: $scope.searchParam.pages.count
    }, {
        total: 0,
        getData: function($defer, params) {
            Contacts.setOptions("page", {number: (params.$params.page - 1), count: params.$params.count});
            $scope.searchParam.pages.count = params.$params.count;
            Contacts.setOptions("firstName", $scope.searchParam['firstName'] ? $scope.searchParam['firstName'] : null);
            Contacts.setOptions("lastName", $scope.searchParam['lastName'] ? $scope.searchParam['lastName'] : null);
            Contacts.setOptions("clientId", $scope.searchParam['clientId'] ? $scope.searchParam['clientId'] : null);
            Contacts.setOptions("regions", $scope.regionId ? [$scope.regionId] : null);
            Contacts.setOptions("value", $scope.searchParam['value'] ? $scope.searchParam['value'] : null);
            Contacts.setOptions("personId", $rootScope.onlyMe ? $rootScope.userId : null);
            $scope.loading = true;
            Contacts.all(Contacts.searchOptions(), function(response) {
                $scope.objectSize = response['objects'] != undefined ? response['total'] : undefined;
                params.total(response['total']);
                $rootScope.searchParamInClients = $scope.searchParam;
                $scope.contactsShow = response['total'] >= 1;
                $defer.resolve($filter('orderBy')(response['objects'], params.orderBy()));
                Contacts.init();
                $scope.loading = false;
            });
            $rootScope.searchParamInContacts = $scope.searchParam;
        }
    });

    $scope.clickSearch = function() {
        $scope.loader = true;
        if ($scope.searchParam['firstName'] ||
            $scope.searchParam['lastName'] ||
            $scope.searchParam['clientId'] ||
            $scope.searchParam['value']) {
            $scope.tableParams.reload();
            $rootScope.searchCheckContacts = true;
        } else if ($rootScope.searchCheckContacts) {
            $scope.tableParams.reload();
            $rootScope.searchCheckContacts = false;
        }
        $scope.loader = false;
        $scope.isSearched = true;
    };


    $scope.toEditContact = function(id) {
        $location.path("/contact/edit/" + id);
    };

}]);

controller.controller('ContactEditController', ["$scope", "$rootScope", "$location", "$routeParams", "Contacts",
    "Client", "notificationService", "$filter", "$uibModal", function($scope, $rootScope, $location, $routeParams, Contacts, Client, notificationService, $filter, $uibModal) {
    $scope.contactId = $routeParams.contactId;
    $scope.showAddClient = false;
    $scope.pageType = "edit";
    $scope.contacts = {
        skype: null,
        email: null,
        phone: null,
        mphone: null,
        facebook: null,
        homepage: null,
        linkedin: null,
        googleplus: null,
        vk: null,
        other: null
    };
    $scope.errorMessage = {
        show: false,
        text: ""
    };
    $scope.cancel = function() {
        $location.path("/contacts/" + $routeParams.contactId);
    };
    Client.all(Client.searchOptions(), function(response) {
        $scope.clients = response.objects;
    });

    Contacts.one({"localId": $scope.contactId}, function(resp) {
        if (angular.equals(resp.status, "ok") && angular.equals(resp.object.status, "A")) {
            $scope.contact = resp.object;
            $scope.client = resp.object.clientId;
            $location.hash($filter('transliteration')(resp.object.firstName + "_" + resp.object.lastName)).replace();
            if (resp.object.contacts) {
                angular.forEach(resp.object.contacts, function(val) {
                    if (angular.equals(val.type, "email")) {
                        $scope.contacts.email = val.value;
                    } else if (angular.equals(val.type, "mphone")) {
                        $scope.contacts.mphone = val.value;
                    } else if (angular.equals(val.type, "skype")) {
                        $scope.contacts.skype = val.value;
                    }
                    else if (angular.equals(val.type, "facebook")) {
                        $scope.contacts.facebook = val.value;
                    }
                    else if (angular.equals(val.type, "homepage")) {
                        $scope.contacts.homepage = val.value;
                    }
                    else if (angular.equals(val.type, "linkedin")) {
                        $scope.contacts.linkedin = val.value;
                    }
                    else if (angular.equals(val.type, "googleplus")) {
                        $scope.contacts.googleplus = val.value;
                    }
                });
            }
        } else {
            notificationService.error($filter('translate')('contact not found'));
            $location.path("/contacts");
        }
    }, function() {
        //notificationService.error($filter('translate')('service temporarily unvailable'));
    });
    $scope.save = function() {
        $scope.buttonClicked = true;
        if ($scope.contactForm.$valid && ($scope.contacts.mphone || $scope.contacts.email || $scope.contacts.skype || $scope.contacts.linkedin || $scope.contacts.facebook || $scope.contacts.googleplus || $scope.contacts.homepage)) {
            $scope.buttonClicked = false;
            var contacts = [];
            if ($scope.contacts.mphone) {
                contacts.push({type: "mphone", value: $scope.contacts.mphone});
            }
            if ($scope.contacts.skype) {
                contacts.push({type: "skype", value: $scope.contacts.skype});
            }
            if ($scope.contacts.email) {
                contacts.push({type: "email", value: $scope.contacts.email});
            }
            if ($scope.contacts.facebook) {
                contacts.push({type: "facebook", value: $scope.contacts.facebook});
            }
            if ($scope.contacts.homepage) {
                contacts.push({type: "homepage", value: $scope.contacts.homepage});
            }
            if ($scope.contacts.linkedin) {
                contacts.push({type: "linkedin", value: $scope.contacts.linkedin});
            }
            if ($scope.contacts.googleplus) {
                contacts.push({type: "googleplus", value: $scope.contacts.googleplus});
            }
            $scope.contact.contacts = contacts;
            Contacts.edit($scope.contact, function(resp) {
                $scope.errorMessage.show = false;
                if (angular.equals(resp.status, "ok")) {
                    notificationService.success($filter('translate')("contact save"));
                    $location.path("/contacts/" + $scope.contact.localId);
                } else {
                    $scope.errorMessage.show = true;
                    $scope.errorMessage.message = resp.message;
                }
            }, function() {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        }else{
            if($scope.contactForm.name.$invalid || $scope.contactForm.lastName.$invalid){
                $('html, body').animate({scrollTop: $('.AddingContact').offset().top}, 800);
            }
            //if($scope.contacts.mphone || $scope.contacts.email || $scope.contacts.skype || $scope.contacts.linkedin || $scope.contacts.facebook || $scope.contacts.googleplus || $scope.contacts.homepage){
            //    $('.please-fill').removeClass("errorTxt");
            //}else{
            //    $('.please-fill').addClass("errorTxt");
            //}
        }
    };

    $rootScope.changeStateInContact = {status: "", fullName: null};
    $scope.delete = function() {
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/contact-remove-confirmation.html',
            size: '',
            resolve: function(){

            }
        });
        $rootScope.changeStateInContact.fullName = $scope.contact.firstName;
    };

    $rootScope.saveStatusOfContact = function () {
        $rootScope.clickedSaveStatusOfContact = true;
        $scope.contact.status = "R";
        Contacts.edit($scope.contact, function(resp) {
            $rootScope.clickedSaveStatusOfContact = false;
            $rootScope.closeModal();
            if (angular.equals(resp.status, "ok")) {
                notificationService.success($filter('translate')("Contact has been deleted"));
                console.log($scope.contact.clientId);
                $location.path("/clients/" + $scope.contact.clientId.localId);
            }
        }, function() {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });


    };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
}]);

controller.controller('ContactsOneController', ["$scope", "Contacts", "$routeParams", "$location", "notificationService", "$filter", function($scope, Contacts, $routeParams, $location, notificationService, $filter) {
    Contacts.one({"localId": $routeParams.id}, function(resp) {
        if (resp.status === "error" || angular.equals(resp.object.status, "R")) {
            notificationService.error($filter('translate')('contact not found'));
            if (resp.object && resp.object.clientId && resp.object.clientId.localId) {
                $location.path('/clients/' + resp.object.clientId.localId);
            } else {
                $location.path('/clients');
            }
        } else {

            $scope.contact = resp.object;
            $location.hash($filter('transliteration')(resp.object.firstName + "_" + resp.object.lastName)).replace();
            $scope.contacts = {
                skype: null,
                email: null,
                phone: null,
                mphone: null,
                facebook: null,
                homepage: null,
                linkedin: null,
                googleplus: null,
                vk: null,
                other: null
            };
            if (resp.object.contacts) {
                angular.forEach(resp.object.contacts, function(val) {
                    switch (val.type) {
                        case "email":
                            $scope.contacts.email = val.value;
                            break;
                        case "mphone":
                            $scope.contacts.mphone = val.value;
                            break;
                        case "facebook":
                            $scope.contacts.facebook = val.value;
                            break;
                        case "homepage":
                            $scope.contacts.homepage = val.value;
                            break;
                        case "linkedin":
                            $scope.contacts.linkedin = val.value;
                            break;
                        case "googleplus":
                            $scope.contacts.googleplus = val.value;
                            break;
                        case "vk":
                            $scope.contacts.vk = val.value;
                            break;
                        case "other":
                            $scope.contacts.other = val.value;
                            break;
                        case "phone":
                            $scope.contacts.phone = val.value;
                            break;
                        case "skype":
                            $scope.contacts.skype = val.value;
                            break;
                    }
                });
            }
        }
    }, function() {
        //notificationService.error($filter('translate')('service temporarily unvailable'));
    });
}]);

controller.controller('addEmailForTemplateController', ["$scope", "$translate", "$routeParams", "$rootScope",
    "notificationService", "$filter","Person", "Candidate", "googleService","$uibModal",
    function ($scope,$translate, $routeParams, $rootScope, notificationService, $filter, Person, Candidate, googleService, $uibModal) {
        $rootScope.showAdvancedFields = false;
        $scope.loading = true;
        $scope.showPassword = false;
        $rootScope.showPassInModal = true;
        $rootScope.editEmail = false;
        $scope.wrongEmail = false;
        $scope.checkFields = false;
        $rootScope.addedEmail ={
            host: "email",
            email: "",
            name: $rootScope.me.fullName,
            password: "",
            smtp: {}
        };
        $rootScope.editedEmail ={
            host: "email",
            email: "",
            name: $rootScope.me.fullName,
            password: "",
            smtp: {}
        };
        $scope.updateCreatedEmails = function(){
            Person.personEmails({type: 'all'},function(resp){
                if(resp.status == 'ok'){
                    if(resp.objects.length > 0){
                        $scope.emails = resp.objects;
                        $scope.showAddEmail = false;
                    }else{
                        $scope.showAddEmail = true;
                    }
                }else{
                    notificationService.error(resp.message);
                }
                $scope.loading = false;
            });
        };
        $scope.updateCreatedEmails();
        $rootScope.addEmail = function(){
                if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{1,15})+$/.test($rootScope.addedEmail.email)) {
                    $scope.wrongEmail = false;
                    if($rootScope.addedEmail.email.length > 0){
                        var emailDomen = $rootScope.addedEmail.email.substr($rootScope.addedEmail.email.indexOf("@") + 1);
                        if(!$rootScope.showAdvancedFields || !$scope.showPassword){
                            if(emailDomen == 'mail.ru' || emailDomen == 'yandex.ru'){
                                Candidate.checkMailbox({email: $rootScope.addedEmail.email}, function(resp){
                                    if(resp.status == 'ok'){
                                        if(resp.message != undefined) {
                                            $rootScope.addedEmail.smtp.host = $scope.parseParam(resp.message).host;
                                            $rootScope.addedEmail.smtp.port = $scope.parseParam(resp.message).port;
                                            $rootScope.addedEmail.smtp.secure = $scope.parseParam(resp.message).secure;
                                        }
                                        if(emailDomen == 'mail.ru'){
                                            $rootScope.addedEmail.smtp.type = 'mailru';
                                        }else if(emailDomen == 'yandex.ru'){
                                            $rootScope.addedEmail.smtp.type = 'yandex';
                                        }
                                        $scope.showPassword = true;
                                        if($rootScope.addedEmail.password.length > 1){
                                            Candidate.addEmailAccess($rootScope.addedEmail, function(resp){
                                                if(resp.status == 'error'){

                                                    notificationService.error(resp.message);
                                                }else{
                                                    $scope.updateCreatedEmails();
                                                    $rootScope.updateMe();
                                                }
                                            });
                                        }
                                    }
                                });
                            }else if(emailDomen == 'gmail.com'){
                                googleService.gmailAuth("modify",function(result) {
                                    console.log('gmail add-1', result)
                                    $rootScope.addedEmail.email = result.email;
                                    $rootScope.addedEmail.password = result.code;
                                    $rootScope.addedEmail.host = 'gmail';
                                    Candidate.addEmailAccess($rootScope.addedEmail, function(resp){
                                        if(resp.status == 'error'){
                                            if(resp.code == 'сouldNotGetRefreshTokenIntegration') {
                                                $scope.modalInstance = $uibModal.open({
                                                    animation: true,
                                                    templateUrl: '../partials/modal/gmail-access.html',
                                                    scope: $scope,
                                                    resolve: {
                                                    }
                                                });
                                            } else
                                            notificationService.error(resp.message);
                                        }else{
                                            $scope.updateCreatedEmails();
                                            $rootScope.updateMe();
                                        }
                                    });
                                });
                            }else{
                                Candidate.checkMailbox({email: $rootScope.addedEmail.email}, function(resp){
                                    if(resp.status == 'ok'){
                                        $rootScope.itsGmail = resp.code;
                                        if(resp.code == 'gmail'){
                                            googleService.gmailAuth("modify",function(result) {
                                                console.log('gmail add-2', result)
                                                $rootScope.addedEmail.email = result.email;
                                                $rootScope.addedEmail.password = result.code;
                                                $rootScope.addedEmail.host = 'gmail';
                                                Candidate.addEmailAccess($rootScope.addedEmail, function(resp){
                                                    if(resp.status == 'error'){
                                                        if(resp.code == 'сouldNotGetRefreshTokenIntegration') {
                                                            $scope.modalInstance = $uibModal.open({
                                                                animation: true,
                                                                templateUrl: '../partials/modal/gmail-access.html',
                                                                scope: $scope,
                                                                resolve: {
                                                                }
                                                            });
                                                        } else
                                                        notificationService.error(resp.message);
                                                    }else{
                                                        $scope.updateCreatedEmails();
                                                        $rootScope.updateMe();
                                                    }
                                                });
                                            });
                                        }else{
                                            if(resp.message != undefined) {
                                                $rootScope.addedEmail.smtp.host = $scope.parseParam(resp.message).host;
                                                $rootScope.addedEmail.smtp.port = $scope.parseParam(resp.message).port;
                                                $rootScope.addedEmail.smtp.secure = $scope.parseParam(resp.message).secure;
                                            }
                                            $scope.showPassword = true;
                                            $rootScope.showAdvancedFields = true;
                                        }
                                    }
                                });
                            }
                        }else{
                            if($rootScope.addedEmail.smtp.host != undefined && $rootScope.addedEmail.smtp.port != undefined && $rootScope.addedEmail.password != undefined) {
                                Candidate.addEmailAccess($rootScope.addedEmail, function(resp){
                                    if(resp.status == 'error'){
                                        notificationService.error(resp.message);
                                    }else{
                                        $scope.updateCreatedEmails();
                                        $rootScope.updateMe();
                                    }
                                });
                            }
                        }
                    }
                }else {
                    $scope.wrongEmail = true;
                }
        };
        $rootScope.editEmailFuc = function(){
            var emailDomen = $rootScope.editedEmail.email.substr($rootScope.editedEmail.email.indexOf("@") + 1);
            if(!$rootScope.showAdvancedFields){
                if(emailDomen == 'mail.ru' || emailDomen == 'yandex.ru'){
                    if($rootScope.editedEmail.email.length > 0 && $rootScope.editedEmail.password.length > 0){
                        if(emailDomen == 'mail.ru'){
                            $rootScope.editedEmail.smtp.type = 'mailru';
                        }else if(emailDomen == 'yandex.ru'){
                            $rootScope.editedEmail.smtp.type = 'yandex';
                        }
                        Candidate.editEmailAccess($rootScope.editedEmail, function(resp){
                            if(resp.status == 'error'){
                                notificationService.error(resp.message);
                            }else{
                                $scope.updateCreatedEmails();
                                $rootScope.closeModal();
                            }
                        });
                    }else{
                        notificationService.error($filter('translate')('Please enter your password'));
                    }
                }else if(emailDomen == 'gmail.com' || emailDomen == 'gmail' || $rootScope.itsGmail == 'gmail' || $rootScope.itsGmailModal == 'gmail'){
                    googleService.gmailAuth("modify",function(result) {
                        $rootScope.editedEmail.password = result.code;
                        $rootScope.addedEmail.email = result.email;
                        $rootScope.editedEmail.host = 'gmail';
                        Candidate.editEmailAccess($rootScope.editedEmail, function(resp){
                            if(resp.status == 'error'){
                                if(resp.code == 'сouldNotGetRefreshTokenIntegration') {
                                    $scope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/gmail-access.html',
                                        scope: $scope,
                                        resolve: {
                                        }
                                    });
                                } else
                                notificationService.error(resp.message);
                            }else{
                                $scope.updateCreatedEmails();
                                $rootScope.closeModal();
                            }
                        });
                    });
                }else{
                    $rootScope.showAdvancedFields = true;
                }
            } else {
                if($rootScope.editedEmail.host = 'email'){
                    if($rootScope.editedEmail.email.length > 0 && $rootScope.editedEmail.password.length > 0) {
                        Candidate.editEmailAccess($rootScope.editedEmail, function (resp) {
                            if (resp.status == 'error') {
                                if(resp.message == 'сouldNotGetRefreshTokenIntegration') {
                                    $scope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/gmail-access.html',
                                        scope: $scope,
                                        resolve: {
                                        }
                                    });
                                } else
                                notificationService.error(resp.message);
                            } else {
                                $scope.updateCreatedEmails();
                                $scope.editEmail = false;
                                $rootScope.closeModal();
                            }
                        });
                    }else {
                        notificationService.error($filter('translate')('Please enter your password'));
                    }
                }
            }
        };
        $scope.showEditeTemplateModal = function(email){
            $rootScope.itsGmailModal = email.sendStatus;
            $rootScope.showAdvancedFields = false;
            $rootScope.editedEmail.host = 'email';
            $rootScope.editedEmail.email = email.email;
            $rootScope.editedEmail.permitConversation = email.permitConversation;
            $rootScope.editedEmail.host = 'gmail';
            $rootScope.editedEmail.permitParsing = email.permitParsing;
            $rootScope.editedEmail.permitSend = email.permitSend;
            var emailDomen = $rootScope.editedEmail.email.substr($rootScope.editedEmail.email.indexOf("@") + 1);
            if(emailDomen == 'mail.ru' || emailDomen == 'yandex.ru'){
                if(emailDomen == 'mail.ru'){
                    $rootScope.editedEmail.smtp.type = 'mailru';
                }else if(emailDomen == 'yandex.ru'){
                    $rootScope.editedEmail.smtp.type = 'yandex';
                }
                $rootScope.showPassInModal = true;
            }else if(emailDomen == 'gmail.com' || emailDomen == 'gmail' || email.sendStatus == 'gmail'){
                $rootScope.showPassInModal = false;
            }else{
                $rootScope.showPassInModal = true;
                $rootScope.showAdvancedFields = true;
                $rootScope.editedEmail.smtp.host = email.smtpHost;
                $rootScope.editedEmail.smtp.secure = email.smtpSecure;
                $rootScope.editedEmail.smtp.port = email.smtpPort;
            }
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/edit-integration-with-email.html',
                size: '',
                resolve: function(){

                }
            });
        };
        $scope.setDefault = function(){
            $rootScope.addedEmail ={
                host: "email",
                email: "",
                name: $rootScope.me.fullName,
                password: "",
                smtp: {}
            };
            $scope.showAdvancedFields = false;
            $rootScope.showAdvancedFields = false;
            $scope.showPassword = false;
        };
        $scope.showRemoveEmail = function(emailForDelete){
            $rootScope.emailForDelete = emailForDelete;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/email-integration-remove.html',
                size: '',
                resolve: function(){

                }
            });
        };
        $scope.parseParam = function (params) {
            return {
                host: params.substr((params.indexOf("host") + 5), (params.indexOf(", smtp_port") - params.indexOf("host") - 5)),
                port: + params.substr((params.indexOf("port") + 5), (params.indexOf(", smtp_secure") - params.indexOf("port") - 5)),
                secure: params.substr((params.indexOf("secure") + 7), (params.indexOf("}") - params.indexOf("secure") - 7))
            }
        };
        $rootScope.removePersonEmail = function(){
            Person.removePersonEmail({email : $rootScope.emailForDelete.email},function(resp){
                if(resp.status == 'ok'){
                    $scope.updateCreatedEmails();
                    $rootScope.updateMe();
                    $scope.setDefault();
                    $('.removeEmail').modal('hide');
                }else{
                    notificationService.error(resp.message);
                }
            });
            $scope.closeModal();
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
    }]);



controller.controller('cloudAdminController', ["$rootScope", "$http", "$scope", "$translate", "FileInit", "$location", "Service", "Candidate","Account","Company", "notificationService", "$filter",
    "$localStorage", "$cookies", "$window", "serverAddress","$routeParams", "$uibModal",
    function($rootScope, $http, $scope, $translate, FileInit, $location, Service, Candidate,Account,Company, notificationService, $filter, $localStorage,
             $cookies, $window, serverAddress,$routeParams, $uibModal) {

        if($rootScope.me){
            if($rootScope['me']['personParams']['domainAdmin'] == 'all'){
                $scope.title = 'Admin Panel of all accounts';
            }else{
                $scope.title =  "Admin Panel of domain" + $rootScope['me']['personParams']['domainAdmin'];
            }
        }

        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };

        $rootScope.loading = true;
        Account.getAccountsInfo({},function (resp) {
            $rootScope.loading = false;
            if(!resp)return;
            $scope.data = resp['object'];
        });



        $scope.tableHeads = ['points','score','account','country','created','regUsers','tarif','paidTill','trialEnd','block',
                             'integratedEmails','invites', 'hrModule','balance','payUsers','latestPaymentByCard','amount',
                             'purpose','activeUsers','vacancies','candidates','lastAtion','server'];


        $scope.scroll = 0;
        $scope.max = 1;

        $scope.sortCriteria = "points";
        $scope.reverseSort = true;

        $scope.dateError = false;
        $scope.amountError = false;
        $scope.commentError = false;
        $scope.newPayment = {};
        $scope.selectedAccount = {};


        $scope.leftScroll = (function () {
            var elems = document.querySelectorAll('.admin-panel'),
                max = 0,
                scroll = 0;
                return function () {
                    elems.forEach(item => {
                        if(max <= 0){
                            max = item.scrollWidth - item.scrollLeft - item.clientWidth - 1;
                            $scope.max = max;
                        }
                        scroll = item.scrollLeft += 500;
                        $scope.scroll = scroll;
                    })
                };
        })();

        $scope.rightScroll = (function () {
            var elems = document.querySelectorAll('.admin-panel'),
                min = 0,
                scroll = 0;
            return function () {
                elems.forEach(item =>{
                    scroll = item.scrollLeft -= 500;
                    $scope.scroll = scroll;
                })
            };
        })();

        $scope.sortBy = function(head) {
            if(head !== $scope.sortCriteria) {
                $scope.sortCriteria = head;
                $scope.reverseSort = true;
            } else {
                $scope.reverseSort = !$scope.reverseSort;
            }
        };

        $scope.addNewPayment = function() {
            $scope.dateError = !$scope.newPayment.date;
            $scope.amountError = !$scope.newPayment || !$scope.newPayment.amount;
            $scope.commentError = !!($scope.newPayment && $scope.newPayment.amount < 0 && !$scope.newPayment.comment);

            if(!$scope.amountError && !$scope.commentError && !$scope.dateError) {
                Account.addTransactionForFinancier({
                    orgId: $scope.selectedAccount.orgId,
                    targetDate: $scope.newPayment.date,
                    doubleAmount: $scope.newPayment.amount,
                    descr: $scope.newPayment.comment
                }, function (resp) {
                    console.log(resp);
                    if(resp.status === "ok") {
                        $scope.modalInstance.close();
                        notificationService.success($filter('translate')('Payment was added'));
                    } else {
                        notificationService.error(resp.message);
                    }
                });
            }
        };

        $scope.limitFloats = function() {
            if($scope.newPayment && $scope.newPayment.amount && $scope.newPayment.amount % 1 !== 0) {
                $scope.newPayment.amount = +($scope.newPayment.amount).toFixed(2);
            }
        };

        function resetPayment() {
            $scope.newPayment.date = null;
            $scope.newPayment.amount = null;
            $scope.newPayment.comment = "";
            $scope.dateError = false;
            $scope.amountError = false;
            $scope.commentError = false;
        }

        $scope.openNewPayment = function(account) {
            resetPayment();
            $scope.selectedAccount.orgId = account.orgId;
            $scope.selectedAccount.account = account.account;
            $scope.newPayment.date = Date.now();
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/cloud-admin-new-payment.html?b=9',
                size: '',
                scope: $scope,
                resolve: {}
            });
            // $scope.modalInstance.opened.then(function() {
            //     setTimeout(function(){
            //         $(".setPaymentDate").datetimepicker({
            //             format: "dd-MM",
            //             startView: 2,
            //             minView: 2,
            //             autoclose: true,
            //             weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            //             language: $translate.use(),
            //             startDate: new Date(new Date().setDate(new Date().getDate() - 7)),
            //             endDate:  new Date(),
            //             maxViewMode: 4
            //         }).on('changeDate', function (data) {
            //             $scope.newPayment.date = data.date;
            //         }).on('hide', function () {
            //             $('.setPaymentDate').blur();
            //         });
            //         $('th.switch').bind('click' , function() {
            //             return false; // disabling month and year nagivation
            //         })
            //     },1)
            // });
        }
    }]);
controller.controller('CustomFieldController',["$localStorage", "$rootScope", "$scope", "$filter", "CustomField", "notificationService", "$timeout", "$uibModal",
    function($localStorage, $rootScope, $scope, $filter, CustomField, notificationService, $timeout, $uibModal) {
        var _setFildid;
        $scope.showCancelBtn = false;
        $scope.showDropDownSelect = false;
        $scope.inputRadioShow = true;
        $scope.inputRadioSelectShow = true;
        $scope.showText = true;
        $scope.showDropdown = true;
        $scope.showDate = true;
        $scope.showDateTime = true;
        $scope.tabsForFields = 'Vacancies';
        $rootScope.tabsForFields = 'Vacancies';
        $scope.locationBeforeCustomFields = $localStorage.get('previousHistoryCustomFields');

        $rootScope.closeModal = function(){
            $rootScope.modalInstance.close();
        };


        $scope.tabsForCustomFields = function(tabs){
            $scope.tabsForFields = tabs;
            $rootScope.tabsForFields = tabs;


            if($scope.tabsForFields == 'Candidates'){
                $scope.getFullFields();
            }else if($scope.tabsForFields == 'Clients'){
                $scope.getFullFields();
            }else if($scope.tabsForFields == 'Vacancies'){
                $scope.getFullFields();
            }
        };



        if($scope.locationBeforeCustomFields == 'candidates'){
            $scope.tabsForFields = 'Candidates';
            $localStorage.remove("previousHistoryCustomFields");
        } else if($scope.locationBeforeCustomFields == 'clients'){
            $scope.tabsForFields = 'Clients';
            $localStorage.remove("previousHistoryCustomFields");
        } else if($scope.locationBeforeCustomFields == 'vacancies'){
            $scope.tabsForFields = 'Vacancies';
            $localStorage.remove("previousHistoryCustomFields");
        }
        $scope.typeField = function(type){
            $scope.typeCustomField = type;
            if(type == 'select'){
                $scope.showDropDownSelect = true;
                $("#customFullField").select2("val", "");
            }else{
                $scope.showDropDownSelect = false;
            }
        };

        $scope.addCustomField = function(){
            $scope.count = 0;
            angular.forEach($scope.allObjCustomField, function(val) {
                if(val.orderIndex != undefined && $scope.count <= val.orderIndex){
                    $scope.count = val.orderIndex;
                }
            });
            CustomField.addField({
                objType:  $scope.tabsForFields == 'Vacancies' ? 'vacancy' : 'vacancy' &&  $scope.tabsForFields == 'Candidates' ? 'candidate' : 'candidate' && $scope.tabsForFields == 'Clients' ? 'client' : 'client',
                type: $scope.typeCustomField == null ? notificationService.error($filter('translate')('Choose the field type')) : $scope.typeCustomField,
                title: $scope.fieldTitle == undefined ||  $scope.fieldTitle == '' ? notificationService.error($filter('translate')('Enter the field title')) :  $scope.fieldTitle,
                orderIndex: ++$scope.count
            }, function(resp) {
                if (resp.status == "ok") {
                    $scope.objCustomField = resp.object;
                    console.log($scope.objCustomField);
                    $scope.fieldTitle = '';
                    $scope.typeCustomField = null;
                    $scope.getFullFields();
                    notificationService.success($filter('translate')('New field added'));
                } else {
                    //notificationService.error(resp.message);
                }
            });
        };
        $scope.getFullFields = function(){
            CustomField.getFullFields({
                objectType: $scope.tabsForFields == 'Vacancies' ? 'vacancy' : 'vacancy' &&  $scope.tabsForFields == 'Candidates' ? 'candidate' : 'candidate' && $scope.tabsForFields == 'Clients' ? 'client' : 'client'
            }, function(resp) {
                if (resp.status == "ok") {
                    console.log( resp.objects, ' resp.objects');
                    $scope.allObjCustomField = resp.objects;
                } else {
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.getFullFields();



        $scope.removeCustomField = function(fieldId){

            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/questionToDeleteFilds.html',
                backdrop: 'static'
            });

            $rootScope.setAccess = function (value) {
                var access = value;
                if(access) {
                    CustomField.removeField({
                        fieldId: fieldId
                    }, function (resp) {
                        if (resp.status == "ok") {
                            notificationService.success($filter('translate')('The field was deleted'));
                            $scope.getFullFields();
                            $rootScope.closeModal();
                        } else {
                            notificationService.error(resp.message);
                        }
                    });
                }else{
                    $rootScope.closeModal();
                }
            };
        };

        $scope.editCustomField = function (fieldId, type) {
            $('.backdrop-custom-fields').css('display', 'block');
            $('.marginTop').css({'z-index': '1041', 'position': 'absolute', 'left': '65%', 'width': '65%'});
            $scope.showCancelBtn = true;
            $scope.editTypeField = type;
            $scope.fieldId = fieldId;
            $scope.oldState = $scope.getSelect2Group().split(",");

            if(type == 'select'){
                CustomField.getFullField({
                    fieldId: fieldId
                }, function(resp) {
                    if (resp.status == "ok") {
                        $scope.oneFullCustomField = resp.object;
                        $scope.fieldTitle =  $scope.oneFullCustomField.title;
                        $scope.typeCustomField = $scope.oneFullCustomField.type;
                        $scope.showDropDownSelect = true;
                        $scope.inputRadioShow = false;
                        $scope.inputRadioSelectShow = true;

                        console.log($scope.oneFullCustomField.params, '$scope.oneFullCustomField.params');
                        var groupNameList = [];
                        angular.forEach($scope.oneFullCustomField.params, function(val) {
                            groupNameList.push(val.value);
                        });
                        $scope.setSelect2Group(groupNameList);

                        if($scope.typeCustomField == 'select'){
                            $scope.showText = false;
                            $scope.showDropdown = true;
                            $scope.showDate = false;
                            $scope.showDateTime = false;
                        }
                    } else {
                        notificationService.error(resp.message);
                    }
                });
            }else{
                CustomField.getField({
                    fieldId: fieldId
                }, function(resp) {
                    if (resp.status == "ok") {
                        $scope.oneCustomField = resp.object;
                        $scope.fieldTitle =  $scope.oneCustomField.title;
                        $scope.typeCustomField =  $scope.oneCustomField.type;
                        //$scope.typeCustomField = null;
                        $scope.showDropDownSelect = false;
                        $scope.inputRadioShow = false;
                        $scope.inputRadioSelectShow = false;
                        if($scope.typeCustomField == 'string'){
                            $scope.showText = true;
                            $scope.showDropdown = false;
                            $scope.showDate = false;
                            $scope.showDateTime = false;
                        }else if($scope.typeCustomField == 'date'){
                            $scope.showText = false;
                            $scope.showDropdown = false;
                            $scope.showDate = true;
                            $scope.showDateTime = false;
                        }else if($scope.typeCustomField == 'datetime'){
                            $scope.showText = false;
                            $scope.showDropdown = false;
                            $scope.showDate = false;
                            $scope.showDateTime = true;
                        }
                    } else {
                        notificationService.error(resp.message);
                    }
                });



            }
        };
        $scope.cancelEditCustomField = function () {
            $('.backdrop-custom-fields').css('display', 'none');
            $('.marginTop').css({'z-index': 'inherit', 'position': 'inherit', 'left': '0', 'width': '100%'});
            $scope.showCancelBtn = false;
            $scope.fieldTitle = '';
            $scope.typeCustomField = null;
            $scope.inputRadioShow = true;
            $scope.inputRadioSelectShow = true;
            $scope.showDropDownSelect = false;
            $scope.showText = true;
            $scope.showDropdown = true;
            $scope.showDate = true;
            $scope.showDateTime = true;




        };
        $scope.saveEditCustomField = function(){
             var value = '',
                 array = [];

             if($scope.editTypeField == 'select'){
                 var newGroupList = ($scope.getSelect2Group().split(",")[0] == "" && $scope.getSelect2Group().split(",").length == 1)?[]:$scope.getSelect2Group().split(","),
                     oldGroupeList = $scope.oneFullCustomField.params;
             }



            if(!$scope.fieldTitle.length){
                notificationService.error($filter('translate')('Enter the field title'));
                return
            } else if(newGroupList && newGroupList.length  < 1 ){
                notificationService.error($filter('translate')('Enter a value for the drop-down list'));
                return;
            }
            CustomField.editField({
                title: $scope.fieldTitle,
                fieldId: $scope.editTypeField == 'select' ? $scope.oneFullCustomField.fieldId : $scope.oneCustomField.fieldId
            }, function(resp) {
                if (resp.status == "ok") {
                    //$scope.saveEditedCustomField = resp.object;
                    //$scope.fieldTitle =  $scope.saveEditedCustomField.title;
                    console.log(resp.object);

                    $scope.getFullFields();
                    $('.backdrop-custom-fields').css('display', 'none');
                    $('.marginTop').css({'z-index': 'inherit', 'position': 'inherit', 'left': '0', 'width': '100%'});
                    notificationService.success($filter('translate')('The field is saved'));
                    $scope.showCancelBtn = false;
                    $scope.fieldTitle = '';
                    $scope.inputRadioSelectShow = true;
                    $scope.inputRadioShow = true;
                    $scope.typeCustomField = null;
                    $scope.showDropDownSelect = false;
                    $scope.showText = true;
                    $scope.showDropdown = true;
                    $scope.showDate = true;
                    $scope.showDateTime = true;
                } else {
                    notificationService.error(resp.message);
                }
            });

            if($scope.editTypeField == 'select'){
                angular.forEach(newGroupList, function (item) {
                    array.push({
                        name: 'defaultValue',
                        value: item,
                        orgId: $rootScope.me.orgId
                    });
                });
                CustomField.addFieldParams({
                    fieldParams:array,
                    fieldId: $scope.fieldId
                }, function (resp) {
                    console.log(resp, 'resp!!')
                });

            }
        };
        console.log($scope.tabsForFields, '$scope.tabsForFields');
        $scope.tabsForCustomFields($scope.tabsForFields);
    }]);

/**
 * Created by вик on 19.04.2017.
 */

controller.controller('EfficiencyController', ["$scope", "$rootScope", "$filter", "$window", "Efficiency", "googleService", "notificationService", function($scope, $rootScope, $filter, $window, Efficiency, googleService, notificationService) {
    $scope.extensionHas = false;
    $scope.showConnectEmail = true;
    if ($rootScope.eventListenerPing) {
        document.removeEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    }
    $rootScope.eventListenerPing = function(event) {
        console.log('extension has');
        $scope.extensionHas = true;
    };
    document.addEventListener('cleverstaffExtensionPong', $rootScope.eventListenerPing);
    document.dispatchEvent(new CustomEvent('cleverstaffExtensionPing'));

    $scope.getPlugin = function() {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            $window.open("https://chrome.google.com/webstore/detail/cleverstaff-extension/mefmhdnojajocbdcpcajdjnbccggbnha");
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
            $window.open("/extension/CleverstaffExtension4Firefox.xpi");
        } else {
            $("#bad-browser-modal").modal("show");
        }
    };
    $scope.getBrowser = function() {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            return "Chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            return "Firefox";
        } else {
            return $filter("translate")("browser");
        }
    };
    $scope.isGoodBrowser = function() {
        return $scope.getBrowser() === "Chrome" || $scope.getBrowser() === "Firefox";
    };

    $scope.connectGoogleCalendar = function() {
        if (!$rootScope.me.googleMail) {
            $rootScope.curentOnlyMenWatch = $rootScope.$watch('g_info', function(val) {
                if ($rootScope.g_info !== undefined && $rootScope.g_info.email !== undefined) {
                    Person.setSocial({email: $rootScope.g_info.email, social: "google"}, function(resp) {
                        if (resp.status && angular.equals(resp.status, "error")) {
                            notificationService.error(resp.message);
                            $rootScope.g_info = null;
                        } else {
                            if ($scope.user) {
                                $scope.user.googleMail = $rootScope.g_info.email;
                            }
                            notificationService.success($filter('translate')("gmail change"));
                            googleService.login();
                            $rootScope.initGoogleCalendar = true;
                        }
                    }, function() {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $rootScope.g_info = null;
                    });
                    $rootScope.curentOnlyMenWatch();
                }
            });
            googleService.loginLink(function(resp) {
            });
        } else {
            googleService.login();
            $rootScope.initGoogleCalendar = true;
        }
    };

    Efficiency.get(function(resp) {
        console.log(resp)
    });

}]);

controller.controller('evaluationController', ["$scope", "$rootScope", "$timeout", "$window", "$translate", "Person", function($scope, $rootScope, $timeout, $window, $translate, Person) {
    Person.getMe(function(resp) {
        if (resp.login) {
            $.ajax({
                url: "/hr/person/checkEmail",
                type: "GET",
                data: "email=" + resp.login + "&lang=en",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(data) {
                    if (data.status === "ok") {
                        $scope.isSignUp = false;
                    } else {
                        $scope.isSignUp = localStorage.getItem("demo_social") && localStorage.getItem("demo_social_code");
                    }
                }
            });
        } else {
            $scope.isSignUp = false;
        }
    });


    $scope.toSignup = function() {
        if ($scope.isSignUp) {
            $scope.signin()
        } else {
            var url = "/signup";
            if ($translate.use() === 'ua') {
                url += '-ua';
            } else if ($translate.use() === 'en') {
                url += '-en';
            }
            if ($rootScope.me.login != 'leonid.martovskiy@fargopersonal.net' && $rootScope.me.login != 'lorne.malvo@fargorecruitment.net') {
                url += ("?login=" + $rootScope.me.login + "&name=" + $rootScope.me.fullName + "&company=" + $rootScope.me.orgName);
                if ($rootScope.me.phone !== undefined) {
                    url += "&phone=" + $rootScope.me.phone;
                }
                if (localStorage.demo_social) {
                    url += "&s=" + localStorage.getItem("demo_social");
                }
                $window.location.replace(url);
            } else {
                $window.location.replace(url);
            }
        }

    };

    $scope.signin = function(code, social) {
        $scope.signinLoading = true;
        $.ajax({
            url: "/hr/person/auth",
            type: "POST",
            data: '{"socialKey":"' + localStorage.getItem("demo_social_code") + '","social":"' + localStorage.getItem("demo_social") + '","lang":"' + $translate.use() + '"}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(data) {
                $scope.signinLoading = false;
                console.log(data);
                if (data.personId !== undefined) {
                    window.location.replace("/!#/organizer");
                } else {
                    window.location.replace("/?q=auth");
                }
                localStorage.removeItem("demo_social_code");
                localStorage.removeItem("demo_social");
            },
            error: function(){
                $scope.signinLoading = false;
                window.location.replace("/?q=auth");
            }
        });
    }
}]);

controller.controller('excelHistoryController', ["$localStorage", "frontMode", "googleService", "serverAddress", "$rootScope",
    "$scope", "$routeParams", "Vacancy", "$location", "Candidate", "notificationService", "$translate", "$filter", "$window",
    function ($localStorage, frontMode, googleService, serverAddress, $rootScope, $scope, $routeParams, Vacancy,
              $location, Candidate, notificationService, $translate, $filter, $window) {
        $scope.serverAddress = serverAddress;
        Candidate.getSearchHistoryAdmin({type: 'cleverstaff_excel'}, function (resp) {
            if (angular.equals(resp.status, "ok")) {
                $scope.history = resp.objects;
            }
        });
        $rootScope.changeSearchType = function(param){
            $window.location.replace('/!#/candidates');
            $rootScope.changeSearchTypeNotFromCandidates = param;
        }
    }]);

controller.controller('FeedbackController',["$localStorage", "serverAddress", "$rootScope", "$scope", "Person", "notificationService", "$location", "$filter",
    function($localStorage, serverAddress, $rootScope, $scope, Person, notificationService, $location, $filter) {
        $scope.pageUserWhriteFeedback = $location.$$absUrl;
        $localStorage.get('previousHistoryFeedback');
        $scope.previousPage = $localStorage.get('previousHistoryFeedback');
        $scope.oneAtATime = true;
        $scope.hideFeedbackButton = function(){
            Person.changeUserParam({
                name: 'sendDesignFeedback',
                value: 'Y'
            },function(resp){
                if(resp.status == 'ok'){
                    Person.getMe(function(response){
                        $rootScope.me = response.object;
                    });
                }else{
                    notificationService.error(resp.message);
                }
            })
        };
        $scope.regex = "";

        $('textarea').keyup(function() {
            var first = $(this).val().length;
            if(first > 0){
                $('.textarea').removeClass('notWriteError');
            }
        });
        $scope.goFeedbackThanks = function(){
            if($scope.regex.length === 0){
                $('.textarea').addClass('notWriteError');
                $('.enterYourRequest').attr('placeholder', $filter('translate')('Please enter your request'));
                $('.describeIssue').attr('placeholder', $filter('translate')('Please describe the issue'));
                $('.enterYourProposal').attr('placeholder', $filter('translate')('Please enter your proposal'));
            }else{
                $('.textarea').removeClass('notWriteError');
                $location.path('/feedback/thanks');
            }
        };

        $('input.input_checkbox').on('change', function() {
            $('input.input_checkbox').not(this).prop('checked', false);
        });
    }]);

function navBarController($q, Vacancy, serverAddress, notificationService, $scope, tmhDynamicLocale, $http, Person, $rootScope, Service,
                          $route, $window, $location, $filter, $sce, $cookies, localStorageService, $localStorage, $timeout, CheckAccess,
                          frontMode, $translate, Client, ScopeService, googleService, Company, $uibModal, Notice, Pay, News, TooltipService, Account) {
    $scope.onlyMe = null;
    $scope.orgCheck = true;
    $scope.onlyMeCheck = false;
    $scope.regionCheck = false;
    $rootScope.blockUser = false;
    $scope.billingEnabled = false;
    $scope.cutForTest = 18;
    $scope.activeNewsCounter = 3;
    $scope.activeNewsCounterEng = 3;
    $scope.shoowNewsFlag = true;
    $scope.news = [];
    $scope.newsEng = [];
    $scope.readedNews = [];
    //localStorage.setItem("readedNews", '');
    if(localStorage.readedNews){
        $scope.readedNews = (JSON.parse(localStorage.getItem('readedNews')));
    }
    $rootScope.closeModal = function(){
        $rootScope.modalInstance.close();
    };
    $rootScope.closeNavModal = function(){
        if($rootScope.modalInstance)
        $rootScope.modalInstance.close();
    };

    $rootScope.badInternetObj = {show: false};
    $rootScope.frontMode = frontMode;
    $rootScope.initGoogleCalendar = false;

    $scope.inviteHiringManager = function(){
        $rootScope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'partials/modal/invite-new-user.html?b4',
            size: '',
            resolve: function(){

            }
        });
        $rootScope.modalInstance.opened.then(function(){
            $rootScope.inviteUser.role = 'client';
        });
        $rootScope.modalInstance.closed.then(function() {
            $rootScope.inviteUser.role = null;
            $rootScope.inviteUser.email = null;
        });
    };

    Service.getRegions2(function (resp) {
        $scope.regions = resp;
        var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('choose_region')+'</option>';
        angular.forEach($scope.regions, function (value) {
            optionsHtml += "<option style='color: #000000' value='" + (value.id).replace(/\'/gi,"") + "'>" + value.name + "</option>";
        });
        $('#cs-region-filter-select-scope').html(optionsHtml);
        $('.cs-region-filter-select-scope2').html(optionsHtml);
    });

    $rootScope.getBrowser = function () {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            return "chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            return "firefox";
        } else {
            return "all";
        }
    };

    $rootScope.callbackErr = function (err) {
        notificationService.error(err);
    };
    $rootScope.closeModalForTestAccount = function(){
        $rootScope.closeNavModal();
        $location.path("/pay");
    };
    $rootScope.hideTariff = true;
    $scope.blockInfo = function(){
        Company.getParams(function(resp){
            $rootScope.companyParams = resp.object;
            $scope.differenceDatesForPay = differenceBetweenTwoDates(new Date(), new Date($rootScope.companyParams.paidTillDate));
            //$scope.differenceDatesForHrModulePay = differenceBetweenTwoDates(new Date(), new Date($rootScope.companyParams.tarifHrModule == 'free' ? $rootScope.companyParams.trialEmployeeEndDate : $rootScope.companyParams.paidHrModuleTillDate));
            $rootScope.nowDate = new Date().getTime();
            $rootScope.otherDate = new Date($rootScope.companyParams.trialEndDate).getTime();
            if($rootScope.otherDate >= $rootScope.nowDate){
                $rootScope.hideTariff = true;
            }else if ($rootScope.companyParams.tarif == 'standard'){
                $rootScope.hideTariff = true;
            }else if($rootScope.companyParams.tarif == 'free' && $rootScope.otherDate >= $rootScope.nowDate) {
                $rootScope.hideTariff = true;
            }else if ($rootScope.companyParams.tarif == undefined){
                $rootScope.hideTariff = true;
            }else if ($rootScope.otherDate < $rootScope.nowDate){
                $rootScope.hideTariff = false;
                setTimeout(function(){
                    if($rootScope.me.recrutRole == 'client'){
                        $rootScope.blockAccountHmNotPaid();
                    }
                },2000);
                $rootScope.disabledBtnFunc = function(){
                    $rootScope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/disabled-btn-for-test-account.html',
                        resolve: {
                            items: function () {

                            }
                        }
                    });
                    $('.overModal').removeClass('overModal');
                };
                $rootScope.disabledBtnFuncUserModal = function(){
                    $rootScope.closeModal();
                    $rootScope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/disabled-btn-for-test-account.html',
                        resolve: {
                            items: function () {

                            }
                        }
                    });
                    $('.overModal').removeClass('overModal');
                };
            }else if($rootScope.companyParams.tarif == 'free') {
                $rootScope.hideTariff = false;
                setTimeout(function(){
                    if($rootScope.me.recrutRole == 'client'){
                        $rootScope.blockAccountHmNotPaid();
                    }
                },2000);
                $rootScope.disabledBtnFunc = function(){
                    $rootScope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/disabled-btn-for-test-account-before-14-days.html',
                        resolve: {
                            items: function () {

                            }
                        }
                    });
                    $('.overModal').removeClass('overModal');
                };
                $rootScope.disabledBtnFuncUserModal = function(){
                    $rootScope.closeModal();
                    $rootScope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/disabled-btn-for-test-account-before-14-days.html',
                        resolve: {
                            items: function () {

                            }
                        }
                    });
                    $('.overModal').removeClass('overModal');
                };
            }
            if($scope.differenceDatesForPay < 0){
                $scope.differenceDatesForPay = Math.abs($scope.differenceDatesForPay);
            }else{
                $scope.differenceDatesForPay = -$scope.differenceDatesForPay;
            }
            if(resp.object.block == 'Y'){
                $rootScope.blockUser = true;
                $scope.bonuce = 0;
                $rootScope.blockUserData = resp.object;
                if(!$rootScope.blockUserData.payment_min_users){
                    $rootScope.blockUserData.payment_min_users = 1;
                }
                angular.forEach($('#countPeople option'),function(res){
                    if(Number(res.value) <= $rootScope.blockUserData.payment_min_users){
                        res.remove();
                    }
                });
                $('#countPeople').prepend("<option selected>"+$rootScope.blockUserData.payment_min_users+"</option>");
                $scope.countMonth = $('#countMonth').val();
                $scope.countPeople = $('#countPeople').val();
                $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                $('#price').html($scope.price + " USD");
                $('.checkoutInner select').on('change', function () {
                    $scope.countMonth = $('#countMonth').val();
                    $scope.countPeople = $('#countPeople').val();
                    if ($scope.countMonth >= 12) {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                    }
                    else if ($scope.countMonth >= 4) {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                    }
                    else {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                    }

                    $('#price').html($scope.price + " USD");
                    $scope.$apply();
                });
                $('#blockMessgae').html($rootScope.blockUserData.block_text);
            }else{
                $rootScope.blockUser = false;
            }
            if(resp.object.billing === 'Y') {
                $scope.billingEnabled = true;
            }
        });
    };

    $scope.blockInfo();

    $rootScope.removeLogo = function () {
        Service.removeLogo(function (resp) {
            if ($rootScope.companyLogo != undefined) {
                if (angular.equals(resp.status, "ok")) {
                    $rootScope.companyLogo = undefined;
                }
            }
        });
    };

    $rootScope.showAddLogo = function () {
        if ($rootScope.me.recrutRole == 'admin') {
            $("#logo").click();
        } else {
            notificationService.error($filter('translate')('Only admin can set logo'));
        }
    };

    $scope.openNoticeMenu = function () {
        $('#open-notice-button').blur();
        var noticesCont = $("#notices");
        if (noticesCont.css('display') == 'none') {
            $(".noticeIcon").css({"background-color": "rgba(0, 0, 0, 0.11)"});
            //noticesCont.toggle('slide', {direction: 'up'}, 400);
            $(noticesCont).slideDown(400);
            $('body').mouseup(function (e) {
                var noticesElement = $("#notices");
                if(noticesElement.has(e.target).length === 0){
                    noticesCont.slideUp();
                    $(".noticeIcon").css({"background-color": "rgba(0, 0, 0, 0)"});
                    $(document).off('mouseup');
                }
            });
        } else {
            noticesCont.slideUp();
            $("#notice_element_icon").css({"background-color": "rgba(0, 0, 0, 0)"});
            $(document).off('mouseup')
        }
    };
    //$scope.toggleNoticeMenu = function(){
    //    $('body').click(function (e) {
    //        var noticesElement = $("#notices");
    //        if(noticesElement.has(e.target).length === 0 && !noticesElement.is(e.target)){
    //            noticesElement.slideUp();
    //            $(".noticeIcon").css({"background-color": "rgba(0, 0, 0, 0)"});
    //            $(document).off('mouseup');
    //        }
    //    });
    //};
    //$scope.toggleNoticeMenu();
    $scope.showScopeFunc = function(){
        var scopeShow = $(".showScopeMenu");
        if (scopeShow.css('display') == 'none') {
            $(scopeShow).slideDown();
        } else {
            $('body').mouseup(function (e) {
                if ($(".showScopeMenu").has(e.target).length === 0) {
                    scopeShow.slideUp();
                    $(document).off('mouseup');
                }
            });
        }
    };

    $rootScope.candidatePreview = null;
    $rootScope.serverAddress = serverAddress;
    $rootScope.statusInter = Vacancy.getInterviewStatus();
    $rootScope.statusInterFull = Vacancy.getInterviewStatusFull();
    $rootScope.serverAddress = serverAddress;

    var cancelRefresh;
    var myIntervalFunction = function () {
        CheckAccess.check($window);
        $rootScope.i = 0;
        cancelRefresh = $timeout(function myFunction() {
            CheckAccess.check($window);
            cancelRefresh = $timeout(myFunction, 300000);
        }, 300000);
    };
    $scope.toAdd = function (name) {
        $location.path(name);
    };
    $rootScope.inviteUser = {
        role: null,
        email: null
    };

    var isBlock = function (callback) {
        var done = false;
        Person.getAllPersons(function (resp) {
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson , function (val) {
                if (val.login == $rootScope.inviteUser.email) {
                    callback(val);
                    done = true;
                }
            });
            if (!done) {
                callback(false)
            }
        }, function (resp) {
            callback(false)
        })
    };

    $rootScope.addInvite = function () {
        if ($rootScope.frontMode === 'war') {
            if ($rootScope.inviteUser.role == null) {
                notificationService.error($filter('translate')('need role'));
            } else if ($rootScope.inviteUser.email == null) {
                notificationService.error($filter('translate')('wrong_email'));
            } else {
                isBlock(function (resp) {
                    if (resp && resp.status == 'N') {
                        $rootScope.inviteUserBlock = true;
                        $rootScope.errorMessageType = "inviteBlockUser";
                        $location.path("/users/" + resp.userId);
                        // $rootScope.closeNavModal();
                        $rootScope.inviteUser.email = "";
                    } else if (resp && resp.status == 'A') {
                        notificationService.error("<a href='#/users/" + resp.userId + "'>" + resp.fullName + "</a> (" + resp.login + ") " + $filter("translate")("has already working in your account"));
                        $rootScope.closeNavModal();
                        $rootScope.inviteUser.email = "";
                    } else {
                        Person.inviteUser({
                            email: $rootScope.inviteUser.email,
                            role: $rootScope.inviteUser.role,
                            //clientId: $rootScope.inviteUser.clientId,
                            lang: $translate.use()
                        }, function (resp) {
                            if (resp.status && angular.equals(resp.status, "error")) {
                                notificationService.error(resp.message);
                                //$('.addUserInvite.modal').modal('hide');
                                //$rootScope.inviteUser.email = "";
                            } else {
                                notificationService.success($filter('translate')('user_was_invite_1') + $rootScope.inviteUser.email + $filter('translate')('user_was_invite_2'));
                                $rootScope.closeNavModal();
                                $rootScope.inviteUser.email = "";
                                if ($location.path() == '/company/users') {
                                    $route.reload();
                                }
                                $rootScope.inviteUser = {
                                    role: 'recruter',
                                    email: ''
                                };
                            }
                        }, function (resp) {
                            //notificationService.error($filter('translate')('service temporarily unvailable'));
                        });
                    }
                })
            }
        } else {
            notificationService.error($filter('translate')('This function is not available at the demo version'));
        }
    };

    // Client.all(Client.searchOptions(), function (response) {
    //     $rootScope.clientsForInvite = response.objects;
    // });

    $rootScope.userRole = [
        {"name": "Recruiter", "value": "recruter"},
        {"name": "Admin", "value": "admin"},
        {"name": "Sales Manager", "value": "salesmanager"},
        {"name": "Client", "value": "client"},
        {"name": "Freelancer", "value": "freelancer"},
        {"name": "Researcher", "value": "researcher"}
    ];

    myIntervalFunction();
    $scope.scopeStyle = {'max-width': "160px"};

    $scope.changeLanguage = function (key) {
        Person.setLang({lang:key},function(resp){

        });
        $translate.use(key);
        $rootScope.currentLang = key;
    };


    $scope.openRegionList = function () {
        if (document.createEvent) {
            var regionList = $("#regionList");
            console.log(regionList);
            var e = document.createEvent("MouseEvents");
            e.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            regionList[0].dispatchEvent(e);
        } else if (element.fireEvent) {
            regionList[0].fireEvent("onmousedown");
        }
    };

    $scope.getTrialTime = function (getMe) {
        console.log(getMe, 'getMe');
        var dc = getMe["org"]["dc"],
            maxDayTrial = 14 * (86400*1000), // перевод в милисек максимальное триал время
            nowDay = Date.now(),
            difference = nowDay - dc,
            result =  Math.ceil((maxDayTrial - difference)/(86400*1000)) ;
        console.log(new Date(dc));

        $scope.digit = " " + result + " ";
        $scope.getMeObj = getMe;
    };

    $scope.HoverBlockTrialShow = function () {
        $scope.hoverBlockTrial = true;
    };
    $scope.HoverBlockTrialHidden = function () {
        $scope.hoverBlockTrial = false;
    };

    $scope.changeOrg = function (callback) {
        if ($rootScope.me.org.orgId != $scope.orgId) {
            Person.changeOrg({"orgId": $scope.orgId}, function (resp) {
                if (resp.personId) {
                    Person.getMe(function (resp) {
                        $rootScope.me = resp.object;
                        $rootScope.userId = resp.object.userId;
                        $rootScope.differenceCreateOrgDate = differenceBetweenTwoDates(new Date(), $rootScope.me.org.dc);
                        //if($rootScope.me.recrutRole == "freelancer"){
                        //    $scope.changeScope('onlyMy');
                        //}
                        $rootScope.closeNavModal();

                    });
                    Service.getRegions2(function (resp) {
                        $scope.regions = resp;
                    });
                    if ($rootScope.currentLocation == "/personInfo/:id") {
                        $location.path('/personInfo/' + resp.userId);
                    }
                    $route.reload();
                    if (callback != undefined) {
                        callback();
                    }
                } else if (resp.message) {
                    notificationService.error($filter('translate')("You can't change the company, because") + ' ' + resp.message);
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $scope.regionId = null
            }, function (resp) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        } else {
            if (callback != undefined) {
                callback();
            }
        }
    };

    $scope.toDetailUserInfo = function() {
        $location.path("/personInfo/" + $rootScope.me.userId);
    };
    $('.ui.dropdown').dropdown();
    $rootScope.updateMe = function(){
        Person.getMe(function (response) {
            if(response.status != 'error'){
                if (response.object.orgParams !== undefined) {
                    function isServerURL() {
                        return (response.object.orgParams !== undefined && response.object.orgParams.serverURL !== undefined && response.object.orgParams.serverURL !== null && response.object.orgParams.serverURL !== '' && response.object.orgParams.serverURL !== 'https://dev.cleverstaff.net/' && response.object.orgParams.serverURL !== 'http://dev2.cleverstaff.net/')
                    }

                    if (isServerURL()) {
                        $window.location.href = response.object.orgParams.serverURL + "!#" + $location.path();
                    }
                }
                $rootScope.updateQuestStatus();
                if (response.object.personParams != undefined && response.object.personParams.lang != undefined) {
                    $rootScope.currentLang = response.object.personParams.lang === 'en' || response.object.personParams.lang === 'ru' ? response.object.personParams.lang : 'en';
                    tmhDynamicLocale.set($rootScope.currentLang);
                    $translate.use($rootScope.currentLang);
                }
                $rootScope.me = response.object;
                $rootScope.orgs = response.object.orgs;
                $scope.orgId = response.object.orgId;
                $scope.nameUser = (response.object.firstName ? response.object.firstName : " ") + " " + (response.object.lastName ? response.object.lastName : " ");
                $rootScope.userId = response.object.userId;
                if (response !== undefined) {
                    Service.getOrgLogoId({orgId: response.object.orgId}, function (logoResp) {
                        if (logoResp.status === 'ok') {
                            $rootScope.companyLogo = logoResp.object;
                        }
                    });
                }

                if($rootScope.me.recrutRole == 'admin') {
                    Account.getAccountInfo(function(resp){
                        if(resp.status != 'error'){
                            if(resp.object && resp.object.tillDate) {
                                $scope.tarif = resp.object.tarif;
                                $('#bilEnabledText').removeClass('hidden');
                                $rootScope.paidTillDateBilling = resp.object.tillDate.year + '-' + resp.object.tillDate.monthValue + '-' + resp.object.tillDate.dayOfMonth;
                            } else {
                                $('#bilDisabledText').removeClass('hidden');
                            }
                            if(resp.object && resp.object.monthRate && resp.object.dailyRate) {
                                $scope.monthRate = resp.object.monthRate;
                                $scope.dailyRate = resp.object.dailyRate;
                                $('#dailyRate').html($scope.dailyRate);
                                $('#monthRate').html($scope.monthRate);
                            }
                                $scope.monthRate = resp.object.monthRate;
                                if($rootScope.blockUser){
                                    $scope.bonuce = 0;
                                    if(!$rootScope.blockUserData.payment_min_users){
                                        $rootScope.blockUserData.payment_min_users = 1;
                                    }
                                    angular.forEach($('#countPeople option'),function(res){
                                        if(Number(res.value) <= $rootScope.blockUserData.payment_min_users){
                                            res.remove();
                                        }
                                    });
                                    $('#countPeople').prepend("<option selected>"+$rootScope.blockUserData.payment_min_users+"</option>");
                                    $scope.countMonth = $('#countMonth').val();
                                    $scope.countPeople = $('#countPeople').val();
                                    if(!$scope.monthRate) {
                                        if ($scope.countMonth >= 12) {
                                            $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.8;
                                        }
                                        else if ($scope.countMonth >= 4) {
                                            $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.9;
                                        }
                                        else {
                                            $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                                        }
                                    } else {
                                        $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople ;
                                    }

                                    $('#price').html($scope.price + " USD");
                                    $('.checkoutInner select').on('change', function () {
                                        console.log("changed");
                                        $scope.countMonth = $('#countMonth').val();
                                        $scope.countPeople = $('#countPeople').val();
                                        if(!$scope.monthRate) {
                                            if ($scope.countMonth >= 12) {
                                                $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.8;
                                            }
                                            else if ($scope.countMonth >= 4) {
                                                $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.9;
                                            }
                                            else {
                                                $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                                            }
                                        } else {
                                            if ($scope.countMonth >= 12) {
                                                $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                                                $('#bonuce').removeClass('hidden');
                                                $rootScope.bonuce = 20;
                                                $('#amountBonus').html((($rootScope.bonuce * $scope.price)/100 + $scope.price) + ' USD');
                                            }
                                            else if ($scope.countMonth >= 4) {
                                                $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                                                $('#bonuce').removeClass('hidden');
                                                $rootScope.bonuce = 10;
                                                $('#amountBonus').html((($rootScope.bonuce * $scope.price)/100 + $scope.price) + ' USD');
                                            }
                                            else {
                                                $('#bonuce').addClass('hidden');
                                                $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                                            }
                                        }


                                        $('#price').html($scope.price + " USD");
                                        $scope.$apply();
                                    });
                                    $('#blockMessgae').html($rootScope.blockUserData.block_text);
                                }
                                if(!$scope.$$phase) {
                                    $scope.$apply();
                                }

                        }else{
                            notificationService.error(resp.message);
                        }

                        ///////////For account on billing - tarif in AccountInfo request
                        if(!$rootScope.companyParams.tarif && resp.object.tarif) {
                            $rootScope.companyParams.tarif = resp.object.tarif;
                            $rootScope.nowDate = new Date().getTime();
                            $rootScope.otherDate = new Date($rootScope.companyParams.trialEndDate).getTime();
                            if($rootScope.otherDate >= $rootScope.nowDate){
                                $rootScope.hideTariff = true;
                            }else if ($rootScope.companyParams.tarif == 'standard'){
                                $rootScope.hideTariff = true;
                            }else if($rootScope.companyParams.tarif == 'free' && $rootScope.otherDate >= $rootScope.nowDate) {
                                $rootScope.hideTariff = true;
                            }else if ($rootScope.otherDate < $rootScope.nowDate){
                                $rootScope.hideTariff = false;
                                setTimeout(function(){
                                    if($rootScope.me.recrutRole == 'client'){
                                        $rootScope.blockAccountHmNotPaid();
                                    }
                                },2000);
                                $rootScope.disabledBtnFunc = function(){
                                    $rootScope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/disabled-btn-for-test-account.html',
                                        resolve: {
                                            items: function () {

                                            }
                                        }
                                    });
                                    $('.overModal').removeClass('overModal');
                                };
                                $rootScope.disabledBtnFuncUserModal = function(){
                                    $rootScope.closeModal();
                                    $rootScope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/disabled-btn-for-test-account.html',
                                        resolve: {
                                            items: function () {

                                            }
                                        }
                                    });
                                    $('.overModal').removeClass('overModal');
                                };
                            }else if($rootScope.companyParams.tarif == 'free') {
                                $rootScope.hideTariff = false;
                                setTimeout(function(){
                                    if($rootScope.me.recrutRole == 'client'){
                                        $rootScope.blockAccountHmNotPaid();
                                    }
                                },2000);
                                $rootScope.disabledBtnFunc = function(){
                                    $rootScope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/disabled-btn-for-test-account-before-14-days.html',
                                        resolve: {
                                            items: function () {

                                            }
                                        }
                                    });
                                    $('.overModal').removeClass('overModal');
                                };
                                $rootScope.disabledBtnFuncUserModal = function(){
                                    $rootScope.closeModal();
                                    $rootScope.modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: '../partials/modal/disabled-btn-for-test-account-before-14-days.html',
                                        resolve: {
                                            items: function () {

                                            }
                                        }
                                    });
                                    $('.overModal').removeClass('overModal');
                                };
                            }
                        }
                        //////////////
                    });
                }

                if($rootScope.modalInstance){
                    $rootScope.modalInstance.closed.then(function(){
                        switchToBilling().then((result) => {
                            increasedPrice();
                        })
                    });
                }else{
                    switchToBilling().then((result) => {
                        increasedPrice();
                    });
                }

                function switchToBilling(){
                    return $q((resolve, reject) => {
                        if (response["object"]["orgParams"]["switch2billing"] === "must" && response["object"]["recrutRole"] === "admin") {
                            $rootScope.modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: '../partials/modal/change-payment-model.html',
                                controller: 'payWay4PayController',
                                backdrop: 'static',
                            });
                            if($rootScope.modalInstance){
                                $rootScope.modalInstance.closed.then(function(){
                                    resolve('switchToBilling === must');
                                });
                            }
                        } else {
                            resolve('switchToBilling !== must');
                        }
                    });
                }

                function increasedPrice() {
                    if(response["object"]["orgParams"]["increasePrices"] === "must" && response["object"]["recrutRole"] === "admin") {
                        $rootScope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/price-change.html',
                            scope: $scope,
                            backdrop: 'static'
                        });
                    }
                }



                $rootScope.differenceCreateOrgDate = differenceBetweenTwoDates(new Date(), $rootScope.me.org.dc);
                $scope.scopeName = $filter('filter')($scope.orgs, $scope.orgId, "orgId")[0].orgName;
                if (localStorageService.get($rootScope.userId) === 'onlyme') {
                    ScopeService.initDefaultScope("onlyMy");
                } else if (localStorageService.get($rootScope.userId) === 'region' && localStorageService.get($rootScope.userId + "_regionId")) {
                    var region = localStorageService.get($rootScope.userId + "_regionId");
                    localStorageService.set($rootScope.userId + "_regionId", region);
                    ScopeService.initDefaultScope("region", {type: region.type, value: region.value, name: region.showName});
                    $scope.regionId = region.id;
                } else {
                    ScopeService.initDefaultScope("company");
                }
                if ($rootScope.me.googleMail) {
                    googleService.checkAuth();
                }
                //if($rootScope.me.recrutRole == "freelancer"){
                //    $scope.changeScope('onlyMy');
                //}
                window.mylogin =  response.object.login;
                var appId = 'fcijt4tn';
                if(window.location.hostname != 'cleverstaff.net'){
                    appId = "xlxtttgt";
                }
                var time = new Date($rootScope.me.hireDate);


                $scope.getTrialTime(response['object']);
                //window.Intercom("boot", {
                //    app_id: appId,
                //    name: $rootScope.me.fullName, // Full name
                //    email: $rootScope.me.login, // Email address
                //    created_at: Math.round(time.getTime()/1000.0)// Signup date as a Unix timestamp
                //});
                //window.Intercom("update");
                $rootScope.blockAccountHmNotPaid = function(){
                    if($rootScope.me.recrutRole == 'client'){
                        if($rootScope.hideTariff == false){
                            if($rootScope.me.orgs.length > 1){
                                $('.navbar-static-top').addClass('overModal');
                            }
                            $rootScope.modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: '../partials/modal/blockAccountHmNotPaid.html',
                                size: 'md',
                                backdrop: 'static',
                                keyboard: false,
                                resolve: {
                                    items: function () {

                                    }
                                }
                            });
                            if($rootScope.me.orgs.length > 1){
                                $('.blurBackground').css({"-webkit-filter": "blur(-1px)", "-moz-filter": "blur(-1px)", "-o-filter": "blur(-1px)", "-ms-filter": "blur(-1px)", "filter": "blur(-1px)"});
                            }else{
                                $('.blurBackground').css({"-webkit-filter": "blur(5px)", "-moz-filter": "blur(5px)", "-o-filter": "blur(5px)", "-ms-filter": "blur(5px)", "filter": "blur(5px)"});
                            }
                        }
                    }
                };
                $rootScope.blockAccountHmNotPaid();
                /**************************************Remove emails that cant send**************************************/
                setTimeout(function(){
                    angular.forEach($rootScope.me.emails, function(resp){
                        if(resp.permitSend != true){
                            $rootScope.me.emails.splice($rootScope.me.emails.indexOf(resp), 1);
                        }
                    });
                },0);
                /**************************************End of remove emails that cant send**************************************/
            }else{
                $rootScope.error = response.message;
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    backdrop: 'static',
                    keyboard: false,
                    templateUrl: '../partials/modal/russian-server-transfer-error.html',
                    resolve: {

                    }
                });
                $scope.modalInstance.opened.then(function(){
                    $('.modal').addClass('middle-modal')
                });
            }
        });
    };
    $rootScope.updateMe();
    $rootScope.getNotices = function(){
        Notice.getMy(function(resp){
            if(resp.status =='ok'){
                $rootScope.globalNotice = resp.object;
            }else{
                notificationService.error(resp.message);
            }
        })
    };

    $rootScope.getNotices();


    $scope.signOut = function () {
        $cookies.cfauth = 'false';
        Person.logout(function (response) {
            $window.location.replace('/');
        });
    };

    $scope.getImgSrc = function (g_info) {
        if (g_info != undefined) {
            return $sce.trustAsResourceUrl(g_info.picture + "?sz=38");
        }
    };

    $scope.toAddCandidate = function () {
        Service.toAddCandidate();
    };

    $rootScope.candnotifyClick = function () {
        $rootScope.candnotify.send = !$rootScope.candnotify.send;
        $localStorage.set("candnotify", false);
    };

    $scope.scopeActiveObject = null;


    ScopeService.setNavBarUpdateFunction(function (val) {
        $scope.scopeActiveObject = val;
        $rootScope.scopeActiveObject = val;
    });

    $scope.changeScope = function (name) {
        $scope.regionListStyle = {
            'border': '3px solid red'
        };
        if (name == 'region') {
            if($rootScope.activePage == 'Candidates'){
                $rootScope.clearSearchRegion();
            }
            if ($scope.regionId) {
                localStorageService.set($rootScope.userId, 'region');
                var region = null;
                angular.forEach($scope.regions, function (val) {
                    if (val.id == $scope.regionId) {
                        region = val;
                    }
                });
                localStorageService.set($rootScope.userId + "_regionId", region);
                ScopeService.setActiveScopeObject(name, {
                    type: region.type,
                    value: region.value,
                    name: region.showName
                });
            } else {
                $scope.openRegionList();
                $scope.regionListStyle = {
                    'border': '3px solid red'
                };
                setTimeout(function () {
                    $scope.regionListStyle = {};
                    if (!$scope.$$phase) {
                        $scope.$apply();
                    }
                }, 2000);
            }
        } else if (name == 'company') {
            $scope.changeOrg(function () {
                ScopeService.setActiveScopeObject(name);
                localStorageService.set($rootScope.userId, 'org');
                localStorageService.set($rootScope.userId + "_regionId", null);
                $scope.regionListStyle = {
                    'border': '1px solid rgba(0,0,0,.15);'
                };
            })
        } else if (name == 'onlyMy') {
            localStorageService.set($rootScope.userId, 'onlyme');
            localStorageService.set($rootScope.userId + "_regionId", null);
            ScopeService.setActiveScopeObject(name);
            $scope.regionListStyle = {
                'border': '1px solid rgba(0,0,0,.15);'
            };
        }
        setTimeout(function () {
            $scope.blockInfo();
            $scope.getAllPersonsFunc();
        }, 1000);
    };
    $scope.changeScopeForRegionSelect = function (name) {
        if (name == 'region') {
            if($rootScope.activePage == 'Candidates'){
                $rootScope.clearSearchRegion();
            }
            $scope.regionListStyle = {
                'border': '3px solid red'
            };
            console.log($scope.regionId);
            if ($scope.regionId) {
                localStorageService.set($rootScope.userId, 'region');
                var region = null;
                angular.forEach($scope.regions, function (val) {
                    if (val.id == $scope.regionId) {
                        region = val;
                    }
                });
                localStorageService.set($rootScope.userId + "_regionId", region);
                ScopeService.setActiveScopeObject(name, {
                    type: region.type,
                    value: region.value,
                    name: region.showName
                });
            } else {
            }
        } else if (name == 'company') {
            $scope.changeOrg(function () {
                ScopeService.setActiveScopeObject(name);
                localStorageService.set($rootScope.userId, 'org');
                localStorageService.set($rootScope.userId + "_regionId", null);

            })
        } else if (name == 'onlyMy') {
            localStorageService.set($rootScope.userId, 'onlyme');
            localStorageService.set($rootScope.userId + "_regionId", null);
            ScopeService.setActiveScopeObject(name);
        }
    };

    // Create the XHR object.
    function createCORSRequest(method, url) {
        var xhr = new XMLHttpRequest();
        if ("withCredentials" in xhr) {
            // XHR for Chrome/Firefox/Opera/Safari.
            xhr.open(method, url, true);
        } else if (typeof XDomainRequest != "undefined") {
            // XDomainRequest for IE.
            xhr = new XDomainRequest();
            xhr.open(method, url);
        } else {
            // CORS not supported.
            xhr = null;
        }
        return xhr;
    }

// Helper method to parse the title tag from the response.
//function getTitle(text) {
//    return text.match('<title>(.*)?</title>')[1];
//}

//Make the actual CORS request.
//    function makeCorsRequestNews() {
//        // All HTML5 Rocks properties support CORS.
//        var url = 'https://cleverstaff.net/blog-entries3';
//
//        var xhr = createCORSRequest('GET', url);
//        if (!xhr) {
//            alert('CORS not supported');
//            return;
//        }
//
//        // Response handlers.
//        xhr.onload = function() {
//            var text = xhr.responseText;
//            var newsArray = JSON.parse(xhr.responseText);
//            angular.forEach(newsArray, function (val) {
//                $scope.news.push(val);
//                angular.forEach($scope.readedNews, function (resp) {
//                    if(val.ID == resp.ID){
//                        $scope.news.splice($scope.news.indexOf(val), 1);
//                        $scope.activeNewsCounter = $scope.activeNewsCounter - 1;
//                    }
//                });
//            });
//            if($scope.news.length == 0){
//                $scope.shoowNewsFlag = false;
//            }
//        };
//
//        xhr.onerror = function() {
//
//        };
//
//        xhr.send();
//    }
//    makeCorsRequestNews();
//
//    function makeCorsRequestNewsEng() {
//        // All HTML5 Rocks properties support CORS.
//        var url = ' https://cleverstaff.net/news3';
//
//        var xhr = createCORSRequest('GET', url);
//        if (!xhr) {
//            alert('CORS not supported');
//            return;
//        }
//
//        // Response handlers.
//        xhr.onload = function() {
//            var text = xhr.responseText;
//            var newsArray = JSON.parse(xhr.responseText);
//            angular.forEach(newsArray, function (val) {
//                var parcedTitle = $.parseHTML(val.title);
//                val.title = parcedTitle[0];
//                $scope.newsEng.push(val);
//                angular.forEach($scope.readedNews, function (resp) {
//                    if(val.ID == resp.ID){
//                        $scope.newsEng.splice($scope.newsEng.indexOf(val), 1);
//                        $scope.activeNewsCounterEng = $scope.activeNewsCounterEng - 1;
//                    }
//                });
//            });
//            if($scope.newsEng.length == 0){
//                $scope.shoowNewsFlag = false;
//            }
//        };
//
//        xhr.onerror = function() {
//
//        };
//
//        xhr.send();
//    }
//    makeCorsRequestNewsEng();
    $('body').disabled = true;

    $scope.addReadedNews = function(oneNews){
        window.open(oneNews.link);
        $scope.readedNews.push(oneNews);
        $scope.readedNews = JSON.stringify($scope.readedNews);
        localStorage.setItem("readedNews", $scope.readedNews);
        $scope.readedNews = JSON.parse($scope.readedNews);
        $scope.activeNewsCounter = $scope.activeNewsCounter - 1;
        $scope.activeNewsCounterEng = $scope.activeNewsCounterEng - 1;
        $scope.news.splice($scope.news.indexOf(oneNews), 1);
        if($scope.news.length == 0){
            $scope.shoowNewsFlag = false;
        }
        $scope.newsEng.splice($scope.newsEng.indexOf(oneNews), 1);
        if($scope.newsEng.length == 0){
            $scope.shoowNewsFlag = false;
        }
    };
    $scope.relocateToBlog = function(){
        window.open('http://blog.cleverstaff.net/');
    };
    $scope.relocateToBlogEng = function(){
        window.open('http://news.cleverstaff.net');
    };
    $scope.closeNewsTab = function(){
        $('.newsMenu').hide();
        $scope.shoowNewsFlag = false;
    };
    $scope.getAllPersonsFunc = function(){
        $scope.numberVacancy = 0;
        //$scope.trueVisionBlockUser = $rootScope.blockUser;
        //$rootScope.blockUser = false;
        //$rootScope.$on('$routeChangeStart',function(){
        //    console.log(1);
        //   if($scope.trueVisionBlockUser == true){
        //        $rootScope.blockUser = true;
        //    }
        //});

        $rootScope.payClick = function () {
            Pay.createPaymentUsage({
                months: $scope.countMonth,
                users: $scope.countPeople,
                type: 'way4pay'
            }, function (resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    var form = '<form id="payForm" action="https://secure.wayforpay.com/pay" method="post">' +
                        '<input type="hidden" name="amount" value="' + resp.wayForPayParams.amount + '" />' +
                        '<input type="hidden" name="currency" value="' + resp.wayForPayParams.currency + '" />' +
                        '<input type="hidden" name="merchantAccount" value="' + resp.wayForPayParams.merchantAccount + '" />' +
                        '<input type="hidden" name="merchantDomainName" value="' + resp.wayForPayParams.merchantDomainName + '" />' +
                        '<input type="hidden" name="merchantSignature" value="' + resp.wayForPayParams.merchantSignature + '" />' +
                        '<input type="hidden" name="merchantTransactionSecureType" value="' + resp.wayForPayParams.merchantTransactionSecureType + '" />' +
                        '<input type="hidden" name="merchantTransactionType" value="' + resp.wayForPayParams.merchantTransactionType + '" />' +
                        '<input type="hidden" name="orderDate" value="' + resp.wayForPayParams.orderDate + '" />' +
                        '<input type="hidden" name="orderReference" value="' + resp.wayForPayParams.orderReference + '" />' +
                        '<input type="hidden" name="paymentSystems" value="' + resp.wayForPayParams.paymentSystems + '" />' +
                        '<input type="hidden" name="productCount[]" value="' + resp.wayForPayParams.productCount + '" />' +
                        '<input type="hidden" name="productName[]" value="' + resp.wayForPayParams.productName + '" />' +
                        '<input type="hidden" name="productPrice[]" value="' + resp.wayForPayParams.productPrice + '" />' +
                        '<input type="hidden" name="returnUrl" value="' + resp.wayForPayParams.returnUrl + '" />' +
                        '<input type="hidden" name="serviceUrl" value="' + resp.wayForPayParams.serviceUrl + '" />' +
                        '</form>';
                    $('body').append(form);
                    $('#payForm').submit();
                    $('#payForm').remove();
                }
            }, function () {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        //$scope.getAllPersons = Person.getAllPersons(function(resp){
        //    //allPersons = Object.keys(resp).length;
        //    angular.forEach(resp, function(val) {
        //        //console.log(val);
        //        //console.log(val.status);
        //        if(val.status =="A"){
        //            $scope.numberVacancy = ++$scope.numberVacancy;
        //        }
        //    });
        //    //console.log('allPersons: '+$scope.numberVacancy);
        //    if($scope.numberVacancy <= 12 && $scope.numberVacancy != 0){
        //        $('#countPeople').append("<option style='display: none;' selected>"+$scope.numberVacancy+"</option>");
        //    }
        //    else{
        //        $('#countPeople').append("<option selected>"+$scope.numberVacancy+"</option>");
        //    }
        //    $scope.countMonth = $('#countMonth').val();
        //    $scope.countPeople = $('#countPeople').val();
        //    $scope.price = 20 * $scope.countMonth * $scope.countPeople;
        //    $('#price').html($scope.price + " USD");
        //});
        $scope.deletePayment = function(resp){
            console.log(resp.paymentId);
            $.ajax({
                url: "/hr/pay/removePayment?paymentId="+resp.paymentId,
                type: "GET",
                data: null,
                dataType: "json",
                success: function(data) {
                    if (data.status === "ok") {
                        $scope.updatePaymentsList();
                    }
                }
            });
        };
        $scope.payViaTab = function(resp){
            data = resp.data;
            signature = resp.signature;
            window.open("https://www.liqpay.com/api/checkout?data=" + data + "&" + "signature=" + signature);
        }
    };
    $scope.getAllPersonsFunc();
    $scope.toUser = function() {
        $location.path('/users/' + $rootScope.me.userId);
    };
    $scope.toAddEmail = function() {
        $location.path('/email-integration');
    };
    $scope.toNotification = function(){
        $location.path("notifications")
    };

    $scope.toListNotices = function() {
        $location.path('/notices');
    };
    $scope.inHover = function(){
        $scope.showHover = true;
    };
    $scope.outHover = function(){
        $scope.showHover = false;
    };
    $scope.pluginMenu = function(){
        $scope.showPluginMenu = $(".menuPlugin");
        if($scope.showPluginMenu.css('display') == 'none'){
            $($scope.showPluginMenu).slideDown();
            $('body').mouseup(function (e) {
                if ($($scope.showPluginMenu).has(e.target).length === 0) {
                    $scope.showPluginMenu.slideUp();
                    $(document).off('mouseup');
                }
            });
        }
    };
    $scope.getPlugin = function(status) {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            if(status == 'old'){
                $window.open("//chrome.google.com/webstore/detail/cleverstaff-extension/mefmhdnojajocbdcpcajdjnbccggbnha");
            }else{
                $window.open("//chrome.google.com/webstore/detail/cleverstaff-extension/komohkkfnbgjojbglkikdfbkjpefkjem");
            }
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            //$window.open("https://addons.mozilla.org/firefox/addon/cleverstaff_extension");
            $window.open("/extension/CleverstaffExtension4Firefox.xpi");
        } else {
            $("#bad-browser-modal").modal("show");
        }
    };
    $scope.getBrowser = function() {
        if (navigator.saysWho.indexOf("Chrome") != -1) {
            return "Chrome";
        } else if (navigator.saysWho.indexOf("Firefox") != -1) {
            return "Firefox";
        } else {
            return $filter("translate")("browser");
        }
    };
    $scope.isGoodBrowser = function() {
        return scope.getBrowser() === "Chrome" || scope.getBrowser() === "Firefox";
    };
    $rootScope.updateQuestStatus = function(){
        Person.getUserPopup({
        },function(resp){
            if (resp.status == 'ok'){
                $rootScope.questStatus = resp.object;
            }else{
                notificationService.error(resp.message);
            }

        });
    };
    $rootScope.supportChat = function(){
        $scope.arrow = $("#arrowFeedback");
        if($scope.arrow.css('display') == 'none'){
            $($scope.arrow).slideDown();
            $('body').mouseup(function (e) {
                if ($($scope.arrow).has(e.target).length === 0) {
                    $scope.arrow.slideUp();
                    $(document).off('mouseup');
                }
            });
        }
        setTimeout(function(){
            $scope.arrow.slideUp();
        }, 2000);
    };
    $scope.showResponsiveNav = function(){
        var element = $('.responsive-nav');
        if($(element).css('display') == 'none'){
            element.slideToggle('slow');
            $('body').mouseup(function (e) {
                if(e.target.id != 'tech-dropdown'){
                    element.slideToggle('slow');
                    $('body').unbind('mouseup');
                }
            });
        }
    };
    var mailPattern = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/i;
    $rootScope.login = function(){
        $rootScope.errorSignin = false;
        $rootScope.loginForm.lang = $translate.use();
        if($rootScope.loginForm.lang == 'RUS') {
            $rootScope.loginForm.lang = 'ru';
        } else if ($rootScope.loginForm.lang == 'ENG'){
            $rootScope.loginForm.lang = 'en';
        }
        $rootScope.loginForm.timeZoneOffset = new Date().getTimezoneOffset();
        if($rootScope.loginForm.password == '' || !mailPattern.test($rootScope.loginForm.login)){
            if(!mailPattern.test($rootScope.loginForm.login)){
                // notificationService.error($filter('translate')('wrong_email'));
                $rootScope.errorSignin = $filter('translate')('wrong_email');
            }else if($rootScope.loginForm.password == ''){
                // notificationService.error($filter('translate')('enter_password'));
                $rootScope.errorSignin = $filter('translate')('enter_password');
            }
        }else{
            Person.authorization($rootScope.loginForm, function(resp){
                if(resp.status == 'error'){
                    if (resp.message == 'unknownEmail') {
                        // notificationService.error($filter('translate')('unknownEmail'));'
                        $rootScope.errorSignin = $filter('translate')('unknownEmail');
                        console.log('if', $filter('translate')('unknownEmail'));
                    }else{
                        // notificationService.error(resp.message);
                        $rootScope.errorSignin = resp.message;
                    }
                }else{
                    location.reload();
                    console.log('все ОК');
                    $rootScope.errorSignin = false;
                }
            });
        }
    };
   ////////////////////////////////////////////////////////Addidng facebook SDK
    (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id))
            return;
        js = d.createElement(s);
        js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId="+apiKey.facebook.appId+"&version=v2.9";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
    ///////////////////////////////////////////////////////End of facebook SDK
    $rootScope.loginSocial = function(social){
        googleService.signin(social);
    };
    //setTimeout(function(){
    //    $rootScope.hideContainer = true;
    //    var w = angular.element($window);
    //    console.log($rootScope.activePage);
    //    if ($rootScope.activePage == 'Candidate') {
    //        if(w.width() < 992){
    //            $rootScope.hideContainer = false;
    //            console.log('vik123');
    //        }
    //        else{
    //            $rootScope.hideContainer = true;
    //            console.log('xzm,zxm,zm,zx,mzx');
    //        }
    //    }
    //},1000);

    $rootScope.hideContainer = true;

    var w = angular.element($window);
    w.bind("resize",function(){
        if ($rootScope.activePage == 'Candidate') {
                if(w.width() < 992){
                    $rootScope.hideContainer = false;
                    console.log('vik123');
                } else{
                $rootScope.hideContainer = true;
                console.log('xzm,zxm,zm,zx,mzx');
            }
        }
        return  $scope.$apply();
    });

    $scope.inviteUserClientModal = function () {
        if($rootScope.hideTariff){
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'partials/modal/invite-new-user.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.modalInstance.closed.then(function() {
                $rootScope.inviteUser.role = null;
                $rootScope.inviteUser.email = null;
            });
        }else{
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'partials/modal/block-invite-user.html',
                size: '',
                resolve: function(){

                }
            });
            $('.overModal').removeClass('overModal');
        }
    };
    $scope.integrationEmailPrompt = function(){
        $scope.showHoverEmailPrompt = true;
    };
    $scope.integrationEmailPromptHide = function(){
        $scope.showHoverEmailPrompt = false;
    };


    $scope.acceptChangesPrice = function (choice) {

        if(choice) {
            Company.setParam({
                name:"increasePrices",
                value:"Y"

            }, function (resp) {

                if(resp.status == "ok"){
                    $rootScope.closeModal();
                    $rootScope.modalInstance = undefined;
                }
            });
        } else {
            Company.setParam({
                name:"increasePrices",
                value:"Y"

            }, function (resp) {

                if(resp.status == "ok"){
                    $rootScope.closeModal();
                    $rootScope.modalInstance = undefined;
                    $location.path('/pay')
                }
            });
        }

    };


    TooltipService.createTooltips();

    if($rootScope.modalInstance){
        $rootScope.modalInstance.closed.then(function(){
            showNews()
        });
    }else{
        showNews();
    }

    function showNews(){
        News.getNews(function(resp){
            if(resp.status == 'ok'){
                var i = 0;
                if(resp.objects.length > 0){
                    setTimeout(function(){
                        var interval = setInterval(function(){
                            if(FB){
                                clearInterval(interval);
                                FB.Event.subscribe('xfbml.render', function(response) {
                                    i++;
                                    if(i == 2){
                                        $('body').addClass('modal-open');
                                        $('body').addClass('modal-open-news');
                                        $('.modal-backdrop').css('z-index','1040');
                                        $('.modal-backdrop').css('opacity','0.5');
                                        $('.modal').css('z-index','1050');
                                        $('.modal').css('opacity','1');
                                    }
                                });
                                $rootScope.news = resp.objects;
                                FB.XFBML.parse();
                                $rootScope.modalInstance = $uibModal.open({
                                    animation: true,
                                    backdrop: 'static',
                                    templateUrl: 'partials/modal/newsFB.html',
                                    size: '',
                                    resolve: function(){

                                    }
                                });
                                $scope.modalInstance.opened.then(function(){
                                    $('body').removeClass('modal-open');
                                    $('.modal-backdrop').css('z-index', '0');
                                    $('.modal-backdrop').css('opacity', '0');
                                    $('.modal').css('z-index', '0');
                                    $('.modal').css('opacity', '0');
                                    // FB.XFBML.parse();
                                });
                                $rootScope.modalInstance.closed.then(function() {
                                    $('body').removeClass('modal-open-news');
                                    var array = [];
                                    angular.forEach($rootScope.news, function(data,key){
                                        array.push(data);
                                    });
                                    News.setNewsAsViewed({
                                        postsIds: array
                                    },function(res){
                                        if(res.status == 'ok'){

                                        }else{
                                            notificationService.error(res.message);
                                        }
                                    });
                                });
                            }
                        },5)
                    },0)
                }
            }
        });
    }

    //console.log($rootScope.previousHistoryFeedback);
    //$http.get("js/Version.json").then(function(response) {
    //    var scripts = document.getElementById('versionScript').src;
    //    var versionString = scripts.split("?").pop();
    //    console.log(scripts);
    //    console.log(response);
    //    if(versionString != response.data.version){
    //        location.reload(true);
    //    }
    //        //$scope.content = response.data;
    //        //$scope.statuscode = response.status;
    //        //$scope.statustext = response.statustext;
    //    });
}
controller.controller('NavbarController', ["$q", "Vacancy", "serverAddress", "notificationService", "$scope", "tmhDynamicLocale", "$http", "Person", "$rootScope",
    "Service", "$route", "$window", "$location", "$filter", "$sce", "$cookies", "localStorageService", "$localStorage", "$timeout", "CheckAccess", "frontMode",
    "$translate", "Client", 'ScopeService', 'googleService', 'Company', '$uibModal', 'Notice', 'Pay', 'News', 'TooltipService', 'Account', navBarController]);
controller.controller('NotificationController',["$rootScope", "$scope", "$filter", "$uibModal", "Person", "notificationService", "Statistic",
    function($rootScope, $scope, $filter, $uibModal, Person, notificationService, Statistic) {
        $scope.sendNotificationObj = [
            {
                name: 'sendInterviewNotification',
                value: 'Y'
            },
            {
                name: 'mailDailyReport',
                value: 'Y'
            },
            {
                name: 'sendVacancyResponsible',
                value: 'Y'
            },
            {
                name: 'sendNewRecall',
                value: 'Y'
            }
        ];
        angular.forEach($rootScope.me.personParams, function(value,key){
            angular.forEach($scope.sendNotificationObj, function(res){
                if(res.name == key){
                    res.value = value;
                }
            });
        });

        $scope.changeReport = function(param){
            if(param.value == 'Y'){
                param.value = 'N';
            }else{
                param.value = 'Y';

            }
            Person.changeUserParam({
                userId: $rootScope.me.userId,
                name: param.name,
                value: param.value
            },function(resp){
                if(resp.status == 'ok'){
                    Person.getMe(function(response){
                        $rootScope.me = response.object;
                    });
                    $("#ShowSaveSettings").css('display', 'block');
                    setTimeout(function(){
                        $("#ShowSaveSettings").css('display', 'none');
                    },2000);
                }else{
                    notificationService.error(resp.message);
                }
            })
        };

        $scope.requestReportModal = function () {
            Statistic.setParam('requestReportDate', null);
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/request-report.html?6',
                scope: $scope,
                resolve: {
                }
            })
        };

        $scope.requestReport = function () {
            let requestReportDate = Statistic.getParam('requestReportDate');
            if(requestReportDate) {
                Statistic.getDailyReport({
                    date: requestReportDate
                }, function (resp) {
                    if(resp.status != 'error') {
                        notificationService.success($filter('translate')('You will receive this report within 10 minutes'));
                        $scope.closeModal();
                    } else {
                        notificationService.error(resp.message);
                    }
                })
            } else {
                notificationService.error($filter('translate')('Please, choose the date'));
            }
        };

        $scope.closeModal = function () {
          $scope.modalInstance.close();
        };

    }]);
controller.controller('recallController', ["$localStorage", "frontMode", "googleService", "serverAddress", "$rootScope", "$scope", "$routeParams",
    "Vacancy", "$location", "Candidate", "notificationService", "$translate", "$filter", "vacancyStages", "Mail", "FileInit", "$uibModal",
    function ($localStorage, frontMode, googleService, serverAddress, $rootScope, $scope, $routeParams, Vacancy, $location, Candidate, notificationService, $translate, $filter,
              vacancyStages, Mail, FileInit, $uibModal) {
        $scope.serverAddress = serverAddress;
        $rootScope.recallCandidate = {candidateId: null};
        $scope.pageObject = {showButtonCandidate: false, showButtonVacancy: false, interview: null};
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $rootScope.addToInterviewForm = {
            show: null,
            candidate: null,
            candidateId: null,
            recall: null,
            status: "longlist",
            date: null,
            comment: ""
        };
        $scope.fileForSave = [];
        $rootScope.fileForSave = [];
        /*For modal window*/

        FileInit.initVacancyTemplateFileOption($scope, "", "", false, $filter);
        $scope.callbackFile = function (resp, names) {
            $scope.fileForSave.push({"fileId": resp, "fileName": names});
            $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
        };
        $scope.removeFile = function (id) {
            angular.forEach($scope.fileForSave, function (val, ind) {
                if (val.attId === id) {
                    $scope.fileForSave.splice(ind, 1);
                }
            });
        };
        $rootScope.removeFile = function (id) {
            angular.forEach($rootScope.fileForSave, function (val, ind) {
                if (val.attId === id) {
                    $rootScope.fileForSave.splice(ind, 1);
                }
            });
        };

        $scope.showSendEmailTemplateModal = function () {
            $scope.lang = localStorage.getItem('NG_TRANSLATE_LANG_KEY');
            $rootScope.sendEmailTemplate = {
                toEmails: $scope.recall.email ? $scope.recall.email : "",
                vacancyId: $scope.vacancy.vacancyId,
                candidateId: null,
                fullName: null,
                email: '',
                date: null,
                lang: $scope.lang,
                template: {}
            };
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/send-reject-by-email.html',
                size: '',
                resolve: function(){

                }
            });
            var asyncFunc = function () {
                Mail.getTemplateVacancy({
                    vacancyId: $scope.vacancy.vacancyId,
                    type: 'refuseCandidateInVacancy'
                }, function (data) {
                    data.object.title = data.object.title.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
                    data.object.text = data.object.text.replace(/\[\[candidate name\]\]/g, $scope.recall.name + ' ' + $scope.recall.lastName);
                    data.object.text = data.object.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink + '">' + $scope.vacancy.position + '</a>');
                    data.object.text = data.object.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    $rootScope.sendEmailTemplate.template = data.object;
                    $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                    $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                    if($rootScope.staticEmailTemplate.facebook){
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                    }else{
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                    }
                    if($rootScope.staticEmailTemplate.linkedin){
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                    }
                    else{
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }
                    tinyMCE.get('sendVacancyModalMCE').setContent(data.object.text);
                    $scope.addEmailInDescriptionFromLocalStorage();
                    if ($rootScope.sendEmailTemplate.template.fileId && $rootScope.sendEmailTemplate.template.fileName) {
                        $rootScope.fileForSave.push({
                            "fileId": $rootScope.sendEmailTemplate.template.fileId,
                            "fileName": $rootScope.sendEmailTemplate.template.fileName
                        });
                    }
                });
            };
            $scope.modalInstance.opened.then(function(){
                setTimeout(function () {
                    tinymce.init({
                        selector: '#sendVacancyModalMCE',
                        mode: 'exact',
                        theme: "modern",
                        height: 150,
                        language: $scope.lang != undefined || $scope.lang != null ? $scope.lang : "ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {
                                console.log('set')
                            });
                            ed.on('change', function(e) {
                                $rootScope.sendEmailTemplate.text = tinyMCE.get('sendVacancyModalMCE').getContent();
                            });
                        }
                    });
                    asyncFunc();
                }, 0);
            });
            $scope.modalInstance.closed.then(function() {
                tinyMCE.remove()
            });
        };
        $rootScope.sendEmailTemplateFunc = function () {
            if(!$rootScope.$root.sendEmailTemplate.toEmails) {
              return false;
            }
            console.log(!!$rootScope.sendEmailTemplate.toEmails);
            $rootScope.sendEmailTemplate.template.fileId = $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null;
            $rootScope.sendEmailTemplate.template.fileName = $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null;
            Mail.sendMailByTemplateVerified($rootScope.sendEmailTemplate, function (resp) {
                if (resp.status == 'ok') {
                    notificationService.success($filter('translate')('Letter sent'));
                    $rootScope.closeModal();
                } else {
                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                }
            });
        };
        $rootScope.addEmailFromWhatSendInDescription = function (email) {
            $rootScope.sendEmailTemplate.template.email = [];
            $rootScope.sendEmailTemplate.template.email = $rootScope.sendEmailTemplate.template.email + email.email;
            $rootScope.sendEmailTemplate.email = $rootScope.sendEmailTemplate.template.email;
            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.sendEmailTemplate.template.email);
            tinyMCE.get('sendVacancyModalMCE').setContent($rootScope.sendEmailTemplate.template.text);
            console.log($rootScope.sendEmailTemplate.template.email);
            //$rootScope.emailTemplateInModal.email.toString();
        };

        Vacancy.oneRecall({"recallId": $routeParams.id}, function (resp) {
            if (resp.object.message) {
                $("#recall_description").html(resp.object.message.replace(/\r|\n/g, "<br>"))
            }

//        resp.object.message=resp.object.message.replace(/\r|\n/g, "<br>");
            $scope.recall = resp.object;
            if ($scope.recall.fileId != undefined) {
                $scope.recall.fileId = JSON.parse($scope.recall.fileId);
            }
            $scope.pageObject.showButtonCandidate = resp.object.candidateId == undefined || resp.object.candidateId == "" ||
                resp.object.candidateId != undefined &&
                $scope.recall.candidateId.split(',').length > 1;
            $rootScope.addToInterviewForm.showButtonCandidate = $scope.pageObject.showButtonCandidate;
            $scope.VacancyStatus = Vacancy.interviewStatusNew();
            vacancyStages.get(function (resp) {
                var array = [];
                $scope.customStages = resp.object.interviewStates;
                angular.forEach($scope.customStages, function (res) {
                    if (res.status != "D") {
                        array.push(res);
                    }
                });
                $scope.customStages = array;
            });
            Vacancy.one({"id": $scope.recall.vacancyId}, function (resp) {
                $scope.vacancy = resp.object;
                $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/vacancy-" + $scope.vacancy.localId;
                $rootScope.staticEmailTemplate = {
                    candidateName: "John Dou",
                    vacancyLink: $scope.vacancy.position,
                    date: 1463749200000,
                    recruiterName: $rootScope.me.fullName,
                    recruiterEmail: $rootScope.me.emails.length > 0 ? $rootScope.me.emails[0].email : $rootScope.me.login
                };
                angular.forEach($rootScope.me.contacts, function (val) {
                    if(val.contactType == 'phoneWork'){
                        $rootScope.staticEmailTemplate.phoneWork = val.value;
                    }
                    if(val.contactType == 'skype'){
                        $rootScope.staticEmailTemplate.skype = val.value;
                    }
                    if(val.contactType == 'linkedin'){
                        $rootScope.staticEmailTemplate.linkedin = val.value;
                    }
                    if(val.contactType == 'facebook'){
                        $rootScope.staticEmailTemplate.facebook = val.value;
                    }
                });
                if (resp.object.interviewStatus) {
                    var array = resp.object.interviewStatus.split(",");
                    var sortedStages = [];
                    angular.forEach($scope.VacancyStatus, function (vStatus) {
                        if (vStatus.used) {
                            var statusNotDef = $filter('filter')(vStatus.status, {defaultS: false});
                            angular.forEach(statusNotDef, function (statusND) {
                                angular.forEach(array, function (statusA) {
                                    if (statusND.value == statusA) {
                                        statusND.added = true;
                                    } else if (statusND.value != statusA && (statusND.value == 'shortlist' || statusND.value == 'interview')) {
                                        statusND.added = false;
                                    }
                                })
                            })
                        }
                    });
                    var i = 0;
                    angular.forEach(array, function (resp) {
                        angular.forEach($scope.VacancyStatus, function (vStatus) {
                            if (vStatus.used) {
                                if (i == 0) {
                                    angular.forEach($scope.customStages, function (res) {
                                        res.value = res.name;
                                        res.movable = true;
                                        res.added = false;
                                        res.count = 0;
                                        vStatus.status.push(res);
                                        i = i + 1;
                                    });
                                }
                                angular.forEach(vStatus.status, function (vStatusIn) {
                                    if (resp == vStatusIn.value) {
                                        vStatusIn.added = true;
                                        sortedStages.push(vStatusIn);
                                    } else if (resp == vStatusIn.customInterviewStateId) {
                                        if (vStatusIn.type == 'interview') {
                                            vStatusIn.withDate = true;
                                        }
                                        vStatusIn.added = true;
                                        sortedStages.push(vStatusIn);
                                    }
                                })
                            }
                        })
                    });
                    $scope.VacancyStatusFiltered = sortedStages;
                    //angular.forEach(array, function(val) {
                    //    angular.forEach($scope.customStages, function(resp) {
                    //        if(val == resp.customInterviewStateId){
                    //            resp.value = resp.name;
                    //            resp.movable = true;
                    //            $scope.VacancyStatusFiltered.push(resp);
                    //        }
                    //    });
                    //});
                } else {
                    $scope.VacancyStatusFiltered = $filter('vacancyStatusInSelectFilter')($scope.VacancyStatus);
                }
                if ($scope.recall.candidateId != undefined && $scope.recall.candidateId != "" && $scope.recall.candidateId.split(",").length == 1) {
                    if ($scope.vacancy != undefined && $scope.vacancy.interviews != undefined) {
                        var check = true;
                        angular.forEach($scope.vacancy.interviews, function (val) {
                            if (val.candidateId.candidateId == $scope.recall.candidateId.split(",")[0]) {
                                check = false;
                                $scope.pageObject.interview = val;
                            }
                        });
                        console.log($scope.pageObject.interview);
                        angular.forEach($scope.customStages, function (res) {
                            if ($scope.pageObject.interview) {
                                if ($scope.pageObject.interview.state == res.customInterviewStateId) {
                                    $scope.pageObject.interview.state = res.name;
                                }
                            }
                        });
                        $scope.pageObject.showButtonVacancy = check;
                        console.log($scope.pageObject.showButtonVacancy)
                    }

                } else {
                    console.log(2);
                    $scope.pageObject.showButtonVacancy = true;
                }
            });
            if ($scope.recall.candidateId != undefined && $scope.recall.candidateId != "" && $scope.recall.candidateId.split(',').length == 1) {
                Candidate.one({"id": $scope.recall.candidateId}, function (resp) {
                    if (resp.status == "ok") {
                        $scope.candidate = resp.object;
                        $rootScope.addToInterviewForm.candidate = $scope.candidate;
                    }
                });
            }

            Candidate.mathRecallWithCandidate({"recallId": $scope.recall.recallId}, function (resp) {
                $rootScope.candidatesForRecallsO = resp.objects;
            });
            Vacancy.recallRewieved({recallId: $scope.recall.recallId}, function () {

            });

        });


        $rootScope.statusInter = Vacancy.getInterviewStatus();
        $rootScope.addRecallToCandidate = function () {
            $scope.addRecallToCandidate('add');
        };
        $scope.addRecallToCandidate = function (eventName) {
            if (!$scope.mathCandidateNotFounded) {
                Candidate.mathRecallWithCandidate({"recallId": $scope.recall.recallId}, function (resp) {
                    if (!resp.objects || resp.objects.length == 0) {
                        $scope.mathCandidateNotFounded = true;
                        $scope.addRecallToCandidate('add');
                    } else {
                        if (resp.objects.length > 1) {
                            $rootScope.candidatesForRecallsO = resp.objects;
                            $('#recallsModals').modal('show');
                            $scope.mathCandidateNotFounded = true;
                        } else if (resp.objects.length == 1) {
                            $rootScope.recallCandidate.candidateId = resp.objects[0].candidateId;
                            $scope.mathCandidateNotFounded = true;
                            $scope.addRecallToCandidate('add');
                        }
                    }
                    // console.log($scope.mathCandidateNotFounded);
                });

            } else if (eventName == 'add') {
                Candidate.addFromRecall({
                    "recallId": $scope.recall.recallId,
                    "candidateId": $rootScope.recallCandidate.candidateId
                }, function (resp) {
                    if (resp.status == 'ok') {
                        $scope.recall.candidateId = resp.object.candidateId;
                        $scope.pageObject.showButtonCandidate = false;
                        $rootScope.addToInterviewForm.showButtonCandidate = false;
                        $('.recallsModals.modal').modal('hide');
                        $scope.candidate = resp.object;
                        notificationService.success($filter('translate')('added_candidate'));
                        $rootScope.candidatesForRecallsO = null;
                        angular.forEach($scope.vacancy.interviews, function (val) {
                            if (val.candidateId.candidateId == $scope.recall.candidateId) {
                                $scope.pageObject.interview = val;
                                $scope.pageObject.showButtonVacancy = true;
                                $scope.candidate = resp.object;
                                $rootScope.addToInterviewForm.candidate = $scope.candidate;
                            }
                        });

                    } else {
                        notificationService.success($filter('translate')('Sorry we have a trouble with ...'));
                    }
                });
            } else {
                $('.recallsModals.modal').modal('show');
            }
        };

        function addToInterview(candidateId, sendTemplate) {
            var recallObj = $rootScope.addToInterviewForm;
            recallObj.date = $('.addRecallInvacancyPicker').datetimepicker('getDate') != null && recallObj.status.withDate ? $('.addRecallInvacancyPicker').datetimepicker('getDate') : null;
            vacancyAddInterview(Vacancy, $scope.vacancy.vacancyId, $scope.vacancy.position,
                candidateId,
                recallObj.comment,
                recallObj.status.customInterviewStateId ? recallObj.status.customInterviewStateId : recallObj.status.value,
                recallObj.date, function (resp) {
                    notificationService.success($filter('translate')("candidate was added to the stage") + " " + $filter('translate')(recallObj.status.value));
                    $scope.pageObject.interview = resp.object;
                    recallObj.recall.addToInterview = false;
                    recallObj.recall.candidateInd = resp.object.candidateId.candidateId;
                    $rootScope.addToInterviewForm = {recall: "", status: "", date: "", comment: ""};
                    $scope.pageObject.showButtonVacancy = false;
                    if(sendTemplate){
                        Mail.sendMailByTemplateVerified({
                                toEmails: $rootScope.candnotify.sendMail,
                                vacancyId: $scope.vacancy.vacancyId,
                                candidateId: $scope.pageObject.interview.candidateId.candidateId,
                                fullName: $rootScope.candnotify.fullName,
                                email: $rootScope.emailTemplateInModal.email,
                                date: recallObj.date.getTime(),
                                lang: $scope.lang,
                                template: {
                                    type: $rootScope.emailTemplateInModal.type,
                                    title: $rootScope.emailTemplateInModal.title,
                                    text: $rootScope.emailTemplateInModal.text,
                                    fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                    fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                                }
                            },
                            function (resp) {
                                if(resp.status != 'ok'){
                                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                                }
                            });
                    }
                }, function (resp) {
                }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
        }

        $rootScope.addRecallInInterview = function (sendTemplate) {
            var recallObj = $rootScope.addToInterviewForm;
            if (recallObj.status == "") return;
            $rootScope.closeModal();
            // console.log($rootScope.addToInterviewForm.show);
            if ($rootScope.addToInterviewForm.candidateId != null) {
                $scope.addCandidate($scope.recall.recallId, $rootScope.addToInterviewForm.candidateId, addToInterview);
            } else if ($scope.recall.candidateId == undefined || $scope.recall.candidateId == "") {
                $scope.addCandidate($scope.recall.recallId, null, addToInterview);
            } else {
                addToInterview($scope.recall.candidateId, sendTemplate);
            }

        };
        $scope.addCandidate = function (recallId, candidateId, callback) {
            Candidate.addFromRecall({"recallId": recallId, "candidateId": candidateId}, function (resp) {
                if (resp.status == 'ok') {
                    $scope.recall.candidateId = resp.object.candidateId;
                    if (callback != undefined)callback(resp.object.candidateId);
                    notificationService.success($filter('translate')('New candidate has been added'));
                    $scope.candidate = resp.object;
                    $rootScope.candidatesForRecallsO = null;
                    $scope.pageObject.showButtonCandidate = false;
                    $rootScope.addToInterviewForm.showButtonCandidate = false;

                    angular.forEach($scope.vacancy.interviews, function (val) {
                        if (val.candidateId.candidateId == $scope.recall.candidateId) {
                            $scope.pageObject.interview = val;
                            $scope.pageObject.showButtonVacancy = true;
                            $scope.candidate = resp.object;
                            $rootScope.addToInterviewForm.candidate = $scope.candidate;
                        }
                    });
                } else {
                    notificationService.success($filter('translate')('Sorry we have a trouble with ...'));
                }
            });
        };
        $rootScope.fileForSave = [];    /*For modal window*/

        FileInit.initVacancyTemplateFileOption($scope, "", "", false, $filter);
        $scope.callbackFile = function(resp, names) {
            $scope.fileForSave.push({"fileId": resp, "fileName": names});
            $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
        };
        $rootScope.removeFile = function(id) {
            angular.forEach($rootScope.fileForSave, function(val, ind) {
                if (val.attId === id) {
                    $rootScope.fileForSave.splice(ind, 1);
                }
            });
        };
        $scope.openModalAddRecallToInterview = function (status, size) {
            if ($rootScope.candidatesForRecallsO != undefined && $rootScope.candidatesForRecallsO.length > 1) {
                $rootScope.addToInterviewForm.show = "two";
            } else {
                $rootScope.addToInterviewForm.show = "one";
            }
            $rootScope.addToInterviewForm.status = status;
            $rootScope.addToInterviewForm.recall = $scope.recall;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-interview-from-recall.html',
                size: '',
                resolve: {
                }
            });
            $scope.modalInstance.opened.then(function() {
                setTimeout(function(){
                    tinymce.init({
                        selector: '#modalMCE',
                        mode: 'exact',
                        theme: "modern",
                        height: 145,
                        language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {

                            });
                            ed.on('change', function(e) {
                                $rootScope.emailTemplateInModal.text = tinyMCE.get('modalMCE').getContent();
                            });
                        }
                    });
                    if($rootScope.addToInterviewForm.status.value == 'interview' ||
                        $rootScope.addToInterviewForm.status.withDate ||
                        $rootScope.addToInterviewForm.status.value == 'longlist' ||
                        $rootScope.addToInterviewForm.status.value == 'shortlist' ||
                        $rootScope.addToInterviewForm.status.value == 'notafit' ||
                        $rootScope.addToInterviewForm.status.value == 'declinedoffer' ||
                        $rootScope.addToInterviewForm.status.value == 'no_response' ||
                        $rootScope.addToInterviewForm.status.value == 'no_contacts' ||
                        $rootScope.addToInterviewForm.status.type == 'interview' ||
                        $rootScope.addToInterviewForm.status.type == 'refuse'){
                        var templateType = 'candidateCreateInterviewNotification';
                        if($rootScope.addToInterviewForm.status.value == 'notafit' ||
                            $rootScope.addToInterviewForm.status.value == 'declinedoffer' ||
                            $rootScope.addToInterviewForm.status.value == 'no_response' ||
                            $rootScope.addToInterviewForm.status.value == 'no_contacts' ||
                            $rootScope.addToInterviewForm.status.type == 'refuse'){
                            templateType = 'refuseCandidateInVacancy'
                        }else if($rootScope.addToInterviewForm.status.value == 'longlist' ||
                            $rootScope.addToInterviewForm.status.value == 'shortlist'){
                            templateType = 'seeVacancy'
                        }
                        Mail.getTemplateVacancy({vacancyId: $scope.vacancy.vacancyId,type:templateType},function(data){
                            $rootScope.fileForSave = [];
                            $rootScope.emailTemplateInModal = data.object;
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName);
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                            $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                            $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                            if(!$rootScope.staticEmailTemplate.skype){
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/Skype:/g, "");
                            }
                            if($rootScope.staticEmailTemplate.facebook){
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                            }else{
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                            }
                            if($rootScope.staticEmailTemplate.linkedin){
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                            }else{
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                            }
                            if($rootScope.me.emails.length == 1){
                                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                            }
                            console.log($rootScope.emailTemplateInModal.text);
                            tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                            if(localStorage.emailThatAlreadyUsed){
                                $scope.addEmailFromLocalStorage(localStorage.emailThatAlreadyUsed);
                            }
                            if($rootScope.emailTemplateInModal.fileId && $rootScope.emailTemplateInModal.fileName){
                                $rootScope.fileForSave.push({"fileId": $rootScope.emailTemplateInModal.fileId, "fileName": $rootScope.emailTemplateInModal.fileName});
                            }
                        })
                    }
                    $(".addRecallInvacancyPicker").datetimepicker({
                        format: "dd/mm/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        autoclose: true,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.addToInterviewForm.date = data.date;
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addRecallInvacancyPicker').datetimepicker('getDate').getTime(), true));
                        $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addRecallInvacancyPicker').datetimepicker('getDate').getTime(), true));
                        $scope.$apply();
                        tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                    });
                },0);
            });
            $scope.modalInstance.closed.then(function() {
                $rootScope.candnotify.show = false;
                tinyMCE.remove()
            });
            $rootScope.getTemplate = function(){

            };
            //$('.addInInterviewFromRecall.modal').modal('show');
            $rootScope.candnotify = {};
            $rootScope.candnotify.emails = $scope.recall.email.split(",");
            $rootScope.candnotify.sendMail = $scope.recall.email;
            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = $scope.recall.name + " " + $scope.recall.lastName;
            //if ($localStorage.get("candnotify") == "false") {
            //    $rootScope.candnotify.send = false;
            //} else {
            //    $rootScope.candnotify.send = true;
            //}
        };
        $scope.toVacancy = function () {
            $location.path("vacancies/" + $scope.vacancy.localId);

        };
        $(".addRecallInvacancyPicker").datetimepicker({
            format: "dd/mm/yyyy hh:ii",
            startView: 2,
            minView: 0,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            autoclose: true,
            language: $translate.use()
        }).on('changeDate', function (data) {
            $rootScope.addToInterviewForm.date = data.date;
        });
        $scope.addEmailInDescriptionFromLocalStorage = function (email) {
            angular.forEach($rootScope.me.emails, function (resp) {
                if (resp.email == localStorage.emailThatAlreadyUsed) {
                    $rootScope.addEmailFromWhatSendInDescription(resp);
                }
            })
        };
        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });
    }]);

controller.controller('usersController', ["$localStorage", "$translate", "$scope", "ngTableParams", "Person", "$rootScope", "$filter", "$location",
    "notificationService", "Service", "Company", "Vacancy", "ScopeService", "$uibModal",
    function ($localStorage, $translate, $scope, ngTableParams, Person, $rootScope, $filter, $location, notificationService, Service, Company, Vacancy, ScopeService, $uibModal) {
        $scope.personAll = [];
        $scope.usersFoundInv = false;
        $scope.personAllDisable = [];
        $scope.a = {};
        $scope.a.searchNumber = 1;
        $scope.sortTypeInvited = 'email';
        $scope.sortReverseInvited = true;
        $scope.sortTypeDisabled = 'fullName';
        $scope.sortReverseDisabled = true;
        $scope.toggleDisabledUsers = true;
        $scope.toggleInvitedUsers = true;
        $localStorage.remove("previousHistoryCustomFields");
        //listenerForScope($scope, $rootScope);
        $rootScope.closeModal = function(){
            $rootScope.modalInstance.close();
        };
        function scope_update(val) {
            $scope.tableParams.reload();
            $scope.tableParamsDisable.reload();
        }

        ScopeService.setCurrentControllerUpdateFunc(scope_update);

        $scope.toOne = function (id) {
            $location.path("/users/" + id);
        };

        $scope.toHistory = function () {
            $location.path("/organizer/history");
        };

        if (window.location.hash.indexOf("invite") != -1) {
            $('.addUserInvite.modal').modal('show');
        }

        $scope.sendDailyReportExample = function () {
            if ($localStorage.isExist('dateSent')) {
                var dateStr = $localStorage.get('dateSent');
                dateStr = dateStr.split('-');
                var dateReport = new Date(dateStr[0], dateStr[1] - 1, dateStr[2]);
                if (dateReport.getDate() != new Date().getDate() && dateReport.getMonth() != new Date().getMonth()) {
                    Service.sendDailyReportExample(function (resp) {
                        if (angular.equals(resp.status, "ok")) {
                            var dateSent = new Date();
                            var formatDate = $filter('date')(dateSent, 'yyyy-MM-dd');
                            $localStorage.set('dateSent', formatDate);
                            notificationService.success($filter('translate')('Report has been sent!'));
                        } else if (angular.equals(res.status, "error")) {
                            notificationService.error(res.message);
                        } else {
                            //notificationService.error($filter('translate')('service temporarily unvailable'));
                        }
                    });

                } else {
                    notificationService.error($filter('translate')('You have already sent daily report today'));
                }
            } else {
                Service.sendDailyReportExample(function (resp) {
                    if (angular.equals(resp.status, "ok")) {
                        var dateSent = new Date();
                        var formatDate = $filter('date')(dateSent, 'yyyy-MM-dd');
                        $localStorage.set('dateSent', formatDate);
                        notificationService.success($filter('translate')('Report has been sent!'));
                    } else if (angular.equals(res.status, "error")) {
                        notificationService.error(res.message);
                    } else {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                    }
                });
            }
        };


        Person.getAllPersonsWithDetails(function (resp) {

            $scope.tableParams = new ngTableParams({
                page: 1,
                count: 15
            }, {
                total: 10,
                getData: function ($defer, params) {
                    if (ScopeService.isInit()) {
                        var activeParam = ScopeService.getActiveScopeObject();
                        $scope.activeScopeParam = activeParam;
                        $scope.usersFound = false;
                        $scope.personAll = [];
                        var persons = angular.copy(resp);
                        angular.forEach(persons, function (val, key) {
                            if (activeParam.name != 'region' && persons[key].status === 'A') {
                                $scope.personAll.push(persons[key]);
                                $scope.usersFound = true;
                            } else if (persons[key].region !== undefined) {
                                if (activeParam.name == 'region' && activeParam.value.type == "country" && persons[key].region.country == activeParam.value.value && persons[key].status === 'A') {
                                    $scope.personAll.push(persons[key]);
                                    $scope.usersFound = true;
                                } else if (activeParam.name == 'region' && activeParam.value.type == "city" && activeParam.value.value == persons[key].region.regionId && persons[key].status === 'A') {
                                    $scope.personAll.push(persons[key]);
                                    $scope.usersFound = true;
                                }
                            }
                        });
                        //if ($rootScope.me.recrutRole == 'client') {
                        //    var personS = [];
                        //    angular.forEach($scope.personAll, function (val) {
                        //        if (val.recrutRole != 'client') {
                        //            personS.push(val);
                        //        }
                        //    });
                        //    if (personS.length == 0) {
                        //        $scope.usersFound = false;
                        //    }
                        //    $defer.resolve($filter('orderBy')(personS, params.orderBy()));
                        //    $scope.personAll = angular.copy(personS);
                        //    console.log($scope.personAll);
                        //} else {
                        $defer.resolve($filter('orderBy')($scope.personAll, params.orderBy()));
                        //}
                        $scope.a.searchNumber = $scope.tableParams.page();
                    }
                }
            });
            $scope.changeInputPage = function(params,searchNumber){
                var searchNumber = Math.round(searchNumber);
                var maxValue = $filter('roundUp')(params.settings().total/params.count());
                if(searchNumber){
                    if(searchNumber >= 1 && searchNumber <= maxValue){
                        params.page(searchNumber);
                        $scope.a.searchNumber = searchNumber;
                    }
                }
            };
            $scope.tableParamsDisable = new ngTableParams({
                page: 1,
                count: 15
            }, {
                total: 10,
                getData: function ($defer, params) {
                    if (ScopeService.isInit()) {
                        var activeParam = ScopeService.getActiveScopeObject();
                        $scope.activeScopeParam = activeParam;
                        var persons = angular.copy(resp);
                        $scope.usersFoundDisable = false;
                        $scope.personAllDisable = [];

                        angular.forEach(persons, function (val, key) {
                            if (activeParam.name != 'region' && persons[key].status === 'N') {
                                $scope.personAllDisable.push(persons[key]);
                                $scope.usersFoundDisable = true;
                            } else if (persons[key].region !== undefined) {
                                if (activeParam.name == 'region' && activeParam.value.type == "country" && persons[key].region.country == activeParam.value.value && persons[key].status === 'N') {
                                    $scope.personAllDisable.push(persons[key]);
                                    $scope.usersFoundDisable = true;
                                } else if (activeParam.name == 'region' && activeParam.value.type == "city" && activeParam.value.value == persons[key].region.regionId && persons[key].status === 'N') {
                                    $scope.personAllDisable.push(persons[key]);
                                    $scope.usersFoundDisable = true;
                                }
                            }

                        });
                        $defer.resolve($filter('orderBy')($scope.personAllDisable, params.orderBy()));
                    }
                }
            });
        });
        $scope.initTableParamsInv = function () {
            $scope.tableParamsInv = new ngTableParams({
                page: 1,
                count: 15
            }, {
                total: 15,
                getData: function ($defer, params) {
                    Person.getInvited(function (resp) {
                        $scope.invAll = [];
                        angular.forEach(resp, function (val, key) {
                            if (resp[key].status !== 'A' && resp[key].status !== 'D') {
                                $scope.invAll.push(resp[key]);
                                $scope.usersFoundInv = true;
                            }
                        });
                        $defer.resolve($filter('orderBy')($scope.invAll, params.orderBy()));
                    });
                }
            });
        };
        if ($rootScope.me.recrutRole == 'admin') {
            $scope.initTableParamsInv();
        }
        $scope.callbackAddLogo = function (photo) {
            $rootScope.companyLogo = photo;
            $rootScope.logoLink = $scope.serverAddress + "/getapp?id=" + $rootScope.companyLogo + "&d=true";
        };
        $scope.callbackErr = function (err) {
            notificationService.error(err);
        };

        $scope.openInviteUserModal = function (resp) {
            console.log('here');
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'partials/modal/company-invite.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.showUserMail = resp;
        };
        $scope.openInviteUser = function () {
            if($rootScope.hideTariff){
                $rootScope.inviteUserBlock = false;
                $rootScope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'partials/modal/invite-new-user.html',
                    size: '',
                    resolve: function(){

                    }
                });
                $rootScope.modalInstance.closed.then(function() {
                    $rootScope.inviteUser.role = null;
                    $rootScope.inviteUser.email = null;
                });
            }else{
                $rootScope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'partials/modal/block-invite-user.html',
                    size: '',
                    resolve: function(){

                    }
                });
            }
        };
        $rootScope.sendUserMail = function(){
            if($rootScope.showUserMail.role == 'hr:salesmanager'){
                $rootScope.showUserMail.role = 'salesmanager';
            } else if ($rootScope.showUserMail.role == 'hr:recruter'){
                $rootScope.showUserMail.role = 'recruter';
            } else if ($rootScope.showUserMail.role == 'hr:admin'){
                $rootScope.showUserMail.role = 'admin';
            } else if ($rootScope.showUserMail.role == 'hr:client'){
                $rootScope.showUserMail.role = 'client';
            } else if ($rootScope.showUserMail.role == 'hr:freelancer'){
                $rootScope.showUserMail.role = 'freelancer';

            }
            Person.inviteUser({
                email: $rootScope.showUserMail.email,
                role: $rootScope.showUserMail.role,
                clientId: $rootScope.showUserMail.clientId,
                lang: $translate.use()
            }, function (resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                   $rootScope.closeModal();
                } else {
                    notificationService.success($filter('translate')('user_was_invite_1') + $rootScope.showUserMail.email + $filter('translate')('user_was_invite_2'));
                    $rootScope.closeModal();
                    $rootScope.inviteUser.email = "";
                }
            });
        };
        $rootScope.deleteUserMail = function(){
            Person.unInviteUser({email : $rootScope.showUserMail.email, lang : $rootScope.me.personParams.lang},function(resp){
                if(resp.status == 'ok'){
                    $scope.tableParamsInv.reload();
                   $rootScope.closeModal();
                }else{
                    notificationService.error(resp.message);
                }
            })
        };
        $scope.tofullinformation = function(user){
            $location.path('users/' + user.userId);
        };
        $scope.moveToThanks = function(){
            $location.path("thanks")
        };
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        //$rootScope.disabledBtnFuncUserModal = function(){
        //    $scope.modalInstance.close(function() {
        //        $scope.openInviteUser();
        //    });
        //    $scope.modalInstance = $uibModal.open({
        //        animation: true,
        //        templateUrl: '../partials/modal/disabled-btn-for-test-account.html',
        //        resolve: {
        //            items: function () {
        //                return $scope.items;
        //            }
        //        }
        //    });
        //    setTimeout(function(){
        //        $rootScope.closeModal = function(){
        //            $scope.modalInstance.close();
        //        };
        //    }, 0);
        //};
        $scope.toggleDisabledUsersFunc = function () {
            var elem = $('.disabledUsers');
            //var titleElem = $('.block-company .no-padding-sm .disabledUsers table thead');
            if($scope.toggleDisabledUsers) {
                elem.css({'display': 'block'});
                elem.toggleClass('showAfter');
                $scope.toggleDisabledUsers = false;
                //titleElem.prop('title', $filter('translate')('Show full description'));
            } else {
                elem.css({'display': 'none'});
                elem.toggleClass('showAfter');
                $scope.toggleDisabledUsers = true;
                //titleElem.prop('title', $filter('translate')('Hide full description'));
            }
        };
        $scope.toggleInvitedUsersFunc = function () {
            var elem = $('.invitedUsers');
            //var titleElem = $('.block-company .no-padding-sm .invitedUsers table thead');
            if($scope.toggleInvitedUsers) {
                elem.css({'display': 'block'});
                elem.toggleClass('showAfter');
                $scope.toggleInvitedUsers = false;
                //titleElem.prop('title', $filter('translate')('Hide full description'));
            } else {
                elem.css({'display': 'none'});
                elem.toggleClass('showAfter');
                $scope.toggleInvitedUsers = true;
                //titleElem.prop('title', $filter('translate')('Show full description'));
            }
        };
    }]);

controller.controller('userInfoController',["$scope", "Person", function($scope, Person) {
    Person.getMe(function(resp) {
        $scope.me = resp;
    });
}]);

controller.controller('userOneController', ["$scope", "tmhDynamicLocale", "Person", "$rootScope", "$routeParams", "Vacancy",
    "$location", "$translate", "Candidate", "Service", "notificationService", "$filter", "googleService", '$http', 'serverAddress', 'Client',
    'Company', 'vacancyStages','Action', '$sce', '$uibModal',
    function($scope, tmhDynamicLocale, Person, $rootScope, $routeParams, Vacancy, $location, $translate, Candidate, Service,
             notificationService, $filter, googleService, $http, serverAddress, Client, Company, vacancyStages, Action, $sce, $uibModal) {
        $scope.showChangePassword = false;
        $scope.showChangeOrgName = false;
        $scope.showChangeRole = false;
        $scope.showChangeRegion = false;
        $scope.showChangeGmail = false;
        $scope.showChangeContacts = false;
        $scope.changedName = "";
        $scope.contacts = {};
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.showChangeCompanyOfInvitedClient = false;
        vacancyStages.get(function(resp){
            $scope.customStages =resp.object.interviewStates;
        });

        var oldContacts = {};

        $scope.setPersonParam = function(name, value, callback) {
            $http.get(serverAddress + '/person/changeUserParam?userId=' + $scope.user.userId + "&name=" + name + "&value=" + value).success(
                function(resp) {
                if (!$scope.user.personParams) {
                    $scope.user.personParams = {};
                }
                $scope.user.personParams[name] = value;
                if (callback != undefined)callback();
            });
        };
        $scope.enableViewClients = function(user) {
            if(user.personParams.clientAccessLevel == 'full'){
                $scope.setPersonParam('clientAccessLevel', 'hide');
            }else{
                $scope.setPersonParam('clientAccessLevel', 'full');
            }
        };

        $scope.disableViewClients = function() {
            $scope.setPersonParam('clientAccessLevel', 'hide');
        };

        $scope.changeUserClientRole = function(name, clientId) {
            $scope.setPersonParam(name, clientId, function() {
                Person.getPerson({userId: $routeParams.id}, function(resp) {
                    $scope.user = resp;
                    $scope.showChangeCompanyOfInvitedClient=false;
                });
            });
        };
        $('.ui.dropdown').dropdown();
        Person.getPerson({userId: $routeParams.id}, function(resp) {
          if(resp.status =='ok'){
              $scope.user = resp.object;
              if($scope.user.recrutRole == 'admin') {
                  $scope.user.personParams.enableDownloadToExcel = (!$scope.user.personParams.enableDownloadToExcel || $scope.user.personParams.enableDownloadToExcel == 'Y' )? true : false;
              } else if ($scope.user.recrutRole == 'recruter') {
                  $scope.user.personParams.enableDownloadToExcel = ($scope.user.personParams.enableDownloadToExcel && $scope.user.personParams.enableDownloadToExcel == 'Y' )? true : false;
              }

              $scope.changedName = resp.object.fullName;
              $scope.getMyVacancy = function(){
                  Vacancy.setOptions("personId", $scope.user.userId);
                  Vacancy.all(Vacancy.searchOptions(), function(response) {
                      $scope.allVacancyInUser = response.objects;
                  });
              };
              $scope.getMyVacancy();
              angular.forEach($scope.user.personParams, function(value,key){
                  angular.forEach($scope.sendNotificationObj, function(res){
                      if(res.name == key){
                          res.value = value;
                      }
                  });
              });
              if ($rootScope.errorMessageType === "inviteBlockUser") {
                  $rootScope.errorMessageType = null;
                  $scope.errorMessage = $scope.user.fullName + " (" + $scope.user.login + ") " + $filter("translate")("has already been in your account and now he (she) is disabled. Here you can enable access for him (her)");
              }
              $scope.newRole = resp.object.recrutRole;
              $scope.statisticObj = {
                  requestObj: {creator: resp.userId},
                  objId: resp.userId,
                  objType: "user"
              };

              if (resp.object.recrutRole == 'client') {
              }
              // Client.all(Client.searchOptions(), function(response) {
              //     console.log(response);
              //     $scope.clients = response['objects'];
              // });

              $scope.showHistory = true;
              $scope.refreshHistory = function(){
                  Service.history({
                      personId: resp.object.userId,
                      "ignoreType": ['sent_candidate_to_client'],
                      "page": {"number": 0, "count": 20}
                  }, function(res) {
                      $scope.history = res.objects;
                      var array = [];
                      angular.forEach($scope.history, function(value){
                          if(value.stateNew && value.type == "set_interview_status"){
                              array = value.stateNew.split(",");
                              angular.forEach($scope.customStages,function(val){
                                  angular.forEach(array,function(resp){
                                      if(val.customInterviewStateId == resp){
                                          array[array.indexOf(val.customInterviewStateId)] = val.name;
                                      }
                                  });
                              });
                              value.stateNew = array.toString();
                          }
                      });
                      $scope.showHistory = res.objects != undefined;
                      $scope.historyLimit = 20;
                      $scope.historyTotal = res.total;
                  });
              };
              $scope.refreshHistory();

              if (resp.object.contacts) {
                  angular.forEach(resp.object.contacts, function(val) {
                      if (angular.equals(val.contactType, "phoneMob")) {
                          $scope.contacts.phoneMob = val.value;
                      }
                      if (angular.equals(val.contactType, "phoneWork")) {
                          $scope.contacts.phoneWork = val.value;
                      }
                      if (angular.equals(val.contactType, "skype")) {
                          $scope.contacts.skype = val.value;
                      }
                      if (angular.equals(val.contactType, "linkedin")) {
                          $scope.contacts.linkedin = val.value;
                      }
                      if (angular.equals(val.contactType, "facebook")) {
                          $scope.contacts.facebook = val.value;
                      }
                      if (angular.equals(val.contactType, "googleplus")) {
                          $scope.contacts.googleplus = val.value;
                      }
                      if (angular.equals(val.contactType, "homepage")) {
                          $scope.contacts.homepage = val.value;
                      }
                  });
                  oldContacts = angular.copy($scope.contacts);
              }
          }else if(resp.code == 'notFound'){
              notificationService.error($filter('translate')('User not found'));
              $location.path("company/users");
          }
        });

        $scope.getMoreHistory = function() {
            Service.history({
                personId: $scope.user.userId,
                "ignoreType": ['sent_candidate_to_client'],
                "page": {"number": 0, "count": $scope.historyLimit *= 2}
            }, function(res) {
                $scope.history = res.objects;
            }, function(error) {
            });
        };

        $scope.toAllVacancy = function() {
            $rootScope.usernameThatIsSearching = $scope.user.cutFullName;
            Vacancy.setOptions("personId", $scope.user.userId);
            $location.path("/vacancies");
        };
        $scope.toAllCandidates = function() {
            $rootScope.usernameThatIsSearching = $scope.user.cutFullName;
            $rootScope.userIdThatIsSearching = $scope.user.userId;
            Candidate.setOptions("personId", $scope.user.userId);
            $location.path("/candidates");
        };
        $rootScope.currentLang = $translate.use();
        $scope.changeLanguage = function(key) {
            $translate.use(key);
            tmhDynamicLocale.set(key);
            Person.setLang({lang: key});
        };
        $scope.saveNewRole = function(val,confirmed) {
            console.log($scope.user.recrutRole, '$scope.user.recrutRole')
            if ((val !== undefined && val !== $scope.user.recrutRole && val != 'client') || (val == 'client' && confirmed) || (val != 'client')) {
                    $rootScope.loading = true;
                    $scope.newRole = val;
                    Person.changeUserRole({
                        personId: $scope.user.personId,
                        userId: $scope.user.userId,
                        role: $scope.newRole
                        //clientId: newClient ? newClient.clientId : $scope.user.client ? $scope.user.client.clientId : ""
                    }, function(resp) {
                        if (resp.status && angular.equals(resp.status, "error")) {
                            $rootScope.loading = false;
                            resp.message = $filter('translate')(resp.message);
                            notificationService.error(resp.message);
                        } else {
                            Person.getPerson({userId: $routeParams.id}, function(resp) {
                                $rootScope.loading = false;
                                if($scope.newRole == resp.object.recrutRole) {
                                    $scope.user.recrutRole = $scope.newRole;
                                    var roleName = $scope.newRole == 'salesmanager' ? "Sales Manager" : $scope.newRole == 'admin' ? "Admin" : $scope.newRole == 'client' ? "Hiring Manager" : $scope.newRole == 'freelancer' ? "Freelancer" : $scope.newRole == 'recruter' ? 'Recruter' : $scope.newRole  == 'researcher'? 'Researcher': 'Researcher';
                                    var message = $filter('translate')("You has granted role") + " " + roleName + " " + $filter('translate')('_for') + " " + $scope.user.firstName;
                                    $rootScope.updateMe();
                                    notificationService.success(message);
                                    $scope.getLastEvent();
                                }
                            });
                        }
                    }, function() {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                    });
                $scope.showChangeRole = false;
            }else if(!confirmed){
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/change-role-warning.html',
                    resolve: {

                    }
                });
            } else {
                $scope.showChangeRole = false;
            }
        };
        $rootScope.saveNewRole = $scope.saveNewRole;
        $scope.inputValue = '';
        $scope.saveNewRegion = function() {
            if ($scope.region !== undefined && $scope.regionInput != '') {
                Person.changeRegion({
                    personId: $scope.user.personId,
                    region: $scope.region,
                    lang: $translate.use()
                }, function(resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    } else {
                        $scope.user.region = $scope.region;
                        $scope.user.region.displayFullName = $scope.user.region.fullName;
//                    angular.forEach($scope.regions, function (region) {
//                        if ($scope.newRegion == region.regionId) {
//                            $scope.user.region = region;
//                        }
//                    });
                        // console.log(resp)
                        notificationService.success($filter('translate')("region change"));
                    }
                }, function() {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
                $scope.showChangeRegion = false;
            } else {
                if( $scope.user.region != undefined) {
                    Person.changeRegion({
                        personId: $scope.user.personId,
                        lang: $translate.use()
                    }, function(resp) {
                        if (resp.status && angular.equals(resp.status, "error")) {
                            notificationService.error(resp.message);
                        } else {
                            $scope.user.region = undefined;
                            notificationService.success($filter('translate')("region change"));
                        }
                    }, function() {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                    });
                }
                $scope.showChangeRegion = false;
            }
        };

        $scope.setGmail = function() {
            $rootScope.curentOnlyMenWatch = $rootScope.$watch('g_info', function(val) {
                if ($rootScope.g_info && $rootScope.g_info.email && $rootScope.g_info.email !== $scope.user.googleMail) {
                    Person.setSocial({email: $rootScope.g_info.email, social: "google"}, function(resp) {
                        if (resp.status && angular.equals(resp.status, "error")) {
                            if(resp.code == 'busyGoogle'){
                                notificationService.error($filter('translate')("This gmail is already connected to another user"));
                            }else{
                                notificationService.error(resp.message);
                            }
                            $rootScope.g_info = null;
                        } else {
                            $scope.user.googleMail = $rootScope.g_info.email;
                            notificationService.success($filter('translate')("gmail change"));
                        }
                    }, function() {
                        //notificationService.error($filter('translate')('service temporarily unvailable'));
                        $rootScope.g_info = null;
                    });
                    $rootScope.curentOnlyMenWatch();
                }
            });
            googleService.loginLink(function(resp) {
            });
        };

        $scope.resetGmail = function() {
            Person.resetSocial({social: "google"}, function(resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    $scope.user.googleMail = null;
                    $rootScope.g_info = null;
                    notificationService.success($filter('translate')("gmail reset"));
                }
            }, function() {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        var messages = {
            wrong1_password: $filter('translate')("Password should contain only numbers and latin letters, allowed characters: !,.?%$#@*_-+=\\|/[]{}()"),
            wrong2_password: $filter('translate')("Password should contain at least one latin letter"),
            wrong3_password: $filter('translate')("Password should contain at least one number"),
            wrong4_password: $filter('translate')("Password must be 8-30 characters long"),
            wrong_password2: $filter('translate')("The password doesn't match to previous")
        };
        $scope.changePassword = function() {
            var password1 = /^(?=.*\d)(?=.*[a-zA-Z0-9!,.?%$#@*_\-+=\\|/[\]{}()]).{8,30}$/;
            var password2 = /.*[a-zA-Z].*/;
            var password3 = /.*\d.*/;
            var password = $($('input[name=newPass]'));
            var repeatPassword = $($('input[name=newPass2]'));
            console.log(password1.test(password.val()));
            console.log(password2.test(password.val()));
            console.log(password3.test(password.val()));
            if(!password1.test(password.val()) || !password2.test(password.val()) || !password3.test(password.val()) || password.val().length < 8 || password.val().length > 30){
                password.css({'border': '2px solid #C62828', 'background-color': '#FFF6F7'});
                password.focus();
                $(".error-password").removeClass("hidden");
                if(password.val().length == 0){
                    $(".error-password").html(messages.wrong4_password);
                    $(".error-password-1").removeClass("hidden");
                    $(".error-password-3").addClass("hidden");
                    $(".error-password-4").addClass("hidden");
                    $(".error-password-5").addClass("hidden");
                    $(".error-password-6").addClass("hidden");
                    return false;
                }
                if(password.val().length < 8 || password.val().length > 30){
                    $(".error-password").html(messages.wrong4_password);
                    $(".error-password-1").addClass("hidden");
                    $(".error-password-2").addClass("hidden");
                    $(".error-password-3").addClass("hidden");
                    $(".error-password-4").addClass("hidden");
                    $(".error-password-5").addClass("hidden");
                    $(".error-password-6").removeClass("hidden");
                    if(!password3.test(password.val()) == true){
                        $(".error-password").html(messages.wrong4_password);
                        $(".error-password-1").addClass("hidden");
                        $(".error-password-2").addClass("hidden");
                        $(".error-password-3").addClass("hidden");
                        $(".error-password-5").removeClass("hidden");
                        $(".error-password-6").addClass("hidden");
                        return false;
                    }
                    if(password2.test(password.val()) == true && password3.test(password.val()) == true){
                        $(".error-password").html(messages.wrong4_password);
                        $(".error-password-1").addClass("hidden");
                        $(".error-password-2").addClass("hidden");
                        $(".error-password-3").addClass("hidden");
                        $(".error-password-7").removeClass("hidden");
                        $(".error-password-5").addClass("hidden");
                        $(".error-password-6").addClass("hidden");
                        return false;
                    }
                    return false;
                }else{
                    $(".error-password").html(messages.wrong4_password);
                    $(".error-password-2").addClass("hidden");
                    $(".error-password-3").removeClass("hidden");
                    $(".error-password-5").addClass("hidden");
                }
                if(!password1.test(password.val())){
                    $(".error-password").html(messages.wrong3_password);
                    $(".error-password-3").removeClass("hidden");
                    $(".error-password-1").addClass("hidden");
                    $(".error-password-4").addClass("hidden");
                    return false;
                }
                if(!password2.test(password.val())){
                    $(".error-password").html(messages.wrong2_password);
                    $(".error-password-1").addClass("hidden");
                    $(".error-password-2").removeClass("hidden");
                    $(".error-password-4").addClass("hidden");
                    $(".error-password-3").addClass("hidden");
                    $(".error-password-6").addClass("hidden");
                    return false;
                }
            }
            if(password1.test(password.val()) && password2.test(password.val()) && password3.test(password.val())){
                password.css({'border': 'none', 'border-bottom': '1px solid #e3e3e3', 'background-color': '#fff'});
                repeatPassword.css({'border': '2px solid #C62828', 'background-color': '#FFF6F7'});
                $(".error-password").html(messages.wrong_password2);
                $(".error-password-2").addClass("hidden");
                $(".error-password-3").addClass("hidden");
                $(".error-password-4").removeClass("hidden");
                $(".error-password-5").addClass("hidden");
                $(".error-password-7").addClass("hidden");
            }
            if ($scope.changePass.newPass === $scope.changePass.newPass2) {
                Person.changePassword({
                    oldPass: $scope.changePass.oldPass,
                    newPass: $scope.changePass.newPass
                }, function(resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        if(resp.code == 'pwd8_30'){
                            notificationService.error($filter('translate')('Password should contain at least one number, one Latin letter and be 8-30 characters long'));
                        }else{
                            resp.message = $filter('translate')(resp.message);
                            notificationService.error(resp.message);
                            repeatPassword.css({'border': 'none', 'border-bottom': '1px solid #e3e3e3', 'background-color': '#fff'});
                            $(".error-password").html(resp.message);
                        }
                    } else {
                        notificationService.success($filter('translate')('password_changed'));
                        repeatPassword.css({'border': 'none', 'border-bottom': '1px solid #e3e3e3', 'background-color': '#fff'});
                        $($('input[name=oldPass]')).val('');
                        password.val('');
                        repeatPassword.val('');
                        $(".error-password").addClass("hidden");
                        $(".error-password-4").addClass("hidden");
                        $scope.showChangePassword = false;
                    }
                }, function() {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            } else {
                notificationService.error($filter('translate')('not_match'));
            }
        };
        $scope.updateContacts = function() {
            var contacts = [];
            if ($scope.contacts.phoneMob) {
                contacts.push({contactType: "phoneMob", value: $scope.contacts.phoneMob});
            }
            if ($scope.contacts.phoneWork) {
                contacts.push({contactType: "phoneWork", value: $scope.contacts.phoneWork});
            }
            if ($scope.contacts.skype) {
                contacts.push({contactType: "skype", value: $scope.contacts.skype});
            }
            if ($scope.contacts.linkedin) {
                updateContactsLocal('linkedin',$scope.contacts.linkedin);
                contacts.push({contactType: "linkedin", value: $scope.contacts.linkedin});
            } else {
                updateContactsLocal('linkedin',$scope.contacts.linkedin);
            }
            if ($scope.contacts.facebook) {
                updateContactsLocal('facebook',$scope.contacts.facebook);
                contacts.push({contactType: "facebook", value: $scope.contacts.facebook});
            } else {
                updateContactsLocal('facebook',$scope.contacts.facebook);
            }
            if ($scope.contacts.googleplus) {
                contacts.push({contactType: "googleplus", value: $scope.contacts.googleplus});
            }
            if ($scope.contacts.homepage) {
                contacts.push({contactType: "homepage", value: $scope.contacts.homepage});
            }
            if((($('#phoneNumber').val() == $scope.contacts.phoneMob) || ($('#phoneNumber').val() == '' && $scope.contacts.phoneMob == undefined)) && (($('#workNumber').val() == $scope.contacts.phoneWork) || ($('#workNumber').val() == '' && $scope.contacts.phoneWork == undefined))){
                Person.updateContacts(contacts, function(resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    } else {
                        notificationService.success($filter('translate')('contacts_saved'));
                        $scope.showChangeContacts = false;
                        oldContacts = angular.copy($scope.contacts);
                    }
                }, function() {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }else{
                notificationService.error($filter('translate')('Incorrect phone number'));
            }
        };


        function updateContactsLocal(contactType, contactValue) {
            let existContact = false;
            existContact = $rootScope.me.contacts.some(function (contact) {
                if(contact.contactType == contactType) {
                    contact.value = contactValue;
                    return true
                } else {
                    return false
                }
            });

            if(!existContact) {
                $rootScope.me.contacts.push({
                    contactType: contactType,
                    value: contactValue,
                    personId: $rootScope.me.personId
                });
            }
        }


        $scope.cancelUpdateContacts = function() {
            $scope.contacts = angular.copy(oldContacts);
            $scope.showChangeContacts = false;
        };


        $scope.showChangeUserOrgName = function() {
            $scope.showChangeOrgName = true;
            $scope.newOrgName = $rootScope.me.orgName;
        };

        $scope.changeOrgName = function() {
            Person.changeOrgName({orgName: $scope.newOrgName, lang: $translate.use()}, function(resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    $rootScope.me.orgName = $scope.newOrgName;
                    $scope.user.orgName = $scope.newOrgName;
                    $scope.showChangeOrgName = false;
                    angular.forEach($rootScope.me.orgs, function(org) {
                        if (org.orgId == $rootScope.me.orgId) {
                            org.orgName = $scope.newOrgName;
                        }
                    });
                    angular.forEach($rootScope.orgs, function(org) {
                        if (org.orgId == $rootScope.me.orgId) {
                            org.orgName = $scope.newOrgName;
                        }
                    });

                    $scope.getLastEvent();

                }
            }, function() {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };

        $scope.changeUserStatus = function() {
            if ($scope.user.status === "A") {
                $scope.disableUser();
            } else if ($scope.user.status === "N") {
                $scope.enableUser();
            }
        };

        $scope.getLastEvent = function() {
            Service.history({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "page": {"number": 0, "count": 1},
                "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
                "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
                "personId": ($scope.user !== undefined && $scope.user.userId != undefined) ? $scope.user.userId : null
            }, function(res) {
                if (res.status == 'ok')
                    $scope.history.unshift(res.objects[0]);
            }, function(error) {
            });
        };

        $scope.disableUser = function(user,confirmed) {
            $rootScope.userForDisable = user;
            if(user.status == 'A' && confirmed){
                Person.disableUser({personId: $scope.user.personId, userId: $scope.user.userId}, function(resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    } else {
                        $scope.user.status = "N";
                        $scope.getLastEvent();
                    }
                }, function() {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }else if(confirmed && user.status == 'N'){
                Person.enableUser({personId: $scope.user.personId, userId: $scope.user.userId}, function(resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    } else {
                        $scope.user.status = "A";
                        $scope.getLastEvent();
                    }
                }, function() {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }else{
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: '../partials/modal/remove-user-warning.html?b1',
                    resolve: {

                    }
                });
            }
        };
        $rootScope.disableUser = $scope.disableUser;
        $scope.enableUser = function() {
            Person.enableUser({personId: $scope.user.personId, userId: $scope.user.userId}, function(resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    $scope.user.status = "A";
                    $scope.getLastEvent();
                }
            }, function() {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };

        $scope.setPersonEmploye = function(name, value) {
            $http.get(serverAddress + '/employee/setEmployeeFunctionsEnabled?userId=' + $scope.user.userId + "&enable=" + value).success(
                function(resp) {
                    if (!$scope.user.personParams) {
                        $scope.user.personParams = {};
                    }
                    $scope.user.personParams[name] = value;
                    if($scope.user.login == $rootScope.me.login){
                        $rootScope.me.personParams[name] = value;
                    }
                    //if (callback != undefined)callback();
                });

        };
        $scope.setExcelRecruiter = function(name, value) {
            $http.get(serverAddress + '/employee/setDownloadingToExcelEnable?userId=' + $scope.user.userId + "&enable=" + value).success(
                function(resp) {
                    if (!$scope.user.personParams) {
                        $scope.user.personParams = {};
                    }
                    $scope.user.personParams[name] = value;
                    if($scope.user.login == $rootScope.me.login){
                        $rootScope.me.personParams[name] = value;
                    }
                    //if (callback != undefined)callback();
                });

        };

        $scope.enableViewEmploye = function(user) {
            if(user.personParams.enableEmployee == 'N'){
                $scope.setPersonEmploye('enableEmployee','Y');
            }else{
                $scope.setPersonEmploye('enableEmployee','N');
            }
        };

        $scope.disableViewEmploye = function() {
            $scope.setPersonEmploye('enableEmployee','N');
        };

        $scope.disableExcelRecruiter = function() {
            $scope.setExcelRecruiter('enableEmployee',false);
        };
        $scope.enableExcelRecruiter = function(user) {
            if(user.personParams.enableDownloadToExcel){
                $scope.setExcelRecruiter('enableDownloadToExcel', false);
            }else{
                $scope.setExcelRecruiter('enableDownloadToExcel', true);
            }
        };

        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
            });
        };
        $scope.getCompanyParams();
        $scope.changeCommentFlag = function(history){
            history.editCommentFlag = !history.editCommentFlag;
            $scope.editComment = history.descr;
        };
        $scope.changeComment = function(action){
            Action.editAction({"comment": action.descr, "actionId": action.actionId}, function(resp){
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                }
                else {
                    action.editCommentFlag = false;
                    action.descr = resp.object.descr;
                    action.new_komment = '';
                    action.dateEdit = resp.object.dateEdit;
                }
            });
        };

        $scope.showDeleteComment = function(resp) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-comment-candidate.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $rootScope.commentRemove = resp;
            $rootScope.commentRemoveId = resp.actionId;
        };

        $rootScope.deleteComment = function() {
            Action.removeMessageAction({
                actionId: $rootScope.commentRemoveId
            },function(resp){
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('Comment removed'));
                    $scope.refreshHistory();
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $rootScope.closeModal();
            })
        };
        $scope.showForm = true;
        $scope.focusChangeNameFunc = function(){
            $scope.showForm = false;
            setTimeout(function(){
                $("#changeNameInput").focus();
            },0)
        };
        $scope.showFormEdit = function(){
            $scope.showForm = false;
            $scope.focusInput = true;
        };
        $scope.checkKeyFunc = function(event){
            if(event.keyCode === 13){
                $scope.showForm = true;
                $('#changeNameInput').blur()
            }
        };
        $scope.changeUserFirstName = function (){
            if($scope.changedName.length > 0){
                Person.changeFirstName({
                    firstName: $scope.changedName
                },function(resp){
                    if(resp.status == 'ok'){
                        $scope.showForm = true;
                        Person.getPerson({userId: $routeParams.id}, function(resp) {
                            $scope.user = resp.object;
                            $rootScope.updateMe();
                        });
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            }else{
                notificationService.error($filter('translate')('Enter_at_least_one_symbol'));
            }
        };
        $scope.showEditEmailTemplate = function(template){
            $scope.activeTemplate = template.type;
            $scope.fileForSave = [];
            $scope.emailTemplate = {
                mailTemplateId: template.mailTemplateId,
                type: template.type,
                name: template.name,
                title: template.title,
                text: template.text,
                vacancyId: $scope.vacancy.vacancyId,
                fileId: template.fileId,
                fileName: template.fileName
            };
            if($scope.emailTemplate.fileId && $scope.emailTemplate.fileName){
                $scope.fileForSave.push({"fileId": $scope.emailTemplate.fileId, "fileName": $scope.emailTemplate.fileName});
            }
            $scope.emailTemplateForRender.text = $scope.emailTemplate.text;
            $scope.showAddEmailTemplate = true;
            $scope.updateRenderedTitle();
        };

        $(document).mouseup(function (e) {
            if ($(".popover").has(e.target).length === 0){
                $('.popover').remove('.popover');
            }
        });
    }
]);

controller.controller('payWay4PayController', ["$scope", "Person", "$rootScope", "$routeParams", "$location","$translate","Service",
    "notificationService","$filter", "Account", "Pay","Company",
    function ($scope, Person, $rootScope, $routeParams, $location, $translate, Service, notificationService, $filter, Account, Pay, Company) {
        $scope.numberVacancy = 0;
        $scope.trueVisionBlockUser = $rootScope.blockUser;
        $rootScope.blockUser = false;
        $scope.bonuce = 0;

        var promise = new Promise(function(resolve, reject) {
            Account.getAccountInfo(function(resp){
                if(resp.status != 'error'){
                    resolve(resp);
                } else {
                    reject(resp.message);
                }
            });
        });

        promise.then(function(resp){
            $scope.balance = resp.object;
            if($rootScope.me['orgParams']['tarif']) {
                $scope.tarif = $rootScope.me['orgParams']['tarif'];
            } else {
                $scope.tarif = resp.object.tarif;
            }

            $scope.dailyRate = resp.object.dailyRate;
            $scope.monthRate = resp.object.monthRate;
        },function(msg){
            notificationService.error(msg);
        }).then(function(){
            $scope.getAllPersons = Person.getAllPersons(function (resp) {
                //allPersons = Object.keys(resp).length;
                $scope.associativePerson = resp.object;
                angular.forEach($scope.associativePerson, function (val) {
                    //console.log(val);
                    //console.log(val.status);
                    if (val.status == "A" && val.recrutRole != 'client') {
                        $scope.numberVacancy = ++$scope.numberVacancy;
                    }
                });
                //console.log('allPersons: '+$scope.numberVacancy);
                if ($scope.numberVacancy <= 12 && $scope.numberVacancy != 0) {
                    $('#countPeople').append("<option style='display: none;' selected>" + $scope.numberVacancy + "</option>");
                }
                else {
                    $('#countPeople').append("<option selected>" + $scope.numberVacancy + "</option>");
                }
                $scope.countMonth = $('#countMonth').val();
                $scope.countPeople = $('#countPeople').val();
                if(!$scope.monthRate) {
                    if ($scope.countMonth >= 12) {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.8;
                    }
                    else if ($scope.countMonth >= 4) {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.9;
                    }
                    else {
                        $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                    }
                } else {
                    $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople ;
                }
                $('#price').html($scope.price + " USD");
            });
        },function(msg){
            notificationService.error(msg);
        });

        $('.checkoutInner select').on('change', function () {
            $scope.countMonth = $('#countMonth').val();
            $scope.countPeople = $('#countPeople').val();
            if(!$scope.monthRate) {
                if ($scope.countMonth >= 12) {
                    $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.8;
                }
                else if ($scope.countMonth >= 4) {
                    $scope.price = 25 * $scope.countMonth * $scope.countPeople * 0.9;
                }
                else {
                    $scope.price = 25 * $scope.countMonth * $scope.countPeople;
                }
            } else {
                if ($scope.countMonth >= 12) {
                    $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                    $('#bonuce').removeClass('hidden');
                    $scope.bonuce = 20;
                    $('#amountBonus').html((($scope.bonuce * $scope.price)/100 + $scope.price) + ' USD');
                }
                else if ($scope.countMonth >= 4) {
                    $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                    $('#bonuce').removeClass('hidden');
                    $scope.bonuce = 10;
                    $('#amountBonus').html((($scope.bonuce * $scope.price)/100 + $scope.price) + ' USD');
                }
                else {
                    $('#bonuce').addClass('hidden');
                    $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
                }
            }

            $('#price').html($scope.price + " USD");
            $scope.$apply();
        });

        $scope.payClick = function () {
            Pay.createPaymentUsage({
                months: $scope.countMonth,
                users: $scope.countPeople,
                type: 'way4pay'
            }, function (resp) {
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                } else {
                    var form = '<form id="payForm" action="https://secure.wayforpay.com/pay" method="post">' +
                        '<input type="hidden" name="amount" value="' + resp.wayForPayParams.amount + '" />' +
                        '<input type="hidden" name="currency" value="' + resp.wayForPayParams.currency + '" />' +
                        '<input type="hidden" name="merchantAccount" value="' + resp.wayForPayParams.merchantAccount + '" />' +
                        '<input type="hidden" name="merchantDomainName" value="' + resp.wayForPayParams.merchantDomainName + '" />' +
                        '<input type="hidden" name="merchantSignature" value="' + resp.wayForPayParams.merchantSignature + '" />' +
                        '<input type="hidden" name="merchantTransactionSecureType" value="' + resp.wayForPayParams.merchantTransactionSecureType + '" />' +
                        '<input type="hidden" name="merchantTransactionType" value="' + resp.wayForPayParams.merchantTransactionType + '" />' +
                        '<input type="hidden" name="orderDate" value="' + resp.wayForPayParams.orderDate + '" />' +
                        '<input type="hidden" name="orderReference" value="' + resp.wayForPayParams.orderReference + '" />' +
                        '<input type="hidden" name="paymentSystems" value="' + resp.wayForPayParams.paymentSystems + '" />' +
                        '<input type="hidden" name="productCount[]" value="' + resp.wayForPayParams.productCount + '" />' +
                        '<input type="hidden" name="productName[]" value="' + resp.wayForPayParams.productName + '" />' +
                        '<input type="hidden" name="productPrice[]" value="' + resp.wayForPayParams.productPrice + '" />' +
                        '<input type="hidden" name="returnUrl" value="' + resp.wayForPayParams.returnUrl + '" />' +
                        '<input type="hidden" name="serviceUrl" value="' + resp.wayForPayParams.serviceUrl + '" />' +
                        '</form>';
                    $('body').append(form);
                    $('#payForm').submit();
                    $('#payForm').remove();
                }
            }, function () {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };


        $scope.updatePaymentsList = function () {
            Pay.getPayments(function (resp) {
                $scope.payments = resp;
            });
        };

        $scope.acceptChangesBiling = function () {

            Company.setParam({
                name:"switch2billing",
                value:"Y"

            }, function (resp) {

                if(resp.status == "ok"){
                    $rootScope.closeModal();
                    $rootScope.modalInstance = undefined;
                }
            });

        };

        $scope.updatePaymentsList();
        // $scope.getAllPersons = Person.getAllPersons(function (resp) {
        //     //allPersons = Object.keys(resp).length;
        //     $scope.associativePerson = resp.object;
        //     angular.forEach($scope.associativePerson, function (val) {
        //         //console.log(val);
        //         //console.log(val.status);
        //         if (val.status == "A" && val.recrutRole != 'client') {
        //             $scope.numberVacancy = ++$scope.numberVacancy;
        //         }
        //     });
        //     //console.log('allPersons: '+$scope.numberVacancy);
        //     if ($scope.numberVacancy <= 12 && $scope.numberVacancy != 0) {
        //         $('#countPeople').append("<option style='display: none;' selected>" + $scope.numberVacancy + "</option>");
        //     }
        //     else {
        //         $('#countPeople').append("<option selected>" + $scope.numberVacancy + "</option>");
        //     }
        //     $scope.countMonth = $('#countMonth').val();
        //     $scope.countPeople = $('#countPeople').val();
        //     if ($scope.countMonth >= 12) {
        //         $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople * 0.80;
        //     }
        //     else if ($scope.countMonth >= 4) {
        //         $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople * 0.9;
        //     }
        //     else {
        //         console.log("3",$scope.monthRate);
        //         console.log("4",$scope.dailyRate);
        //         $scope.price = $scope.monthRate * $scope.countMonth * $scope.countPeople;
        //     }
        //     $('#price').html($scope.price + " USD");
        // });
        $scope.deletePayment = function (resp) {
            console.log(resp.paymentId);
            $.ajax({
                url: "/hr/pay/removePayment?paymentId=" + resp.paymentId,
                type: "GET",
                data: null,
                dataType: "json",
                success: function (data) {
                    if (data.status === "ok") {
                        $scope.updatePaymentsList();
                    }else{
                        notificationService.error(data.message);
                    }
                }
            });
        };
        $scope.payViaTab = function (resp) {
            var form = '<form id="payForm" action="https://secure.wayforpay.com/pay" method="post">' +
                '<input type="hidden" name="amount" value="' + resp.wayForPayParams.amount + '" />' +
                '<input type="hidden" name="currency" value="' + resp.wayForPayParams.currency + '" />' +
                '<input type="hidden" name="merchantAccount" value="' + resp.wayForPayParams.merchantAccount + '" />' +
                '<input type="hidden" name="merchantDomainName" value="' + resp.wayForPayParams.merchantDomainName + '" />' +
                '<input type="hidden" name="merchantSignature" value="' + resp.wayForPayParams.merchantSignature + '" />' +
                '<input type="hidden" name="merchantTransactionSecureType" value="' + resp.wayForPayParams.merchantTransactionSecureType + '" />' +
                '<input type="hidden" name="merchantTransactionType" value="' + resp.wayForPayParams.merchantTransactionType + '" />' +
                '<input type="hidden" name="orderDate" value="' + resp.wayForPayParams.orderDate + '" />' +
                '<input type="hidden" name="orderReference" value="' + resp.wayForPayParams.orderReference + '" />' +
                '<input type="hidden" name="paymentSystems" value="' + resp.wayForPayParams.paymentSystems + '" />' +
                '<input type="hidden" name="productCount[]" value="' + resp.wayForPayParams.productCount + '" />' +
                '<input type="hidden" name="productName[]" value="' + resp.wayForPayParams.productName + '" />' +
                '<input type="hidden" name="productPrice[]" value="' + resp.wayForPayParams.productPrice + '" />' +
                '<input type="hidden" name="returnUrl" value="' + resp.wayForPayParams.returnUrl + '" />' +
                '<input type="hidden" name="serviceUrl" value="' + resp.wayForPayParams.serviceUrl + '" />' +
                '</form>';
            $('body').append(form);
            $('#payForm').submit();
            $('#payForm').remove();
        };
        $scope.checkPay = function () {
            var string = window.location.hash,
                substring = "order";
            console.log(string);
            if (string.indexOf(substring) > -1) {
                $scope.fromPayment = true;
            }
        };
        $scope.checkPay();

        Account.getTransactions({
            dateFrom:null,
            dateTo: null
        },function (resp) {
                if(resp.status == 'ok'){
                    $scope.expenses = resp.object.reverse();
                }else{
                    notificationService.error(resp.message);
                }
        });
    }
]);

controller.controller('vacancyAddController', ["FileInit", "$scope", "Vacancy", "Service", "Client", "$location", "$rootScope", "notificationService", "$filter", "$translate", "$localStorage", "$cookies", "$window", "Person", "Company","Candidate","CustomField",
    function(FileInit, $scope, Vacancy, Service, Client, $location, $rootScope, notificationService, $filter, $translate, $localStorage, $cookies, $window, Person, Company,Candidate, CustomField) {
        $scope.addedLang = [];
        $scope.objType = 'vacancy';
        $scope.showStatus = true;
        $scope.type = "Vacancy add";
        $scope.employmentType = Service.employmentType();
        $scope.numberPosition = Service.numberPosition();
        $scope.paymentDate = null;
        $scope.clickedAddVacancy = false;
        $scope.fieldValues = {
            objType: "vacancy",
            value: '',
            dateTimeValue: '',
            field : {
                fieldId: ''
            }
        };
        Client.init();
        var myListener =  $scope.$on('addedLang', function (event, data) {
            if (data != undefined) {
                $scope.addedLang = data;
                $scope.changeLevel = function(level, id){
                    angular.forEach($scope.addedLang, function (val) {
                        if(val.id == id){
                            val.level = level;
                        }
                    });
                };
            }
        });
        $scope.$on('$destroy', myListener);
        $scope.langs = Candidate.getLangInOrg(function (resp){
            if(resp.object){
                //resp.object.splice(0, 1);
                $scope.setLangs(resp.object);
            } else {
                $scope.setLangs([]);
            }
        });
//    $location.hash('');
        if ($localStorage.isExist("vacancyForSave")) {
            $scope.vacancy = angular.fromJson($localStorage.get("vacancyForSave"));
            $localStorage.remove("vacancyForSave");
            $('.select2-lang').val($scope.vacancy.langs);
            $('.select2-lang').select2({
                tags: $scope.langs,
                tokenSeparators: [",", " "]
            });
            $scope.paymentDate = $scope.vacancy.datePayment ? new Date($scope.vacancy.datePayment) : null;
            $scope.finishDate = $scope.vacancy.dateFinish ? new Date($scope.vacancy.dateFinish) : null;
            $scope.vacancy.datePayment = null;
            $scope.vacancy.finishDate = null;
        } else {
            $scope.vacancy = {
                datePayment: "",
                accessType: 'public',
                dateFinish: "",
                sex:true,
                clientId: {
                    clientId: $rootScope.addVacancyClientId
                }
            };
            $rootScope.addVacancyClientId = null;
        }
        $(".paymentPicker").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        });
        $(".deadLinePicker").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        });
        $scope.fileForSave = [];
        $scope.map = {
            center: {
                latitude: 48.379433,
                longitude: 31.165579999999977
            },
            zoom: 5,
            options: {
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                mapTypeControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
        };
        $scope.marker = {
            id: 1,
            title: "",
            coords: {
                latitude: null,
                longitude: null
            }
        };


        FileInit.initFileOption($scope, "");
        $scope.callbackFile = function(resp, names) {
            $scope.fileForSave.push({"attId": resp, "fileName": names});
        };

        $scope.removeFile = function(id) {
            angular.forEach($scope.fileForSave, function(val, ind) {
                if (val.attId === id) {
                    $scope.fileForSave.splice(ind, 1);
                }
            });
        };

        $scope.errorMessage = {
            show: false,
            message: ""
        };
        $scope.lang = $translate;

        Service.genderTwo($scope);

        $scope.accessTypeObject = [
            {name: "Public", value: 'public'},
            {name: "Private", value: 'private'}
        ];
        $scope.cancel = function() {
            $location.path("/vacancies");
        };
        $scope.toAddClient = function() {
            var params = "menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes";
            window.open("#/client/add", "ClientAdd", params);
        };

        $scope.finishDate = null;


        $scope.status = Vacancy.status();
        delete $scope.status[5];

        $scope.currency = Service.currency();
        Client.all(Client.searchOptions(), function(response) {
            $scope.clients = response.objects;
            var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('chose_customer')+'</option>';
            angular.forEach($scope.clients, function (value) {
                optionsHtml += "<option style='color: #000000' value='" + value.clientId + "'>" + value.name + "</option>";
            });
            $('#client-select').html(optionsHtml);
            if($rootScope.me.recrutRole=='client'){
                if(response.objects){
                    $scope.vacancy.clientId=response.objects[0];
                }else{
                    notificationService.error($filter('translate')('Your company removed'));
                    $window.location.replace('!#/vacancies');
                }
            }
        });
        $scope.vacancy.fieldValues = [];
        $scope.editCustomField = function(text, id){
            $scope.vacancy.fieldValues.push({
                objType: "vacancy",
                value: text,
                field : {
                    fieldId: id
                }
            });
        };
        $scope.addCustomFieldParams = function(text, id){
            $scope.vacancy.fieldValues.push({
                objType: "vacancy",
                value: text,
                field : {
                    fieldId: id
                }
            });
        };

        $scope.sendCustomFieldId = function(id){
            $scope.editCustomId = id;
        };
        if ($scope.vacancy.fieldValues) {
            angular.forEach($scope.vacancy.fieldValues, function(val) {
                console.log(val);
                if (angular.equals(val.type, "string")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "select")) {
                    $scope.fieldValues.value = val.value;
                }
                if (angular.equals(val.type, "date")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
                if (angular.equals(val.type, "datetime")) {
                    $scope.fieldValues.dateTimeValue = val.dateTimeValue;
                }
            });
        }

        $scope.save = function() {
            $localStorage.set("vacancy_currency", $scope.vacancy.currency);
            $scope.clientError = false;
            $scope.vacancy.clientId.clientId = $("#clientAutocompleater").select2('data') !== null ? $("#clientAutocompleater").select2('data').id : null;
            if ($scope.vacancyForm.$valid && !$scope.clickedAddVacancy && $scope.vacancy.clientId.clientId != null) {
                $scope.vacancy.dateFinish = $('.deadLinePicker').datetimepicker('getDate') != null ? $('.deadLinePicker').datetimepicker('getDate').getTime() : null;
                $scope.vacancy.datePayment = $('.paymentPicker').datetimepicker('getDate') != null ? $('.paymentPicker').datetimepicker('getDate').getTime() : null;
                $scope.vacancy.languages = [];
                if($scope.addedLang != undefined){
                    angular.forEach($scope.addedLang, function (val) {
                        if(val.level != undefined && val.level != ''){
                            $scope.vacancy.languages.push({ name: val.text, level: val.level});
                        }
                    });
                }
                $scope.vacancy.langs = $('.select2-lang').select2('val').toString();
                if ($scope.vacancy.fieldValues.dateTimeValue != undefined) {
                    $(".datepickerOfCustom").datetimepicker("setDate", new Date($scope.editCustomValue));
                }
                if ($scope.vacancy.fieldValues.dateTimeValue != undefined) {
                    $(".datepickerOfCustomTime").datetimepicker("setDate", new Date($scope.editCustomValue));
                }
                if ($("#pac-input").val().length == 0) {
                    $scope.vacancy.region = null;
                } else if ($("#pac-input").val().length > 0) {
                    $scope.vacancy.region = $scope.region;
                }
                deleteUnnecessaryFields($scope.vacancy);
                console.log($scope.vacancy);
                $scope.clickedAddVacancy = true;
                Vacancy.add($scope.vacancy, function(resp) {
                    if (angular.equals(resp.status, "ok")) {
                        $scope.errorMessage.show = false;
                        if ($scope.fileForSave.length > 0) {
                            angular.forEach($scope.fileForSave, function(valI, i) {
                                Vacancy.addFileFromCache({
                                    "attId": valI.attId,
                                    "vacancyId": resp.object.vacancyId,
                                    "fileName": valI.fileName
                                }, function(resp) {
                                });
                                if ($scope.fileForSave.length - 1 == i) {
                                    $scope.clickedAddVacancy = false;
                                    notificationService.success($filter('translate')('vacancy_save_1') + $scope.vacancy.position + $filter('translate')('vacancy_save_2'));
                                    $location.path("vacancies/" + resp.object.localId);
                                }
                            });
                        } else {
                            $scope.clickedAddVacancy = false;
                            $location.path("vacancies/" + resp.object.localId);
                        }
                    } else {
                        $scope.clickedAddVacancy = false;
                        $scope.errorMessage.show = true;
                        $scope.errorMessage.message = resp.message;
                    }

                }, function(err) {
                    $scope.clickedAddVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                    $localStorage.set("vacancyForSave", $scope.vacancy);
                    $cookies.url = $location.$$url;
                    $cookies.cfauth = 'false';
                    $window.location.replace('/');
                });
            } else {
                $scope.vacancyForm.position.$pristine = false;
                if(!$scope.vacancy.clientId.clientId){
                    $scope.clientError = true;
                }
                $scope.vacancyForm.regionInput.$pristine = false;
            }
        };
        //$('.select2-lang').select2({
        //    tags: $scope.langs,
        //    tokenSeparators: [",", " "]
        //});

        if ($localStorage.isExist("vacancy_currency")) {
            $scope.vacancy.currency = $localStorage.get("vacancy_currency");
        } else {
            $scope.vacancy.currency = "USD";
        }
        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();
        $scope.getFullCustomFields = function(){
            CustomField.getFullFields({
                objectType: 'vacancy'
            }, function(resp) {
                if (resp.status == "ok") {
                    $scope.allObjCustomField = resp.objects;
                } else {
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.getFullCustomFields();
        $scope.deleteDate = function(id){
            $scope.editCustomId = id;
            angular.forEach($('.editDate'), function (nval) {
                if(id == nval.name){
                    nval.placeholder = '';
                    nval.value = '';
                }
            });
        };
        $scope.validSalary = function (event) {
            if(event.keyCode == 43 || event.keyCode == 45 || event.keyCode == 101 || event.keyCode == 69 )
                event.preventDefault();

        };

    }
]);

controller.controller('vacanciesController', ["localStorageService", "$scope", "Vacancy", "ngTableParams", "$location", "Client", "$rootScope", "$filter", "Service",
    "ScopeService", "Company", "notificationService", "serverAddress", "$timeout", "Person", "$uibModal", "$anchorScroll",
    function(localStorageService, $scope, Vacancy, ngTableParams, $location, Client, $rootScope, $filter, Service, ScopeService, Company, notificationService,
             serverAddress, $timeout, Person, $uibModal, $anchorScroll) {
    $scope.vacanciesFound = null;
    $rootScope.searchCheckVacancy = $rootScope.searchCheckVacancy == undefined ? false : $rootScope.searchCheckVacancy;
    $scope.onlyMe = $rootScope.onlyMe;
    $scope.salaryObject = Service.getSalary();
    $scope.previousFlag = true;
    $scope.paginationParams = {
      currentPage: 1,
      totalCount: 0
    };
    $scope.a = {};
    $scope.a.searchNumber = 1;
    let sortDirection = 'desc';
    let previousSortParam = '';
    $scope.status = Vacancy.status();
    $scope.employmentType = Service.employmentType();
    $scope.regionId = null;
    $scope.loader = false;
    $scope.searchStatus = '';
    $scope.chosenStatuses = [];
    $scope.currentStatus = null;
    $scope.isSearched = false;
    $rootScope.changeStateObject = {status: "", comment: "", placeholder: null};
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
    $scope.vacancy = {
        accessType: 'public',
        currency: "USD",
        dateFinish: null,
        datePayment: null,
        descr: "",
        sex:null,
        langs: '',
        status: "open",
        clientId: {
            clientId: $rootScope.addVacancyClientId
        }
    };
    $rootScope.addVacancyClientId = null;



    if($rootScope.me.personParams.clientAccessLevel != 'hide') {
        Client.all(Client.searchOptions(), function(response) {
            $scope.clients = response.objects;
            var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('chose_customer')+'</option>';
            angular.forEach($scope.clients, function (value) {
                optionsHtml += "<option style='color: #000000' value='" + value.clientId + "'>" + value.name + "</option>";
            });
            $('#client-select').html(optionsHtml);
        });
    }
    Service.getRegions2(function (resp) {
        $scope.regions = resp;
        var optionsHtml = '<option ng-selected="true" value="" selected style="color:#999">'+$filter('translate')('region')+'</option>';
        angular.forEach($scope.regions, function (value) {
            if(JSON.stringify(value).replace(/\'/gi,"") == $scope.searchParam['regionId']){
                optionsHtml += "<option style='color: #000000' selected value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
            }else{
                optionsHtml += "<option style='color: #000000' value='" + JSON.stringify(value).replace(/\'/gi,"") + "'>" + value.name + "</option>";
            }
        });
        $('#cs-region-filter-select').html(optionsHtml);
    });
    if ($rootScope.curentOnlyMenWatch !== undefined) {
        $rootScope.curentOnlyMenWatch();
    }
    if ($rootScope.curentRegionWatch !== undefined) {
        $rootScope.curentRegionWatch();
    }

    function scope_update(val) {
        $scope.tableParams.reload();
    }

    ScopeService.setCurrentControllerUpdateFunc(scope_update);

    $rootScope.statusInter = Vacancy.getInterviewStatus();
    /************************Параметры при загрузке страницы*******************************/
    if(localStorage.countVacancy){
        $scope.startPagesShown = localStorage.countVacancy;
    } else{
        $scope.startPagesShown = 15;
    }
    $scope.searchParam = {
        searchCs: true,
        salary: "",
        status: "",
        regionId: null,
        words: "",
        personId: 'null',
        clientId: "",
        personNameWhoSearching: $rootScope.usernameThatIsSearching,
        pages: {count: $scope.startPagesShown}
    };

        //This function must be after init searchParam
        if ($rootScope.previousLocation == '/vacancies/:id') {
            if ($rootScope.searchParamInVacancies != undefined) {
                $scope.searchParam = $rootScope.searchParamInVacancies;
                if($scope.searchParam.clientId){
                    $scope.$watch('setClientAutocompleterValue',function(newVal, oldVal){
                        if(newVal != undefined){
                            $scope.setClientAutocompleterValue($scope.searchParam.clientName, $scope.searchParam.clientId);
                        }
                    })
                }
                $rootScope.searchParamInVacancies = null;
            }
        }else if ($rootScope.previousLocation == '/clients/:id' && $rootScope.allClientsVacancies == true){
            $scope.searchParam = {
                searchCs: true,
                salary: "",
                status: "",
                regionId: null,
                words: "",
                personId: Vacancy.searchOptions().personId,
                clientId: "",
                personNameWhoSearching: $rootScope.usernameThatIsSearching,
                pages: {count: $scope.startPagesShown}
            };
            $scope.searchParam.clientId = $rootScope.searchParamInVacancies.clientId;
            $scope.searchParam.clientName = $rootScope.searchParamInVacancies.clientName;
            if($rootScope.searchParamInVacancies.status != undefined) {
                $scope.searchParam.status = $rootScope.searchParamInVacancies.status;
                $scope.chosenStatuses = ['expects', 'payment', 'completed', 'canceled', 'deleted'];
            }
            $scope.$watch('setClientAutocompleterValue',function(newVal, oldVal){
                if(newVal != undefined){
                    $scope.setClientAutocompleterValue($scope.searchParam.clientName, $scope.searchParam.clientId);
                }
            })
        }
            $scope.deleteSearchByUser = function() {
            $scope.searchParam.personId = null;
            $scope.searchParam.personNameWhoSearching = null;
            $scope.tableParams.reload();
        };

        $scope.addSearchStatus = function (status) {
          if(status != 'null') {
                if($scope.chosenStatuses.indexOf(status) != -1){
                   notificationService.error($filter('translate')('the status is already selected'));
                }else{
                    $scope.chosenStatuses.push(status);
                    $scope.updateSearchStatuses();
                }
            }
        };
        $scope.updateSearchStatuses = function () {
            $scope.searchParam.status = '';
            if($scope.chosenStatuses.length != 1) {
                angular.forEach($scope.chosenStatuses, function (status) {
                   $scope.searchParam.status = $scope.searchParam.status + status + ',';
                });
                $scope.searchParam.status = $scope.searchParam.status.replace(/,$/, "");
            }else {
                $scope.searchParam.status = $scope.chosenStatuses[0];
            }
        };
        $scope.deleteSearchStatus = function (selectedStatus) {
            $scope.chosenStatuses.splice(selectedStatus, 1);
            $scope.currentStatus = 'null';
            $scope.updateSearchStatuses();
        };
        $scope.clickSearch = function() {
        if($scope.searchParam['salaryName'] == null && $scope.searchParam.states == null &&
            $scope.searchParam.state == null && $("#clientAutocompleater").select2('data') == null &&
            $scope.searchParam.words.length == 0 && $scope.searchParam.name == null &&
            $scope.searchParam.position == null && $scope.searchParam.candidateGroups == null &&
            $scope.searchParam.regionId == null && $scope.searchParam.candidateGroupIds == null &&
            $scope.searchParam.searchFullTextType == null && $scope.searchParam['responsibleId'] == null &&
            $scope.searchParam['personId'] == 'null'){
            notificationService.error($filter('translate')('Enter the data'));
        }else{
            $rootScope.loading = true;
            if ($scope.searchParam['salaryName'] ||
                $scope.searchParam['status'] ||
                $("#clientAutocompleater").select2('data') !== null ||
                $scope.searchParam['regionId'] ||
                $scope.searchParam['responsibleId'] ||
                $scope.searchParam['personId'] ||
                $scope.searchParam['words']) {
                if ($scope.searchParam['salaryName']) {
                    angular.forEach($scope.salaryObject, function(resp){
                        if(resp.name == $scope.searchParam.salaryName){
                            $scope.searchParam['salary'] = resp;
                        }
                    });
                }
                if ($("#clientAutocompleater").select2('data') !== null) {
                    $scope.searchParam['clientId'] =$("#clientAutocompleater").select2('data').id;
                    $scope.searchParam['clientName'] = $("#clientAutocompleater").select2('data').name
                }
                $scope.tableParams.$params.page = 1;
                $scope.tableParams.reload();
                $rootScope.searchCheckVacancy = true;
            } else if ($rootScope.searchCheckVacancy) {
                $scope.tableParams.$params.page = 1;
                $scope.tableParams.reload();
                $rootScope.searchCheckVacancy = false;
            }
            $scope.isSearched = true;
        }
    };
    let currentPage = $scope.searchParam.pages.number;
        $scope.tableParams = new ngTableParams({
            page: 1,
            count: $scope.searchParam.pages.count
        }, {
            total: 0,
            getData: function($defer, params) {
                $rootScope.loading = true;
                if ($rootScope.previousLocation == '/vacancies/:id') {
                    if($scope.previousFlag){
                        $scope.tableParams.page($rootScope.previousSearchNumber);
                        $scope.previousFlag = !$scope.previousFlag;
                    }
                }
                if (ScopeService.isInit()) {
                    var activeParam = ScopeService.getActiveScopeObject();
                    $scope.activeScopeParam = activeParam;
                    Vacancy.setOptions("page", {number: (params.$params.page - 1), count: params.$params.count});
                    localStorage.countVacancy = params.$params.count;
                    $scope.searchParam.pages.count = params.$params.count;
                    $scope.searchParam.personId = $scope.searchParam.personId == 'null' ? null: $scope.searchParam.personId;
                    Vacancy.setOptions("personId", $scope.searchParam.personId != undefined ? $scope.searchParam.personId : activeParam.name == 'onlyMy' ? $rootScope.userId : null);
                    Vacancy.setOptions("salaryFrom", $scope.searchParam['salary'] ? $scope.searchParam['salary'].salaryFrom : null);
                    Vacancy.setOptions("salaryTo", $scope.searchParam['salary'] ? $scope.searchParam['salary']["salaryTo"] : null);
                    Vacancy.setOptions("state", isNotBlank($scope.searchParam['status']) && $scope.chosenStatuses.length == 1 ? $scope.searchParam['status'] : null);
                    Vacancy.setOptions("states", $scope.chosenStatuses.length > 1 ? $scope.chosenStatuses : null);
                    Vacancy.setOptions("words", $scope.searchParam['words'] ? $scope.searchParam['words'] : null);
                    Vacancy.setOptions("clientId", isNotBlank($scope.searchParam['clientId']) ? $scope.searchParam['clientId'] : null);
                    Vacancy.setOptions("responsibleId", isNotBlank($scope.searchParam['responsibleId']) ? $scope.searchParam['responsibleId'] : null);
                    if ($scope.searchParam['regionId']) {
                        var json = JSON.parse($scope.searchParam['regionId']);
                        if (json.type == 'country') {
                            Vacancy.setOptions("country", json.value);
                        } else if (json.type == 'city') {
                            Vacancy.setOptions("city", json.value);
                        }
                    } else {
                        Vacancy.setOptions("country", activeParam.name == 'region' && activeParam.value.type == "country" ? activeParam.value.value : null);
                        Vacancy.setOptions("city", activeParam.name == 'region' && activeParam.value.type == "city" ? activeParam.value.value : null);
                    }

                    function getVacancies(page, count) {
                        if(page || count) {
                            currentPage = page;
                            Vacancy.setOptions("page", {number: page, count: count});
                        } else {
                            $scope.isShowMore = false;
                            currentPage = Vacancy.searchOptions().page.number;
                            if(document.getElementById('scrollup'))
                                document.getElementById('scrollup').style.display = 'none';
                            $timeout(function() {
                                $anchorScroll('mainTable');
                            });
                        }
                        Vacancy.all(Vacancy.searchOptions(), function(response) {
                            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : undefined;
                            $scope.paginationParams = {
                                currentPage: Vacancy.searchOptions().page.number,
                                totalCount: $rootScope.objectSize
                            };
                            let pagesCount = Math.ceil(response['total']/Vacancy.searchOptions().page.count);
                            if(pagesCount == Vacancy.searchOptions().page.number + 1) {
                                $('#show_more').hide();
                            } else {
                                $('#show_more').show();
                            }
                            params.total(response['total']);
                            angular.forEach(response['objects'], function(val) {
                                if (val.region) {
                                    if (val.region.city) {
                                        val.regionShort = val.region.displayCity;
                                    } else if (val.region.country)
                                        val.regionShort = val.region.displayCountry;
                                }
                            });

                            if(page) {
                                $scope.vacancies = $scope.vacancies.concat(response['objects'])
                            } else {
                                $scope.vacancies = response['objects'];
                            }
                            $scope.vacanciesFound = response['total'] >= 1;
                            $defer.resolve($scope.vacancies);
                            Vacancy.init();
                            $scope.searchParam.personId = $scope.searchParam.personId == null ? 'null': $scope.searchParam.personId;
                            $rootScope.loading = false;

                        });
                    }
                    getVacancies();
                    $scope.showMore = function () {
                        $scope.isShowMore = true;
                        Service.dynamicTableLoading(params.total(), currentPage, $scope.tableParams.count(), getVacancies)
                    };
                    $rootScope.searchParamInVacancies = $scope.searchParam;
                    $scope.a.searchNumber = $scope.tableParams.page();
                    $rootScope.previousSearchNumber = $scope.a.searchNumber;
                    $rootScope.allClientsVacancies = false;
                }
            }
        });
        Client.init();
        $scope.changeInputPage = function(params,searchNumber){
            var searchNumber = Math.round(searchNumber);
            var maxValue = $filter('roundUp')(params.settings().total/params.count());
            if(searchNumber){
                if(searchNumber >= 1 && searchNumber <= maxValue){
                    params.page(searchNumber);
                    currentPage = searchNumber;
                    $scope.a.searchNumber = searchNumber;
                }
            }
        };
        $scope.toOneObject = function(localId) {
        $location.path('/vacancies/' + localId);
    };
        $scope.toAdd = function() {
        $location.path('/vacancy/add');
    };
        if($rootScope.searchedClientId){
        $scope.searchParam['clientId'] = $rootScope.searchedClientId;
        $scope.tableParams.reload();
        $rootScope.searchedClientId = '';
    }
        $scope.getCompanyParams = function(){
        Company.getParams(function(resp){
            $scope.companyParams = resp.object;
            $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
        });
    };
        $scope.getCompanyParams();

        $scope.showAdvancedSearchFunc = function() {
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
        $scope.showAdvancedSearchFuncHide = function(){
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
        $scope.addShortVacancy = function(relocate){
            if($rootScope.me.personParams.clientAccessLevel === 'hide' && $rootScope.me.recrutRole === 'freelancer'){
                notificationService.error($filter('translate')('This function is not available'));
                return;
            }
        if($scope.shortAddVacancyForm.$valid && $("#clientToAddAutocompleater").select2('data')){
            if($("#clientToAddAutocompleater").select2('data')){
                $scope.vacancy.clientId.clientId = $("#clientToAddAutocompleater").select2('data').id
            }else{
                $scope.showClientErrorOnAdd = true;
            }
            if ($("#pac-input").val().length == 0) {
                $scope.vacancy.region = null;
            } else if ($("#pac-input").val().length > 0) {
                $scope.vacancy.region = $scope.region;
            }
            $scope.vacancy.numberOfPositions = 1;
            if($scope.vacancy.clientId.clientId) {
                Vacancy.add($scope.vacancy, function(resp) {
                    if(resp.status == 'ok'){
                        notificationService.success($filter('translate')('vacancy_save_1') + $scope.vacancy.position + $filter('translate')('vacancy_save_2'));
                        $scope.vacancy.position = '';
                        $scope.vacancy.employmentType = '';
                        $scope.regionInput = '';
                        $("#clientToAddAutocompleater").select2('data').id =null;
                        $("#clientToAddAutocompleater").select2('data').text ='';
                        $("#clientToAddAutocompleater").select2('data').name ='';
                        $("#select2-chosen-1").html($filter('translate')('Client'));
                        $scope.shortAddVacancyForm.regionInput.$pristine = true;
                        $scope.shortAddVacancyForm.position.$pristine = true;
                        if(relocate){
                            $location.path("vacancies/" + resp.object.localId);
                        }else{
                            $scope.tableParams.reload();
                        }
                    }else{
                        notificationService.error(resp.message);
                    }
                });
            }else{
                notificationService.error($filter('translate')('choose_client'));
            }
        }else{
            $scope.shortAddVacancyForm.position.$pristine = false;
            notificationService.error($filter('translate')('Please fill in all fields'));
        }
    };
        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        Person.getAllPersons(function (resp) {
            $scope.persons = [];
            $rootScope.persons = [];
            $rootScope.personsNotChanged = [];
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                $scope.persons.push($scope.associativePerson[key]);
                $rootScope.persons.push($scope.associativePerson[key]);
                $rootScope.personsNotChanged.push($scope.associativePerson[key]);
            });
        });
        $(document).click(function (){
            if($(".advancedSearch").css('display') != 'none'){
            $scope.showAdvancedSearchFuncHide();
            $scope.$apply();
        }
        });
        $scope.showChangeStatusOfVacancy = function (status, vacancy) {
            $scope.oneVacancy = vacancy;
            $rootScope.changeStateObject.status_old = $scope.oneVacancy.status;
            $rootScope.changeStateObject.status = status;
            $rootScope.changeStateObject.placeholder = $filter('translate')('Write_a_comment_why_do_you_change_vacancy_status');
            $scope.numberOfCandidatesInDifferentStates = function () {
                var totalCount = 0;
                Vacancy.getCounts({
                    vacancyId: vacancy.vacancyId
                },function(statusesCount){
                    $scope.statusesCount = statusesCount.object;
                    angular.forEach($scope.VacancyStatusFiltered, function (val) {
                        val.count = 0;
                    });
                    angular.forEach($scope.statusesCount, function (item) {
                        //if (item.state == 'approved') {
                        //    //$scope.activeName = 'approved';
                        //    //$scope.paramForExcell.interviewState = 'approved';
                        //}
                        angular.forEach($scope.VacancyStatusFiltered, function (valS) {
                            if (valS.name) {
                                valS.value = valS.name;
                            }
                            if (item.item == valS.value) {
                                valS.count = item.count;
                                totalCount = totalCount + item.count;
                            }
                            if (item.item == valS.customInterviewStateId) {
                                valS.count = item.count;
                                totalCount = totalCount + item.count;
                            }
                        });
                    });
                    $scope.numberAllCandidateInVacancy = totalCount;
                });
            };
            if (status == 'completed') {
                $scope.numberOfCandidatesInDifferentStates();
                setTimeout(function () {
                    var hasApproved = false;
                    angular.forEach($scope.statusesCount, function (i) {
                        if (i.item == "approved") {
                            hasApproved = true;
                        }
                    });
                    if (!hasApproved) {
                        notificationService.error($filter('translate')('You must move one of the candidates to status Approved'));
                    } else {
                        $scope.modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '../partials/modal/vacancy-change-status.html',
                            size: '',
                            resolve: function(){

                            }
                        });
                    }
                }, 500);
            } else {
                if (status != 'inwork') {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && (vacancy.responsiblesPerson != undefined && vacancy.responsiblesPerson.length > 0)) {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if ($scope.needAutoSetResponsible && vacancy.status == 'inwork') {
                    $rootScope.changeResponsibleInVacancy.id = $rootScope.me.userId;
                    $rootScope.changeResponsibleInVacancy.comment = 'Поскольку вы являетесь единственным пользователем Вашей компании, мы назначили Вас ответственным';
                    $rootScope.saveResponsibleUserInVacancy();
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && !$scope.needAutoSetResponsible) {
                    notificationService.error($filter('translate')('You must set a responsible') + '!');
                }
            }
        };
        $rootScope.saveVacancyStatus = function () {
            if (!$rootScope.clickedSaveVacancyStatus) {
                $rootScope.clickedSaveVacancyStatus = true;
                $rootScope.closeModal();
                Vacancy.changeState({
                    vacancyId: $scope.oneVacancy.vacancyId,
                    comment: $rootScope.changeStateObject.comment,
                    vacancyState: $rootScope.changeStateObject.status
                }, function (resp) {
                    if (resp.status == "ok") {
                        $scope.vacancy.status = $rootScope.changeStateObject.status;
                        $rootScope.changeStateObject.comment = "";
                        //$rootScope.changeStateObject.status = null;
                        notificationService.success($filter('translate')('vacancy change status'));
                        if(($rootScope.changeStateObject.status == 'canceled' || $rootScope.changeStateObject.status == 'completed') && ($scope.vacancies.length == 1 && $scope.a.searchNumber > 0) ) {
                            $scope.tableParams.page($scope.a.searchNumber - 1);
                            $scope.tableParams.reload();
                        } else {
                            $scope.tableParams.reload();
                        }
                    } else if (resp.message) {
                        notificationService.error(resp.message);
                    }
                    $rootScope.clickedSaveVacancyStatus = false;
                }, function (err) {
                    $rootScope.clickedSaveVacancyStatus = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };

        $scope.sortTable = function (sortParam) {
            let parentObject = '';
            if (sortParam && $scope.vacancies) {
                if(sortParam == 'name') {
                    parentObject = 'clientId';
                }
                if(previousSortParam == sortParam && sortDirection == 'desc') {
                    ascSort();
                } else {
                    descSort();
                }
                previousSortParam = sortParam;
            }

            function descSort() {
                $scope.vacancies.sort((a,b) => {
                    if(parentObject && a[parentObject] && b[parentObject]) {
                        if(a[parentObject][sortParam] > b[parentObject][sortParam] || !a[parentObject][sortParam]) {
                            return 1;
                        }
                        if(a[parentObject][sortParam] < b[parentObject][sortParam] || !b[parentObject][sortParam]) {
                            return -1;
                        }
                    } else {
                        if(a[sortParam] > b[sortParam] || !a[sortParam]) {
                            return 1;
                        }
                        if(a[sortParam] < b[sortParam] || !b[sortParam]) {
                            return -1;
                        }
                    }
                    return 0;
                });
                sortDirection = 'desc';
            }

            function ascSort() {
                $scope.vacancies.sort((a,b) => {
                    if(parentObject && a[parentObject] && b[parentObject]) {
                        if(a[parentObject][sortParam] > b[parentObject][sortParam] || !a[parentObject][sortParam]) {
                            return -1;
                        }
                        if(a[parentObject][sortParam] < b[parentObject][sortParam] || !b[parentObject][sortParam]) {
                            return 1;
                        }
                    } else {
                        if(a[sortParam] > b[sortParam] || !a[sortParam]) {
                            return -1;
                        }
                        if(a[sortParam] < b[sortParam] || !b[sortParam]) {
                            return 1;
                        }
                    }
                    return 0;
                });
                sortDirection = 'asc';
            }
        };

    }]);

controller.controller('vacancyEditController', ["$rootScope", "$scope", "FileInit", "Vacancy", "Service", "$location", "Client", "$routeParams",
    "notificationService", "$filter", "$translate", 'Person', '$uibModal', "Candidate",
    function($rootScope, $scope, FileInit, Vacancy, Service, $location, Client, $routeParams, notificationService, $filter, $translate, Person, $uibModal, Candidate) {
        $scope.showStatus = false;
        //$scope.langs = Service.lang();
        $scope.type = "Vacancy edit";
        $scope.clickedAddVacancy = false;
        $scope.numberPosition = Service.numberPosition();
        $scope.objType = 'vacancy';
        var myListener =  $scope.$on('addedLang', function (event, data) {
            if (data != undefined) {
                $scope.addedLang = data;
                $scope.changeLevel = function(level, id){
                    angular.forEach($scope.addedLang, function (val) {
                        if(val.id == id){
                            val.level = level;
                        }
                    });
                };
            }
        });
        $scope.$on('$destroy', myListener);
        $scope.langs = Candidate.getLangInOrg(function (resp){
            if(resp.object){
                //resp.object.splice(0, 1);
                $scope.setLangs(resp.object);
            } else {
                $scope.setLangs([]);
            }
        });
        $scope.errorMessage = {
            show: false,
            message: ""
        };

        $scope.accessTypeObject = [
            {name: "Public", value: 'public'},
            {name: "Private", value: 'private'}
        ];
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        Service.genderTwo($scope);
        $scope.map = {
            center: {
                latitude: 48.379433,
                longitude: 31.165579999999977
            },
            zoom: 5,
            options: {
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                mapTypeControl: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
        };
        $scope.marker = {
            id: 1,
            title: "",
            coords: {
                latitude: null,
                longitude: null
            }
        };


        $rootScope.changeStateObject = {status: "", comment: "", position: null, placeholder: null};
        $scope.deleteVacancy = function() {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-edit-delete.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.changeStateObject.status = "deleted";
            $rootScope.changeStateObject.position = $scope.vacancy.position;
            $rootScope.changeStateObject.placeholder = $filter('translate')("Write a comment why you want remove this vacancy");
        };
        $rootScope.saveVacancyStatus = function() {
            $scope.vacancy.status = $rootScope.changeStateObject.status;
            $rootScope.closeModal();
            Vacancy.changeState({
                vacancyId: $scope.vacancy.vacancyId,
                comment: $rootScope.changeStateObject.comment,
                vacancyState: $rootScope.changeStateObject.status
            }, function(resp) {
                if (resp.status == "ok") {
                    $rootScope.changeStateObject.comment = "";
                    $rootScope.changeStateObject.status = null;
                    notificationService.success($filter('translate')('vacancy') + " " + $scope.vacancy.position + " " + $filter('translate')('was_deleted_2'));
                    $location.path('/vacancies');
                }
            }, function(err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });

        };

        FileInit.initFileOption($scope, "vacancy");
        $scope.callbackFile = function(resp, name) {
            if (!$scope.vacancy.files) {
                $scope.vacancy.files = [];
            }
            $scope.vacancy.files.push(resp);
        };

        $scope.removeFile = function(id) {
            Vacancy.removeFile({"vacancyId": $scope.vacancy.vacancyId, "fileId": id}, function(resp) {
            });
            angular.forEach($scope.vacancy.files, function(val, ind) {
                if (val.fileId === id) {
                    $scope.vacancy.files.splice(ind, 1);
                }
            });
        };
        $(".paymentPicker").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        });
        $(".deadLinePicker").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        });

        $scope.lang = $translate;
        Vacancy.one({localId: $routeParams.id}, function(resp) {
            if (angular.equals(resp.status, "ok")) {
                $scope.objectId = resp.object.vacancyId;
                $scope.vacancy = resp.object;

                if(!$scope.vacancy.customFields){
                    $scope.vacancy.customFields = [];
                }
                $scope.setClientAutocompleterValue($scope.vacancy.clientId.name, $scope.vacancy.clientId.clientId);
                if($scope.vacancy.files){
                    if($scope.vacancy.files.length != undefined && $scope.vacancy.files.length != 0){
                        angular.forEach($scope.vacancy.files, function (val) {
                            initDocuments(val);
                        });
                    }
                }
                if (resp.object.sex === undefined) {
                    $scope.vacancy.sex = null;
                }
                if (resp.object.accessType === undefined) {
                    $scope.vacancy.accessType = 'private';
                }

                if ($scope.vacancy.datePayment != undefined) {
                    $(".paymentPicker").datetimepicker("setDate", new Date($scope.vacancy.datePayment));
                }

                $scope.objectLang = [];
                if(resp.object.languages!=undefined){
                    angular.forEach(resp.object.languages, function (val) {
                        if(val.name != undefined){
                            $scope.objectLang.push({id: val.languageId, text: val.name, level: val.level});
                            setTimeout(function(){
                                $scope.setSelect2Lang($scope.objectLang);
                            },2000);
                        }
                    });
                }

                if ($scope.vacancy.dateFinish != undefined) {
                    $(".deadLinePicker").datetimepicker("setDate", new Date($scope.vacancy.dateFinish));
                }
                if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                    $scope.map.center.latitude = resp.object.region.lat;
                    $scope.map.center.longitude = resp.object.region.lng;

                    $scope.marker.coords.latitude = resp.object.region.lat;
                    $scope.marker.coords.longitude = resp.object.region.lng;


                    $scope.regionInput = resp.object.region.displayFullName;
                }
                $scope.vacancy.fieldValues = [];
                if (resp.object.customFields != undefined) {
                    angular.forEach(resp.object.customFields, function(val) {
                        if(val.fieldValue != undefined){
                            if (angular.equals(val.type, "string")) {
                                $scope.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "select")) {
                                $scope.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    value:  val.fieldValue.value,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "date")) {
                                $scope.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                            if (angular.equals(val.type, "datetime")) {
                                $scope.vacancy.fieldValues.push({
                                    objType: "vacancy",
                                    fieldValueId: val.fieldValue.fieldValueId,
                                    dateTimeValue: val.fieldValue.dateTimeValue,
                                    field: {
                                        fieldId: val.fieldId
                                    }
                                });
                            }
                        }
                    });
                }
                console.log($scope.vacancy);

                Client.all(Client.searchOptions(), function(response) {
                    $scope.clients = response.objects;
                    var optionsHtml = '';
                    angular.forEach($scope.clients, function (value) {
                        if(value.clientId != $scope.vacancy.clientId.clientId){
                            optionsHtml += "<option style='color: #000000' value='" + value.clientId + "'>" + value.name + "</option>";
                        }else{
                            optionsHtml += "<option style='color: #000000' selected value='" + value.clientId + "'>" + value.name + "</option>";
                        }
                    });
                    $('#client-select').html(optionsHtml);
                });


                $location.hash($filter('transliteration')(resp.object.position.replace(/\W+/g, '_') + "_" + resp.object.clientId.name.replace(/\W+/g, '_'))).replace();
            } else {
                $location.path("vacancies");
                notificationService.error($filter('translate')('vacancy not found'));
            }
        }, function(err) {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });

        $scope.cancel = function() {
            $location.path("/vacancies/" + $routeParams.id);
        };

        $scope.sexObject = [
            {name: "Male", value: true},
            {name: "Female", value: false},
            {name: "Doesn't matter", value: null}
        ];
        $scope.sexObjectRU = [
            {name: "Мужчина", value: true},
            {name: "Женщина", value: false},
            {name: "Не имеет значения", value: null}
        ];

        $scope.toAddClient = function() {
            var params = "menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes";
            window.open("#/client/add", "ClientAdd", params);
        };

        $scope.employmentType = Service.employmentType();
        $scope.paymentDate = null;
        $scope.finishDate = null;

        $('.ui.checkbox').checkbox();
        $('.toggle.button').
            on('click', function() {
                $(this)
                    .nextAll('.checkbox')
                    .checkbox('toggle')
                ;
            });
        $('.ui.dropdown')
            .dropdown();

        $scope.currency = Service.currency();
        $scope.editCustomField = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                console.log(1);
                if(value == ''){
                    console.log(3);
                    angular.forEach($scope.vacancy.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.vacancy.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    console.log(4);
                    angular.forEach($scope.vacancy.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                console.log(2);
                $scope.vacancy.fieldValues.push({
                    objType: "vacancy",
                    fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };

        $scope.addCustomFieldParams = function(value, id, fieldValueId){
            if(fieldValueId != undefined){
                console.log(1);
                if(value == ''){
                    console.log(3);
                    angular.forEach($scope.vacancy.fieldValues, function(val, ind) {
                        if (val.fieldValueId === fieldValueId) {
                            $scope.vacancy.fieldValues.splice(ind, 1);
                        }
                    });
                }else{
                    console.log(4);
                    angular.forEach($scope.vacancy.fieldValues, function(val) {
                        if (val.fieldValueId === fieldValueId) {
                            val.value = value;
                        }
                    });
                }
            }else{
                console.log(2);
                $scope.vacancy.fieldValues.push({
                    objType: "vacancy",
                    fieldValueId: fieldValueId,
                    value: value,
                    field: {
                        fieldId: id
                    }
                });
            }
        };


        $scope.sendCustomFieldId = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
        };

        $scope.deleteDate = function(id, fieldValueId){
            $scope.editCustomId = id;
            $scope.editCustomFieldValueId = fieldValueId;
            angular.forEach($scope.vacancy.fieldValues, function (val, ind) {
                if(val.fieldValueId == fieldValueId){
                    $scope.vacancy.fieldValues.splice(ind, 1);
                    angular.forEach($('.editDate'), function (nval) {
                        if(id == nval.name){
                            nval.placeholder = '';
                            nval.value = '';
                        }
                    });
                }
            });
        };
        $scope.save = function() {
            $scope.clientError = false;
            $scope.vacancy.clientId.clientId = $("#clientAutocompleater").select2('data') !== null ? $("#clientAutocompleater").select2('data').id : null;
            if ($scope.vacancyForm.$valid && !$scope.clickedAddVacancy && $scope.vacancy.clientId.clientId != null) {
                $scope.vacancy.dateFinish = $('.deadLinePicker').datetimepicker('getDate') != null ? $('.deadLinePicker').datetimepicker('getDate').getTime() : null;
                $scope.vacancy.datePayment = $('.paymentPicker').datetimepicker('getDate') != null ? $('.paymentPicker').datetimepicker('getDate').getTime() : null;
                $scope.vacancy.languages = [];
                if($scope.addedLang != undefined){
                    angular.forEach($scope.addedLang, function (val) {
                        $scope.vacancy.languages.push({ name: val.text, level: val.level});
                    });
                }
                $scope.vacancy.clientId.clientId = $("#clientAutocompleater").select2('data') !== null ? $("#clientAutocompleater").select2('data').id : null;
                if ($("#pac-input").val().length == 0) {
                    $scope.vacancy.region = null;
                } else if ($("#pac-input").val().length > 0 && ($scope.vacancy.region == undefined || $("#pac-input").val() != $scope.vacancy.region.fullName)) {
                    if ($scope.region)
                        $scope.vacancy.region = $scope.region;
                }
                $scope.clickedAddVacancy = true;
                deleteUnnecessaryFields($scope.vacancy);
                console.log($scope.vacancy);
                Vacancy.edit($scope.vacancy, function(resp) {
                    if (angular.equals(resp.status, "ok")) {
                        notificationService.success($filter('translate')('vacancy_save_1') + $scope.vacancy.position + $filter('translate')('vacancy_save_2'));
                        $location.path("vacancies/" + resp.object.localId);
                        $scope.clickedAddVacancy = false;
                    } else {
                        notificationService.error(resp.message);
                        $scope.clickedAddVacancy = false;
                        $scope.errorMessage.show = true;
                        $scope.errorMessage.message = resp.message;
                    }
                }, function(err) {
                    $scope.clickedAddVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            } else {
                //$scope.vacancyForm.client.$pristine = false;
                if(!$scope.vacancy.clientId.clientId){
                    $scope.clientError = true;
                }
                $scope.vacancyForm.regionInput.$pristine = false;
                $scope.clickedAddVacancy = false;
            }
        };
        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });

        $scope.validSalary = function (event) {
            if(event.keyCode == 43 || event.keyCode == 45 || event.keyCode == 101 || event.keyCode == 69 )
                event.preventDefault();

        };
    }
]);




controller.controller('vacancyController', ["localStorageService", "CacheCandidates", "$localStorage", "$scope", "Vacancy",
    "Service", "$translate", "$routeParams", "$filter", "ngTableParams", "Person", "$location", "$rootScope", "FileInit",
    "googleService", "Candidate", "notificationService", "serverAddress", "frontMode", "Action", "vacancyStages", "Company", "Task", "File", "$sce","Mail", "$uibModal", "Client", "$route",
    function (localStorageService, CacheCandidates, $localStorage, $scope, Vacancy, Service, $translate, $routeParams,
              $filter, ngTableParams, Person, $location, $rootScope, FileInit,
              googleService, Candidate, notificationService, serverAddress, frontMode, Action, vacancyStages, Company, Task, File, $sce, Mail, $uibModal, Client, $route) {
        $scope.langs = Service.lang();
        $scope.serverAddress = serverAddress;
        $scope.loadingCandidates = true;
        $scope.facebookAppId = facebookAppId;
        $scope.showSearchCandidate = false;
        $scope.historyLimit = 20;
        $scope.showAddEmailTemplate = false;
        $scope.searchCandidateName = null;
        $scope.a = {};
        $scope.getMaxValue = '1';
        $scope.searchNumber = 1;
        $scope.historyType = {};
        $scope.paginationParams = {
            currentPage: 1,
            totalCount: 0
        };
        $scope.historyType.value = 'all_actions';
        $rootScope.responsiblePersonsEdit = [];
        $rootScope.showEmailTemplate = true;
        $scope.sortValue = 'addInVacancyDate';
        $scope.sortOrder = 'ASC';
        $scope.visiable = false;
        $localStorage.remove("vacancyForTest");
        $localStorage.remove("activeCustomStageName");
        $localStorage.remove("activeCustomStageId");
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.emailTemplateForRender ={
            text:''
        };
        if($location.$$absUrl.indexOf('&task=') != -1) {
            $scope.urlTaskId = $location.$$absUrl.split('&task=')[1];
        }
        Task.task($scope, $rootScope, $location, $translate, $uibModal, $route);
        $scope.showRenderedTinyMce = false;
        $scope.initCreatEmailTemplate = function(){
            $scope.emailTemplate = {
                mailTemplateId: null,
                type: "candidateCreateInterviewNotification",
                name: "",
                title: "",
                text: "",
                vacancyId: $scope.vacancy.vacancyId,
                fileId: null,
                fileName: null
            };
        };
        if (getUrlVars($location.$$absUrl).page) {
            $scope.a.searchNumber = parseInt(getUrlVars($location.$$absUrl).page);
        if (getUrlVars($location.$$absUrl).stage) {
            $scope.activeName = getUrlVars($location.$$absUrl).stage;
        } else if (getUrlVars($location.$$absUrl).search) {
            $scope.activeName = null;
            $scope.showSearchCandidate = true;
            if (getUrlVars($location.$$absUrl).search.length == 0 || getUrlVars($location.$$absUrl).search == 'null' || getUrlVars($location.$$absUrl).search == 'null') {
                $scope.searchCandidateName = null;
            } else {
                $scope.searchCandidateName = decodeURIComponent(getUrlVars($location.$$absUrl).search);
            }
        }
    } else {
            $scope.a.searchNumber = 1;
            $scope.searchCandidateName = null;
            $scope.activeName = 'longlist';
        }
        $scope.frontMode = frontMode;
        if ($localStorage.get('calendarShow') != undefined) {
            $rootScope.calendarShow = $localStorage.get('calendarShow');
            if ($rootScope.calendarShow == 'true') {
                $rootScope.calendarShow = true;
            } else if ($scope.calendarShow == 'false') {
                $rootScope.calendarShow = false;
            }
        } else {
            $rootScope.calendarShow = true;
        }
        $scope.show_full_descr = false;
        $scope.showMoveble = false;
        $scope.currentTab = 'candidate';
        $scope.errorDuplicateStage = false;
        $scope.advicesLimit = 5;
        $scope.activeCustomStageName = '';
        $scope.displayResponsibleName = false;
        $rootScope.saveFromAdviceClicked = false;
        $rootScope.searchAdvies = false;
        $rootScope.vacancy = undefined;
        $scope.todayDate = new Date().getTime();
        $rootScope.editableTaskOuter = false;
        $rootScope.clickedSaveResponsibleInVacancy = false;
        $rootScope.clickedSaveStatusInterviewInVacancy = false;
        $rootScope.clickedremoveResponsibleUserInVacancy = false;
        $scope.showResponsiblePopup = false;
        $scope.showMap = $localStorage.get("vacancyShowMap") != undefined ? JSON.parse($localStorage.get("vacancyShowMap")) : true;
        $scope.paramForExcell = {
            states: ['not_searching', 'passive_search', 'active_search', 'employed', 'work', 'freelancer', 'archived',
                'reserved', 'black_list'],
            interviewState: 'longlist'
        };
        $scope.showHideMap = function () {
            $scope.showMap = !$scope.showMap;
            $localStorage.set("vacancyShowMap", $scope.showMap);
        };



        $('body').mouseup(function (e) {
            var element = $(".clever-window");
            if ($(".clever-window").has(e.target).length == 0) {
                $scope.showRegion2Map = false;
                $(document).off('mouseup');
                $scope.$apply();
            }
        });
        $rootScope.addedStage = {
            type: 'common',
            name: ''
        };
        $rootScope.editedStage = {
            type: '',
            name: '',
            customInterviewStateId: '',
            status: ''
        };
        $scope.extraStatusObj = {
            show: false,
            messageText: null
        };
        $rootScope.newTask = {
            text: "",
            title: "",
            vacancyId: "",
            targetDate: '',
            responsibleIds: [],
            type: 'Task'
        };
        $scope.VacanciesInfCandidTaskHistClientFunc = function (panel) {
            $location.$$absUrl = $location.$$absUrl.split("&")[0];
            $scope.showSearchCandidate = false;
            $scope.currentTab = panel;
            setTimeout(function(){
                $(".changeDateNewTask").datetimepicker({
                    format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
                    startView: 2,
                    minView: 0,
                    autoclose: true,
                    weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                    language: $translate.use(),
                    initialDate: new Date(),
                    startDate: new Date()
                }).on('changeDate', function (data) {
                    $rootScope.newTask.targetDate = $('.changeDateNewTask').datetimepicker('getDate');
                    // $scope.roundMinutes($rootScope.newTask.targetDate)
                }).on('hide', function () {
                    if ($('.changeDateNewTask').val() == "") {
                        $rootScope.newTask.date = "";
                    }
                    $('.changeDateNewTask').blur();
                });
            },3);
            if($scope.currentTab == 'task'){
                resetTemplate();
                $scope.updateTasks(true)
            }
            if($scope.currentTab == 'settings'){
                resetTemplate();
                $scope.getEmailTemplates();
            }
            if($scope.currentTab == 'candidate'){
                resetTemplate();
                $scope.candidateInVacancy({value: "longlist"});
            }
        };
        $scope.changeVacancyType = function (typeName, saveInServer, changeAnimation) {
            var check = [];
            $scope.extraStatusObjSucces.show = false;
            angular.forEach($scope.VacancyStatus, function (val) {
                if (val.vacancyType == 'simpleVacancy' && val.vacancyType != typeName) {
                    angular.forEach(val.status, function (valStatus) {
                        if (valStatus.withDate) {
                            check.push({check: valStatus.count == 0});
                        }
                    });
                    angular.forEach($filter('filter')(val.status, {defaultS: false}), function (valS) {
                        check.push({check: valS.count == 0});
                    });
                }
                if (val.vacancyType == 'itVacancy' && val.vacancyType != typeName) {
                    angular.forEach(val.status, function (valStatus) {
                        if (valStatus.withDate) {
                            check.push({check: valStatus.count == 0});
                        }
                    });
                    angular.forEach($filter('filter')(val.status, {defaultS: false}), function (valS) {
                        check.push({check: valS.count == 0});
                    });
                }
            });
            if (check.length == $filter('filter')(check, {check: true}).length) {
                $scope.vacancyType = typeName;
                angular.forEach($scope.VacancyStatus, function (val) {
                    if (val.vacancyType == typeName) {
                        val.used = true;
                        if (changeAnimation) {
                            angular.forEach(val.status, function (val) {
                                if (val.single) {
                                    val.useAnimation = true;
                                }
                            })
                        }
                    } else {
                        val.used = false;
                        angular.forEach(val.status, function (valS) {
                            if (valS.defaultS == false) {
                                valS.added = false;
                            }
                        })
                    }
                });
                if (saveInServer) {
                    $scope.saveStatusInServer();
                }
                return true;
            } else {
                $scope.extraStatusObj.show = true;
                if (typeName == 'itVacancy') {
                    $scope.extraStatusObj.messageText = 'SimpleToIt';
                } else {
                    $scope.extraStatusObj.messageText = 'ItyoSimle';
                }

            }
            return false;
        };
        $scope.changeCustomInterviewStatus = function (statusObj, val, name) {
            if (statusObj.count == 0 || !statusObj.count) {
                $scope.extraStatusObjSucces.show = false;
                if (!statusObj.added) {
                    statusObj.added = true;
                    if (statusObj.type != 'refuse') {
                        $scope.VacancyStatusFiltered.splice(1, 0, statusObj);
                    } else {
                        $scope.VacancyStatusFiltered.splice($scope.VacancyStatusFiltered.length, 0, statusObj);
                    }
                    $scope.saveStatusInServer(val);
                } else {
                    statusObj.added = false;
                    var index = $scope.VacancyStatusFiltered.indexOf(statusObj);
                    $scope.VacancyStatusFiltered.splice(index, 1);
                    $scope.saveStatusInServer(val);
                }
            } else {
                $scope.extraStatusObj.show = true;
                $scope.extraStatusObj.messageText = 'deleteStatus';
            }
            $scope.movableStages = _.filter($scope.VacancyStatusFiltered, 'movable');
        };

        $scope.changeInterviewStatus = function (statusObj, val, name) {
            $scope.extraStatusObjSucces.show = false;
            if (!statusObj.added) {
                $scope.addExtraStatus(val, name);
            } else {
                if (statusObj.count == 0) {
                    statusObj.added = false;
                    var index = $scope.VacancyStatusFiltered.indexOf(statusObj);
                    $scope.VacancyStatusFiltered.splice(index, 1);
                    $scope.saveStatusInServer();
                } else {
                    $scope.extraStatusObj.show = true;
                    $scope.extraStatusObj.messageText = 'deleteStatus';
                }
            }
            $scope.movableStages = _.filter($scope.VacancyStatusFiltered, 'movable');
        };

        $scope.addExtraStatus = function (val, name) {
            $scope.extraStatusObjSucces.show = false;
            var arrayStatus = $filter('filter')($scope.VacancyStatus, {vacancyType: name});
            var status = $filter('filter')(arrayStatus[0].status, {value: val});
            var check = false;
            angular.forEach($scope.VacancyStatus, function (vals) {
                if (vals.vacancyType == $scope.vacancyType && vals.vacancyType == name && vals.used) {
                    check = true;
                } else if (vals.vacancyType == name && !vals.used) {
                    if ($scope.changeVacancyType(name, false, true)) {
                        check = true;
                    }
                }
            });
            if (check) {
                status[0].added = true;
                status[0].useAnimation = true;
                if (status[0].movable) {
                    $scope.VacancyStatusFiltered.splice(1, 0, status[0]);
                } else {
                    $scope.VacancyStatusFiltered.push(status[0]);
                }
                angular.forEach($scope.VacancyStatus, function (val) {
                    if (val.vacancyType != name) {
                        angular.forEach(val.status, function (valS) {
                            if (valS.defaultS == false) {
                                valS.added = false;
                            }
                        })
                    }
                });
                $scope.saveStatusInServer();
            }
        };

        $scope.extraStatusObjSucces = {
            show: false
        };
        $scope.saveStatusInServer = function (statusValue) {

            var checkValue = [];
            $scope.extraStatusObj.show = false;
            angular.forEach($scope.VacancyStatusFiltered, function (val) {
                if (val.added && !val.name) {
                    checkValue.push(val.value)
                }
                if (val.name) {
                    checkValue.push(val.customInterviewStateId)
                }
            });
            $scope.saveForAllVacancies = checkValue.toString();
            Vacancy.setInterviewStatus({
                vacancyId: $scope.vacancy.vacancyId,
                interviewStatus: checkValue.toString()
            }, function (resp) {
                if(resp.code != 'stageContainsCandidates') {
                    $scope.extraStatusObjSucces.show = true;
                    //$scope.VacancyStatusFiltered = $filter('vacancyStatusInSelectFilter')($scope.VacancyStatus);
                    $scope.getLastEvent();
                } else {
                    $scope.customStages.some(function (stage) {
                        if(stage.value == statusValue) {
                            stage.added = true;
                            return true
                        }
                    });
                    $scope.extraStatusObj.show = true;
                    $scope.extraStatusObj.messageText = 'deleteStatus';
                }
            });
        };

        $rootScope.vacancyChangeInterviewDate = {
            date: null,
            dateOld: null,
            candidate: null,
            interviewObject: null,
            comment: null
        };


        $scope.openChangeVacancyInterviewDate = function (interviewObject) {
            $rootScope.vacancyChangeInterviewDate.interviewObject = interviewObject;
            $rootScope.vacancyChangeInterviewDate.date = interviewObject.dateInterview;
            $rootScope.vacancyChangeInterviewDate.candidate = interviewObject.candidateId;
            $rootScope.vacancyChangeInterviewDate.dateOld = angular.copy(interviewObject.dateInterview);
            if ($rootScope.vacancyChangeInterviewDate.date != undefined) {
                $(".changeVacancyInterviewDatePicker").datetimepicker("setDate", new Date(angular.copy(interviewObject.dateInterview)));
            } else {
                $(".changeVacancyInterviewDatePicker").val("");
            }
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-change-date-of-interview.html?1',
                size: '',
                resolve: function(){

                }
            });
            $scope.modalInstance.opened.then(function(){
                setTimeout(function(){
                    $(".changeVacancyInterviewDatePicker").datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.vacancyChangeInterviewDate.date = data.date;
                    }).on('hide', function () {
                        if ($('.changeVacancyInterviewDatePicker').val() == "") {
                            $rootScope.vacancyChangeInterviewDate.date = null;
                        }
                        $('.changeVacancyInterviewDatePicker').blur();
                    });
                },0);
            });
        };

        $rootScope.saveChangedVacancyInterview = function () {
            var object = $rootScope.vacancyChangeInterviewDate;
            var newDate = $('.changeVacancyInterviewDatePicker').datetimepicker('getDate') != null ?
                $('.changeVacancyInterviewDatePicker').datetimepicker('getDate').getTime() : null;
            if(newDate) {
                Vacancy.changeInterviewDate({
                    interviewId: object.interviewObject.interviewId,
                    date: newDate,
                    comment: object.comment != null ? object.comment : "",
                    lang: $translate.use()
                }, function (resp) {
                    object.interviewObject.dateInterview = newDate;
                    $rootScope.closeModal();
                    Vacancy.one({"localId": $scope.vacancy.localId}, function (resp) {
                        console.log("gggg");
                        $scope.vacancy = resp.object;
                        $rootScope.vacancy = resp.object;
                        $scope.tableParams.reload();
                    });
                    $scope.getLastEvent();
                });
            } else {
                $('#change-date-in-vacancy').addClass('not-valid').on('click',(event) => {
                    $(event.currentTarget).removeClass('not-valid');
                });
            }
        };
        $rootScope.getTextToCopy = function () {
            return $scope.publicLink;
        };
        $rootScope.autocomplete = {
            interviews: null
        };
        $scope.updateVacancy = function () {
            $scope.numberAllCandidateInVacancy = 0;
            Vacancy.one({"localId": $routeParams.id, "interviews": false}, function (resp) {
                if (angular.equals(resp.status, "ok")) {
                    angular.forEach($scope.customStages, function (res) {
                        if ($scope.activeName == res.customInterviewStateId) {
                            $scope.activeCustomStageName = res.name;
                        }
                    });
                    $scope.vacancyType = 'simpleVacancy';
                    $scope.standartInterviewStatus = Vacancy.standardInterviewStatus($scope.vacancyType);
                    $scope.rightMenuInterviewStatus = Vacancy.standardInterviewStatus($scope.vacancyType);
                    $scope.statisticObj = {
                        requestObj: {vacancyId: resp.object.vacancyId},
                        objId: resp.object.vacancyId,
                        objType: "vacancy",
                        name: resp.object.position
                    };
                    $("#descr").html(resp.object.descr);
                    $scope.vacancy = resp.object;
                    $rootScope.vacancy = resp.object;
                    $scope.statusForChange = $scope.vacancy.status;
                    if($scope.urlTaskId) {
                        $scope.VacanciesInfCandidTaskHistClientFunc('task');
                    }
                    $rootScope.staticEmailTemplate = {
                        candidateName: "John Dou",
                        vacancyLink: $scope.vacancy.position,
                        date: 1463749200000,
                        recruiterName: $rootScope.me.fullName,
                        recruiterEmail: $rootScope.me.emails.length > 0 ? $rootScope.me.emails[0].email : $rootScope.me.login
                    };
                    Task.get({
                        //'creator': $rootScope.me.userId,
                        'vacancyId': $rootScope.vacancy.vacancyId
                    }, function (resp) {
                        if (resp.status == 'ok') {
                            $scope.totalTasksNumber = 0;
                            $scope.totalTasksNumber = resp.total;
                        }
                    });
                    angular.forEach($rootScope.me.contacts, function (val) {
                        if(val.contactType == 'phoneWork'){
                            $rootScope.staticEmailTemplate.phoneWork = val.value;
                        }
                        if(val.contactType == 'skype'){
                            $rootScope.staticEmailTemplate.skype = val.value;
                        }
                        if(val.contactType == 'linkedin'){
                            $rootScope.staticEmailTemplate.linkedin = val.value;
                        }
                        if(val.contactType == 'facebook'){
                            $rootScope.staticEmailTemplate.facebook = val.value;
                        }
                    });
                    for (var i = $scope.vacancy.publish.length - 1; i >= 0; i--) {
                        if ($scope.vacancy.publish[i].dd) {
                            $scope.vacancy.publish.splice(i, 1);
                        }
                    }
                    $(".paymentPicker").datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                        startView: 2,
                        minView: 2,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    });
                    $(".deadLinePicker").datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                        startView: 2,
                        minView: 2,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    });
                    if ($scope.vacancy.datePayment != undefined) {
                        $(".paymentPicker").datetimepicker("setDate", new Date($scope.vacancy.datePayment));
                    }

                    if ($scope.vacancy.dateFinish != undefined) {
                        $(".deadLinePicker").datetimepicker("setDate", new Date($scope.vacancy.dateFinish));
                    }
                    if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                        $scope.map.center.latitude = resp.object.region.lat;
                        $scope.map.center.longitude = resp.object.region.lng;

                        $scope.marker.coords.latitude = resp.object.region.lat;
                        $scope.marker.coords.longitude = resp.object.region.lng;


                        $scope.regionInput = resp.object.region.displayFullName;
                    }
                    if($rootScope.me.personParams.clientAccessLevel != 'hide') {
                        Client.all(Client.searchOptions(), function(response) {
                            $scope.clients = response.objects;
                            var optionsHtml = '';
                            angular.forEach($scope.clients, function (value) {
                                if(value.clientId != $scope.vacancy.clientId.clientId){
                                    optionsHtml += "<option style='color: #000000' value='" + value.clientId + "'>" + value.name + "</option>";
                                }else{
                                    optionsHtml += "<option style='color: #000000' selected value='" + value.clientId + "'>" + value.name + "</option>";
                                }
                            });
                            $('#client-select').html(optionsHtml);
                        });
                    }
                    setTimeout(function () {
                        $('.select2-lang').val(resp.object.langs);
                        $('.select2-lang').select2({
                            tags: $scope.langs,
                            tokenSeparators: [",", " "]
                        });
                    }, 5);
                    $scope.updateOrgPages = function(){
                        Company.orgPages(function(resp){
                            $rootScope.fbPages = resp.objects;
                            for (var i = $rootScope.fbPages.length - 1; i >= 0; i--) {
                                if ($rootScope.fbPages[i].status === 'D') {
                                    $rootScope.fbPages.splice(i, 1);
                                }
                            }
                            angular.forEach($rootScope.fbPages, function (val) {
                                if (val.facebookPageId) {
                                    angular.forEach($scope.vacancy.publish, function (valStatus) {
                                        if (valStatus.pageId == val.facebookPageId) {
                                            val.vacancyAdded = true;
                                        }
                                    });
                                }
                            });
                        });
                    };
                    $scope.updateOrgPages();
                    $scope.showShareFbPages = function (tab) {
                        if($rootScope.fbPages.length === 0){
                            $scope.modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: '../partials/modal/notHaveIntegrationWith-FB.html',
                                size: '',
                                resolve: function(){

                                }
                            });
                        }else{
                            $scope.modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: '../partials/modal/haveIntegrationWith-FB.html',
                                size: '',
                                resolve: function(){

                                }
                            });
                        }
                    };
                    $rootScope.addVacancyToFacebook = function(tab){
                        Vacancy.addPublish({
                            vacancyId: $scope.vacancy.vacancyId,
                            type: 'facebook_page',
                            pageId: tab.facebookPageId
                        },function(resp){
                            if(resp.status == 'ok'){
                                $scope.updateVacancy();
                                $('.shareFbPagesForVacancy.modal').modal('hide');
                            }else{
                                notificationService.error(resp.message);
                            }
                        })
                    };
                    if ($scope.vacancy.files) {
                        if ($scope.vacancy.files.length != undefined && $scope.vacancy.files.length != 0) {
                            angular.forEach($scope.vacancy.files, function (val) {
                                initDocuments(val);
                            });
                        }
                    }
                    $scope.initCreatEmailTemplate();
                    $scope.paramForExcell.vacancyId = $scope.vacancy.vacancyId;
                    //$scope.vacancy.langs = Service.langTranslator($scope.vacancy.langs);
                    $scope.recalls = $scope.vacancy.recalls;
                    angular.forEach($scope.vacancy.interviews, function (resp) {
                        $scope.numberAllCandidateInVacancy++;
                        //if ($scope.oneName) {
                        //    if ($scope.oneName != resp.creator.fullName) {
                        //        $scope.displayResponsibleName = true;
                        //        return false;
                        //    }
                        //}
                        //$scope.oneName = resp.creator.fullName;
                    });
                    $scope.paramForExcell["page"] = {
                        number: 0,
                        count: $scope.numberAllCandidateInVacancy
                    };

                    if ($scope.vacancy.responsiblesPerson !== undefined && $scope.vacancy.responsiblesPerson.length > 0) {
                        angular.forEach($scope.vacancy.responsiblesPerson, function (respObject) {
                            if (angular.equals($rootScope.me.userId, respObject.personId)) {
                                $scope.isResponsiblePerson = true;
                            }
                        });
                    }
                    if ($scope.vacancy.status !== 'canceled' && $rootScope.me.recrutRole == 'admin' && ($scope.vacancy.responsiblesPerson == undefined || $scope.vacancy.responsiblesPerson.length == 0)) {
                        $scope.showResponsiblePopup = true;
                    }

                    angular.forEach($scope.vacancy.publish, function (val) {
                        $scope.shareObj[val.type] = true;
                    });

                    $scope.VacancyStatus = Vacancy.interviewStatusNew();

                    function isLockCheckStages(data,stages) {
                        let index, hiddenStages = data.map(item => item.objId);

                        stages.forEach(item =>{
                            if(hiddenStages.indexOf(item.value) !== -1 || hiddenStages.indexOf(item.customInterviewStateId) !== -1 ){
                                item.hidden = true;
                            }else{
                                item.hidden = false;
                            }
                        });
                    }

                    if (resp.object.interviewStatus) {
                        var array = resp.object.interviewStatus.split(",");
                        var sortedStages = [];
                        angular.forEach($scope.VacancyStatus, function (vStatus) {
                            if (vStatus.used) {
                                var statusNotDef = $filter('filter')(vStatus.status, {defaultS: false});
                                angular.forEach(statusNotDef, function (statusND) {
                                    angular.forEach(array, function (statusA) {
                                        if (statusND.value == statusA) {
                                            statusND.added = true;
                                        } else {
                                            statusND.added = false;
                                        }
                                    })
                                })
                            }
                        });
                        var i = 0;
                        angular.forEach(array, function (resp) {
                            angular.forEach($scope.VacancyStatus, function (vStatus) {
                                if (vStatus.used) {
                                    if (i == 0) {
                                        angular.forEach($scope.customStages, function (res) {
                                            res.value = res.name;
                                            if (res.type != 'refuse') {
                                                res.movable = true;
                                            } else {
                                                res.movable = false;
                                            }
                                            res.added = false;
                                            res.count = 0;
                                            vStatus.status.push(res);
                                            i = i + 1;
                                        });
                                    }
                                    angular.forEach(vStatus.status, function (vStatusIn) {
                                        if (resp == vStatusIn.value) {
                                            vStatusIn.added = true;
                                            sortedStages.push(vStatusIn);
                                        } else if (resp == vStatusIn.customInterviewStateId) {
                                            vStatusIn.added = true;
                                            sortedStages.push(vStatusIn);
                                        }
                                    })
                                }
                            })
                        });


                        $scope.recallsStage = [{value: 'recalls', hidden: true}];
                        isLockCheckStages($scope.hiddenStages, sortedStages);
                        isLockCheckStages($scope.hiddenStages, $scope.recallsStage);


                        $scope.VacancyStatusFiltered = sortedStages;
                        $rootScope.VacancyStatusFiltered = sortedStages;
                    } else {
                        $scope.recallsStage = [{value: 'recalls', hidden: true}];
                        isLockCheckStages($scope.hiddenStages, $scope.recallsStage);
                        $scope.VacancyStatusFiltered = $filter('vacancyStatusInSelectFilter')($scope.VacancyStatus);
                        $rootScope.VacancyStatusFiltered = $filter('vacancyStatusInSelectFilter')($scope.VacancyStatus);
                        isLockCheckStages($scope.hiddenStages, $scope.VacancyStatusFiltered)

                    }
                    if (resp.object.region != undefined && resp.object.region.lat != undefined && resp.object.region.lng != undefined) {
                        $scope.map.center.latitude = resp.object.region.lat;
                        $scope.map.center.longitude = resp.object.region.lng;

                        $scope.marker.coords.latitude = resp.object.region.lat;
                        $scope.marker.coords.longitude = resp.object.region.lng;
                    }
                    $scope.movableStages = _.filter($scope.VacancyStatusFiltered, 'movable');
                    $rootScope.title = resp.object.position + " | CleverStaff";
                    $location.hash('');
                    $location.search($filter('transliteration')
                    (resp.object.position.replace(/\W+/g, '_') + "_" + resp.object.clientId.name.replace(/\W+/g, '_'))).replace();
                    if (!$scope.showSearchCandidate && $location.$$absUrl.indexOf('&task=') == -1) {
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&stage=' + $scope.activeName;
                    } else {
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&search=' + $scope.searchCandidateName;
                    }

                    $scope.candidateInVacancy = (function(){
                        let showLongList = false;
                        $rootScope.stageUrl = {
                            url:$location.$$absUrl.split('#')[1],
                            name: $scope.vacancy.position,
                            stage: $scope.activeName
                        };
                        localStorage.setItem('stage', JSON.stringify($location.$$absUrl.split('stage=')));
                        return function (status) {
                            $scope.visiable = status.hidden;
                            if(!$scope.visiable) $scope.noAccess = false;
                            $scope.loadingCandidates = true;
                            $scope.tableParams.$params.page = 1;
                            $scope.a.searchNumber = 1;
                            $('#recallsTable').hide();
                            $('.pagination-block').show();

                            if ($scope.showTable === 'recalls') {
                                if ($scope.statusesCount != undefined && $scope.statusesCount > 0 && $scope.recalls && $scope.recalls.length > 0) {
                                    $scope.showTable = 'table';
                                } else {
                                    $scope.showTable = "not available";
                                }
                            }

                            if (status.customInterviewStateId) {
                                $scope.activeCustomStageName = status.name;
                                $scope.activeName = status.customInterviewStateId;
                                $rootScope.activeName = status.customInterviewStateId;
                                $scope.paramForExcell.interviewState = status.customInterviewStateId;
                                if (status.type == 'interview') {
                                    $scope.isInterview = true;
                                } else {
                                    $scope.isInterview = false;
                                }
                            } else if (status == 'extra_status') {
                                if(!showLongList){
                                    $scope.activeName = 'extra_status';
                                    $scope.activeCustomStageName = "";
                                    showLongList = true;
                                }else{
                                    showLongList = false;
                                    showLongLists($scope.VacancyStatusFiltered[0]);
                                    $scope.updateVacancy();
                                }
                            } else {
                                showLongLists(status);
                            }

                            if ($scope.activeName == 'extra_status') {
                                $scope.showMoveble = true;
                            } else {
                                $scope.showMoveble = false;
                            }

                            if($scope.visiable && $rootScope.me.recrutRole != 'client'){
                                setTimeout(() => {
                                    $scope.tableParams.reload();
                                    $scope.$apply();
                                },100)
                            }

                            if(!$scope.visiable){
                                setTimeout(() => {
                                    $scope.tableParams.reload();
                                    $scope.$apply();
                                },100)
                            }
                            let absURLFirstPart = $location.$$absUrl.split("&")[0].split("/vacancies/")[1];
                            $location.url('/vacancies/' + absURLFirstPart + '&page=' + $scope.a.searchNumber + '&stage=' + $scope.activeName).replace();

                            $rootScope.stageUrl = {
                                url:$location.$$absUrl.split('#')[1],
                                    name: $scope.vacancy.position,
                                    stage: status.value
                            };


                            function showLongLists(status) {
                                $scope.activeName = status.value;
                                $rootScope.activeName = status.value;
                                $scope.paramForExcell.interviewState = status.value;
                                $scope.activeCustomStageName = "";
                                $scope.isInterview = false;
                            }
                        }
                    })();

                    //$scope.init();
                    $scope.tableParams.reload();
                    $scope.objectId = resp.object.vacancyId;
                    $scope.vacancy.descr_small = $filter('cut')($scope.vacancy.descr, true, 500, '...');
                    Service.history({
                        "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                        "candidateId": null,
                        "clientId": null,
                        "page": {"number": 0, "count": $scope.historyLimit},
                        "type": 'all_actions'
                    }, function (res) {
                        historyButton($scope, res, Service, CacheCandidates);
                    });
                    $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/vacancy-" + $scope.vacancy.localId;
                    if (frontMode === 'demo') {
                        $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/di#/pv/" + $scope.vacancy.localId;
                    }
                    $scope.publicName = resp.object.position;
                    $scope.publicDescr = '';
                    angular.forEach(angular.element($scope.vacancy.descr).text().replace("\r\n", "\n").split("\n"), function (val) {
                        if (val !== undefined && val !== '') {
                            $scope.publicDescr += val + " ";
                        }
                    });
                    //$scope.reloadAdvice();

                    Service.getOrgLogoId({orgId: resp.object.orgId}, function (logoResp) {
                        if (logoResp.status && logoResp.status === 'ok') {
                            $scope.companyLogo = logoResp.object;
                            if ($scope.companyLogo != undefined && $scope.companyLogo !== '') {
                                $scope.publicImgLink = $location.$$protocol + "://" + $location.$$host + $scope.serverAddress + '/getlogo?id=' + $scope.companyLogo;
                            } else {
                                $scope.publicImgLink = "https://cleverstaff.net/images/sprite/icon_128_128_png.png";
                            }
                        }
                    });
                } else {
                    notificationService.error($filter('translate')('vacancy not found'));
                    $location.path("vacancies");
                }

            }, function (err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };

        $scope.updateTasks = function (needReload) {
            Task.get({
                //'creator': $rootScope.me.userId,
                'vacancyId': $scope.vacancy.vacancyId
            }, function (resp) {
                if (resp.status == 'ok') {
                    $scope.totalTasksNumber = 0;
                    $scope.totalTasksNumber = resp.total;
                    $scope.vacancyTasks = resp.objects;
                    if ($scope.urlTaskId && needReload) {
                        $rootScope.responsiblePersonsEdit = [];
                        angular.forEach($scope.vacancyTasks, function (resp) {
                            if (resp.taskId == $scope.urlTaskId ) {
                                $rootScope.editableTask = resp;
                                $scope.showModalEditTaskToCandidate($rootScope.editableTask);
                                $location.$$absUrl = $location.$$absUrl.split("&")[0];

                            }
                        });
                        if ($rootScope.editableTask) {
                            if($location.$$absUrl.indexOf('&task=') == -1)
                            $location.$$absUrl = $location.$$absUrl + '&task=' + $scope.urlTaskId;
                            angular.forEach($rootScope.editableTask.responsiblesPerson, function (resp) {
                                angular.forEach($rootScope.persons, function (res) {
                                    if (resp.responsible.userId == res.userId) {
                                        $rootScope.responsiblePersonsEdit.push(res);
                                        res.notShown = true;
                                        //$rootScope.persons.splice($rootScope.persons.indexOf(res), 1);
                                    }
                                });
                            });
                            $('.editTaskInCandidate').modal('setting', {
                                onHide: function () {
                                    $scope.urlTaskId = null;
                                    $location.$$absUrl = $location.$$absUrl.split("&")[0];
                                    $scope.$apply();
                                }
                            }).modal('show');
                        }
                    }
                } else {
                    notificationService.error(resp.message);
                }
            })
        };
        $scope.getEmailTemplates = function () {
            Mail.getTemplatesVacancy({vacancyId: $scope.vacancy.vacancyId,type:"candidateCreateInterviewNotification"},function(data){
                $scope.emailTemplates = data.objects;
                if(localStorage.editTemplate){
                    $scope.VacanciesInfCandidTaskHistClientFunc('settings');
                    angular.forEach($scope.emailTemplates,function(template){
                        if(template.type == localStorage.editTemplate){
                            setTimeout(function(){
                                $scope.showEditEmailTemplate(template);
                            },1)
                        }
                    });
                    delete localStorage.editTemplate
                }
            })
        };


        $scope.settingAccess = function(event, status){
            let target = event.target, id = status.customInterviewStateId || status.value,
                url = $location.$$absUrl.split('stage=')[1];

            if($rootScope.me.recrutRole !== 'admin') return;

            if(target.className === 'fa fa-unlock'){
                Vacancy.requestHideState({
                    stateId: id
                })
                    .then(responce => {
                        status.hidden = true;
                        if(url  == id){
                            $scope.visiable = true;
                        }else if(id == 'recalls'){$scope.visiable2 = true;}
                        $scope.noAccess = true;
                        $scope.visiable2 = true;
                        $rootScope.loading = false;
                        $scope.$apply();
                    });
            }else{
                Vacancy.requestOpenHideState({
                    stateId: id
                })
                    .then(responce => {
                        if(url  == id){
                            $scope.visiable = false;
                        }else if(id == 'recalls'){$scope.visiable2 = false;}
                        status.hidden = false;
                        $scope.noAccess = false;
                        $rootScope.loading = false;
                        $scope.$apply();
                    });
            }
            event.stopPropagation();
        };


        vacancyStages.requestVacancyStages().
            then((resp)=>{
            var array = [];

            $scope.customStages = resp.object.interviewStates;
            $scope.hiddenStages = resp.object.hiddenLimitRoles;

            angular.forEach($scope.customStages, function (res) {
                res.value = res.name;
                res.movable = true;
                res.added = false;
                res.count = 0;
                if (res.status == "A")
                    array.push(res);
            });
            $scope.customStages = array;
            $rootScope.customStages = array;
            $scope.customStagesFull = resp.object;
            $scope.updateVacancy();

        });


        if(google){
            $scope.map = {
                center: {
                    latitude: 48.379433,
                    longitude: 31.165579999999977
                },
                zoom: 5,
                options: {
                    panControl: true,
                    zoomControl: true,
                    scaleControl: true,
                    mapTypeControl: true,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                }
            };
            $scope.marker = {
                id: 1,
                title: "",
                coords: {
                    latitude: null,
                    longitude: null
                }
            };
        }
        $scope.editVacancyShare = function () {
            $scope.vacancy.accessType = $scope.vacancy.accessType == 'public' ? 'private' : 'public';
            Vacancy.edit($scope.vacancy, function (resp) {
                if ($scope.vacancy.accessType == "public") {
                    $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/pv/" + $scope.vacancy.vacancyId;
                    if (frontMode === 'demo') {
                        $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/di#/pv/" + $scope.vacancy.vacancyId;
                    }
                }
            });
        };

        //$scope.clickSendEmail = function () {
        //    var contacts = "";
        //    angular.forEach($rootScope.me.contacts, function (val) {
        //        if (val.contactType == "phoneMob") {
        //            contacts = ", " + val.value;
        //        }
        //    });
        //    var textTemplate = $filter('translate')('staff-public-link');
        //    var textMessage = textTemplate.replace('{vacancy}', $scope.vacancy.position)
        //        .replace('{link}', $scope.publicLink)
        //        .replace('{fio}', $rootScope.me.firstName)
        //        .replace('{contacts}', contacts);
        //    var mailTemplate = "mailto:?subject={subject}&body={body}";
        //    window.open(mailTemplate
        //        .replace('{subject}', $filter('translate')('vacancy') + " " + $scope.vacancy.position).replace('{body}', encodeURIComponent(textMessage)), '_newtab');
        //};
        $scope.showSendEmailTemplateModal = function(){
            $scope.lang= localStorage.getItem('NG_TRANSLATE_LANG_KEY');
            $rootScope.sendEmailTemplate ={
                toEmails: '',
                vacancyId: $scope.vacancy.vacancyId,
                candidateId: null,
                fullName: null,
                email: '',
                date: null,
                lang: $scope.lang,
                template: {}
            };
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/send-vacancy-by-email.html',
                size: '',
                resolve: function(){

                }
            });
            $scope.modalInstance.closed.then(function() {
                tinyMCE.remove()
            });
            $scope.modalInstance.opened.then(function(){
                setTimeout(function(){
                    tinymce.init({
                        selector: '#sendVacancyModalMCE',
                        mode: 'exact',
                        theme: "modern",
                        height: 150,
                        language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {

                            });
                            ed.on('change', function(e) {
                                $rootScope.sendEmailTemplate.template.text = tinyMCE.get('sendVacancyModalMCE').getContent();
                            });
                        }
                    });
                    Mail.getTemplateVacancy({vacancyId: $scope.vacancy.vacancyId,type:'seeVacancy'},function(data){
                        //data.text = data.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName);
                        data.object.text = data.object.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                        data.object.text = data.object.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                        data.object.title = data.object.title.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
                        $rootScope.sendEmailTemplate.template = data.object;
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName ? $rootScope.candnotify.fullName : "");
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                        $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                        if(!$rootScope.staticEmailTemplate.skype){
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/Skype:/g, "");
                        }
                        if($rootScope.staticEmailTemplate.facebook){
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                        } else {
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                        }
                        if($rootScope.staticEmailTemplate.linkedin){
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                        } else {
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                        }
                        if($rootScope.me.emails.length == 1){
                            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                        }
                        tinyMCE.get('sendVacancyModalMCE').setContent(data.object.text);
                        $scope.addEmailInDescriptionFromLocalStorage();
                        if($rootScope.sendEmailTemplate.template.fileId && $rootScope.sendEmailTemplate.template.fileName){
                            $rootScope.fileForSave.push({"fileId": $rootScope.sendEmailTemplate.template.fileId, "fileName": $rootScope.sendEmailTemplate.template.fileName});
                        }
                    });
                },0);
            });
        };
        $rootScope.sendEmailTemplateFunc = function(){
            $rootScope.sendEmailTemplate.template.fileId = $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null;
            $rootScope.sendEmailTemplate.template.fileName = $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null;
            Mail.sendMailByTemplateVerified($rootScope.sendEmailTemplate, function (resp) {
                if(resp.status == 'ok'){
                    notificationService.success($filter('translate')('Letter sent'));
                    $rootScope.closeModal();
                }else{
                    notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                }
            });
        };

        if (frontMode === 'war') {
            googleService.checkAuthTimeout();
        }
        //$scope.reloadAdvice = function () {
        //    Candidate.getAdvices({"vacancyId": $scope.vacancy.vacancyId}, function (response) {
        //        $scope.advices = response['objects'];
        //        angular.forEach($scope.customStages, function (resp) {
        //            angular.forEach($scope.advices, function (res) {
        //                if (res.stateInVacancy == resp.customInterviewStateId) {
        //                    res.stateInVacancy = resp.name;
        //                }
        //            });
        //        });
        //    });
        //};
        $rootScope.errorMessageForAddCandidate = {show: false, text: ""};
        $rootScope.select2Options = {allowClear: true};
        $rootScope.recallToInterview = {recall: "", status: "", date: "", comment: "", status_old: null};
        $rootScope.changeStateObject = {status: "", comment: "", placeholder: null};
        $rootScope.changeResponsibleInVacancy = {id: "", comment: "", text: null, name: null};
        $scope.shareObj = {facebook: false, twitter: false, linkedin: false, vk: false};
        $rootScope.addCandidateInInterviewbuttonClicked = false;
        $rootScope.addCandidateInInterview = {
            id: "",
            comment: "",
            status: "longlist",
            buttonClicked: false,
            date: null,
            showSelect: "",
            showText: false,
            text: "",
            addedInVacancy: false,
            select2Obj: null
        };
        $rootScope.changeStatusOfInterviewInVacancy = {
            candidate: "",
            comment: "",
            status: "",
            date: null,
            exportgoogle: false
        };
        $rootScope.changeStatusOfInterviewEmployed = {
            candidate: "",
            comment: "",
            status: "",
            date: null,
            exportgoogle: false
        };
        $rootScope.candnotify = {
            emails: null,
            sendMail: null,
            show: false,
            fullName: '',
            send: false
        };

        $scope.openModalAddRecallToInterview = function (recall, status) {
            $rootScope.addToInterviewForm.status = status;
            $rootScope.recallToInterview.recall = recall;
            $('.addInInterviewFromRecall.modal').modal('show');
            // console.log(recall)
            $rootScope.candnotify = {};
            $rootScope.candnotify.emails = recall.email.split(",");
            $rootScope.candnotify.sendMail = recall.email;
            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = recall.name + " " + recall.lastName;
            $rootScope.candnotify.send = false;
        };

        $scope.toOneRecall = function (recallId) {
            $location.path("recalls/" + recallId);
        };


        $scope.toOneCandidate = function toOneCandidate(id) {
            if (id && id.candidateId) {
                id = id.candidateId;
            }
            Candidate.one({'id': id}, function (resp) {
                if (resp.status == "ok")
                    $location.path("candidates/" + resp.object.localId);
            });
        };
        $(".changeStatusOfInterviewInVacancyPick1").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
            startView: 2,
            minView: 0,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function (data) {
            $rootScope.changeStatusOfInterviewInVacancy.date = data.date;
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate').getTime(), true));
            $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate').getTime(), true));
            $scope.$apply();
            tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
        }).on('hide', function () {
            if ($('.changeStatusOfInterviewInVacancyPick1').val() == "") {
                $rootScope.changeStatusOfInterviewInVacancy.date = null;
            }
        });
        $(".changeStatusOfInterviewEmployed1").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 2,
            minView: 2,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function (data) {
            $rootScope.changeStatusOfInterviewEmployed.date = data.date;
        }).on('hide', function () {
            if ($('.changeStatusOfInterviewEmployed1').val() == "") {
                $rootScope.changeStatusOfInterviewEmployed.date = null;
            }
        });

        $(".addFromAdvicePicker").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
            startView: 2, minView: 0,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function (data) {
            // console.log(data);
            $rootScope.addFromAdvice.date = data.date;
        }).on('hide', function () {
            if ($('.addFromAdvicePicker').val() == "") {
                $rootScope.addFromAdvice.date = null;
            }
        });

        $(".dateOfStartEmployement").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
            startView: 2, minView: 0,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function (data) {
            $rootScope.changeStatusOfInterviewInVacancy.date = data.date;
        }).on('hide', function () {
            if ($('.changeStatusOfInterviewInVacancyPick1').val() == "") {
                $rootScope.changeStatusOfInterviewInVacancy.date = null;
            }
        });


        $scope.showModalAddCommentToVacancy = function () {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-comment-vacancy.html',
                size: '',
                resolve: function(){

                }
            });
            $(document).unbind("keydown").keydown(function(e) {
                if (e.ctrlKey == true && e.which == 13) {
                    $rootScope.addCommentInVacancy();
                }
            });
        };
        $scope.showModalAddCommentToCandidate = function (candidate) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-coment-candidate-in-vacancy.html',
                size: '',
                resolve: function(){

                }
            });
            $(document).unbind("keydown").keydown(function(e) {
                if (e.ctrlKey == true && e.which == 13) {
                    $rootScope.addCommentInVacancyToCandidate();
                }
            });
            $rootScope.chosenCandidate = candidate;
            $rootScope.commentVacancyToCandidate.comment = candidate.comment;
        };

        $rootScope.commentVacancy = {
            comment: "",
            loading: false
        };
        $rootScope.commentVacancyToCandidate = {
            comment: "",
            loading: false
        };
        $rootScope.addCommentInVacancy = function () {
            if ($rootScope.commentVacancy.comment != undefined && $rootScope.commentVacancy.comment.length > 0) {
                $scope.commentVacancy.loading = true;
                Vacancy.setMessage({
                    comment: $rootScope.commentVacancy.comment,
                    vacancyId: $scope.vacancy.vacancyId
                }, function (resp) {
                    $scope.commentVacancy.loading = false;
                    $rootScope.commentVacancy.comment = null;
                    if (resp.status == 'ok') {
                        $scope.getLastEvent();
                        $rootScope.closeModal();
                    }
                }, function (error) {
                    $scope.commentVacancy.loading = false;
                });
            }
        };
        $rootScope.addCommentInVacancyToCandidate = function () {

            if ($rootScope.commentVacancyToCandidate.comment != undefined) {
                $scope.commentVacancyToCandidate.loading = true;
                Vacancy.setMessageToCandidate({
                    comment: $rootScope.commentVacancyToCandidate.comment,
                    vacancyId: $scope.vacancy.vacancyId,
                    candidateId: $scope.chosenCandidate.candidateId.candidateId
                }, function (resp) {
                    $scope.commentVacancyToCandidate.loading = false;
                    $rootScope.closeModal();
                    //$rootScope.commentVacancyToCandidate.comment = null;
                    if (resp.status == 'ok') {
                        Vacancy.one({"localId": $scope.vacancy.localId}, function (resp) {
                            console.log("llggl");
                            $scope.vacancy = resp.object;
                            $rootScope.vacancy = resp.object;
                            $scope.tableParams.reload();
                        });
                        $scope.updateVacancy();
                        $scope.getLastEvent();
                    }
                }, function (error) {
                    $scope.commentVacancyToCandidate.loading = false;
                });
            }
        };
        FileInit.initFileVacancy($scope, "vacancy", $filter);
        $scope.callbackFile = function (resp, name) {
            if (!$scope.vacancy.files) {
                $scope.vacancy.files = [];
            }
            $scope.vacancy.files.push(resp);
            $scope.getLastEvent();
        };

        $scope.removeFile = function (id) {

            Vacancy.removeFile({"vacancyId": $scope.vacancy.vacancyId, "fileId": id}, function (resp) {
                if (resp.status == "ok") {
                    $scope.getLastEvent();
                }
            });
            angular.forEach($scope.vacancy.files, function (val, ind) {
                if (val.fileId === id) {

                    $scope.vacancy.files.splice(ind, 1);
                }
            });

        };
        $scope.persons = [];

        $scope.personId = $rootScope.me.personId;

        Person.getAllPersons(function (resp) {
            $scope.statusPerson = resp;
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function (val, key) {
                if (angular.equals(resp.status, 'ok')) {
                    $scope.persons.push($scope.associativePerson[key]);
                }
            });
            $rootScope.persons = $scope.persons;
            $rootScope.personsEdit = $scope.persons;
            var iUser = null;
            for (var i = 0; i <= $scope.persons.length - 1; i++) {
                if ($rootScope.me.userId == $scope.persons[i].userId) {
                    iUser = $scope.persons[i];
                    $scope.persons.splice(i, 1);
                    break;
                }
            }
            if (iUser) {
                $scope.persons.unshift(iUser);
            }

            var personsCount = $scope.associativePerson.length;

            if (personsCount > 1) {
                $scope.needAutoSetResponsible = false;
            } else if (personsCount == 1 && ($scope.vacancy.responsiblesPerson == undefined || $scope.vacancy.responsiblesPerson.length == 0)) {
                $scope.needAutoSetResponsible = true;
            } else {
                $scope.needAutoSetResponsible = false;
            }
        });

        $scope.showAddResponsibleUser = function (person) {
            $rootScope.clickedSaveResponsibleInVacancy = false;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-adding-responsible.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.changeResponsibleInVacancy.id = person.userId;
            $rootScope.changeResponsibleInVacancy.name = person.cutFullName;
        };

        $scope.visibility = false;

        $scope.hoverInfoShow = function (flag, index) {
            var text = [
                "Use this template to send the interviw invitation & details when you move candidates to job stages with an interview.",
                "Use this template to describe candidates that thay do not meet the vacancy criteria.",
                "Use this template to sent a job offer & details to your candidates when you move them to the 'Hired' stage."
            ];

            if(flag === 'one' ){
                $scope.visibility = true;
            }else if(flag === 'two'){
                $scope.visibility2 = true;
                $scope.message = text[index];
            }
        };
        $scope.hoverInfoHidden = function(flag){
            if(flag === 'one'){
                $scope.visibility = false;
            }else if(flag === 'two'){
                $scope.visibility2 = false;
            }
        };

        $scope.showRemoveResponsibleUser = function (user) {
            var firstName = user.firstName != undefined ? user.firstName : "";
            var lastName = user.lastName != undefined ? user.lastName : "";

            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/remove-responsible-from-vacancy.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.changeResponsibleInVacancy.id = user.userId;
            $rootScope.changeResponsibleInVacancy.text = $filter('translate')('Do you want to remove the responsible')
                + " " + firstName + " " + lastName + " " + $filter('translate')("from vacancy") + " " + $scope.vacancy.position;
        };
        $scope.showChangeStatusOfVacancy = function (status) {
            $scope.changeStateObject.status = status;
            $scope.changeStateObject.status_old = $scope.vacancy.status;
            $scope.changeStateObject.placeholder = $filter('translate')('Write_a_comment_why_do_you_change_vacancy_status');
            if (status == 'completed') {
                var hasApproved = false;
                angular.forEach($scope.statusesCount, function (i) {
                    if (i.item == "approved") {
                        hasApproved = true;
                    }
                });
                if (!hasApproved) {
                    notificationService.error($filter('translate')('You must move one of the candidates to status Approved'));
                } else {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                }
            } else {
                if (status != 'inwork') {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && ($scope.vacancy.responsiblesPerson != undefined && $scope.vacancy.responsiblesPerson.length > 0)) {
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if ($scope.needAutoSetResponsible && status == 'inwork') {
                    $rootScope.changeResponsibleInVacancy.id = $rootScope.me.userId;
                    $rootScope.changeResponsibleInVacancy.comment = 'Поскольку вы являетесь единственным пользователем Вашей компании, мы назначили Вас ответственным';
                    $rootScope.saveResponsibleUserInVacancy();
                    $scope.modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '../partials/modal/vacancy-change-status.html',
                        size: '',
                        resolve: function(){

                        }
                    });
                } else if (status == 'inwork' && !$scope.needAutoSetResponsible) {
                    notificationService.error($filter('translate')('You must set a responsible') + '!');
                }
            }
        };
        function showChangeStatusModal() {
            $('.changeStatusOfVacancy').modal('show');
            $scope.changeStateObject.status = status;
            $scope.changeStateObject.status_old = $scope.vacancy.status;
            $scope.changeStateObject.placeholder = $filter('translate')('Write_a_comment_why_do_you_change_vacancy_status');
        }

        $('.ui.dropdown').dropdown();
        $rootScope.saveVacancyStatus = function () {
            if (!$rootScope.clickedSaveVacancyStatus) {
                $rootScope.clickedSaveVacancyStatus = true;
                // console.log("DELETE IN VACANCY");
                $rootScope.closeModal();
                Vacancy.changeState({
                    vacancyId: $scope.vacancy.vacancyId,
                    comment: $rootScope.changeStateObject.comment,
                    vacancyState: $rootScope.changeStateObject.status
                }, function (resp) {
                    if (resp.status == "ok") {
                        $scope.vacancy.status = $rootScope.changeStateObject.status;
                        $rootScope.changeStateObject.comment = "";
                        $rootScope.changeStateObject.status = null;
                        notificationService.success($filter('translate')('vacancy change status'));
                        $scope.getLastEvent();
                    } else if (resp.message) {
                        notificationService.error(resp.message);
                    }
                    $rootScope.clickedSaveVacancyStatus = false;
                }, function (err) {
                    $rootScope.clickedSaveVacancyStatus = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };
        $rootScope.deleteVacancyStatus = function() {
            $scope.vacancy.status = $rootScope.changeStateObject.status;
            $rootScope.closeModal();
            Vacancy.changeState({
                vacancyId: $scope.vacancy.vacancyId,
                comment: $rootScope.changeStateObject.comment,
                vacancyState: $rootScope.changeStateObject.status
            }, function(resp) {
                if (resp.status == "ok") {
                    $rootScope.changeStateObject.comment = "";
                    $rootScope.changeStateObject.status = null;
                    notificationService.success($filter('translate')('vacancy') + " " + $scope.vacancy.position + " " + $filter('translate')('was_deleted_2'));
                    $location.path('/vacancies');


                }
            }, function(err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });

        };
        $rootScope.saveResponsibleUserInVacancy = function () {
            if (!$rootScope.clickedSaveResponsibleInVacancy) {
                $rootScope.clickedSaveResponsibleInVacancy = true;
                Vacancy.addResponsible({
                    lang: $translate.use(),
                    vacancyId: $scope.vacancy.vacancyId,
                    personId: $rootScope.changeResponsibleInVacancy.id,
                    comment: $rootScope.changeResponsibleInVacancy.comment
                }, function (resp) {
                    if (resp.status === "ok") {
                        $rootScope.clickedSaveResponsibleInVacancy = false;
                        notificationService.success($filter('translate')('vacancy set responsible'));
                        $scope.vacancy.responsiblesPerson = resp.object.responsiblesPerson;
                        $scope.getLastEvent();
                    }

                }, function (err) {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
                $rootScope.closeModal();
                $rootScope.changeResponsibleInVacancy.comment = "";
                $rootScope.changeResponsibleInVacancy.id = "";
            }
        };
        $scope.changeResponsibleRole = function(responsible){
            Vacancy.addResponsible({
                lang: $translate.use(),
                vacancyId: $scope.vacancy.vacancyId,
                personId: responsible.responsible.userId,
                responsibleType: responsible.type
                //komment: $rootScope.changeResponsibleInVacancy.comment
            }, function (resp) {
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('vacancy set responsible'));
                    $scope.vacancy.responsiblesPerson = resp.object.responsiblesPerson;
                    $scope.getLastEvent();
                }

            }, function (err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        };
        $rootScope.removeResponsibleUserInVacancy = function () {
            if (!$rootScope.clickedremoveResponsibleUserInVacancy) {
                $rootScope.clickedremoveResponsibleUserInVacancy = true;

                Vacancy.removeResponsible({
                    vacancyId: $scope.vacancy.vacancyId,
                    personId: $rootScope.changeResponsibleInVacancy.id,
                    comment: $rootScope.changeResponsibleInVacancy.comment
                }, function (resp) {
                    if (resp.status === "ok") {
                        notificationService.success($filter('translate')('vacancy remove responsible'));
                        $scope.vacancy.responsiblesPerson = resp.object.responsiblesPerson;
                        $scope.getLastEvent();
                    }
                    $rootScope.closeModal();
                    $rootScope.changeResponsibleInVacancy.comment = "";
                    $rootScope.changeResponsibleInVacancy.id = "";
                    $rootScope.clickedremoveResponsibleUserInVacancy = false;
                }, function (err) {
                    $rootScope.clickedremoveResponsibleUserInVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            }
        };
        $scope.status = Vacancy.status();
        $scope.statusAssoc = Vacancy.getStatusAssociated();
        $rootScope.statusInter = Vacancy.getInterviewStatus();


        $scope.numberOfCandidatesInDifferentStates = function () {
            var totalCount = 0;
            Vacancy.getCounts({
                vacancyId:$scope.vacancy.vacancyId
            },function(statusesCount){
                $scope.statusesCount = statusesCount.object;
                angular.forEach($scope.VacancyStatusFiltered, function (val) {
                    val.count = 0;
                });
                angular.forEach($scope.statusesCount, function (item) {
                    //if (item.state == 'approved') {
                    //    //$scope.activeName = 'approved';
                    //    //$scope.paramForExcell.interviewState = 'approved';
                    //}
                    angular.forEach($scope.VacancyStatusFiltered, function (valS) {
                        if (valS.name) {
                            valS.value = valS.name;
                        }
                        if (item.item == valS.value) {
                            valS.count = item.count;
                            totalCount = totalCount + item.count;
                        }
                        if (item.item == valS.customInterviewStateId) {
                            valS.count = item.count;
                            totalCount = totalCount + item.count;
                        }
                    });
                });
                $scope.numberAllCandidateInVacancy = totalCount;
            });
        };

        $.getScript("https://platform.linkedin.com/in.js?async=true", function success() {
            IN.init({
                api_key: apiKey.linkedIn.api_key,
                scope: "r_emailaddress w_share"
            });
        });
        $.getScript('//connect.facebook.net/en_UK/sdk.js', function () {
            FB.init({
                appId: apiKey.facebook.appId,
                version: 'v2.9'
            });
        });
        $scope.addPublish = function publish(type) {
            var DNA = true;
            $scope.requestToAddPublishCame = true;
            if ($scope.vacancy.publish != undefined && $scope.vacancy.publish.length > 0) {
                angular.forEach($scope.vacancy.publish, function (val) {
                    if (val.type == type) {
                        DNA = false;
                    }
                });
            }
            if (DNA && $scope.requestToAddPublishCame) {
                $scope.requestToAddPublishCame = false;
                Vacancy.addPublish({"vacancyId": $scope.vacancy.vacancyId, "type": type}, function (resp) {
                    if ($scope.vacancy.publish == undefined) {
                        $scope.vacancy.publish = [];
                    }
                    $scope.shareObj[resp.object.type] = true;
                    $scope.vacancy.publish.push(resp.object);
                    $scope.requestToAddPublishCame = true;
                });
            }
        };

        $scope.share = function (sourse) {
            var link = $location.$$protocol + "://" + $location.$$host + "/i#/vacancy-" + $scope.vacancy.localId;
            if (frontMode === 'demo') {
                link = $location.$$protocol + "://" + $location.$$host + "/di#/vacancy-" + $scope.vacancy.localId;
            }
            if (sourse === 'linkedin') {
                if (!IN.User.isAuthorized()) {
                    IN.User.authorize(function () {
                        IN.API.Raw("/people/~/shares")
                            .method("POST")
                            .body(JSON.stringify({
                                "content": {
                                    "submitted-url": link,
                                    "title": $filter('translate')('Vacancy') + ' ' + $scope.vacancy.position,
                                    "description": $scope.publicDescr,
                                    "submitted-image-url": $scope.publicImgLink
                                },
                                "visibility": {
                                    "code": "anyone"
                                },
                                "comment": ''
                            }))
                            .result(function (r) {
                                notificationService.success($filter('translate')('Vacancy posted on your LinkedIn'));
                                $scope.addPublish('linkedin');
                                autoRefreshIN();
                            })
                            .error(function (r) {
                                notificationService.error(r.message);
                            });
                    }, "w_share");
                } else {
                    IN.API.Raw("/people/~/shares")
                        .method("POST")
                        .body(JSON.stringify({
                            "content": {
                                "submitted-url": link,
                                "title": $filter('translate')('Vacancy') + ' ' + $scope.vacancy.position,
                                "description": $scope.publicDescr,
                                "submitted-image-url": $scope.publicImgLink
                            },
                            "visibility": {
                                "code": "anyone"
                            },
                            "comment": ""
                        }))
                        .result(function (r) {
                            notificationService.success($filter('translate')('Vacancy posted on your LinkedIn'));
                            $scope.addPublish('linkedin');
                            autoRefreshIN();
                        })
                        .error(function (r) {
                            notificationService.error(r.message);
                        });
                }
            }
            if (sourse === 'facebook') {
                console.log($scope.facebookAppId);
                FB.getLoginStatus(function (response) {
                    var setinterval =  setInterval(()=>{
                        let frame = document.querySelector('.FB_UI_Dialog');
                        if(frame){
                            frame.setAttribute('width','600px');
                            frame.setAttribute('style','min-width:600px;');
                            frame.style.minWidth = '600px !important';
                            frame.style.width = '600px !important';
                            clearInterval(setinterval)
                        }
                },1000);

                    if (response.status === 'connected') {
                        console.log(response);
                        FB.ui({
                                method: 'feed',
                                name: $filter('translate')('Vacancy') + ' ' + $scope.vacancy.position,
                                caption: '',
                                description: $scope.publicDescr,
                                link: link,
                                picture: $scope.publicImgLink
                            },
                            function (response) {
                                console.log(response);
                                if(response.error_message){
                                    notificationService.error($filter('translate')('Vacancy hasn\'t shared'));
                                }
                            });
                    }
                    else {

                        FB.login(function (response) {
                            if(response.authResponse){
                                FB.ui({
                                        method: 'feed',
                                        name: $filter('translate')('Vacancy') + ' ' + $scope.vacancy.position,
                                        caption: '',
                                        description: $scope.publicDescr,
                                        link: link,
                                        picture: $scope.publicImgLink,
                                    },
                                    function (response) {
                                    console.log(response);
                                        if(response.error_message){
                                            notificationService.error($filter('translate')('Vacancy hasn\'t shared'));
                                        }
                                });
                            }
                        });
                    }
                });
            }
        };
        $scope.$watch('sortValue',function(newVal, oldVal){
            if(newVal != undefined){
                $scope.tableParams.reload()
            }
        });
        $scope.tableParams = new ngTableParams({
            page: $scope.a.searchNumber,
            count: 15
        }, {
            total: 0,
            getData: function ($defer, params) {
                if($scope.vacancy){
                    $rootScope.loading = true;
                    $scope.finalCandidate = null;
                    $scope.vacancySearchParams = {
                        state: $scope.activeName,
                        page: {number:(params.$params.page - 1),count:params.$params.count},
                        vacancyId: $scope.vacancy.vacancyId,
                        withCandidates: true,
                        withVacancies: false,
                        name: $scope.searchCandidateName,
                        interviewSortEnum: $scope.sortValue
                        //sortOrder: $scope.sortOrder
                    };
                    var cd = [];

                    function getCandidates(page, count){
                        if(page || count) {
                            $scope.vacancySearchParams.page.number = page;
                            $scope.vacancySearchParams.page.count = count;
                        } else {
                            $scope.isShowMore = false;
                            if(document.getElementById('scrollup'))
                                document.getElementById('scrollup').style.display = 'none';
                        }
                        Vacancy.getCandidatesInStages($scope.vacancySearchParams, function(resp){
                            $scope.numberOfCandidatesInDifferentStates();
                            $scope.candidatesInStages = resp.objects;
                            angular.forEach(resp.objects, function (val) {
                                angular.forEach($scope.VacancyStatusFiltered, function (res) {
                                    if(res.customInterviewStateId == val.state){
                                        if(res.type == 'interview'){
                                            val.isInterview = true;
                                        }else{
                                            val.isInterview = false;
                                        }
                                        val.state = res.name;
                                    }
                                });
                                cd.push(val);
                            });
                            params.total(resp['total']);
                            $rootScope.objectSize = resp['objects'] ? resp['total'] : 0;
                            $scope.paginationParams = {
                                currentPage: $scope.vacancySearchParams.page.number,
                                totalCount: $rootScope.objectSize
                            };
                            let pagesCount = Math.ceil(resp['total']/$scope.vacancySearchParams.page.count);
                            if(pagesCount == $scope.vacancySearchParams.page.number + 1) {
                                $('#show_more').hide();
                            } else {
                                $('#show_more').show();
                            }
                            $defer.resolve($filter('orderBy')(resp['objects'], ['-dc']));
                            if (cd && $scope.showTable !== 'recalls') {
                                if ($scope.activeName === 'approved' && cd.length > 0) {
                                    $scope.showTable = "final";
                                    $scope.finalCandidate = cd;
                                } else if (cd.length > 0) {
                                    $scope.showTable = "table";
                                } else {
                                    if(!$rootScope.objectSize)
                                    $scope.showTable = "not available";
                                }
                            }


                            function hiddenCandidateOnStages() {
                                var urlStage = $location.$$absUrl.split('stage=')[1],
                                    stages = $scope.VacancyStatusFiltered.map(item => item.customInterviewStateId || item.value),
                                    index = stages.indexOf(urlStage), elem;
                                if(!$scope.showSearchCandidate) {
                                    if($scope.VacancyStatusFiltered.length > 0 && index !== -1){
                                        elem  = $scope.VacancyStatusFiltered[index].customInterviewStateId || $scope.VacancyStatusFiltered[index].value;
                                    }else{
                                        return;
                                    }

                                    if(elem == urlStage && (!$scope.VacancyStatusFiltered[index]['hidden']) || $rootScope.me.recrutRole !== 'client' ){
                                        $scope.dataForVacancy = cd;
                                        $defer.resolve(cd);
                                        $scope.noAccess = false;
                                    }else if(elem  == urlStage && $scope.VacancyStatusFiltered[index]['hidden']){
                                        $scope.visiable = true;
                                        $scope.noAccess = true;
                                    }else if(!$scope.visiable){
                                        $scope.dataForVacancy = cd;
                                        $scope.noAccess = false;
                                        $defer.resolve(cd);
                                    }else{
                                        $scope.noAccess = true;
                                    }
                                } else {
                                    $scope.dataForVacancy = cd;
                                    $scope.dataForVacancy.map((item) => {
                                        console.log(item.state,item.isInterview);
                                    });
                                    $defer.resolve(cd);

                                }

                            }

                            hiddenCandidateOnStages();

                        $scope.loadingCandidates = false;
                        $rootScope.loading = false;
                    });
                    $scope.a.searchNumber = $scope.tableParams.page();
                    }
                    getCandidates();
                $scope.showMore = function () {
                    $scope.isShowMore = true;
                    Service.dynamicTableLoading(params.total(), $scope.vacancySearchParams.page.number, $scope.vacancySearchParams.page.count, getCandidates)
                };
            }
        }
        });

        //$scope.tableParams2 = initTable();

        $scope.fileForSave = [];
        $rootScope.fileForSave = [];    /*For modal window*/

        FileInit.initVacancyTemplateFileOption($scope, "", "", false, $filter);
        $scope.callbackFileForTemplate = function(resp, names) {
            $scope.fileForSave.push({"fileId": resp, "fileName": names});
            $rootScope.fileForSave.push({"fileId": resp, "fileName": names});
        };
        //$scope.removeFile = function(id) {
        //    angular.forEach($scope.fileForSave, function(val, ind) {
        //        if (val.attId === id) {
        //            $scope.fileForSave.splice(ind, 1);
        //        }
        //    });
        //};
        $rootScope.removeFile = function(id) {
            angular.forEach($rootScope.fileForSave, function(val, ind) {
                if (val.attId === id) {
                    $rootScope.fileForSave.splice(ind, 1);
                }
            });
        };

        $rootScope.toChangeStatusInterview = function (status, candidate, withChooseStatus) {
            if (status == undefined) {
                $rootScope.changeStatusOfInterviewInVacancy.status =null;
                //$rootScope.changeStatusOfInterviewInVacancy.status = {
                //    value: "longlist",
                //    withDate: false,
                //    defaultS: true,
                //    single: false,
                //    added: true,
                //    active_color: "longlist_color",
                //    useAnimation: false,
                //    count: 0,
                //    forAdd: true
                //};

            }
            if (withChooseStatus == undefined || withChooseStatus == false) {
                angular.forEach($scope.VacancyStatusFiltered, function (val) {
                    if (val.value == status || $filter('translate')('interview_status_assoc_full.' + val.value) == status.trim()) {
                        $rootScope.changeStatusOfInterviewInVacancy.status = val;
                    }
                });
            } else if (withChooseStatus) {
                var value = $filter('filter')($scope.VacancyStatus, {used: true});
                $rootScope.changeStatusOfInterviewInVacancy.statusObject = [];
                angular.forEach($scope.VacancyStatusFiltered, function (resp) {
                    if (resp.value != 'approved' && resp.value != 'notafit' && resp.value != 'no_response') {
                        $rootScope.changeStatusOfInterviewInVacancy.statusObject.push(resp);
                    }
                });
            }
            if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'interview' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.withDate ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'longlist' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'shortlist' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'notafit' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'declinedoffer' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_response' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_contacts' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.type == 'interview' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.type == 'refuse'){
                var templateType = 'candidateCreateInterviewNotification';
                if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'notafit' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'declinedoffer' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_response' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_contacts' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.type == 'refuse'){
                    templateType = 'refuseCandidateInVacancy'
                }else if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'longlist' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'shortlist'){
                    templateType = 'seeVacancy'
                }
                Mail.getTemplateVacancy({vacancyId: $scope.vacancy.vacancyId,type:templateType},function(data){
                    $rootScope.fileForSave = [];
                    $rootScope.emailTemplateInModal = data.object;
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName ? $rootScope.candnotify.fullName : candidate.fullName);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                    if(!$rootScope.staticEmailTemplate.skype){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/Skype:/g, "");
                    }
                    if($rootScope.staticEmailTemplate.facebook){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                    }
                    if($rootScope.staticEmailTemplate.linkedin){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }
                    tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                    if(localStorage.emailThatAlreadyUsed){
                        $scope.addEmailFromLocalStorage(localStorage.emailThatAlreadyUsed);
                    }
                    if($rootScope.emailTemplateInModal.fileId && $rootScope.emailTemplateInModal.fileName){
                        $rootScope.fileForSave.push({"fileId": $rootScope.emailTemplateInModal.fileId, "fileName": $rootScope.emailTemplateInModal.fileName});
                    }
                })
            }
            if (candidate.state == 'approved' && $rootScope.me.recrutRole != 'admin') {
                notificationService.error($filter('translate')('Transfer from the status of approved can only Admin'));
                return;
            }
            //$rootScope.changeStatusOfInterviewInVacancy.withChooseStatus = withChooseStatus;
            $rootScope.changeStatusOfInterviewInVacancy.candidate = candidate;
            $rootScope.changeStatusOfInterviewInVacancy.approvedCount = $scope.approvedCount;
            $rootScope.candnotify = {};
            Candidate.getContacts({"candidateId": candidate.candidateId.candidateId}, function (resp) {
                var email = "";
                angular.forEach(resp.objects, function (c) {
                    if (c.type == "email") {
                        email = c.value;
                    }
                });
                $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
            });

            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = candidate.candidateId.fullName;
            $rootScope.candnotify.send = false;
            if (status == 'approved') {
                $rootScope.showEmployedFields = true;
                $rootScope.probationaryPeriod = null;
            } else {
                $rootScope.showEmployedFields = false;
            }
            $('.changeStatusOfInterviewInVacancy.modal').modal('show');
        };

        $rootScope.changeStatusInAddCandidate = function () {
            if (!$rootScope.addCandidateInInterviewbuttonClicked) {
                var candidateId = $("#candidateToAddInInterview").select2('data') !== null ? $("#candidateToAddInInterview").select2('data').id : null;
                var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                var candidateObj = $rootScope.addCandidateInInterview;
                var date = $('.addCandidateInInterviewPicker').datetimepicker('getDate') != null && candidateObj.status.withDate ? $('.addCandidateInInterviewPicker').datetimepicker('getDate') : null;
                angular.forEach($scope.vacancy.interviews, function (val) {
                    if (val.candidateId.candidateId == candidateId) {
                        changeObj.candidate = val;
                    }
                });
                if (changeObj.candidate.state == 'approved' && $rootScope.me.recrutRole != 'admin') {
                    $rootScope.errorMessageForAddCandidate.text = $filter('translate')('Transfer from the status of approved can only Admin');
                    $rootScope.errorMessageForAddCandidate.show = true;
                    return;
                }
                changeObj.status = candidateObj.status;
                changeObj.comment = candidateObj.comment;
                $rootScope.addCandidateInInterviewbuttonClicked = true;
                $rootScope.saveStatusInterviewInVacancy(date);
                $('.addCandidateInInterviewPicker').val("");
                $('.addCandidateInInterview.modal').modal('hide');
            }
        };

        $rootScope.saveStatusInterviewInVacancy = function (customDate, sendTemplate) {
            if($rootScope.emailTemplateInModal){
                if($rootScope.emailTemplateInModal.text.indexOf("//") > -1 && $rootScope.candnotify.send){
                    var templateError = true;
                    if($rootScope.emailTemplateInModal.text.indexOf("http://") > -1 || $rootScope.emailTemplateInModal.text.indexOf("https://") > -1){
                        var templateError = false;
                    }
                }
            }
            var neededRequest = 'editInterview';
            if($rootScope.changeStatusOfInterviewInVacancy && $rootScope.changeStatusOfInterviewInVacancy.candidate && $rootScope.changeStatusOfInterviewInVacancy.candidate.recallId){
                neededRequest = 'addInterview';
            }

            if(!templateError){
                if((!$rootScope.candnotify.sendMail) && sendTemplate ){
                    notificationService.error($filter('translate')("enter_email_candidate"));
                    return;
                }

                if (!$rootScope.clickedSaveStatusInterviewInVacancy) {
                    $rootScope.clickedSaveStatusInterviewInVacancy = true;
                    $rootScope.changeStatusOfInterviewInVacancy.errorMessage = false;
                    var changeObj = $rootScope.changeStatusOfInterviewInVacancy;
                    if (changeObj.status == 'declinedoffer' && changeObj.comment == '') {
                        $rootScope.changeStatusOfInterviewInVacancy.errorMessage = true;
                        return;
                    }
                    if ($rootScope.showEmployedFields) {
                        changeObj.date = $('.changeStatusOfInterviewEmployed1').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewEmployed1').datetimepicker('getDate') : customDate != undefined ? customDate : null;
                    } else {
                        changeObj.date = $('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate') != null ? $('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate') : customDate != undefined ? customDate : null;
                    }
                    if (changeObj.status) {
                        if ($rootScope.showEmployedFields) {
                            Vacancy[neededRequest]({
                                "personId": $scope.personId,
                                "vacancyId": $scope.vacancy.vacancyId,
                                "recallId": neededRequest == 'addInterview'?$rootScope.changeStatusOfInterviewInVacancy.candidate.recallId:null,
                                "candidateId": changeObj.candidate.candidateId.candidateId,
                                "interviewId": changeObj.candidate.interviewId,
                                "interviewState": changeObj.status.customInterviewStateId ? changeObj.status.customInterviewStateId : changeObj.status.value,
                                "comment": changeObj.comment,
                                "lang": $translate.use(),
                                "probationaryPeriod": $rootScope.probationaryPeriod,
                                "dateEmployee": changeObj.date != null ? changeObj.date.getTime() : null
                            }, function (resp) {
                                if (resp.status == "ok") {
                                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                    if (frontMode === 'war' && $scope.selectedCalendar != undefined) {
                                        if ((changeObj.status.withDate || changeObj.status.type == 'interview') && changeObj != undefined && changeObj.date != null) {
                                            if (changeObj.status.customInterviewStateId) {
                                                var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                                            } else {
                                                var id = resp.object.interviewId + changeObj.status.value;
                                            }
                                        }
                                    }
                                    Vacancy.one({"localId": $scope.vacancy.localId}, function (resp) {
                                        $scope.vacancy = resp.object;
                                        $rootScope.vacancy = resp.object;
                                        $scope.recalls = resp.object.recalls;
                                        if($scope.showTable !== 'recalls') {
                                            if($scope.dataForVacancy.length == 1 && $scope.a.searchNumber > 0) {
                                                $scope.tableParams.page($scope.a.searchNumber - 1);
                                                $scope.tableParams.reload();
                                            } else {
                                                $scope.tableParams.reload();
                                            }
                                        }
                                        $scope.numberOfCandidatesInDifferentStates();
                                    });
                                    changeObj.candidate.state = changeObj.status.value;
                                    changeObj.candidate.dateInterview = changeObj.date;
                                    if ((changeObj.status.withDate || changeObj.status.type == 'interview') && changeObj.date && $rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                                        var candnotify = $rootScope.candnotify;
                                        Vacancy.sendInterviewCreateMail({
                                                "email": candnotify.sendMail,
                                                "vacancyId": $scope.vacancy.vacancyId,
                                                "candidateId": changeObj.candidate.candidateId.candidateId,
                                                "fullName": candnotify.fullName,
                                                "date": changeObj.date,
                                                "lang": $translate.use()
                                            },
                                            function (resp) {
                                            });
                                    }

                                    $rootScope.changeStatusOfInterviewInVacancy = {
                                        candidate: "",
                                        comment: "",
                                        status: "",
                                        date: null,
                                        exportgoogle: false
                                    };
                                    $rootScope.addCandidateInInterviewbuttonClicked = false;
                                    $rootScope.closeModal();
                                    $('.changeStatusOfInterviewInVacancyPick1').val("");
                                    $scope.numberOfCandidatesInDifferentStates();
                                    $scope.getLastEvent();
                                } else if (resp.status == "error") {
                                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                    notificationService.error(resp.message);
                                }
                            }, function (err) {
                                $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                //notificationService.error($filter('translate')('service temporarily unvailable'));
                                $rootScope.addCandidateInInterviewbuttonClicked = false;
                            });
                        } else {
                            Vacancy[neededRequest]({
                                "personId": $scope.personId,
                                "recallId": neededRequest == 'addInterview'?$rootScope.changeStatusOfInterviewInVacancy.candidate.recallId:null,
                                "vacancyId": $scope.vacancy.vacancyId,
                                "candidateId": changeObj.candidate.candidateId.candidateId ? changeObj.candidate.candidateId.candidateId : changeObj.candidate.candidateId,
                                "interviewState": changeObj.status.customInterviewStateId ? changeObj.status.customInterviewStateId : changeObj.status.value,
                                "comment": changeObj.comment,
                                "date": changeObj.date !== null ? changeObj.date.getTime() : null,
                                "lang": $translate.use()
                            }, function (resp) {
                                if (resp.status == "ok") {
                                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                    if ($scope.selectedCalendar != undefined) {
                                        if ((changeObj.status.withDate || changeObj.status.type == 'interview') && changeObj != undefined && changeObj.date != null) {
                                            if (changeObj.status.customInterviewStateId) {
                                                var id = resp.object.interviewId + changeObj.status.customInterviewStateId;
                                            } else {
                                                var id = resp.object.interviewId + changeObj.status.value;
                                            }
                                        }
                                    }
                                    Vacancy.one({"localId": $scope.vacancy.localId}, function (resp) {
                                        console.log("gooo");
                                        $scope.vacancy = resp.object;
                                        $rootScope.vacancy = resp.object;
                                        $scope.recalls = resp.object.recalls;
                                        if($scope.showTable !== 'recalls') {
                                            if($scope.dataForVacancy.length == 1 && $scope.a.searchNumber > 0) {
                                                $scope.tableParams.page($scope.a.searchNumber - 1);
                                                $scope.tableParams.reload();
                                            } else {
                                                $scope.tableParams.reload();
                                            }
                                        }
                                        $scope.numberOfCandidatesInDifferentStates();

                                        //$scope.tableParams2.reload();
                                    });
                                    changeObj.candidate.state = changeObj.status.value;
                                    changeObj.candidate.dateInterview = changeObj.date;
                                    if ($rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1 && sendTemplate) {
                                        if ($rootScope.candnotify.sendMail.length > 1) {
                                            var candnotify = $rootScope.candnotify;
                                            Mail.sendMailByTemplateVerified({
                                                    toEmails: candnotify.sendMail,
                                                    vacancyId: $scope.vacancy.vacancyId,
                                                    candidateId: changeObj.candidate.candidateId.candidateId,
                                                    fullName: candnotify.fullName,
                                                    email: $rootScope.emailTemplateInModal.email,
                                                    date: changeObj.date,
                                                    lang: $scope.lang,
                                                    template: {
                                                        type: $rootScope.emailTemplateInModal.type,
                                                        title: $rootScope.emailTemplateInModal.title,
                                                        text: $rootScope.emailTemplateInModal.text,
                                                        fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                                        fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                                                    }
                                                },
                                                function (resp) {
                                                    if(resp.status != 'ok'){
                                                        notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                                                    }
                                                });
                                        }else{
                                            $rootScope.emailError = true;
                                        }
                                    }
                                    $rootScope.changeStatusOfInterviewInVacancy = {
                                        candidate: "",
                                        comment: "",
                                        status: "",
                                        date: null,
                                        exportgoogle: false
                                    };
                                    $rootScope.addCandidateInInterviewbuttonClicked = false;
                                    $rootScope.closeModal();
                                    $('.changeStatusOfInterviewInVacancyPick1').val("");
                                    $scope.getLastEvent();
                                } else if (resp.status == "error") {
                                    $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                    notificationService.error(resp.message);
                                }
                            }, function (err) {
                                $rootScope.clickedSaveStatusInterviewInVacancy = false;
                                //notificationService.error($filter('translate')('service temporarily unvailable'));
                                $rootScope.addCandidateInInterviewbuttonClicked = false;
                            });
                        }
                    } else {
                        $rootScope.clickedSaveStatusInterviewInVacancy = false;
                        notificationService.error($filter('translate')('You must select a stage'));
                    }
                }
            }else{
                notificationService.error($filter('translate')('Please delete all comments'))
            }
        };

        $scope.showRecalls = function (status) {
            $scope.visiable2 = status.hidden;
            $scope.visiable = false;

            if($scope.visiable2 && $rootScope.me.recrutRole == 'client'){
                $scope.noAccess = true;
            }else{
                $('#recallsTable').show();
                $('.pagination-block').hide();
                $scope.noAccess = false;
            }

            $scope.activeName = 'recalls';
            if($scope.recalls && $scope.recalls.length > 0) {
                $scope.showTable = 'recalls';
            } else {
                $scope.showTable = 'not available';
            }
            $scope.activeCustomStageName = '';
        };

        $scope.toEdit = function (id) {
            $location.path();
        };

        $scope.toAddCandidateForm = function (state, showSelect, showText, withoutChangeStatusInVacancyAutocopleater) {
            if (withoutChangeStatusInVacancyAutocopleater == undefined) {
                $rootScope.withoutChangeStatusInVacancyAutocopleater = false;
            } else {
                $rootScope.withoutChangeStatusInVacancyAutocopleater = true;
            }
            $rootScope.addCandidateInInterviewbuttonClicked = false;
            $("#candidateToAddInInterview").select2("val", null);
            $rootScope.errorMessageForAddCandidate.show = false;
            $rootScope.addCandidateInInterview.addedInVacancy = false;
            $rootScope.addCandidateInInterview.select2Obj = null;
            $rootScope.addCandidateInInterview.comment = "";
            if (state != null) {
                angular.forEach($scope.VacancyStatus, function (val) {
                    if (val.used) {
                        angular.forEach(val.status, function (valS) {
                            if (valS.value == state) {
                                $rootScope.addCandidateInInterview.status = valS;
                            }
                        })
                    }
                });
            } else {
                $rootScope.addCandidateInInterview.status = {
                    value: "longlist",
                    withDate: false,
                    defaultS: true,
                    single: false,
                    added: true,
                    active_color: "longlist_color",
                    useAnimation: false,
                    count: 0,
                    forAdd: true
                };
            }
            $rootScope.addCandidateInInterview.showText = showText;
            $rootScope.addCandidateInInterview.showSelect = showSelect;
            var value = $filter('filter')($scope.VacancyStatus, {used: true});

            $rootScope.addCandidateInInterview.statusObject = $scope.VacancyStatusFiltered;

            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-candidate-add.html',
                size: '',
                scope: $scope,
                resolve: function(){

                }
            });
            $rootScope.candnotify = {};
            $rootScope.candnotify.show = false;
            $rootScope.candnotify.send = false;
            $scope.modalInstance.opened.then(function() {
                setTimeout(function(){
                    $("#addCandidateInInterview").find("option").eq(0).remove();
                    tinymce.init({
                        selector: '#modalMCECandidate',
                        mode: 'exact',
                        theme: "modern",
                        height: 145,
                        language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {

                            });
                            ed.on('change', function(e) {
                                $rootScope.emailTemplateInModal.text = tinyMCE.get('modalMCECandidate').getContent();
                            });
                        }
                    });
                    $(".addCandidateInInterviewPicker").datetimepicker({
                        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:ii" : "mm/dd/yyyy hh:ii",
                        startView: 2, minView: 0,
                        autoclose: true,
                        isTrigger: 0,
                        useLocalTimezone: false,
                        defaultTimezone: '+0000',
                        showTimezone: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $scope.interviewDate = $rootScope.addCandidateInInterview.date = data.date;
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInInterviewPicker').datetimepicker('getDate').getTime(), true));
                        $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.addCandidateInInterviewPicker').datetimepicker('getDate').getTime(), true));
                        $scope.$apply();
                        tinyMCE.get('modalMCECandidate').setContent($rootScope.emailTemplateInModal.text);
                    }).on('hide', function () {
                        if ($('.addCandidateInInterviewPicker').val() == "") {
                            $rootScope.addCandidateInInterview.date = null;
                        }
                        $('.addCandidateInInterviewPicker').blur();
                    });
                    $rootScope.changeTemplateInAddCandidate($rootScope.addCandidateInInterview.status);
                    $("#candidateToAddInInterview").on("change", function (e) {
                        Candidate.getContacts({"candidateId": e.val}, function (resp) {
                            var email = "";
                            angular.forEach(resp.objects, function (c) {
                                if (c.type == "email") {
                                    email = c.value;
                                }
                            });
                            $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                            $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
                        });
                        $rootScope.candnotify.fullName = $(this).select2('data').text;
                    });
                },0);
            });
            $scope.modalInstance.closed.then(function() {
                $rootScope.candnotify.show = false;
                tinyMCE.remove()
            });
        };
        $scope.validateNotifyModal = function () {
            if(!$rootScope.candnotify.sendMail) {
                $('.candEmail').addClass('empty');
                notificationService.error($filter('translate')("enter_email_candidate"));
            } else if (!$scope.interviewDate) {
                $('.addCandidateInInterviewPicker').addClass('empty');
            }
        };
        $("#candidateToAddInInterview").on("change", function (e) {
            Candidate.getContacts({"candidateId": e.val}, function (resp) {
                var email = "";
                angular.forEach(resp.objects, function (c) {
                    if (c.type == "email") {
                        email = c.value;
                    }
                });
                $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
            });
            $rootScope.candnotify.fullName = $(this).select2('data').text;
        });

        $rootScope.saveCandidateInVacancy = function (sendTemplate, flag) {
            if(!$rootScope.candnotify.sendMail && flag){
                notificationService.error($filter('translate')("enter_email_candidate"));
                return;
            }
            if($rootScope.me.recrutRole != 'client') {
                if (!$rootScope.addCandidateInInterviewbuttonClicked ) {
                    $rootScope.errorMessageForAddCandidate.show = false;
                    if ($("#candidateToAddInInterview").select2('data') == null) {
                        $rootScope.errorMessageForAddCandidate.show = true;
                        $rootScope.errorMessageForAddCandidate.text = $filter('translate')('You must select a candidate');
                        return;
                    }
                    var candidateObj = $rootScope.addCandidateInInterview;
                   $rootScope.errorMessageForAddCandidate.show = false;
                    var candidateId = $("#candidateToAddInInterview").select2('data') !== null ? $("#candidateToAddInInterview").select2('data').id : null;
                    var candidateFullName = $("#candidateToAddInInterview").select2('data') !== null ? $("#candidateToAddInInterview").select2('data').text : null;
                    candidateObj.date = $('.addCandidateInInterviewPicker').datetimepicker('getDate') != null && (candidateObj.status.withDate || candidateObj.status.type == 'interview') ? $('.addCandidateInInterviewPicker').datetimepicker('getDate') : null;
                    $rootScope.addCandidateInInterviewbuttonClicked = true;
                    $scope.interviewDate = candidateObj.date;
                    if(!sendTemplate) {
                        $rootScope.closeModal();
                    }

                    vacancyAddInterview (Vacancy, $scope.vacancy.vacancyId, $scope.vacancy.position,
                        candidateId,
                        candidateObj.comment,
                        candidateObj.status.customInterviewStateId? candidateObj.status.customInterviewStateId : candidateObj.status.value,
                        candidateObj.date, function (resp) {
                            $rootScope.addCandidateInInterviewbuttonClicked = false;
                            if (!$rootScope.$$phase) {
                                $rootScope.$apply();
                            }

                            if (!$scope.vacancy.interviews) {
                                $scope.vacancy.interviews = [];
                            }
                            if (candidateObj.status.customInterviewStateId) {
                                resp.object.state = candidateObj.status.name;
                                resp.object.customStage = true;
                            } else {
                                resp.object.state = candidateObj.status.value;
                            }
                            $scope.vacancy.interviews.push(resp.object);

                            $rootScope.autocomplete.interviews = $scope.vacancy.interviews;

                            $scope.tableParams.reload();
                            //$scope.tableParams2.reload();

                            $scope.numberOfCandidatesInDifferentStates();
                            if ($scope.vacancy && $scope.vacancy.status == "open" && resp.object && resp.object.vacancyId && resp.object.vacancyId.status == "inwork") {
                                $scope.vacancy.status = "inwork";
                                $scope.getLastEvent(2);
                            } else {
                                $scope.getLastEvent();
                            }
                            $rootScope.addCandidateInInterview = {
                                id: "",
                                comment: "",
                                status: "longlist",
                                date: null,
                                showSelect: "",
                                showText: false,
                                text: "",
                                addedInVacancy: false,
                                select2Obj: null
                            };
                            $("#candidateToAddInInterview").select2("val", null);
                            $('.addCandidateInInterviewPicker').val("");
                        }, function (resp) {
                            $rootScope.addCandidateInInterviewbuttonClicked = false;
                            $rootScope.errorMessageForAddCandidate.show = true;
                            $rootScope.errorMessageForAddCandidate.text = resp.message;
                        }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);

                    Person.getActivePersonCount(function (resp) {
                        $scope.countActivePersons = resp.message;
                        if ($scope.countActivePersons == 1 && ($scope.vacancy.responsiblesPerson == undefined || $scope.vacancy.responsiblesPerson.length == 0)) {
                            Vacancy.one({"localId": $scope.vacancy.localId}, function (resp) {
                                console.log("tru123e");
                                $scope.vacancy.responsiblesPerson = resp.object.responsiblesPerson;
                            });
                        }

                    });
                    if($rootScope.candnotify.send && sendTemplate){
                        var candnotify = $rootScope.candnotify;
                        var changeObj = $rootScope.changeStatusOfInterviewInVacancy;

                        Mail.sendMailByTemplate({
                            toEmails: candnotify.sendMail,
                            vacancyId: $scope.vacancy.vacancyId,
                            candidateId: candidateId,
                            fullName: candidateFullName,
                            email: $rootScope.emailTemplateInModal.email,
                            date: candidateObj.date.getTime(),
                            lang: $scope.lang,
                            template: {
                                type: $rootScope.emailTemplateInModal.type,
                                title: $rootScope.emailTemplateInModal.title,
                                text: $rootScope.emailTemplateInModal.text,
                                fileId: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileId : null,
                                fileName: $rootScope.fileForSave.length > 0 ? $rootScope.fileForSave[0].fileName : null
                            }
                        }, function (resp) {
                            if(resp.status == 'ok'){
                                notificationService.success($filter('translate')('Letter sent'));
                                $('.addCandidateInInterview.modal').modal('hide');
                                $rootScope.closeModal();
                            }else{
                                notificationService.error($filter('translate')('Error connecting integrate with email. Connect it again'));
                            }
                        });
                    }
                }
            } else {
                $rootScope.closeModal();
                notificationService.error($filter('translate')('This feature is not available for your role'));
            }
        };

        $rootScope.addFromAdvice = {
            id: "",
            comment: "",
            status: "longlist",
            date: null,
            showSelect: "",
            showText: false,
            text: "",
            state: "state"
        };
        $rootScope.errorAddFromAdvice = {
            show: false,
            text: ""
        };
        $scope.showFromAdvice = function (candidateId, title) {
            $rootScope.addFromAdvice.status = {
                value: "longlist",
                withDate: false,
                defaultS: true,
                single: false,
                added: true,
                active_color: "longlist_color",
                useAnimation: false,
                count: 0,
                forAdd: true
            };
            $rootScope.addFromAdvice.candidateId = candidateId;
            $rootScope.addFromAdvice.title = title;
            $rootScope.addFromAdvice.state = "vacancy";
            var value = $filter('filter')($scope.VacancyStatus, {used: true});
            $rootScope.addFromAdvice.statusObject = $scope.VacancyStatusFiltered;
            $('.addFromAdvice').modal('show');
            $rootScope.candnotify = {};
            $rootScope.candnotify.show = false;
            Candidate.getContacts({"candidateId": candidateId}, function (resp) {
                var email = "";
                angular.forEach(resp.objects, function (c) {
                    if (c.type == "email") {
                        email = c.value;
                    }
                });
                $rootScope.candnotify.emails = email.replace(/ /gi, "").split(",");
                $rootScope.candnotify.sendMail = $rootScope.candnotify.emails[0];
            });
            $rootScope.candnotify.show = false;
            $rootScope.candnotify.fullName = title;
            $rootScope.candnotify.send = false;
            //if (localStorageService.get("candnotify") == "false") {
            //    $rootScope.candnotify.send = false;
            //} else {
            //    $rootScope.candnotify.send = true;
            //}
        };

        $rootScope.saveFromAdvice = function () {
            $rootScope.saveFromAdviceClicked = true;
            var candidateId = $rootScope.addFromAdvice.candidateId;
            if ($rootScope.addFromAdvice.status.customInterviewStateId) {
                $rootScope.addFromAdvice.status.value = $rootScope.addFromAdvice.status.customInterviewStateId;
            }
            $rootScope.errorAddFromAdvice.show = false;
            $rootScope.addFromAdvice.date = $('.addFromAdvicePicker').datetimepicker('getDate') != null ? $('.addFromAdvicePicker').datetimepicker('getDate') : null;
            if ($rootScope.saveFromAdviceClicked) {
                vacancyAddInterviewFromAdvice(Vacancy, $scope.vacancy.vacancyId, $scope.vacancy.position,
                    candidateId,
                    $rootScope.addFromAdvice.comment,
                    $rootScope.addFromAdvice.status.value,
                    $rootScope.addFromAdvice.date, function (resp) {
                        $rootScope.saveFromAdviceClicked = false;
                        $('.addFromAdvice').modal('hide');
                        if (!$scope.vacancy.interviews) {
                            $scope.vacancy.interviews = [];
                        }
                        $scope.vacancy.interviews.push(resp.object);
                        $scope.tableParams.reload();
                        //$scope.tableParams2.reload();
                        $scope.numberOfCandidatesInDifferentStates();
                        $rootScope.addFromAdvice.comment = "";
                        $rootScope.addFromAdvice.id = null;
                        $rootScope.addFromAdvice.status = null;
                        $rootScope.addFromAdvice.date = null;
                        //$scope.reloadAdvice();
                        $scope.getLastEvent();
                    }, function (resp) {
                        $rootScope.errorAddFromAdvice.show = true;
                        $rootScope.errorAddFromAdvice.text = resp.message;
                    }, frontMode, notificationService, googleService, $scope.selectedCalendar != undefined ? $scope.selectedCalendar.id : null, $filter, $translate.use(), $rootScope);
            }
        };

        $scope.goToReportPage = function () {
            var path = 'vacancy/report/' + $scope.vacancy.localId;
            $location.path(path);
        };

        $scope.openQuestionMenu = function () {
            var questionCont = $("#noticesQuestion");
            if (questionCont.css('display') == 'none') {
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0.11)"});
                questionCont.show('slide', {direction: 'left'}, 400);
                $(document).mouseup(function (e) {
                    var noticesElement = $("#agreedQuestionOuter");
                    if ($("#agreedQuestionOuter").has(e.target).length === 0) {
                        questionCont.hide();
                        $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                        $(document).off('mouseup');
                    }
                });
            } else {
                questionCont.hide();
                $("#agreedQuestion").css({"background-color": "rgba(0, 0, 0, 0)"});
                $(document).off('mouseup')
            }
        };

        $scope.denyQuestion = function () {
            $.ajax({
                url: "/hr/vacancy/saveAnswer",
                type: "POST",
                data: '{"value":"NO","vacancyId":"' + $scope.vacancy.vacancyId + '"}',
                //data: $("#questionForm").serialize(),
                dataType: "json",
                contentType: "application/json",
                success: function (data) {
                    $rootScope.changeQuestionWindow();
                }
            });
        };

        $scope.showDeleteInterview = function (client) {

            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-remove-candidate.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.client = client;
            $rootScope.candidateRemoveId = client.candidateId.candidateId;
            $rootScope.candidateInterviewId = client.interviewId;
            $rootScope.deleteInterview.comment = "";
            //$rootScope.deleteInterview.text = $filter('translate')('Delete')
            //+" " + client.candidateId.fullName + "  " + $filter('translate')("from vacancy");
        };

        $rootScope.deleteInterview = function () {
            Vacancy.removeInterview({
                vacancyId: $scope.vacancy.vacancyId,
                candidateId: $rootScope.candidateRemoveId,
                comment: $rootScope.deleteInterview.comment
            }, function (resp) {
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('Candidate removed') + " " + $filter('translate')('from vacancy'));
                }
                $rootScope.closeModal();
                $rootScope.deleteInterview.comment = "";
                console.log('length ', $scope.dataForVacancy.length,$scope.a.searchNumber)
                if($scope.dataForVacancy.length == 1 && $scope.a.searchNumber > 0) {
                    $scope.tableParams.page($scope.a.searchNumber - 1);
                    $scope.tableParams.reload();
                } else {
                    $scope.tableParams.reload();
                }
                $scope.numberOfCandidatesInDifferentStates();
                $scope.getLastEvent();
            }, function (err) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            })
        };
        $scope.changeCommentFlag = function(history){
            history.editCommentFlag = !history.editCommentFlag;
            $scope.editComment = history.descr;
        };
        $scope.changeComment = function (action, comment) {
            if(comment.length > 0){
                Action.editAction({"comment": comment, "actionId": action.actionId}, function (resp) {
                    if (resp.status && angular.equals(resp.status, "error")) {
                        notificationService.error(resp.message);
                    }
                    else {
                        action.editCommentFlag = false;
                        action.descr = resp.object.descr;
                        action.new_komment = '';
                        action.dateEdit = resp.object.dateEdit;
                    }
                });
            }
        };

        $scope.showDeleteComment = function (resp) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-comment-candidate.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $rootScope.commentRemove = resp;
            $rootScope.commentRemoveId = resp.actionId;
        };

        $rootScope.deleteComment = function () {
            Action.removeMessageAction({
                actionId: $rootScope.commentRemoveId
            }, function (resp) {
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('Comment removed'));
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $rootScope.closeModal();
                $scope.updateVacancy();
            })
        };
        $scope.showCommentsFirstTime = function () {
            Service.history({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "candidateId": null,
                "clientId": null,
                "page": {"number": 0, "count": $scope.historyLimit},
                "type": 'all_actions'
            }, function (res) {
                $scope.history = res.objects;
                $scope.historyLimit = res.objects !== undefined ? res.size : null;
                $scope.historyTotal = res.objects !== undefined ? res.total : null;
            });
        };

        $scope.changeHistoryType = function () {
            Service.history({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "candidateId": null,
                "clientId": null,
                "page": {"number": 0, "count": $scope.historyLimit},
                "type": $scope.historyType.value
            }, function (res) {
                $scope.history = res.objects;
                $scope.historyLimit = res.objects !== undefined ? res.size : null;
                $scope.historyTotal = res.objects !== undefined ? res.total : null;
                var array = [];
                angular.forEach($scope.history, function (value) {
                    if (value.stateNew && value.type == "set_interview_status") {
                        array = value.stateNew.split(",");
                        angular.forEach($scope.customStages, function (val) {
                            angular.forEach(array, function (resp) {
                                if (val.customInterviewStateId == resp) {
                                    array[array.indexOf(val.customInterviewStateId)] = val.name;
                                }
                            });
                        });
                        value.stateNew = array.toString();
                    }
                });

            });
        };

        $scope.searchAdvicesFunc = function () {
            $rootScope.searchAdvies = true;
        };
        $scope.sortableOptions = {
            draggable: ".moveble",
            onSort: function (evt) {
                $scope.$apply(function() {
                    let resortedStages = [];
                    let notMovable = [];
                    notMovable =_.filter($scope.VacancyStatusFiltered, {'movable': false});
                    notMovable.forEach(oneStage => {
                        //longlist always first, approved - always last, for vacancy funnel !
                        if(oneStage.value == 'longlist')
                            resortedStages.push(oneStage);
                    });
                    $scope.movableStages.forEach(function (obj) {
                        resortedStages.push(obj);
                    });
                    notMovable.forEach(oneStage => {
                        //longlist always first, approved - always last, for vacancy funnel !
                        if(oneStage.value != 'longlist')
                        resortedStages.push(oneStage);
                    });
                    var checkValue = [];
                    $scope.extraStatusObj.show = false;
                    angular.forEach(resortedStages, function (val) {
                        if (val.added && !val.name) {
                            checkValue.push(val.value)
                        }
                        if (val.name) {
                            checkValue.push(val.customInterviewStateId)
                        }
                    });
                    Vacancy.setInterviewStatus({
                        vacancyId: $scope.vacancy.vacancyId,
                        interviewStatus: checkValue.toString()
                    }, function (val) {
                        $scope.extraStatusObjSucces.show = true;
                        $scope.getLastEvent();
                    });
                });
            }
        };
        $scope.showEditStage = function (status) {
            $rootScope.addingRefuseStage = false;
            $rootScope.editedStage.type = status.type;
            $rootScope.editedStage.name = status.name;
            $rootScope.editedStage.customInterviewStateId = status.customInterviewStateId;
            $rootScope.editedStage.status = status.status;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/edit-status-of-interview-in-vacancy.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            //$('.editStatusOfInterviewInVacancy.modal').modal('show');
        };
        $scope.showEditRefuseStage = function (status) {
            $rootScope.addingRefuseStage = true;
            $rootScope.editedStage.type = status.type;
            $rootScope.editedStage.name = status.name;
            $rootScope.editedStage.customInterviewStateId = status.customInterviewStateId;
            $rootScope.editedStage.status = status.status;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/edit-status-of-interview-in-vacancy.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            //$('.editStatusOfInterviewInVacancy.modal').modal('show');
        };

        $rootScope.editStatus = function () {
            vacancyStages.edit({
                type: $rootScope.editedStage.type,
                name: $rootScope.editedStage.name,
                customInterviewStateId: $rootScope.editedStage.customInterviewStateId,
                status: $rootScope.editedStage.status
            }, function (resp) {
                if (resp.status == 'ok') {
                    $rootScope.closeModal();
                    //$('.editStatusOfInterviewInVacancy.modal').modal('hide');
                    var checkValue = [];
                    $scope.extraStatusObj.show = false;
                    resp.object.value = resp.object.name;
                    resp.object.movable = true;
                    resp.object.count = 0;
                    resp.object.added = true;
                    angular.forEach($scope.VacancyStatusFiltered, function (val) {
                        if (val.customInterviewStateId == resp.object.customInterviewStateId) {
                            val.name = resp.object.name;
                            val.type = resp.object.type;
                            val.value = resp.object.value;
                        }
                    });
                    angular.forEach($scope.customStages, function (val) {
                        if (val.customInterviewStateId == resp.object.customInterviewStateId) {
                            val.name = resp.object.name;
                            val.type = resp.object.type;
                            val.value = resp.object.value;
                        }
                    });
                }
            });
        };

        $scope.showAddStage = function () {
            $rootScope.addingRefuseStage = false;
            $rootScope.addedStage.type = 'common';
            $rootScope.addedStage.name = '';
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-add-new-stage.html',
                size: '',
                resolve: function(){

                }
            });
        };
        $scope.showAddRefuseStage = function () {
            $rootScope.addingRefuseStage = true;
            $rootScope.addedStage.type = 'refuse';
            $rootScope.addedStage.name = '';
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-add-new-stage.html',
                size: '',
                resolve: function(){

                }
            });
        };
        $rootScope.addStatus = function () {
            $scope.errorDuplicateStage = false;
            angular.forEach($scope.customStages, function (val) {
                if (val.name == $rootScope.addedStage.name) {
                    $scope.errorDuplicateStage = true;
                }
            });
            if (!$scope.errorDuplicateStage) {
                vacancyStages.add({
                    type: $rootScope.addedStage.type,
                    name: $rootScope.addedStage.name
                }, function (resp) {
                    if (resp.status == 'ok') {
                        $rootScope.closeModal();
                        var checkValue = [];
                        $scope.extraStatusObj.show = false;
                        resp.object.value = resp.object.name;
                        if(resp.object.type != 'refuse'){
                            resp.object.movable = true;
                            $scope.VacancyStatusFiltered.splice(1, 0, resp.object);
                        }else{
                            resp.object.movable = false;
                            $scope.VacancyStatusFiltered.splice($scope.VacancyStatusFiltered.length, 0, resp.object);
                        }
                        resp.object.count = 0;
                        resp.object.added = true;
                        $scope.customStages.splice(0, 0, resp.object);
                        angular.forEach($scope.VacancyStatusFiltered, function (val) {
                            if (val.added && !val.name) {
                                checkValue.push(val.value)
                            }
                            if (val.name) {
                                checkValue.push(val.customInterviewStateId)
                            }
                        });
                        $scope.movableStages = _.filter($scope.VacancyStatusFiltered, 'movable');
                        Vacancy.setInterviewStatus({
                            vacancyId: $scope.vacancy.vacancyId,
                            interviewStatus: checkValue.toString()
                        }, function (val) {
                            if (val.status == "ok") {
                                //$scope.VacancyStatusFiltered.push(resp.object);

                                $scope.getLastEvent();
                            } else {
                                notificationService.error(resp.message);
                            }
                        });
                    }
                });
            } else {
                notificationService.error($filter('translate')('Stage with the same name already exists'));
            }

        };
        $scope.deleteCustomStageFromCompany = function (status) {
            if (status.added == false) {
                vacancyStages.edit({
                    customInterviewStateId: status.customInterviewStateId,
                    name: status.name,
                    status: "D",
                    type: status.type
                }, function (val) {
                    if (val.status == "ok") {
                        var index = $scope.customStages.indexOf(status);
                        $scope.customStages.splice(index, 1);
                        if (status.added) {
                            var index = $scope.VacancyStatusFiltered.indexOf(status);
                            $scope.VacancyStatusFiltered.splice(index, 1);
                        }
                        $scope.saveStatusInServer();
                    } else if (val.code == 'existsInOtherVacancy') {
                        $scope.extraStatusObj.show = true;
                        $scope.extraStatusObj.messageText = 'existsInOtherVacancy';
                        $scope.existInVacancyErrorVacancy = val.object
                    } else {
                        notificationService.error(val.message);
                    }
                });
            } else {
                $scope.extraStatusObj.show = true;
                if(status.type == 'refuse'){
                    $scope.extraStatusObj.messageText = 'deleteRefuse';
                }else{
                    $scope.extraStatusObj.messageText = 'deleteStatus';
                }
            }
        };
        $scope.deleteCustomStage = function (status) {
            if (status.count == 0) {
                status.added = false;
                var index = $scope.VacancyStatusFiltered.indexOf(status);
                $scope.VacancyStatusFiltered.splice(index, 1);
                $scope.saveStatusInServer();
            } else {
                $scope.extraStatusObj.show = true;
                $scope.extraStatusObj.messageText = 'deleteStatus';
            }
        };
        $scope.saveStagesForAllVacancies = function () {
            $scope.saveForAllVacancies = null;
            if ($rootScope.me.recrutRole == 'admin') {
                if (!$scope.saveForAllVacancies) {
                    var array = [];
                    angular.forEach($scope.VacancyStatusFiltered, function (res) {
                        if (res.customInterviewStateId) {
                            array.push(res.customInterviewStateId)
                        } else {
                            array.push(res.value)
                        }
                    });
                    $scope.saveForAllVacancies = array;
                }
                Company.setDefaultInterviewStates({
                    states: $scope.saveForAllVacancies
                }, function (resp) {
                    if (resp.status == 'ok') {
                        notificationService.success($filter('translate')('Default stages for vacancies has been saved'))
                    } else {
                        notificationService.error(resp.message);
                    }
                })
            } else {
                notificationService.error($filter('translate')('This feature is available only to administrators'));
            }
        };
        $scope.exportToExcel = function () {
            $scope.loadingExcel = true;
            $scope.paramForExcell.interviewState = $scope.activeName;
            Candidate.createExcel($scope.paramForExcell, function (resp) {
                if (resp.status == 'ok') {
                    var sr = $rootScope.frontMode == "war" ? "/hr/" : "/hrdemo/";
                    $('#export_in_excel')[0].href = sr + 'getapp?id=' + resp.object;
                    $('#export_in_excel')[0].click();
                }
                if (resp.code == 'emptyExportExcel') {
                    notificationService.error($filter('translate')('No candidates for export according to criteria'));
                    $scope.loadingExcel = false;
                }
                $scope.loadingExcel = false;

            });
        };

        $scope.roundMinutes = function(date) {

            date.setHours(date.getHours());
            date.setMinutes(0);

            return date;
        };
        $rootScope.updateTaskInModal = function(){
            $scope.updateTasks();
            $scope.getLastEvent();
        };
        setDatePickerForOnce($rootScope,$translate, Task);
        $(".withoutTimeTask").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy hh:00" : "mm/dd/yyyy hh:00",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        }).on('changeDate', function (data) {
            $rootScope.editableTask.targetDate = $('.withoutTimeTask').datetimepicker('getDate');
            $scope.roundMinutes($rootScope.editableTask.targetDate);
            Task.changeTargetDate({
                "taskId": $rootScope.editableTask.taskId,
                "date":$rootScope.editableTask.targetDate
            }, function(resp){
                $scope.updateTasks();
                $scope.getLastEvent();
            })
        }).on('hide', function () {
            if ($('.withoutTimeTask').val() == "") {
                $rootScope.editableTask.date = "";
            }
            $('.withoutTimeTask').blur();
        });

        $scope.isModalOpened = function () {
            if($scope.modalEditTaskToCandidateOpened == true){
                $rootScope.responsiblePersons = [];
            }
            $scope.modalEditTaskToCandidateOpened = false;
        };

        $scope.showModalAddTaskToCandidate = function () {
            angular.forEach($rootScope.persons, function(resp){
                resp.notShown = false;
            });
            $rootScope.responsiblePersons = [];
            $('.addTaskInCandidate').modal('show');
        };

        $scope.showModalResume = function(file){
            showModalResume(file,$scope,$rootScope,$location,$sce);
        };
        $scope.showModalImg = function (file) {
            showModalImg(file, $scope, $rootScope, $location, $sce);
        };
        $rootScope.closeModalResume = function(){
            $('.showResume.modal').modal('hide')
        };
        $scope.MenuEdDelFile = function(file){
            file.showMenuEdDelFile = true;
            $('body').mouseup(function (e) {
                var element = $(".editFileMenu");
                if ($(".editFileMenu").has(e.target).length == 0) {
                    file.showMenuEdDelFile = false;
                    $(document).off('mouseup');
                    $scope.$apply();
                }
            });
        };
        $scope.showEditFileNameFunc = function(file){
            file.showEditFileName = !file.showEditFileName;
            file.showMenuEdDelFile = !file.showMenuEdDelFile;
            $scope.showMenuEdDelFile = false;
        };
        $scope.editFileName = function(data){
            File.changeFileName({
                "fileId":data.fileId,
                "name":data.fileName
            },function(resp){
                if(resp.status == 'ok'){
                    data.showEditFileName = false;
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.changePage = function(params,page){
            var maxValue = $filter('roundUp')(params.settings().total/params.count());
            if(page){
                if(page.number >= 1 && page.number <= maxValue){
                    //params.page(page.number);
                    $scope.a.searchNumber = page.number;
                    var input = $('#number');
                    input.val($scope.a.searchNumber);
                    input.trigger('#number');
                    $location.$$absUrl = $location.$$absUrl.split("&")[0];
                    if(!$scope.showSearchCandidate && $location.$$absUrl.indexOf('&task=') == -1){
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&stage=' + $scope.activeName;
                    }else{
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&search=' + $scope.searchCandidateName;
                    }
                }
            }
        };

        $scope.changeInputPage = function(params,searchNumber){
            var searchNumber = Math.round(searchNumber);
            var maxValue = $filter('roundUp')(params.settings().total/params.count());
            if(searchNumber){
                if(searchNumber >= 1 && searchNumber <= maxValue){
                    params.page(searchNumber);
                    $scope.a.searchNumber = searchNumber;
                }
            }
            if(searchNumber){
                if(searchNumber >= 1 && searchNumber <= maxValue){
                    //params.page(searchNumber);
                    $scope.a.searchNumber = searchNumber;
                    $location.$$absUrl = $location.$$absUrl.split("&")[0];
                    if(!$scope.showSearchCandidate){
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&stage=' + $scope.activeName;
                    }else{
                        $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&search=' + $scope.searchCandidateName;
                    }
                }
            }
        };
        $scope.updateSearch = function(){
            if(!$scope.searchCandidateName){
                $scope.searchCandidateName = null;
            }
            $scope.tableParams.reload();
            $location.$$absUrl = $location.$$absUrl.split("&")[0];
            $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&search=' + $scope.searchCandidateName;
        };
        $scope.showSearchCandidateFunc = function(){
            $scope.visiable = false;
            $scope.noAccess = false;
            $scope.vacancySearchParams.state = null;
            $scope.tableParams.$params.page = 1;
            $scope.a.searchNumber = 1;
            var input = $('#number');
            input.val($scope.a.searchNumber);
            input.trigger('#number');
            $scope.loadingCandidates = true;
            $scope.showSearchCandidate = true;
            $scope.activeName = null;
            $scope.tableParams.reload();
            $location.$$absUrl = $location.$$absUrl.split("&")[0];
            $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&search=' + $scope.searchCandidateName + '&allInOne';
        };
        $scope.hideSearchCandidateFunc = function(){
            $scope.tableParams.$params.page = 1;
            $scope.a.searchNumber = 1;
            var input = $('#number');
            input.val($scope.a.searchNumber);
            input.trigger('#number');
            $scope.searchCandidateName = null;
            $scope.loadingCandidates = true;
            $scope.showSearchCandidate = false;
            $scope.activeName = 'longlist';
            $scope.activeCustomStageName = '';
            $scope.tableParams.reload();
            if($location.$$absUrl.indexOf('&task=') == -1) {
                $location.$$absUrl = $location.$$absUrl.split("&")[0];
                $location.$$absUrl = $location.$$absUrl + '&page=' + $scope.a.searchNumber + '&stage=' + $scope.activeName;
            }

        };
        window.onhashchange = function() {
            if(getUrlVars($location.$$absUrl).page){
                $scope.a.searchNumber = parseInt(getUrlVars($location.$$absUrl).page);
                if(getUrlVars($location.$$absUrl).stage){
                    $scope.activeName = getUrlVars($location.$$absUrl).stage;
                    $scope.showSearchCandidate = false;
                }else if(getUrlVars($location.$$absUrl).search){
                    $scope.activeName = null;
                    $scope.showSearchCandidate = true;
                    if(getUrlVars($location.$$absUrl).search.length == 0 || getUrlVars($location.$$absUrl).search == 'null' || getUrlVars($location.$$absUrl).search == 'null'){
                        $scope.searchCandidateName = null;
                    }else{
                        $scope.searchCandidateName = decodeURIComponent(getUrlVars($location.$$absUrl).search);
                    }
                }
            }else{
                $scope.a.searchNumber = 1;
                $scope.searchCandidateName = null;
                $scope.activeName = 'longlist';
            }
            $scope.tableParams.page($scope.a.searchNumber);
            $scope.$apply();
        };

        $scope.updateOrgPages = function(){
            Company.orgPages(function(resp){
                $rootScope.fbPages = resp.objects;
                for (var i = $rootScope.fbPages.length - 1; i >= 0; i--) {
                    if ($rootScope.fbPages[i].status === 'D') {
                        $rootScope.fbPages.splice(i, 1);
                    }
                }
                angular.forEach($rootScope.fbPages, function (val) {
                    if (val.facebookPageId) {
                        angular.forEach($scope.vacancy.publish, function (valStatus) {
                            if (valStatus.pageId == val.facebookPageId) {
                                val.vacancyAdded = true;
                            }
                        });
                    }
                });
            });
        };

        $rootScope.addVacancyToFacebook = function(tab){
            Vacancy.addPublish({
                vacancyId: $scope.vacancy.vacancyId,
                type: 'facebook_page',
                pageId: tab.facebookPageId
            },function(resp){
                if(resp.status == 'ok'){
                    $scope.updateVacancy();
                    $('.shareFbPagesForVacancy.modal').modal('hide');
                }else{
                    notificationService.error(resp.message);
                }
            })
        };
        $scope.removeEmailTemplate = function(){
            Mail.removeTemplate({id:$scope.emailTemplate.mailTemplateId}, function(resp){
                if(resp.status == 'ok'){
                    $scope.showAddEmailTemplate = false;
                    $scope.getEmailTemplates();
                }else{
                    notificationService.error(resp.message);
                }
            })
        };



        $scope.sendCandidatesToClient = function() {
            Vacancy.one({localId: $routeParams.id}, function (resp) {
                if(!resp.object.interviews || resp.object.interviews.length == 0) {
                    notificationService.error($filter('translate')('Please add the candidates to this stage'));
                    return;
                } else {
                    $location.path("/email/vacancy/" + $scope.vacancy.localId);
                }
            });

        };

        $scope.showEditEmailTemplate = function(template){
            $scope.activeTemplate = template.type;
            $scope.fileForSave = [];
            $scope.emailTemplate = {
                mailTemplateId: template.mailTemplateId,
                type: template.type,
                name: template.name,
                title: template.title,
                text: template.text,
                vacancyId: $scope.vacancy.vacancyId,
                fileId: template.fileId,
                fileName: template.fileName
            };
            if($scope.emailTemplate.fileId && $scope.emailTemplate.fileName){
                $scope.fileForSave.push({"fileId": $scope.emailTemplate.fileId, "fileName": $scope.emailTemplate.fileName});
            }
            $scope.emailTemplateForRender.text = $scope.emailTemplate.text;
            //if(!$scope.$$phase) {
            //    $scope.$evalAsync();
            //}
            $scope.showAddEmailTemplate = true;
            $scope.updateRenderedTitle();
        };
        $rootScope.showDeleteFbPages = function (tab) {
            $scope.deletedTab = tab;
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/vacancy-remove-fb-tab.html',
                size: '',
                resolve: function(){

                }
            });
        };
        $rootScope.deleteVacancyOnFacebook = function(){
            Vacancy.deletePublish({
                publishId: $scope.deletedTab.publishId
            },function(resp){
                if(resp.status == 'ok'){
                    $scope.updateVacancy();
                    $scope.updateOrgPages();
                    $rootScope.closeModal();
                }else{
                    notificationService.error(resp.message);
                }
            })
        };
        //Vacancy.all(Vacancy.searchOptions(), function(response) {
        //    $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        //});
        $scope.updateRenderedTitle = function(){
            /* rendering title */
            $scope.renderedTitle = $scope.emailTemplate.title;
            $scope.renderedTitle =  $scope.renderedTitle.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[candidate name\]\]/g, $rootScope.staticEmailTemplate.candidateName);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[vacancyName\]\]/g, $scope.vacancy.position);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($rootScope.staticEmailTemplate.date),true);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[recruiter's phone\]\]/g, $rootScope.staticEmailTemplate.phoneWork);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype);
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
            $scope.renderedTitle = $scope.renderedTitle.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
            /* rendering title end */
        };

        $rootScope.addEmailFromWhatSend = function(email){
            if($rootScope.emailThatAlreadyUsed){
                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace($rootScope.emailThatAlreadyUsed.email, email.email);
            }
            $rootScope.emailTemplateInModal.email = [];
            $rootScope.emailThatAlreadyUsed = email;
            localStorage.emailThatAlreadyUsed = email.email;
            $rootScope.emailTemplateInModal.email = $rootScope.emailTemplateInModal.email + email.email;
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.emailTemplateInModal.email);
            tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
        };
        $rootScope.addEmailFromWhatSendInCandidate = function(email){
            if($rootScope.emailThatAlreadyUsed){
                $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace($rootScope.emailThatAlreadyUsed.email, email.email);
            }
            $rootScope.emailTemplateInModal.email = [];
            $rootScope.emailThatAlreadyUsed = email;
            localStorage.emailThatAlreadyUsed = email.email;
            $rootScope.emailTemplateInModal.email = $rootScope.emailTemplateInModal.email + email.email;
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.emailTemplateInModal.email);
            tinyMCE.get('modalMCECandidate').setContent($rootScope.emailTemplateInModal.text);
        };
        $scope.addEmailFromLocalStorage = function(email){
            angular.forEach($rootScope.me.emails,function(resp){
                if(resp.email == localStorage.emailThatAlreadyUsed){
                    $rootScope.addEmailFromWhatSend(resp);
                }
            })
        };
        $scope.addEmailInDescriptionFromLocalStorage = function(email){
            angular.forEach($rootScope.me.emails,function(resp){
                if(resp.email == localStorage.emailThatAlreadyUsed){
                    $rootScope.addEmailFromWhatSendInDescription(resp);
                }
            })
        };
        $rootScope.addEmailFromWhatSendInDescription = function(email){
            $rootScope.sendEmailTemplate.template.email = [];
            $rootScope.sendEmailTemplate.template.email = $rootScope.sendEmailTemplate.template.email + email.email;
            $rootScope.sendEmailTemplate.email = $rootScope.sendEmailTemplate.template.email;
            $rootScope.sendEmailTemplate.template.text = $rootScope.sendEmailTemplate.template.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.sendEmailTemplate.template.email);
            tinyMCE.get('sendVacancyModalMCE').setContent($rootScope.sendEmailTemplate.template.text);
        };
        $rootScope.goToEditTemplate = function(){
            localStorage.editTemplate = $rootScope.emailTemplateInModal.type
        };
        $scope.setDefaultTemplate = function(){
            Mail.getDefaultTemplate({type: $scope.emailTemplate.type},function(resp){
                $scope.emailTemplate.text = resp.object.text;
                $scope.emailTemplate.title = resp.object.title;
                $scope.updateRenderedTitle();
            })
        };
        $scope.showHideTinyMce = function(){
            $scope.showRenderedTinyMce = !$scope.showRenderedTinyMce;
        };
        $rootScope.setDocCounter = function(){
            $scope.currentDocPreviewPage = 0;
        };
        $scope.prevDoc = function(){
            $scope.currentDocPreviewPage -= 1;
        };
        $scope.saveEmailTemplate = function () {
            if($scope.fileForSave.length > 0){
                $scope.emailTemplate.fileId = $scope.fileForSave[0].fileId;
                $scope.emailTemplate.fileName = $scope.fileForSave[0].fileName;
            }
            var templateError = false;
            angular.forEach($scope.emailTemplate.text.split(" "),function(data){
                var i = data.indexOf("//");
                if(i > 0){
                    if(data.indexOf("http:") == -1 && data.indexOf("https:") == -1){
                        templateError = true;
                    }
                }
            });
            if(!templateError){
                if(!$scope.emailTemplate.mailTemplateId){
                    delete $scope.emailTemplate["mailTemplateId"];
                    Mail.createTemplate($scope.emailTemplate,function(resp){
                        if(resp.status == 'ok'){
                            $scope.showAddEmailTemplate = false;
                            $scope.getEmailTemplates();
                        }else{
                            notificationService.error(resp.message);
                        }
                    })
                }else{
                    Mail.updateTemplate($scope.emailTemplate,function(resp){
                        if(resp.status == 'ok'){
                            $scope.showAddEmailTemplate = false;
                            $scope.getEmailTemplates();
                        }else{
                            notificationService.error(resp.message);
                        }
                    });
                }
            }else{
                notificationService.error($filter('translate')('Please delete all comments'))
            }
        };
        $scope.nextDoc = function(){
            $scope.currentDocPreviewPage += 1;
        };
        $rootScope.changeTemplateInAddCandidate = function(status){
            if(typeof status.value  !== 'undefined'){
                $rootScope.status2 = false;
            }else{
                status = JSON.parse(status);
            }

            var candidateFullName = $("#candidateToAddInInterview").select2('data') !== null ? $("#candidateToAddInInterview").select2('data').text : null;
            $rootScope.addCandidateInInterview.status = status;

            if($rootScope.addCandidateInInterview.status.value == 'interview' ||
                $rootScope.addCandidateInInterview.status.withDate ||
                $rootScope.addCandidateInInterview.status.value == 'longlist' ||
                $rootScope.addCandidateInInterview.status.value == 'shortlist' ||
                $rootScope.addCandidateInInterview.status.value == 'notafit' ||
                $rootScope.addCandidateInInterview.status.value == 'declinedoffer' ||
                $rootScope.addCandidateInInterview.status.value == 'no_response' ||
                $rootScope.addCandidateInInterview.status.value == 'no_contacts' ||
                $rootScope.addCandidateInInterview.status.type == 'interview' ||
                $rootScope.addCandidateInInterview.status.type == 'refuse'){
                var templateType = 'candidateCreateInterviewNotification';
                if($rootScope.addCandidateInInterview.status.value == 'notafit' ||
                    $rootScope.addCandidateInInterview.status.value == 'declinedoffer' ||
                    $rootScope.addCandidateInInterview.status.value == 'no_response' ||
                    $rootScope.addCandidateInInterview.status.value == 'no_contacts' ||
                    $rootScope.addCandidateInInterview.status.type == 'refuse'){
                    templateType = 'refuseCandidateInVacancy'
                }else if($rootScope.addCandidateInInterview.status.value == 'longlist' ||
                    $rootScope.addCandidateInInterview.status.value == 'shortlist'){
                    templateType = 'seeVacancy'
                }

                Mail.getTemplateVacancy({vacancyId: $scope.vacancy.vacancyId,type:templateType},function(data){
                    $rootScope.fileForSave = [];
                    $rootScope.emailTemplateInModal = data.object;
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, candidateFullName);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $scope.vacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy name\]\]/g, $scope.vacancy.position);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                    if(!$rootScope.staticEmailTemplate.skype){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/Skype:/g, "");
                    }
                    if($rootScope.staticEmailTemplate.facebook){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                    }
                    if($rootScope.staticEmailTemplate.linkedin){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }

                    tinyMCE.get('modalMCECandidate').setContent($rootScope.emailTemplateInModal.text);
                    //if(localStorage.emailThatAlreadyUsed){
                    //    $scope.addEmailFromLocalStorage(localStorage.emailThatAlreadyUsed);
                    //}
                    if($rootScope.emailTemplateInModal.fileId && $rootScope.emailTemplateInModal.fileName){
                        $rootScope.fileForSave.push({"fileId": $rootScope.emailTemplateInModal.fileId, "fileName": $rootScope.emailTemplateInModal.fileName});
                    }
                })
            }
        };

        $rootScope.changeTabOnTask = function(val){
            if (val == "Task") {
                $rootScope.editableTask.type = 'Task';
            } else if (val == "Call") {
                $rootScope.editableTask.type = 'Call';
            } else if (val == "Meeting") {
                $rootScope.editableTask.type = 'Meeting';
            }
            $rootScope.editNameTask(true);
        };
        $rootScope.changeTabOnTaskForNewTask = function(val){
            if (val == "Task") {
                $rootScope.newTask.type = 'Task';
            } else if (val == "Call") {
                $rootScope.newTask.type = 'Call';
            } else if (val == "Meeting") {
                $rootScope.newTask.type = 'Meeting';
            }
            $scope.updateTasks();
        };

        $scope.openVacancyCandidateChangeStatus = function (candidate) {
            $rootScope.changeStatusOfInterviewInVacancy.candidate = candidate;
            $rootScope.changeStatusOfInterviewInVacancy.status = '';
            $rootScope.changeStatusOfInterviewInVacancy.comment = candidate.comment;
            $rootScope.showEmployedFields = false;
            $rootScope.changeStatus = '';
            if(candidate.candidateId && typeof candidate.candidateId == 'string' && candidate.candidates) {
                $rootScope.changeStatusOfInterviewInVacancy.candidate.candidateId = candidate.candidates[0];
            }
            $scope.lang = localStorage.getItem('NG_TRANSLATE_LANG_KEY');

            $scope.modalInstance = $uibModal.open({
                animation: false,
                templateUrl: '../partials/modal/vacancy-candidate-change-status.html',
                size: '',
                resolve: function(){

                }
            });
            $scope.modalInstance.closed.then(function() {
                $rootScope.candnotify.show = false;
                tinyMCE.remove()
            });
            $scope.modalInstance.opened.then(function(){
                setTimeout(function(){
                    tinymce.init({
                        selector: '#modalMCE',
                        mode: 'exact',
                        theme: "modern",
                        height: 145,
                        language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
                        browser_spellcheck: true,
                        menubar: false,
                        statusbar: false,
                        theme_advanced_resizing: true,
                        plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
                            "searchreplace visualblocks visualchars code fullscreen",
                            "insertdatetime media nonbreaking save table directionality",
                            "template paste textcolor  "],
                        fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
                        toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
                        image_advtab: true,
                        toolbar_items_size: 'small',
                        relative_urls: false,
                        setup: function (ed) {
                            ed.on('SetContent', function (e) {

                            });
                            ed.on('change', function(e) {
                                try{
                                    $rootScope.emailTemplateInModal.text = tinymce.get('modalMCE').getContent();
                                } catch (e) {
                                    console.log('error in tinymce.get(\'modalMCE\').getContent(). It`s normal')
                                }

                            });
                        }
                    });
                    $(".changeStatusOfInterviewInVacancyPick1").datetimepicker({
                        format: "dd/mm/yyyy hh:ii",
                        startView: 2,
                        minView: 0,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.changeStatusOfInterviewInVacancy.date = data.date;
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate').getTime(), true));
                        $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[interview date and time\]\]/g, $filter('dateFormat2')($('.changeStatusOfInterviewInVacancyPick1').datetimepicker('getDate').getTime(), true));
                        $scope.$apply();
                        tinyMCE.get('modalMCE').setContent($rootScope.emailTemplateInModal.text);
                    }).on('hide', function () {
                        if ($('.changeStatusOfInterviewInVacancyPick1').val() == "") {
                            $rootScope.changeStatusOfInterviewInVacancy.date = null;
                        }
                    });
                    $(".changeStatusOfInterviewEmployed1").datetimepicker({
                        format: "dd/mm/yyyy",
                        startView: 2,
                        minView: 2,
                        autoclose: true,
                        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                        language: $translate.use()
                    }).on('changeDate', function (data) {
                        $rootScope.changeStatusOfInterviewEmployed.date = data.date;
                    }).on('hide', function () {
                        if ($('.changeStatusOfInterviewEmployed1').val() == "") {
                            $rootScope.changeStatusOfInterviewEmployed.date = null;
                        }
                    });
                },0);
            });
        };

        $scope.getFirstLetters = function(str){
            return firstLetters(str)
        };
        ////////////////////////////////////////////////////////Edit page
        $scope.sexObject = [
            {name: "Male", value: true},
            {name: "Female", value: false},
            {name: "Doesn't matter", value: null}
        ];
        $scope.sexObjectRU = [
            {name: "Мужчина", value: true},
            {name: "Женщина", value: false},
            {name: "Не имеет значения", value: null}
        ];
        $scope.lang = $translate;
        $scope.currency = Service.currency();
        $scope.employmentType = Service.employmentType();
        Client.init();
        $scope.save = function() {

            if ($scope.vacancyForm.$valid && !$scope.clickedAddVacancy) {
                $scope.vacancy.dateFinish = $('.deadLinePicker').datetimepicker('getDate') != null ? $('.deadLinePicker').datetimepicker('getDate').getTime() : null;
                $scope.vacancy.datePayment = $('.paymentPicker').datetimepicker('getDate') != null ? $('.paymentPicker').datetimepicker('getDate').getTime() : null;

                $scope.vacancy.langs = $('.select2-lang').select2('val').toString();
                deleteUnnecessaryFields($scope.vacancy);

                if ($("#pac-input").val().length == 0) {
                    $scope.vacancy.region = null;
                } else if ($("#pac-input").val().length > 0 && ($scope.vacancy.region == undefined || $("#pac-input").val() != $scope.vacancy.region.fullName)) {
                    if ($scope.region)
                        $scope.vacancy.region = $scope.region;
                }
                $scope.clickedAddVacancy = true;
                Vacancy.edit($scope.vacancy, function(resp) {
                    if (angular.equals(resp.status, "ok")) {
                        notificationService.success($filter('translate')('vacancy_save_1') + $scope.vacancy.position + $filter('translate')('vacancy_save_2'));
                        $scope.updateVacancy();
                        $scope.clickedAddVacancy = false;
                    } else {
                        $scope.clickedAddVacancy = false;
                        $scope.errorMessage.show = true;
                        $scope.errorMessage.message = resp.message;
                    }
                }, function(err) {
                    $scope.clickedAddVacancy = false;
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                });
            } else {
                $scope.vacancyForm.client.$pristine = false;
                $scope.vacancyForm.regionInput.$pristine = false;
                $scope.clickedAddVacancy = false;
            }
        };
        $scope.deleteVacancy = function() {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-vacancy.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.changeStateObject.status = "deleted";
            $rootScope.changeStateObject.position = $scope.vacancy.position;
            $rootScope.changeStateObject.placeholder = $filter('translate')("Write a comment why you want remove this vacancy");
        };
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();

        $scope.restoreCandidate = function (candidateId, localId, fullName) {
            $scope.restoreParams = {
                candidateId: candidateId,
                localId: localId,
                fullName: fullName,
                comment: '',
                candidateState: 'archived'
            };
            $scope.modalInstance = $uibModal.open({
               animation: true,
               templateUrl: '../partials/modal/restore-candidate-from-vacancy.html',
               size: '',
               scope: $scope,
               resolve: function () {

               }
            });
        };

        $scope.confirmRestoring = function () {
            Candidate.changeState({
                candidateId: $scope.restoreParams.candidateId,
                comment: $scope.restoreParams.comment,
                candidateState: $scope.restoreParams.candidateState
            }, function (resp) {
                if(resp.status != 'error') {
                    $scope.closeModal();
                    notificationService.success($filter('translate')('history_info.changed_the_status'));
                    $scope.tableParams.reload();
                } else {
                    notificationService.error(resp.message)
                }
            })
        }
        ////////////////////////////////////////////////////////End of edit page
        function resetTemplate() {
            $scope.activeTemplate = '';
            $scope.showAddEmailTemplate = false;
        }
    }]);

controller.controller('pipelineController', ["$rootScope", "$scope", "notificationService", "$filter", "$translate", "vacancyStages","Stat", "$uibModal",
    function($rootScope, $scope, notificationService, $filter, $translate, vacancyStages, Stat, $uibModal) {
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        vacancyStages.get(function(data){
            $scope.customStages = data.object.interviewStates;
        });
        Stat.getStatisticsByVacancies(function(resp){
           if(resp.status == 'ok'){
               $scope.vacancies = resp.object.positionReport;
               //Stat.countCandidateByVacancyAndLastActiveDate(function(res){
                   $scope.stagesOnVacancy = resp.objects[0].lastActiveState;
                   angular.forEach($scope.vacancies, function(data,key){
                       if(data.deadline){
                           if(differenceBetweenTwoDates(data.deadline, new Date()) < -5){
                               data.strongWarning = true;
                           }
                       }
                       angular.forEach($scope.stagesOnVacancy, function(dat){
                           if(dat.vacancyId == data.vacancyId){
                              switch(dat.num){
                                  case 1:
                                      data.lastActiveStage = dat;
                                      data.lastActiveStage.differenceInDays = differenceBetweenTwoDates(new Date(), data.lastActiveStage.lastAction);
                                      if(data.deadline){
                                          if(differenceBetweenTwoDates(data.lastActiveStage.lastAction, new Date()) < -5){
                                              data.warning = true;
                                          }
                                      }
                                      break;
                                  case 2:
                                      data.previousActiveStage = dat;
                                      break;
                              }
                           }
                       });
                   });
               //});
               //Stat.countCandidateByRefusalAndApprovedReasonsAndLastActiveDate(function(ref){
                   var refuses = resp.objects[0].refusal;
               var approved = resp.objects[0].approved;
                   angular.forEach($scope.vacancies, function(data,key){
                       angular.forEach(approved, function(dat){
                           if(dat.vacancyId == data.vacancyId){
                               data.approved = dat
                           }
                       });
                       angular.forEach(refuses, function(dat){
                           if(dat.vacancyId == data.vacancyId){
                               data.refusal = dat
                           }
                       });
                   });
               //});
           }
        });
        $scope.showPipelineDescr = function(){
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/pipeline-descr.html',
                size: '',
                resolve: function(){

                }
            });
        };
    }
]);



controller.controller('reportAllController', ["$rootScope", "$scope", "Vacancy", "Service", "$location",
    "$routeParams", "notificationService", "$filter", "$translate", "vacancyStages","Stat", "Company", "Person", "$uibModal",
    function($rootScope, $scope, Vacancy, Service, $location, $routeParams, notificationService, $filter,
             $translate, vacancyStages, Stat, Company, Person, $uibModal) {
        $rootScope.loading = true;
        $scope.regions = [];
        $scope.firstTimeLoading = 0;
        $scope.vacancysStatusesParam =[];
        $scope.inVacancysStatusesParam =[];
        $scope.emptyAccount = true;
        $scope.choosenPersons = [];
        $scope.leastChosen = false;
        $scope.customStagesActive =[];
        $scope.activeInVacancyStatuses = [];
        $scope.vacancyStatuses =[
            {
                value: "open",
                added: true,
                count: 0
            },
            {
                value: "expects",
                added: false,
                count: 0
            },
            {
                value: "inwork",
                added: true,
                count: 0
            },
            {
                value: "payment",
                added: true,
                count: 0
            },
            {
                value: "completed",
                added: true,
                count: 0
            },
            {
                value: "canceled",
                added: false,
                count: 0
            }
        ];
        $scope.inVacancyStatuses =[
            {
                value: "longlist",
                added: true,
                count: 0
            },
            {
                value: "shortlist",
                added: true,
                count: 0
            },
            {
                value: "test_task",
                added: true,
                count: 0
            },
            {
                value: "interview",
                added: true,
                count: 0
            },
            {
                value: "interview_with_the_boss",
                added: true,
                count: 0
            },
            {
                value: "security_check",
                added: true,
                count: 0
            },
            {
                value: "tech_screen",
                added: true,
                count: 0
            },
            {
                value: "hr_interview",
                added: true,
                count: 0
            },
            {
                value: "tech_interview",
                added: true,
                count: 0
            },
            {
                value: "interview_with_the_client",
                added: true,
                count: 0
            },
            {
                value: "sent_offer",
                added: true,
                count: 0
            },
            {
                value: "accept_offer",
                added: true,
                count: 0
            },
            {
                value: "approved",
                added: true,
                count: 0
            },
            {
                value: "notafit",
                added: true,
                count: 0
            },
            {
                value: "declinedoffer",
                added: true,
                count: 0
            },
            {
                value: "no_response",
                added: true,
                count: 0
            },
            {
                value: "no_contacts",
                added: true,
                count: 0
            },
        ];

        function responseSetInView(data) {
            data.forEach(item => {
                if(item['request'] == 'stagesOrCount'){
                    angular.forEach(item.object, function(r){
                        angular.forEach($scope.inVacancyStatuses, function(res){
                            if (res.value == r.item){
                                res.count = r.count;
                            }
                        });
                        angular.forEach($scope.customStages, function(customS){
                            if (customS.customInterviewStateId == r.item){
                                customS.count = r.count;
                            }
                        });
                    });
                }else if(item['request'] == 'Statistic2') {
                    $scope.mainData = item.object['entryList'];

                    angular.forEach($scope.mainData, function (data) {
                        angular.forEach(data.info, function (res) {
                            // res.candidate.languages = Service.langTranslator(res.candidate.languages);
                            angular.forEach(item.object.persons, function (val) {
                                if (res.interview.creatorId == val.userId) {
                                    res.interview.creatorCutFullName = val.cutFullName;
                                }
                            });

                            $scope.regions = item.object.regions;
                            angular.forEach(item.object.regions, function (valRegion) {
                                if (res.candidate.regionId == valRegion.regionId) {
                                    res.candidate.regionfullName = valRegion.displayFullName;
                                }
                            });

                            angular.forEach($scope.customStagesFull.interviewStates, function (customStatus) {
                                if (res.action.stateOld == customStatus.customInterviewStateId || res.action.stateNew === customStatus.customInterviewStateId) {
                                    res.interview.state = customStatus.name;
                                }
                            });

                        });
                    });
                }
            });
        }

        $rootScope.closeModal = function(){
            $rootScope.modalInstance.close();
        };
        angular.forEach($scope.vacancyStatuses, function(resp){
            if(resp.added){
                $scope.vacancysStatusesParam.push(resp.value);
            }
        });
        angular.forEach($scope.inVacancyStatuses, function(resp){
            if(resp.added){
                $scope.inVacancysStatusesParam.push(resp.value);
            }
        });
        vacancyStages.get(function(resp){
            var array = [];
            $scope.customStages =resp.object.interviewStates;
            angular.forEach($scope.customStages, function(res){
                res.added = false;
                res.count = 0;
                if(res.status != "D"){
                    array.push(res);
                }
            });
            $scope.customStages = array;
            $scope.customStagesFull =resp.object.interviewStates;
            $scope.getVacancyStages();
        });

        Person.getAllPersons(function (resp) {
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function(res){
                if(res.status != 'N'){
                    $scope.choosenPersons.push(res.userId)
                }
                res.added = true;
            });
        });
        $scope.regionIdToName = function (regionId) {
            var location = '';
            angular.forEach($scope.regions, function(regVal){
                if(regionId == regVal.regionId){
                    location = regVal.fullName;
                }
            });
            return location;
        };
        $scope.inHover = function () {
          $('.info-content').show();
        };
        $scope.outHover = function () {
          $('.info-content').hide();
        };
        $scope.updateReport = function(){
            Company.requestGetInfo({
                name:'firstDateVacancy'
            })
                .then(resp => {
                    $scope.emptyAccount = false;

                    if(!resp.object){
                        $scope.emptyAccount = true;
                        return;
                    }
                    if($scope.firstTimeLoading == 0){
                        if(!$scope.startVacancyDate){
                            $scope.startVacancyDate = resp.object;
                            $(".startDate").datetimepicker("setDate", new Date(angular.copy($scope.startVacancyDate)));
                        }

                        if(!$scope.endDate){
                            var today = new Date();
                            $scope.endDate = today.getTime();
                            $(".endDate").datetimepicker("setDate", new Date(angular.copy($scope.endDate)));
                        }
                    }else{
                        var selectDate = new Date(angular.copy($scope.endDate));
                        var nowDate = new Date();

                        if(selectDate.getFullYear() == nowDate.getFullYear() && selectDate.getMonth() == nowDate.getMonth() && selectDate.getDate() == nowDate.getDate()) {
                            var today = new Date();
                            $scope.endDate = today.getTime();
                        }

                        if(!$scope.startVacancyDate || !$scope.endDate){
                            notificationService.error($filter('translate')('Please fill in all date fields'));
                        }
                    }
                    return true;
                })
                .then(resp => {
                    if($scope.startVacancyDate && $scope.endDate){
                        $scope.firstTimeLoading = $scope.firstTimeLoading + 1;

                        return Stat.requestGetCountVacancyForActualVacancyStatistic({
                            "from":$scope.startVacancyDate,
                            "to":$scope.endDate,
                            "interviewCreatorIds": $scope.choosenPersons
                        })
                    }
                    return false;

                })
                .then(resp =>{
                    if(resp) {
                        var array = [];
                        $scope.totalVacancyStatusesCount = resp.object;

                        angular.forEach($scope.totalVacancyStatusesCount, function (r) {
                            angular.forEach($scope.vacancyStatuses, function (res) {
                                if (res.value == r.item) {
                                    res.count = r.count;
                                }
                            });
                        });

                        if ($scope.firstTimeLoading == 1) {
                            angular.forEach($scope.vacancyStatuses, function (res) {
                                if (res.count != 0 && (res.value != 'canceled' && res.value != 'expects')) {
                                    res.added = true;
                                    array.push(res.value);
                                } else {
                                    res.added = false
                                }
                            });

                            $scope.vacancysStatusesParam = array;

                            return Stat.requestGetCountInterviewForActualVacancyStatistic({
                                "from": $scope.startVacancyDate,
                                "to": $scope.endDate,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons
                            });
                        }
                    }
                    return false;
                })
                .then(resp =>{
                    if(resp) {
                        var arrayCustom = [];

                        angular.forEach(resp.object, function (r) {
                            angular.forEach($scope.inVacancyStatuses, function (res) {
                                if (res.value == r.item) {
                                    res.count = r.count;
                                }
                            });
                            angular.forEach($scope.customStages, function (customS) {
                                if (customS.customInterviewStateId == r.item) {
                                    customS.count = r.count;
                                }
                            });
                        });
                        angular.forEach($scope.inVacancyStatuses, function (res) {
                            if (res.count != 0) {
                                arrayCustom.push(res.value);
                                $scope.activeInVacancyStatuses.push(res);
                            } else {
                                res.added = false;
                            }
                        });
                        angular.forEach($scope.customStages, function (res) {
                            if (res.count != 0) {
                                arrayCustom.push(res.customInterviewStateId);
                                res.added = true;
                                $scope.customStagesActive.push(res);
                            } else {
                                res.added = false;
                            }
                        });
                        $scope.inVacancysStatusesParam = arrayCustom;
                    }
                    return true;

                })
                .then(resp => {
                    if($scope.firstTimeLoading != 1 && $scope.startVacancyDate && $scope.endDate){
                        Promise.all([
                            Stat.requestGetCountInterviewForActualVacancyStatistic({
                                "from":$scope.startVacancyDate,
                                "to":$scope.endDate,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons
                            }),
                            Stat.requestGetActualVacancyStatistic2({
                                "from":$scope.startVacancyDate,
                                "to":$scope.endDate,
                                "types":null,
                                "vacancyId":null,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewStatuses":$scope.inVacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons,
                                "vacancyFields": ["client","salary","location","status","dateFinish",
                                    "budget","candidatesAdded","candidatesApproved","daysInWork","responsibles","dc",
                                    "datePayment","employmentType","candidatesRefused","candidatesInWork"],
                                "withCandidates": true
                            }, false),
                        ])
                            .then(resp => {
                                responseSetInView(resp);
                                $rootScope.loading  = false;
                                $scope.$apply();
                            });
                    }else{
                        $rootScope.loading  = false;
                        $scope.$apply();
                    }
                });
        };
        $scope.updateReport();

        $(window).scroll(function () {
            var sticky = $('.report-first');
            var aboveElement = $('.payButtonOuter');
            var topPosition = aboveElement.position().top;
            var scroll = $(window).scrollTop();
            var topPosition = scroll - aboveElement.position().top;
                if (topPosition >= 50) {
                    sticky.addClass('fixed-header');
                } else {
                    sticky.removeClass('fixed-header');
                }
        });

        $scope.loadingExcel = false;
        $scope.downloadReport = function () {
            $rootScope.loading = true;

            if($scope.loadingExcel == false){
                $scope.loadingExcel = true;
                Stat.createVacancyStatisticExcel({
                    "from":$scope.startVacancyDate,
                    "to":$scope.endDate,
                    "types":null,
                    "vacancyId":null,
                    "vacancyStatuses": $scope.vacancysStatusesParam,
                    "interviewStatuses":$scope.inVacancysStatusesParam,
                    "interviewCreatorIds": $scope.choosenPersons,
                    "withCandidates": true,
                    "vacancyFields":[],
                }, function (resp) {
                    if (resp.status == 'ok') {
                        var sr = $rootScope.frontMode == "war" ? "/hr/" : "/hrdemo/";
                        $('#downloadReport')[0].href = sr + 'getapp?id=' + resp.object;
                        $('#downloadReport')[0].click();
                    }
                    $scope.loadingExcel = false;
                    $rootScope.loading = false;
                });
            }
        };
        $scope.getPersonFullName = function (id) {
            var fullName = '';
            angular.forEach($scope.associativePerson, function (resp) {
                if(resp.userId == id) {
                    fullName = resp.cutFullName;
                }
            });
            return fullName;
        };

        $scope.changeVacancyStatuses = function(status){
            if($scope.vacancysStatusesParam.length > 1){
                if(status.added){
                    status.added = false;
                    var array =[];
                    angular.forEach($scope.vacancyStatuses, function(resp){
                        if(resp.added){
                            array.push(resp.value);
                        }
                    });
                    $scope.vacancysStatusesParam = array;
                }else{
                    status.added = true;
                    $scope.vacancysStatusesParam.push(status.value);
                }
            }else{
                if(status.added){
                    notificationService.error($filter('translate')('It is necessary to select at least one status'));
                }else{
                    status.added = true;
                    $scope.vacancysStatusesParam.push(status.value);
                }
            }
        };
        $scope.allStatuses = {
            standard: false,
            reasons: false,
            custom: false
        };
        $scope.vacancyStandardStages = [];
        $scope.vacancyReasonsForRefusal = [];
        $scope.vacancyCustomStages = [];

        $scope.getVacancyStages = function(){
            angular.forEach($scope.inVacancyStatuses, function(resp){
                if(resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                    && resp.value != 'no_response'){
                    $scope.vacancyStandardStages.push(resp);
                }
                else {
                    $scope.vacancyReasonsForRefusal.push(resp);
                }
            });
            angular.forEach($scope.customStages, function(resp){
                if(resp.type != 'refuse'){
                    $scope.vacancyCustomStages.push(resp);
                }
                else if(resp.type == 'refuse'){
                    $scope.vacancyReasonsForRefusal.push(resp);
                }
            });
        };
        $scope.checkAllChooseStatuses = function(){
            $scope.allStatuses.standard = $scope.checkStatuses($scope.vacancyStandardStages);
            $scope.allStatuses.reasons = $scope.checkStatuses($scope.vacancyReasonsForRefusal);
            $scope.allStatuses.custom = $scope.checkStatuses($scope.vacancyCustomStages);
        };
        $scope.checkStatuses = function(blockStatuses){
            var number = 0;

            angular.forEach(blockStatuses, function(resp){
                if(!resp.added){
                    number++;
                    return false;
                }
            });
            if(number == 0){
                return true;
            }
        };

        $scope.changeButtonForAllStatuses = function(status) {
            for(var key in $scope.allStatuses){
                if(key == status){
                    if($scope.allStatuses[key]){
                        $scope.allStatuses[key] = false;
                        return false;
                    } else {
                        $scope.allStatuses[key] = true;
                        return true;
                    }
                }
            }
        };
        $scope.addAll = false;
        $scope.changeAllVacancyStatuses = function(nameBlockStatuses){
            var add = $scope.changeButtonForAllStatuses(nameBlockStatuses);

            if(nameBlockStatuses == 'standard'){

                angular.forEach($scope.inVacancyStatuses,function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                    && resp.value != 'no_response' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                        && resp.value != 'no_response' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                })

            } else if(nameBlockStatuses == 'reasons'){
                angular.forEach($scope.inVacancyStatuses,function(resp){
                    $scope.addAll = true;
                    if((!resp.added && add) && (resp.value == 'no_contacts' || resp.value == 'notafit' || resp.value == 'declinedoffer' || resp.value == 'no_response')){
                        $scope.changeInVacancyStatuses(resp);
                    } else if((resp.added && !add) && (resp.value == 'no_contacts' || resp.value == 'notafit' || resp.value == 'declinedoffer' || resp.value == 'no_response')){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
                angular.forEach($scope.customStages, function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.type == 'refuse' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.type == 'refuse' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
            } else if(nameBlockStatuses == 'custom'){
                angular.forEach($scope.customStages, function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.type != 'refuse' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.type != 'refuse' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
            }
        };

        $scope.changeInVacancyStatuses = function(status){

            if($scope.inVacancysStatusesParam.length > 1){
                if(status.added){
                    if(status.customInterviewStateId){
                        $scope.customStagesActive.splice($scope.customStagesActive.indexOf(status), 1);
                    }else{
                        $scope.activeInVacancyStatuses.splice($scope.activeInVacancyStatuses.indexOf(status), 1);
                    }
                    status.added = false;
                    var array =[];
                    angular.forEach($scope.inVacancyStatuses, function(resp){
                        if(resp.added){
                            array.push(resp.value);
                        }
                    });
                    angular.forEach($scope.customStages, function(resp){
                        if(resp.added){
                            array.push(resp.customInterviewStateId);
                        }
                    });
                    $scope.inVacancysStatusesParam = array;
                }else{
                    status.added = true;
                    if(status.customInterviewStateId){
                        $scope.inVacancysStatusesParam.push(status.customInterviewStateId);
                        $scope.customStagesActive.push(status);
                    }else{
                        $scope.inVacancysStatusesParam.push(status.value);
                        $scope.activeInVacancyStatuses.push(status);
                    }
                }
            }else{
                if(status.added){
                    notificationService.error($filter('translate')('It is necessary to select at least one stage'));
                }else{
                    status.added = true;
                    if(status.customInterviewStateId){
                        $scope.inVacancysStatusesParam.push(status.customInterviewStateId);
                        $scope.customStagesActive.push(status);
                    }else{
                        $scope.inVacancysStatusesParam.push(status.value);
                        $scope.activeInVacancyStatuses.push(status);
                    }
                }
            }
            if(!$scope.addAll){
                $scope.checkAllChooseStatuses();
            }
            $scope.addAll = false;
        };

        $scope.changePersonAdd = function(person){
            $scope.leastChosen = false;
           if(!person.added){
               person.added = true;
               $scope.choosenPersons.push(person.userId)
           }else{
               person.added = false;
               $scope.choosenPersons.splice($scope.choosenPersons.indexOf(person.userId), 1);
           }
            angular.forEach($scope.associativePerson,function(resp){
                if(resp.added){
                    $scope.leastChosen = true;
                }
            });
        };
        $(".startDate").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function(data) {
            $scope.startVacancyDate = data.date.getTime();
        }).on('hide', function() {
            if ($('.startDate').val() == "") {
                $scope.startVacancyDate = null;
            }
        });

        $(".endDate").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use()
        }).on('changeDate', function(data) {
            $scope.endDate = data.date.getTime();
        }).on('hide', function() {
            if ($('.endDate').val() == "") {
                $scope.endDate = null;
            }
        });
        $scope.showChoosingMenu = function(){
            if($('.chooseStatusMenu').css('display') == 'none'){
                $('.chooseStatusMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.chooseStatusMenu').has(e.target).length === 0) {
                        $('.chooseStatusMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.chooseStatusMenu').hide("500");
            }
        };
        $scope.showChoosingMenuStages = function(){
            if($('.chooseStagesMenu').css('display') == 'none'){
                $('.chooseStagesMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.chooseStagesMenu').has(e.target).length === 0) {
                        $('.chooseStagesMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.chooseStagesMenu').hide("500");
            }
        };
        $scope.showPersonMenu = function(){
            if($('.choosePersonMenu').css('display') == 'none'){
                $('.choosePersonMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.choosePersonMenu').has(e.target).length === 0) {
                        $('.choosePersonMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.choosePersonMenu').hide("500");
            }
        };
        $scope.popup = function(){
        $('.commentBlog').popup({
                position : 'right center'
            });
        };
        $scope.popup();


        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();
        $scope.inviteHiringManager = function(){
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'partials/modal/invite-new-user.html',
                size: '',
                resolve: function(){

                }
            });
            $rootScope.modalInstance.opened.then(function(){
                $rootScope.inviteUser.role = 'client';
            });
            $rootScope.modalInstance.closed.then(function() {
                $rootScope.inviteUser.role = null;
                $rootScope.inviteUser.email = null;
            });
        };
    }
]);



controller.controller('vacancyReportController', ["$rootScope", "$scope", "FileInit", "Vacancy", "Service", "$location", "Client",
    "$routeParams", "notificationService", "$filter", "$translate", 'Person', "Statistic", "vacancyStages", "Company",
    function($rootScope, $scope, FileInit, Vacancy, Service, $location, Client, $routeParams, notificationService, $filter,
             $translate, Person, Statistic, vacancyStages, Company) {
        var chartHeight = 0;
        $scope.lang = $translate;
        vacancyStages.get(function(resp){
            $scope.customStages = resp.object.interviewStates;
        });

        Vacancy.one({"localId": $routeParams.id}, function(resp) {
            $scope.vacancy = resp.object;
            $("#dateFrom").datetimepicker({
                format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                startView: 2,
                minView: 2,
                autoclose: true,
                startDate: $scope.vacancy.dc != undefined ? new Date($scope.vacancy.dc) : new Date(),
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                language: $translate.use()
            });

            $("#dateFrom").datetimepicker("setDate", new Date($scope.vacancy.dc));
            $("#dateTo").datetimepicker({
                format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
                startView: 2,
                minView: 2,
                autoclose: true,
                endDate: $scope.vacancy.dateFinish != undefined ? new Date($scope.vacancy.dateFinish) : new Date(),
                weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
                language: $translate.use()
            });

            if ($scope.vacancy.dateFinish != undefined) {
                $("#dateTo").datetimepicker("setDate", new Date($scope.vacancy.dateFinish));
            } else {
                var d = new Date();
                d.setHours(0, 0, 0, 0);
                $("#dateTo").datetimepicker("setDate", d);
            }

            let stagesString = $scope.vacancy['interviewStatus'].split(',');

            $scope.declinedStages = stagesString.slice(stagesString.indexOf('approved') + 1, stagesString.length);
            $scope.notDeclinedStages = stagesString.slice(stagesString[0], stagesString.indexOf('approved') + 1);


            Statistic.getVacancyInterviewDetalInfo(
                {
                    "vacancyId": $scope.vacancy.vacancyId,
                    withCandidatesHistory: true
                }, function(detailResp) {
                if (detailResp != undefined) {
                    var vacancyInterviewDetalInfo = [];
                    angular.forEach(detailResp.vacancyInterviewDetalInfo, function(value, key){
                        vacancyInterviewDetalInfo.push({
                            key: key,
                            value: value
                        });
                    });

                    $scope.detailInterviewInfo = vacancyInterviewDetalInfo;

                    angular.forEach($scope.customStages, function(resp){
                        angular.forEach($scope.detailInterviewInfo, function(value){
                            if(value.key === resp.customInterviewStateId){
                                value.key = resp.name;
                            }
                        });

                        angular.forEach($scope.declinedStages, function(value, index){
                            if(value === resp.customInterviewStateId){
                                $scope.declinedStages[index] = resp.name;
                            }
                        });

                        angular.forEach($scope.notDeclinedStages, function(value, index){
                            if(value === resp.customInterviewStateId){
                                $scope.notDeclinedStages[index] = resp.name;
                            }
                        });
                    });
                }
                initSalesFunnel(null, null);
            });
        });

        function initSalesFunnel(dateFrom, dateTo) {
            $scope.funnelMap = [];
            $scope.hasFunnelChart = false;

            if ($scope.detailInterviewInfo) {
                angular.forEach($scope.detailInterviewInfo, (stage,index) => {
                    $scope.funnelMap[index] = { key: stage.key, value: stage.value.length };

                    angular.forEach($scope.declinedStages, (declinedStage) => {
                        if(declinedStage === stage.key) {
                            $scope.funnelMap.splice(index,1);
                        }
                    });

                });

                angular.forEach($scope.notDeclinedStages, (notDeclinedStage) => {
                    let missingStage = true;

                    angular.forEach($scope.funnelMap, (stage,index) => {
                        // console.log($scope.funnelMap[index].key, notDeclinedStage);
                        if(missingStage) {
                            // console.log($scope.funnelMap[index].key, notDeclinedStage);
                            if($scope.funnelMap[index].key === notDeclinedStage) {
                                console.log('exist',notDeclinedStage);
                                missingStage = false;
                            } else {
                                missingStage = true;
                            }

                            if(index === $scope.funnelMap.length - 1 && missingStage) {
                                console.log("not-exist",notDeclinedStage);
                                $scope.funnelMap[index+1] = { key: notDeclinedStage, value: 0 };
                            }

                        }
                    });
                    console.log('-------------------');
                });


                if(!$scope.funnelMap[0]) {
                    return;
                }
            }
            // $scope.funnelMap.map((item) => {
            //     console.log(item);
            // });
            console.log($scope.funnelMap);

            var myChart = {};
            if ($scope.detailInterviewInfo) {
                $scope.hasFunnelChart = true;
                chartHeight = 30*$scope.funnelMap.length;
                var series = [];
                var values = [];
                var values2 = [];
                var values3 = [];
                var values4 = [];
                var lastCount = null;

                angular.forEach($scope.funnelMap, function(stage) {
                    series.push({
                        "values": [stage.value]
                    });
                    values.push($filter('translate')(stage.key));
                    values2.push(stage.value.toString());
                    if (lastCount == null) {
                        values3.push('100%');
                    } else {
                        values3.push((stage.value != 0 ? Math.round(stage.value / lastCount * 100) : 0) + '%');
                    }
                    if(lastCount == null) {
                        values4.push('100%');
                    } else{
                        values4.push((stage.value != 0 ? Math.round(stage.value / $scope.funnelMap[0].value * 100) : 0) + '%');
                    }
                    lastCount = stage.value;
                });

                myChart = {
                    "type": "funnel",
                    "width":'900px',
                    "series": series,
                    tooltip: {visible: true, shadow: 0},
                    "scale-y": {"values": values, "item": {fontSize: 11, "offset-x": 75}},
                    "scale-y-2": {"values": values2, "item": {fontSize: 12, "offset-x": -60}},
                    "scale-y-3": {
                        "values": values3, "item": {fontSize: 12,"offset-x": 25}
                    },
                    "scale-y-4": {
                        "values": values4, "item": {fontSize: 12,"offset-x": 107}
                    },
                    "plot": {
                        // "offset-x": '60px'
                    },
                    plotarea: {
                        margin: '40px 0 0 20%'
                    },
                    "scale-x": {"values": [""]},
                    labels: [{
                        text: $filter('translate')('Relative conversion'),
                        fontWeight: "bold",
                        fontSize: 12,
                        // offsetX: $translate.use() != 'en' ?  775 : 785,
                        offsetX: $translate.use() != 'en' ?  895 : 905,
                        offsetY: 0
                    },
                        {
                            text: $filter('translate')('Absolute conversion'),
                            fontWeight: "bold",
                            fontSize: 12,
                            // offsetX: 870,
                            offsetX: 990,
                            offsetY: 0
                        },
                        {
                            text: $filter('translate')('Candidates'),
                            fontWeight: "bold",
                            fontSize: 12,
                            // offsetX: $translate.use() != 'en' ? 700 : 710,
                            offsetX: $translate.use() != 'en' ? 815 : 825,
                            offsetY: 0
                        },
                        {
                            text: $filter('translate')('status'),
                            fontWeight: "bold",
                            fontSize: 12,
                            offsetX: 210,
                            offsetY: 0
                        }
                    ],
                    "backgroundColor": "#FFFFFF",
                    "gui": {
                        "behaviors": [
                            {"id": "DownloadPDF", "enabled": "none"},
                            {"id": "Reload", "enabled": "none"},
                            {"id": "Print", "enabled": "none"},
                            {"id": "DownloadSVG", "enabled": "none"},
                            {"id": "LogScale", "enabled": "none"},
                            {"id": "About", "enabled": "none"},
                            {"id": "FullScreen", "enabled": "none"},
                            {"id": "BugReport", "enabled": "none"},
                            {"id": "ViewSource", "enabled": "none"},
                            {"id": "FullScreen", "enabled": "none"},
                            {
                                "id": "FullScreen", "enabled": "none"
                            }
                        ]
                    }
                };
            } else {
                chartHeight = 350;
                myChart = {
                    "type": "funnel",
                    "width":'410px',
                    "series": [
                        {
                            "values": [$scope.funnelMap['longlist']]
                        }, {
                            "values": [$scope.funnelMap['shortlist']]
                        }, {
                            "values": [$scope.funnelMap['interview']]
                        }, {
                            "values": [$scope.funnelMap['approved']]
                        }
                    ],
                    "tooltip": {
                        "visible": true
                    },
                    "scale-y": {
                        "values": [$filter('translate')('long_list'),
                            $filter('translate')('short_list'),
                            $filter('translate')('interview'),
                            $filter('translate')('approved')],
                        "item": {
                            fontSize: 12,
                            "offset-x": 35
                        }
                    },
                    "scale-y-2": {
                        "values": [$scope.funnelMap['longlist'] + '',
                            $scope.funnelMap['shortlist'] + '',
                            $scope.funnelMap['interview'] + '',
                            $scope.funnelMap['approved'] + ''],
                        "item": {
                            fontSize: 12,
                            "offset-x": 0
                        }
                    },
                    "scale-y-3": {
                        "values": ['100%',
                            Math.round($scope.funnelMap['shortlist'] / $scope.funnelMap['longlist'] * 100) + '%',
                            ($scope.funnelMap['shortlist'] != 0 ? Math.round($scope.funnelMap['interview'] / $scope.funnelMap['shortlist'] * 100) : 0) + '%',
                            ($scope.funnelMap['interview'] != 0 ? Math.round($scope.funnelMap['approved'] / $scope.funnelMap['interview'] * 100) : 0) + '%'],
                        "item": {
                            fontSize: 12,
                            "offset-x": -10
                        }
                    },
                    "scale-y-4": {
                        "values": ['100%',
                            Math.round($scope.funnelMap['shortlist'] / $scope.funnelMap['longlist'] * 100) + '%',
                            ($scope.funnelMap['interview'] != 0 ? Math.round($scope.funnelMap['interview'] / $scope.funnelMap['longlist'] * 100) : 0) + '%',
                            ($scope.funnelMap['approved'] != 0 ? Math.round($scope.funnelMap['approved'] / $scope.funnelMap['longlist'] * 100) : 0) + '%'],
                        "item": {
                            fontSize: 12,
                            "offset-x": 115
                        }
                    },
                    "scale-x": {
                        "values": [""]
                    },
                    labels: [
                        {
                            text: $filter('translate')('Relative conversion'),
                            fontWeight: "bold",
                            fontSize: 12,
                            offsetX: 570,
                            offsetY: 20
                        },
                        {
                            text: $filter('translate')('Absolute conversion'),
                            fontWeight: "bold",
                            fontSize: 12,
                            offsetX: 570,
                            offsetY: 20
                        },
                        {
                            text: $filter('translate')('Count'),
                            fontWeight: "bold",
                            fontSize: 12,
                            offsetX: $translate.use() != 'en' ? 485 : 505,
                            offsetY: 20
                        },
                        {
                            text: $filter('translate')('status'),
                            fontWeight: "bold",
                            fontSize: 12,
                            offsetX: 80,
                            offsetY: 20
                        }
                    ],
                    "backgroundColor": "#FFFFFF",
                    "gui": {
                        "behaviors": [
                            {
                                "id": "DownloadPDF",
                                "enabled": "none"
                            }, {
                                "id": "Reload",
                                "enabled": "none"
                            }, {
                                "id": "Print",
                                "enabled": "none"
                            }, {
                                "id": "DownloadSVG",
                                "enabled": "none"
                            }, {
                                "id": "LogScale",
                                "enabled": "none"
                            }, {
                                "id": "About",
                                "enabled": "none"
                            }, {
                                "id": "FullScreen",
                                "enabled": "none"
                            }, {
                                "id": "BugReport",
                                "enabled": "none"
                            }, {
                                "id": "ViewSource",
                                "enabled": "none"
                            }, {
                                "id": "FullScreen",
                                "enabled": "none"
                            }, {
                                "id": "FullScreen",
                                "enabled": "none"
                            }
                        ]
                    }
                };
            }
            zingchart.render({
                id: "myChartDiv",
                data: myChart,
                height: chartHeight,
                width: 1290,
                output: "html5"
            });
        }

        $scope.updateData = function() {
            var dateFrom = $('#dateFrom').datetimepicker('getDate') != null ? $('#dateFrom').datetimepicker('getDate') : null;
            var dateTo = $('#dateTo').datetimepicker('getDate') != null ? $('#dateTo').datetimepicker('getDate') : null;
            dateFrom.setHours(0, 0, 0, 0);
            dateTo.setHours(0, 0, 0, 0);
            dateTo.setDate(dateTo.getDate() + 1);
            Statistic.getVacancyInterviewDetalInfo(
                {
                    "vacancyId": $scope.vacancy.vacancyId,
                    "from": dateFrom,
                    "to": dateTo,
                    withCandidatesHistory: true
                }, function(detailResp) {
                    if (detailResp != undefined) {
                        var vacancyInterviewDetalInfo = [];
                        angular.forEach(detailResp.vacancyInterviewDetalInfo, function(value, key){
                            vacancyInterviewDetalInfo.push({
                                key: key,
                                value: value
                            });
                        });
                        $scope.detailInterviewInfo =vacancyInterviewDetalInfo;
                        angular.forEach($scope.detailInterviewInfo, function(value){
                            angular.forEach($scope.customStages, function(resp){
                                if(value.key == resp.customInterviewStateId){
                                    value.key = resp.name;
                                }
                            })
                        });
                    }
                });
            initSalesFunnel(dateFrom, dateTo);

            zingchart.exec('myChartDiv', 'reload');
        };

        $scope.inDevelopmentMessage = function() {
            //notificationService.error('This is total bullshit');
            notificationService.error($filter('translate')('This function is in development, you can use it soon'));
        };
        $scope.dawnloadPDF = function(){
            $scope.downloadPDFisPressed = !$scope.downloadPDFisPressed;
            var dateFrom = $('#dateFrom').datetimepicker('getDate') != null ? $('#dateFrom').datetimepicker('getDate') : null;
            var dateTo = $('#dateTo').datetimepicker('getDate') != null ? $('#dateTo').datetimepicker('getDate') : null;
            dateFrom.setHours(0, 0, 0, 0);
            dateTo.setHours(0, 0, 0, 0);
            dateTo.setDate(dateTo.getDate() + 1);
            Statistic.getVacancyInterviewDetalInfoFile({
                "vacancyId": $scope.vacancy.vacancyId,
                "from": dateFrom,
                "to": dateTo,
                withCandidatesHistory: true
            },function(resp){
                if(resp.status == 'ok'){
                    pdfId = resp.object;
                    $('#downloadPDF')[0].href = '/hr/' + 'getapp?id=' + pdfId;
                    $('#downloadPDF')[0].click();
                    $scope.downloadPDFisPressed = false;
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();
    }

]);




function deleteUnnecessaryFields(object) {
    if (object) {
        delete object.actions;
        delete object.creator;
        delete object.responsible;
        delete object.files;
        delete object.interviews;
        delete object.customFields;
        delete object.level;
    }
}
function checkAccessLevel($rootScope, $location, Person) {
    if ($rootScope.me == undefined) {
        Person.getMe(function(resp) {
            if (resp != undefined && resp.personParams != undefined && resp.personParams.clientAccessLevel == 'hide') {
                $location.path('/organizer');
            }
        });
    } else if ($rootScope.me.personParams.clientAccessLevel == 'hide') {
        $location.path('/organizer');
    }
}
function pageScrollOnTop() {
    $("html, body").animate({scrollTop: 0}, "slow");
}
function listenerForScope($scope, $rootScope) {
    if ($rootScope.curentOnlyMenWatch !== undefined) {
        $rootScope.curentOnlyMenWatch();
    }
    if ($rootScope.curentRegionWatch !== undefined) {
        $rootScope.curentRegionWatch();
    }
    $rootScope.curentOnlyMenWatch = $rootScope.$watch('onlyMeChange', function(val) {
        if ($rootScope.onlyMeChange === true) {
            $scope.onlyMe = $rootScope.onlyMe;
            $rootScope.regionId = null;
            $scope.regionId = null;
            $scope.tableParams.reload();
        } else if ($rootScope.onlyMeChange === false) {
            $scope.tableParams.reload();
        }
        $rootScope.onlyMeChange = null;
    });
    $rootScope.curentRegionWatch = $rootScope.$watch('regionChange', function(val) {
        $scope.regionId = $rootScope.regionId;
        $scope.regionIdType = $rootScope.regionIdType;
        // console.log( $scope.regionId)
        if (val) {
            $rootScope.onlyMe = null;
            $scope.tableParams.reload();
            $rootScope.regionChange = false;
        }
    });
}
function listenerForScopeLight($scope, $rootScope) {
    if ($rootScope.curentOnlyMenWatch !== undefined) {
        $rootScope.curentOnlyMenWatch();
    }
    if ($rootScope.curentRegionWatch !== undefined) {
        $rootScope.curentRegionWatch();
    }
    $rootScope.curentOnlyMenWatch = $rootScope.$watch('onlyMeChange', function(val) {
        // console.log("Doasdoaosdkkpasdkopaskopdkoasokpd")
        if ($rootScope.onlyMeChange === true) {
            $scope.onlyMe = $rootScope.onlyMe;
            $rootScope.regionId = null;
            $scope.regionIdType = null;
            $scope.regionId = null;
            $scope.search();
        } else if ($rootScope.onlyMeChange === false) {
            $scope.search();
        }
        $rootScope.onlyMeChange = null;
    });
    $rootScope.curentRegionWatch = $rootScope.$watch('regionChange', function(val) {
        $scope.regionId = $rootScope.regionId;
        $scope.regionIdType = $rootScope.regionIdType;
        if (val) {
            $rootScope.onlyMe = null;
            $scope.search();
            $rootScope.regionChange = false;
        }
    });
}

function historyButton($scope, resp, Service, CacheCandidates) {
    $scope.history = resp.objects !== undefined ? resp.objects : null;
    $scope.historyLimit = resp.objects !== undefined ? resp.size : null;
    $scope.historyTotal = resp.objects !== undefined ? resp.total : null;
    var keepGoing = true;
    angular.forEach($scope.history, function(val) {
        if(keepGoing) {
        if(val.type == 'vacancy_message' ||
            val.type == 'candidate_message' ||
            val.type == 'interview_message' ||
            val.type == 'client_message'){
            $scope.showHistoryForPrint = true;
            keepGoing = false;
        }else{
        }
        }
    });
    var array = [];
    angular.forEach($scope.history, function(value){
        if(value.stateNew && value.type == "set_interview_status"){
            array = value.stateNew.split(",");
            angular.forEach($scope.customStagesFull,function(val){
                angular.forEach(array,function(resp){
                    if(val.customInterviewStateId == resp){
                        array[array.indexOf(val.customInterviewStateId)] = val.name;
                    }
                });
            });
            value.stateNew = array.toString();
        }
    });
    $scope.getMoreHistory = function() {
        Service.history({
            "vacancyId": $scope.vacancy != undefined ? $scope.vacancy.vacancyId : null,
            "page": {"number": 0, "count": $scope.historyLimit *= 2},
            "candidateId": $scope.candidate !== undefined ? $scope.candidate.candidateId : null,
            "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
            "onlyWithComment": $scope.onlyComments ? true : false
        }, function(res) {
            if(res.status == 'ok'){
                $scope.history = res.objects;
            } else{
                notificationService.error(res.message);
            }
        });
    };
    $scope.getLastEvent = function(count) {
        if (!count) {
            count = 1;
        }
        Service.history({
            "vacancyId": ($scope.vacancy !== undefined && $scope.vacancy !== null) ? $scope.vacancy.vacancyId : null,
            "page": {"number": 0, "count": count},
            "candidateId": ($scope.candidate !== undefined && $scope.candidate !== null) ? $scope.candidate.candidateId : null,
            "clientId": ($scope.client !== undefined && $scope.client !== null) ? $scope.client.clientId : null
        }, function(res) {
            if (res.status == 'ok') {
                $scope.showHistoryForPrint = false;
                var keepGoing = true;
                angular.forEach($scope.history, function(val, index) {
                    if(res.objects[0].actionId){
                        if (val.actionId == res.objects[0].actionId) {
                            $scope.history.splice(index, 1);
                        }
                    }
                    if(keepGoing) {
                        if(val.type == 'vacancy_message' ||
                            val.type == 'candidate_message' ||
                            val.type == 'interview_message' ||
                            val.type == 'client_message'){
                            $scope.showHistoryForPrint = true;
                            $scope.showCommentsFirstTime();
                            keepGoing = false;
                        }
                    }
                });
                if (res.objects) {
                    res.objects.reverse();
                    angular.forEach(res.objects, function(val, index) {
                        $scope.history.unshift(val)
                    });
                }
                angular.forEach($scope.history, function(value){
                    if(value.stateNew && value.type == "set_interview_status"){
                        array = value.stateNew.split(",");
                        angular.forEach($scope.customStages,function(val){
                            angular.forEach(array,function(resp){
                                if(val.customInterviewStateId == resp){
                                    array[array.indexOf(val.customInterviewStateId)] = val.name;
                                }
                            });
                        });
                        value.stateNew = array.toString();
                    }
                });

            }
            if ($scope.candidate || res && res.objects && res.objects[0].candidate) {
                CacheCandidates.updateLastHistory(res.objects[0]);
            }
        }, function(error) {
        });
    };


}

var openSelect = function(selector) {
    var element = $(selector)[0], worked = false;
    if (element != undefined) {
        if (document.createEvent) { // all browsers
            var e = document.createEvent("MouseEvents");
            e.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            worked = element.dispatchEvent(e);
        } else if (element.fireEvent) { // ie
            worked = element.fireEvent("onmousedown");
        }
        if (!worked) { // unknown browser / error
            alert("It didn't worked in your browser.");
        }
    }
};

function toISOStringWithoutTimeZone(date) {
    var _userOffset = date.getTimezoneOffset() * 60000;
    var _helsenkiTime = new Date(date.getTime() + _userOffset);
    return _helsenkiTime.toISOString();

}

function withoutISOStringWithoutTimeZoneDateObject(date) {
    var _userOffset = date.getTimezoneOffset() * 60000;
    var _helsenkiTime = new Date(date.getTime() - _userOffset);
    return _helsenkiTime;
}


function toISOStringWithoutTimeZoneDateObject(date) {
    var _userOffset = date.getTimezoneOffset() * 60000;
    var _helsenkiTime = new Date(date.getTime() + _userOffset);
    return _helsenkiTime;
}


function googleCalendarCreateEvent(googleService, startDate, fullName, vacancyPos, calId, comment, id, $filter) {
    var endDate = angular.copy(startDate);
    endDate.setHours(endDate.getHours() + 1);
    googleService.createEvent({
        "end": {
            "dateTime": endDate
        },
        "start": {
            "dateTime": startDate
        },
        "summary": $filter("translate")("Interview for") + " " + fullName
        + ". " + $filter("translate")("Vacancy") + ":" + vacancyPos,
        "calendarId": calId,
        "description": comment,
        "id": id + Math.floor(Math.random() * (9999999999999 - 0 + 1)) + 0

});
}
function createEventEndDate(startDate) {
    var endDate = angular.copy(startDate);
    endDate.setHours(endDate.getHours() + 1);
    return endDate;
}


function googleCalendarUpdateEvent(googleService, startDate, fullName, vacancyPos, calId, comment, id, $filter) {
    var endDate = angular.copy(startDate);
    endDate.setHours(endDate.getHours() + 1);
    googleService.updateEvent({
        "end": {
            "dateTime": endDate
        },
        "start": {
            "dateTime": startDate
        },
        "calendarId": calId,
        "summary": $filter("translate")("Interview for") + " " + fullName
        + ". " + $filter("translate")("Vacancy") + ":" + vacancyPos,
        "description": comment,
        "eventId": id
    });
}


function select2VacancyAutocompleter(serverAddress, id, $filter) {

}

function googleCalendarDeleteEvent(googleService, selectedCalendarId, eventId, statusOld) {
    googleService.deleteEvent({
        calendarId: selectedCalendarId,
        eventId: eventId
    });
}

function vacancyAddInterview(Vacancy, vacancyId, position, candidateId, comment, interviewState, date, callback, errorBack, frontMode, notificationService, googleService, selectedCalendarId, $filter, lang, $rootScope) {

    console.log(interviewState,'interviewState213');

    // $rootScope.status2 = false;
    $rootScope.hover = false;

    Vacancy.addInterview({
            "vacancyId": vacancyId,
            "candidateId": candidateId,
            "comment": comment,
            "interviewState": interviewState,
            "lang": lang,
            "date": date != null ? date.getTime() : null
        },
        function(resp,e) {
            if (angular.equals(resp.status, "ok")) {
                if (frontMode === 'war' && date !== null) {
                    if (position == null) {
                        Vacancy.one({"id": vacancyId}, function(res) {
                            if (resp.status == "ok") {
                                googleCalendarCreateEvent(googleService, date, resp.object.candidateId.fullName, res.object.position, selectedCalendarId, comment, resp.object.interviewId+interviewState, $filter);
                            }
                        });
                    } else {
                        googleCalendarCreateEvent(googleService, date, resp.object.candidateId.fullName, position, selectedCalendarId, comment, resp.object.interviewId+interviewState, $filter);
                    }
                }
                //if (date && $rootScope.candnotify.send && $rootScope.candnotify.sendMail.length > 1) {
                //    var candnotify = $rootScope.candnotify;
                //    Vacancy.sendInterviewCreateMail({
                //            "email": candnotify.sendMail,
                //            "vacancyId": vacancyId,
                //            "candidateId": candidateId,
                //            "fullName": candnotify.fullName,
                //            "date": date,
                //            "lang": lang
                //        },
                //        function(resp) {
                //        });
                //}
                callback(resp);
            } else {
                notificationService.error($filter('translate')('Candidate has been added to this position'));
                errorBack(resp);
            }
        }, function(err) {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });
}
function vacancyAddInterviewFromAdvice(Vacancy, vacancyId, position, candidateId, comment, interviewState, date, callback, errorBack, frontMode, notificationService, googleService, selectedCalendarId, $filter, lang, $rootScope) {
    console.log(interviewState);
    Vacancy.addInterview({
            "vacancyId": vacancyId,
            "candidateId": candidateId,
            "comment": comment,
            "interviewState": interviewState,
            "lang": lang,
            "date": date != null ? date.getTime() : null,
            interviewSource: 'advice'
        },
        function(resp) {
            if (angular.equals(resp.status, "ok")) {
                if (frontMode === 'war' && date !== null) {
                    if (position == null) {
                        Vacancy.one({"id": vacancyId}, function(res) {
                            if (resp.status == "ok") {
                                googleCalendarCreateEvent(googleService, date, resp.object.candidateId.fullName, res.object.position, selectedCalendarId, comment, resp.object.interviewId+interviewState, $filter);
                            }
                        });
                    } else {
                        googleCalendarCreateEvent(googleService, date, resp.object.candidateId.fullName, position, selectedCalendarId, comment, resp.object.interviewId+interviewState, $filter);
                    }
                }
                if (date && $rootScope.candnotify.send && $rootScope.candnotify.sendMail) {
                    var candnotify = $rootScope.candnotify;
                    Vacancy.sendInterviewCreateMail({
                            "email": candnotify.sendMail,
                            "vacancyId": vacancyId,
                            "candidateId": candidateId,
                            "fullName": candnotify.fullName,
                            "date": date,
                            "lang": lang
                        },
                        function(resp) {
                        });
                }
                callback(resp);
            } else {
                errorBack(resp);
            }
        }, function(err) {
            //notificationService.error($filter('translate')('service temporarily unvailable'));
        });
}


$('.plussHover').hover(function() {
    var block = $(this).next('.plussBlock');
    block.removeClass("blockDisplay");
    block.offset({top: $(this).position().top + $(this)[0].scrollHeight, left: $(this).position().left});
    block.css("width", $(this)[0].scrollWidth);
});
$('.plussHover').mouseleave(function(event) {
    var block = $(this).next('.plussBlock');
    block.addClass("blockDisplay");
});
$('.plussBlock').hover(function() {
    $(this).removeClass("blockDisplay");
});
$('.plussBlock').mouseleave(function() {
    $(this).addClass("blockDisplay");
});

var isAutoRefreshed = false;
function autoRefreshIN() {
    if (!isAutoRefreshed) {
        setInterval(function() {
            IN.User.refresh();
        }, 600000);
        isAutoRefreshed = true;
    }
}


function getExternalObject(source, external) {
    angular.forEach(source, function(val1) {
        var founded = false;
        var value;
        if (val1.check) {
            angular.forEach(external, function(val2) {
                if (val1.value == val2) {
                    founded = true;
                }
            })
        } else {
            founded = true;
        }
        if (!founded) {
            external.push(val1.value);
        }

    });
}
/**
 *
 **/

function getPlaceInfo(placeText, callback) {
    try {
        $("#crutchGoogleMap").append("<div id='googleCrutch'></div>");
        var map = new google.maps.Map(document.getElementById('googleCrutch'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            zoom: 15
        });
        var placeService = new google.maps.places.PlacesService(map);
        var service = new google.maps.places.AutocompleteService();
        service.getPlacePredictions({input: placeText, types: ['(regions)']}, function(val) {
            console.log(val);
            placeService.getDetails({"placeId": val[0].place_id}, function(val) {
                $("#crutchGoogleMap").empty();
                callback(val)
            });

        });
    } catch (e) {

    }
}

function isNotBlank(str) {
    if (!str) return false;
    if (str.trim() == "null" || str.trim() == "undefined") return false;
    return !/^\s*$/.test(str);
}


function convertToRegionObject(place, scope) {
    var object = {
        country: null,
        area: null,
        city: null,
        lat: null,
        lng: null,
        lang: "ru",
        regionId: null,
        fullName: "full"
    };
    console.log(place);
    if (place != null) {
        angular.forEach(place.address_components, function(val) {
            angular.forEach(val.types, function(valT) {
                switch (valT) {
                    case "country":
                        object.country = val.long_name;
                        break;
                    case "administrative_area_level_1":
                        object.area = val.long_name;
                        break;
                    case "locality":
                        object.city = val.long_name;
                        break;
                }
            });
        });
        object.regionId = place.id;
        object.googlePlaceId = {googlePlaceId: place.place_id};
        if (scope) {
            if (scope.map != undefined) {
                scope.map.center.latitude = place.geometry.location.lat();
                scope.map.center.longitude = place.geometry.location.lng();
            }
            if (scope.marker != undefined) {
                scope.marker.coords.latitude = place.geometry.location.lat();
                scope.marker.coords.longitude = place.geometry.location.lng();
            }
        }
        if (place.geometry != null) {
            object.lat = place.geometry.location.k;
            object.lng = place.geometry.location.D;
        } else {
            object.lat = 48.379433;
            object.lng = 31.165579999999977
        }
        object.fullName = place.formatted_address;
        return object;
    } else {
        return null;
    }
}
function addContactsInCandidateObject($scope) {
    var candidate = $scope.pageObject.employee.candidateId;
    var contacts = $scope.pageObject.contacts;
    var array = [];
    if (!candidate.contacts) {
        candidate.contacts = [];
    }
    if (contacts.email) {
        array.push({type: "email", value: contacts.email});
    }
    if (contacts.mphone) {
        array.push({type: "mphone", value: contacts.mphone});
    }
    if (contacts.skype) {
        array.push({type: "skype", value: contacts.skype});
    }
    if (contacts.linkedin) {
        array.push({type: "linkedin", value: contacts.linkedin});
    }
    if (contacts.facebook) {
        array.push({type: "facebook", value: contacts.facebook});
    }
    if (contacts.googleplus) {
        array.push({type: "googleplus", value: contacts.googleplus});
    }
    if (contacts.homepage) {
        array.push({type: "homepage", value: contacts.homepage});
    }
    candidate.contacts = array;
}

function differenceBetweenTwoDates(firstDate,secondDate){
    var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds

    return Math.round((new Date(firstDate) - secondDate)/(oneDay));
}
function getUrlVars(url) {
    var hash;
    var myJson = {};
    var hashes = url.slice(url.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        myJson[hash[0]] = hash[1];
    }
    return myJson;
}
function initDocuments(file){
    var filenameArr = file.fileName.split(".");
    if(filenameArr[1]){
        filenameArr[1] = filenameArr[filenameArr.length - 1].toLowerCase();
        if( filenameArr[1] == 'doc' || filenameArr[1] == 'xls' || filenameArr[1] == 'xlsx' || filenameArr[1] == 'pptx' || filenameArr[1] == 'ttf' || filenameArr[1] == 'pdf' || filenameArr[1] == 'ppt' || filenameArr[1] == 'txt' || filenameArr[1] == 'rtf' || filenameArr[1] == 'odt'){
            file.showGDocs = true;
        }else if(filenameArr[1] == 'jpg' || filenameArr[1] == 'jpeg' || filenameArr[1] == 'png' || filenameArr[1] == 'gif'){
            file.showImg = true;
        }else if(filenameArr[1] == 'docx') {
            file.showGDocs = false;
        }
    }
}
function showModalResume(file,$scope,$rootScope,$location,$sce,$uibModal){
    var filenameArr = file.fileName.split(".");
    if(filenameArr[1]){
        filenameArr[1] = filenameArr[filenameArr.length - 1].toLowerCase();
        if(filenameArr[1] == 'doc' || filenameArr[1] == 'xls' || filenameArr[1] == 'xlsx' || filenameArr[1] == 'pptx' || filenameArr[1] == 'ttf' || filenameArr[1] == 'pdf' || filenameArr[1] == 'ppt' || filenameArr[1] == 'txt' || filenameArr[1] == 'rtf' || filenameArr[1] == 'odt'){
            file.showGDocs = true;
        }else if(filenameArr[1] == 'jpg' || filenameArr[1] == 'jpeg' || filenameArr[1] == 'png' || filenameArr[1] == 'gif'){
            file.showImg = true;
        } else if(filenameArr[1] == 'docx') {
            file.showGDocs = false;
        }
    }
    $rootScope.shownResume = file;
    if(file.showGDocs){
        $rootScope.linkFileForShow = "https://docs.google.com/viewer?embedded=true&url=http://" + $location.$$host + "/hr/showFile/" + file.fileId + "/" + encodeURI(file.fileName) + '?decache=' + Math.random();
        $rootScope.linkFileForShow = $sce.trustAsResourceUrl($rootScope.linkFileForShow);
    }else if(file.showImg){
        $rootScope.linkImgForShow = "/hr/getapp?id=" + file.fileId + "/";
    }
    if(file.showGDocs || file.showImg){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/candidate-show-file.html',
            size: 'lg',
            windowClass: 'show-resume'
        });
    }else{
        window.location = $scope.serverAddress + '/getapp/' + file.fileId + '/' +  file.fileName
    }
}
function showModalImg(imgName,$scope,$rootScope,$location,$sce){
    $rootScope.linkImgForShow = "../img/" + imgName;
    $('.showImg.modal').modal('show');
}
function roundMinutes (date) {

    date.setHours(date.getHours());
    date.setMinutes(0);

    return date;
}
var iter = 0;
function setDatePickerForOnce($rootScope, $translate, Task){
    iter++;
    if(iter == 1){
        $("#editDateTaskVacancy").datetimepicker({
            format: "dd/mm/yyyy hh:00",
            startView: 2,
            minView: 1,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            initialDate: new Date(),
            startDate: new Date()
        }).on('changeDate', function (data) {
            $rootScope.editableTask.targetDate = $('#editDateTaskVacancy').datetimepicker('getDate');
            roundMinutes($rootScope.editableTask.targetDate);
            Task.changeTargetDate({
                "taskId": $rootScope.editableTask.taskId,
                "date":$rootScope.editableTask.targetDate
            }, function(resp){
                $rootScope.updateTaskInModal();
            })
        }).on('hide', function () {
            if ($('#editDateTaskVacancy').val() == "") {
                $rootScope.editableTask.date = "";
            }
        });
    }
}
function createEmailTemplateFunc($scope,$rootScope,id, Mail, $location){
    $rootScope.staticEmailTemplate = {
        candidateName: "John Dou",
        date: 1463749200000,
        recruiterName: $rootScope.me.fullName,
        recruiterEmail: $rootScope.me.emails.length > 0 ? $rootScope.me.emails[0].email : $rootScope.me.login
    };
   setTimeout(function(){
       tinymce.init({
           selector: '#' + id,
           mode: 'exact',
           theme: "modern",
           height: 145,
           language: $scope.lang!=undefined ||$scope.lang!=null?$scope.lang:"ru",
           browser_spellcheck: true,
           menubar: false,
           statusbar: false,
           theme_advanced_resizing: true,
           plugins: ["advlist autolink lists link image charmap print preview hr anchor pagebreak",
               "searchreplace visualblocks visualchars code fullscreen",
               "insertdatetime media nonbreaking save table directionality",
               "template paste textcolor  "],
           fontsize_formats: "8pt 10pt 12pt 14pt 18pt 24pt 36pt",
           toolbar1: "bold italic forecolor backcolor fontsizeselect | bullist numlist | link",
           image_advtab: true,
           toolbar_items_size: 'small',
           relative_urls: false,
           setup: function (ed) {
               ed.on('SetContent', function (e) {

               });
               ed.on('change', function(e) {
                   let tinyMCEgetId = tinyMCE.get(id);
                   if(tinyMCEgetId) {
                       $rootScope.emailTemplateInModal.text = tinyMCEgetId.getContent();
                   }
               });
           }
       });
   },10);
    $rootScope.hover = false;

    $rootScope.Hover = function () {
        $rootScope.hover = false;
    };
    $rootScope.HoverLeave = function () {
        $rootScope.hover = true;
    };
    $rootScope.status2 = false;



    if(id == "addCandidateInVacancyMCE"){
        $rootScope.changeTemplateInAddCandidate = function(status){


            if($rootScope.status2 == undefined ){
                $rootScope.hover = false;

            }else{
                $rootScope.hover = true;
            }




            if(status['googleCalendarPrefix'] !== ""){ // Отличить два объекта чтоб разпарсить второй
                status = JSON.parse(status);            // первый при выборе вакансии он имеет свойство status['googleCalendarPrefix'] не обязатнльго ""// второй при выборе этапа -в нем такого свойства нет он нам для парсинга нужен
            }

            $rootScope.addCandidateInVacancy.status = status;

            if($rootScope.addCandidateInVacancy.status.value == 'interview' ||
                $rootScope.addCandidateInVacancy.status.withDate ||
                $rootScope.addCandidateInVacancy.status.value == 'longlist' ||
                $rootScope.addCandidateInVacancy.status.value == 'shortlist' ||
                $rootScope.addCandidateInVacancy.status.value == 'notafit' ||
                $rootScope.addCandidateInVacancy.status.value == 'declinedoffer' ||
                $rootScope.addCandidateInVacancy.status.value == 'no_response' ||
                $rootScope.addCandidateInVacancy.status.value == 'no_contacts' ||
                $rootScope.addCandidateInVacancy.status.type == 'interview' ||
                $rootScope.addCandidateInVacancy.status.type == 'refuse'){
                var templateType = 'candidateCreateInterviewNotification';
                if($rootScope.addCandidateInVacancy.status.value == 'notafit' ||
                    $rootScope.addCandidateInVacancy.status.value == 'declinedoffer' ||
                    $rootScope.addCandidateInVacancy.status.value == 'no_response' ||
                    $rootScope.addCandidateInVacancy.status.value == 'no_contacts' ||
                    $rootScope.addCandidateInVacancy.status.type == 'refuse'){
                    templateType = 'refuseCandidateInVacancy'
                }else if($rootScope.addCandidateInVacancy.status.value == 'longlist' ||
                    $rootScope.addCandidateInVacancy.status.value == 'shortlist'){
                    templateType = 'seeVacancy'
                }
                Mail.getTemplateVacancy({vacancyId: $rootScope.VacancyAddedInCandidate.vacancyId,type:templateType},function(data){
                    $rootScope.fileForSave = [];
                    if(!$scope.publicLink) {
                        $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/vacancy-" + $rootScope.vacancyForAddCandidate;
                    }
                    $rootScope.emailTemplateInModal = data.object;
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $rootScope.VacancyAddedInCandidate.position + '</a>');
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $rootScope.VacancyAddedInCandidate.position + '</a>');
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy name\]\]/g, $rootScope.VacancyAddedInCandidate.position);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                    if(!$rootScope.staticEmailTemplate.skype){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/Skype:/g, "");
                    }
                    if($rootScope.staticEmailTemplate.facebook){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                    }
                    if($rootScope.staticEmailTemplate.linkedin){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }
                    tinyMCE.get(id).setContent($rootScope.emailTemplateInModal.text);
                    if(localStorage.emailThatAlreadyUsed){
                        $scope.addEmailFromLocalStorage(localStorage.emailThatAlreadyUsed);
                    }
                    if($rootScope.emailTemplateInModal.fileId && $rootScope.emailTemplateInModal.fileName){
                        $rootScope.fileForSave.push({"fileId": $rootScope.emailTemplateInModal.fileId, "fileName": $rootScope.emailTemplateInModal.fileName});
                    }
                })
            }
        };
    }else{
        $rootScope.changeTemplateInChangeStatusCandidate = function(status){
            console.log($rootScope.changeStatusOfInterviewInVacancy);
            if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'interview' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.withDate ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'longlist' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'shortlist' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'notafit' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'declinedoffer' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_response' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_contacts' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.type == 'interview' ||
                $rootScope.changeStatusOfInterviewInVacancy.status.type == 'refuse'){
                var templateType = 'candidateCreateInterviewNotification';
                if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'notafit' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'declinedoffer' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_response' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'no_contacts' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.type == 'refuse'){
                    templateType = 'refuseCandidateInVacancy'
                }else if($rootScope.changeStatusOfInterviewInVacancy.status.value == 'longlist' ||
                    $rootScope.changeStatusOfInterviewInVacancy.status.value == 'shortlist'){
                    templateType = 'seeVacancy'
                }
                Mail.getTemplateVacancy({vacancyId: $rootScope.changedStatusVacancy.vacancyId,type:templateType},function(data){
                    $scope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/vacancy-"  + $rootScope.changedStatusVacancy.localId;
                    $rootScope.fileForSave = [];
                    $rootScope.emailTemplateInModal = data.object;
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[candidate name\]\]/g, $rootScope.candnotify.fullName);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $rootScope.changedStatusVacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's name\]\]/g, $rootScope.me.fullName);
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy link\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $scope.publicLink+ '">' + $rootScope.changedStatusVacancy.position + '</a>');
                    $rootScope.emailTemplateInModal.title = $rootScope.emailTemplateInModal.title.replace(/\[\[vacancy name\]\]/g, $rootScope.changedStatusVacancy.position);
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's phone\]\]/g, $rootScope.me.phone ? $rootScope.me.phone : "");
                    $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Skype\]\]/g, $rootScope.staticEmailTemplate.skype ? $rootScope.staticEmailTemplate.skype : "");
                    if($rootScope.staticEmailTemplate.facebook){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.facebook+ '">' + $rootScope.staticEmailTemplate.facebook + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's Facebook\]\]/g, '');
                    }
                    if($rootScope.staticEmailTemplate.linkedin){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '<a style="font-weight: 600; {cursor: pointer;text-decoration: blink;color: #1A6986; text-decoration: none} :hover {text-decoration: underline;}"target="_blank" href="' + $rootScope.staticEmailTemplate.linkedin+ '">' + $rootScope.staticEmailTemplate.linkedin + '</a>');
                    }else{
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiter's LinkedIn\]\]/g, '');
                    }
                    if($rootScope.me.emails.length == 1){
                        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.me.emails[0].email);
                    }
                    setTimeout(function(){
                        tinyMCE.get(id).setContent($rootScope.emailTemplateInModal.text);
                        if(localStorage.emailThatAlreadyUsed){
                            $scope.addEmailFromLocalStorage(localStorage.emailThatAlreadyUsed);
                        }
                    },0);
                    if($rootScope.emailTemplateInModal.fileId && $rootScope.emailTemplateInModal.fileName){
                        $rootScope.fileForSave.push({"fileId": $rootScope.emailTemplateInModal.fileId, "fileName": $rootScope.emailTemplateInModal.fileName});
                    }
                })
            }
        };
    }
    $rootScope.addEmailFromWhatSend = function(email){
        if($rootScope.emailThatAlreadyUsed){
            $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace($rootScope.emailThatAlreadyUsed.email, email.email);
        }
        $rootScope.emailTemplateInModal.email = [];
        $rootScope.emailThatAlreadyUsed = email;
        localStorage.emailThatAlreadyUsed = email.email;
        $rootScope.emailTemplateInModal.email = $rootScope.emailTemplateInModal.email + email.email;
        console.log($rootScope.emailTemplateInModal);
        $rootScope.emailTemplateInModal.text = $rootScope.emailTemplateInModal.text.replace(/\[\[recruiterEmail\]\]/g, $rootScope.emailTemplateInModal.email);
        tinyMCE.get(id).setContent($rootScope.emailTemplateInModal.text);
    };
    $scope.addEmailFromLocalStorage = function(email){
        angular.forEach($rootScope.me.emails,function(resp){
            if(resp.email == localStorage.emailThatAlreadyUsed){
                $rootScope.addEmailFromWhatSend(resp);
            }
        })
    };
}
function firstLetters(string){
    var array = [];
    var word1 = [];
    var word2 = [];
    var words = string.split(" ");
    word1.push(words[0]);
    var letter1 = word1[0].split("");
    array.push(letter1[0]);
    if(words.length > 1){
        word2.push(words[1]);
        var letter2 = word2[0].split("");
        array.push(letter2[0]);
    }
    var acronym = array.join('');
    return acronym
}

function EmployeeAddControllerFunc($rootScope, $http, $scope, $translate, FileInit, $location, Service, Candidate, notificationService, $filter,
                                   $localStorage, $cookies, $window, serverAddress, Employee, $uibModal) {
    //Service.toAddCandidate("/candidates/");
    $location.hash('');
    $scope.candidate = {};
    $scope.pageObject = {
        employee: {
            candidateId: {
                status: "employed",
                readyRelocate: false,
                employmentType: null,
                contacts: []
            }
        },
        contacts: {
            skype: null,
            mphone: null,
            email: null,
            linkedin: null,
            facebook: null,
            googleplus: null,
            homepage: null
        },
        variables: {
            positionList: [],
            positionListAfterSearch: [],
            currency: Service.currency(),
            industries: Service.getIndustries(),
            experience: Service.experience(),
            lang: Service.lang(),
            saveButtonIsPressed: false,
            fileForSave: []
        }, errorMessage: {
            show: false,
            message: ""
        }
    };
    $scope.addLinkToCandidate = {
        name: '',
        url: ''
    };
    $scope.linksForSave = [];

    $scope.searchPosition = function searchPosition(term) {
        $scope.pageObject.positionListAfterSearch = $filter('filter')($scope.pageObject.positionList, term.toLowerCase());
    };

    Employee.getPositionList(function(resp) {
        $scope.pageObject.positionList = resp.objects;
        $scope.pageObject.positionListAfterSearch = resp.objects;
    });


    $scope.callbackAddPhoto = function(photo) {
        $scope.pageObject.employee.candidateId.photo = photo;
        $scope.photoLink = $scope.serverAddress + "/getapp?id=" + photo + "&d=true";
        $rootScope.photoUrl = "";
        $rootScope.closeModal();
    };

    FileInit.addPhotoByReference($scope, $rootScope, $scope.callbackAddPhoto);
    FileInit.initCandFileOption($scope, "", "", false);

    $scope.progressUpdate = function() {
        //Candidate.progressUpdate($scope, true);
    };

    $scope.updateErrorForPosition = function() {
        if ($scope.pageObject.employee.position != undefined &&
            $scope.pageObject.employee.position.length > 0) {
            $scope.candidateForm.position.$pristine = true;
            $scope.candidateForm.position.$invalid = false;
        } else {
            $scope.candidateForm.position.$pristine = false;
            $scope.candidateForm.position.$invalid = true;
        }
    };
    function initEmploymentType(employmentTArr) {
        $('.select2-employmentType').select2({
            tags: employmentTArr,
            tokenSeparators: [",", " "],
            initSelection: function(element, callback) {
                var data = {id: element.val(), text: element.val()};
                callback(data);
            }
        });
    }
    initEmploymentType(Service.employmentTypeTwo());
    $scope.serverAddress = serverAddress;
    $scope.googleMapOption = false;
    $scope.regionToRelocate = [];
    $scope.duplicatesByEmail = [];
    $scope.duplicatesByPhone = [];

    $scope.deleteRegion2ToRelocate = function(index) {
        $scope.regionToRelocate.splice(index, 1);
    };
    /** @namespace google.maps.MapTypeId.ROADMAP */
    $scope.map = {
        center: {
            latitude: 48.379433,
            longitude: 31.165579999999977
        },
        zoom: 6,
        options: {
            panControl: true,
            zoomControl: true,
            scaleControl: true,
            mapTypeControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
    };
    $scope.marker = {
        id: 1,
        title: "",
        coords: {
            latitude: null,
            longitude: null
        }
    };

    $scope.callbackFile = function(resp, names) {
        $scope.pageObject.variables.fileForSave.push({"attId": resp, "fileName": names});
        $scope.progressUpdate();
    };

    $scope.removeFile = function(id) {
        angular.forEach($scope.pageObject.variables.fileForSave, function(val, ind) {
            if (val.attId === id) {
                $scope.pageObject.variables.fileForSave.splice(ind, 1);
            }
        });
        $scope.progressUpdate();
    };
    $scope.removeLink = function(id) {
        angular.forEach($scope.linksForSave, function(val, ind) {
            if (val.fileName === id) {
                $scope.linksForSave.splice(ind, 1);
            }
        });
        $scope.progressUpdate();
    };

    $scope.status = Candidate.getStatus();
    $scope.employmentType = Service.employmentType();
    Service.regions(function(resp) {
        $scope.regions = resp.objects;
    });
    $scope.cancel = function() {
        $location.path("/candidates/");
    };


    $scope.addPhoto = function() {
        $('#photoFile').click();
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };
    Candidate.setPhoto($scope);

    $scope.removePhoto = function() {
        $scope.pageObject.employee.candidateId.photo = "";
        $scope.photoLink = undefined;
        $scope.progressUpdate();
    };
    $scope.saveCandidate = function() {
        $scope.errorId = false;
        $scope.dateChange($scope.candidateForm.workingDate.$modelValue);
        if ($scope.candidateForm.name.$valid && $scope.candidateForm.position.$valid && $scope.candidateForm.workingDate.$valid && !$scope.errorDateStartWorking) {
            getFieldWithJQuery($scope.pageObject.employee.candidateId, $scope.region);
            //$scope.pageObject.employee.employeeDepartment.name = $scope.pageObject.employee.employeeDepartment.name.replace(/-/g, '');
            $scope.pageObject.employee.candidateId.position = $scope.pageObject.employee.position;
            $scope.pageObject.employee.candidateId.salary = $scope.pageObject.employee.salary;
            $scope.pageObject.employee.candidateId.relatedRegions = $scope.regionToRelocate;
            $scope.pageObject.employee.candidateId.currency = $scope.pageObject.employee.currency;
            addContactsInCandidateObject($scope);
            Employee.addEmployeeWithCandidate($scope.pageObject.employee, function(resp) {
                if (angular.equals(resp.status, "ok")) {
                    $scope.pageObject.variables.saveButtonIsPressed = false;
                    notificationService.success($filter('translate')('Candidate saved'));
                    if ($scope.pageObject.variables.fileForSave.length > 0) {
                        angular.forEach($scope.pageObject.variables.fileForSave, function(valI, i) {
                            Candidate.addFile({
                                "attId": valI.attId,
                                "candidateId": resp.object.candidateId.candidateId,
                                "fileName": valI.fileName
                            }, function(resp) {

                            });
                            if ($scope.pageObject.variables.fileForSave.length - 1 == i) {
                                $location.path("/company/employees/" + resp.object.employeeId);
                            }
                        });
                    } else {
                        $location.path("/company/employees/" + resp.object.employeeId);
                    }
                    if ($scope.linksForSave.length > 0) {
                        angular.forEach($scope.linksForSave, function(valI, i) {
                            Candidate.addLink({
                                "url": valI.url,
                                "candidateId": resp.object.candidateId.candidateId,
                                "name": valI.fileName
                            }, function(resp) {
                            });
                            if ($scope.linksForSave.length - 1 == i) {
                                $location.path("/company/employees/" + resp.object.employeeId);
                            }
                        });
                    } else {
                        $location.path("/company/employees/" + resp.object.employeeId);
                    }
                } else {
                    $scope.pageObject.variables.saveButtonIsPressed = false;
                    $scope.pageObject.errorMessage.show = true;
                    $scope.pageObject.errorMessage.message = resp.message;
                    if(resp.code == 'existsEmployeeId'){
                        $scope.errorId = true;
                    }
                }
            }, function() {
                $scope.pageObject.variables.saveButtonIsPressed = false;
                //notificationService.error($filter('translate')('service temporarily unvailable'));
                $cookies.url = $location.$$url;
                $cookies.cfauth = 'false';
                $window.location.replace('/');
            });
        } else {

            $scope.dateChange($scope.candidateForm.workingDate.$modelValue);
            $scope.candidateForm.name.$pristine = false;
            $scope.candidateForm.salary.$pristine = false;
            //$scope.candidateForm.department.$pristine = false;
            $scope.updateErrorForPosition();
        }
    };
    $scope.checkDuplicatesByEmail = function() {
        Candidate.checkDuplicatesByEmail($scope);
    };
    $scope.checkDuplicatesByPhone = function() {
        Candidate.checkDuplicatesByPhone($scope);
    };


    //JQuery function init===========================================================================================
    $('.ui.dropdown').dropdown();
    $('.select2-lang-employee')
        .select2({
            tags: $scope.pageObject.variables.lang,
            tokenSeparators: [",", " "]
        }
    )
        .on("change", function(e) {
            $scope.progressUpdate();
        });
    $('#pac-input').blur(function() {
        if (!$(this).val()) {
            $scope.progressUpdate();
        }
    });

    $(".datepickerOfBirth").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        initialDate: new Date(315550800000)
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.candidateId.db = val.date.getTime();

        }
        $('.datepickerOfBirth').blur();
        $scope.progressUpdate();
    });

    $(".datepickerOfStartWorking").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use(),
        initialDate: new Date(315550800000)
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateEmployee = val.date.getTime();
            $scope.startWorkingDate = $(".datepickerOfStartWorking").val();

        }
        $('.datepickerOfStartWorking').blur();
    });
    $(".datepickerOfStartDepartment").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateDepartment = val.date.getTime();

        }
        $('.datepickerOfStartDepartment').blur();
    });
    $(".datepickerOfStartPosition").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.datePosition = val.date.getTime();

        }
        $('.datepickerOfStartPosition').blur();
    });
    $(".datepickerOfStartSalary").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateSalary = val.date.getTime();

        }
        $('.datepickerOfStartSalary').blur();
    });

    $scope.dateChange = function checkFormDate(val)
    {
        // regular expression to match required date format
        re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;

        if(val){
            if(val != '' && !val.match(re)) {
                $scope.errorDateStartWorking = true;
                return false;
            }
        } else{
            $scope.errorDateStartWorking = true;
            return false;
        }
        $scope.errorDateStartWorking = false;
        return true;
    };

    Employee.getDepartmentsList(function (resp) {
        $scope.departmentsList = resp.objects;
        angular.forEach($scope.departmentsList, function(val) {
            if(val.deep == 1){
                val.name = "-- "  + val.name;
            }
            if(val.deep == 2){
                val.name = "---- "  + val.name;
            }
            if(val.deep == 3){
                val.name = "------ "  + val.name;
            }
            if(val.deep == 4){
                val.name = "-------- "  + val.name;
            }
            if(val.deep == 5){
                val.name = "---------- "  + val.name;
            }
            if(val.deep == 6){
                val.name = "------------ "  + val.name;
            }
            if(val.deep == 7){
                val.name = "-------------- "  + val.name;
            }
            if(val.deep == 8){
                val.name = "---------------- "  + val.name;
            }
        });
    });
    $scope.showAddLinkFunc = function(){
        $scope.showAddLink = true;
    };
    $scope.closeAddLinkFunc = function(){
        $scope.showAddLink = false;
        $scope.addLinkToCandidate.name = null;
        $scope.addLinkToCandidate.url = null;
        $scope.addLinkErrorShow = false;
    };
    $scope.addLinkInCandidateStart = function(){
        if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
            $scope.linksForSave.push({"url": $scope.addLinkToCandidate.url, "fileName": $scope.addLinkToCandidate.name});
            $scope.showAddLink = false;
        } else{
            $scope.addLinkErrorShow = true;
        }
    };
    $scope.showModalAddPhoto = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-photo-candidate.html',
            size: '',
            resolve: function(){

            }
        });
    };
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
}


controller.controller('EmployeeAddController', [
    "$rootScope",
    "$http",
    "$scope",
    "$translate",
    "FileInit",
    "$location",
    "Service",
    "Candidate",
    "notificationService",
    "$filter", "$localStorage",
    "$cookies",
    "$window",
    "serverAddress", "Employee", "$uibModal", EmployeeAddControllerFunc]);




function getFieldWithJQuery(candidateObject, region2) {
    var lang = $('.select2-lang-employee').select2('val');
    var emplType = $('.select2-employmentType').select2('val');
    var db = $('.datepickerOfBirth').datetimepicker('getDate');
    candidateObject.languages = lang && lang.length > 0 ? lang.toString() : null;
    candidateObject.employmentType = emplType && emplType.length > 0 ? emplType.toString() : null;
    var regionInput = $("#pac-input").val();
    if (regionInput.length == 0) {
        candidateObject.region = null;
    } else if (regionInput.length > 0) {
        candidateObject.region = region2;
    }
    candidateObject.db = db != null ? db.getTime() : null;
}












function EmployeeAddFromCandidateControllerFunc($scope, $routeParams, $location, Candidate, Employee, $filter,notificationService, Service) {
    if (!$routeParams.candidateId) {
        $location.path('/vacancies');
    }
    $scope.pageObject = {
        candidate: null,
        variables: {
            currency: Service.currency()
        },
        employee: {
            candidateId: {
                candidateId: null
            },
            position: ""
        },
        positionList: [],
        positionListAfterSearch: []
    };

    $scope.searchPosition = function searchPosition(term) {
        $scope.pageObject.positionListAfterSearch = $filter('filter')($scope.pageObject.positionList, term.toLowerCase());
    };
    $scope.saveEmployee = function saveEmployee() {
        if ($scope.employeeForm.$valid) {
            Employee.addEmployeeForCandidate($scope.pageObject.employee, function(val) {
                if (val.status == 'ok') {
                    $location.path('/company/employees/' + val.object.employeeId);
                } else {
                    console.log("error at save employee object");
                    notificationService.error(val.message);
                }
            }, function(resp) {
                //notificationService.error($filter('translate')('service temporarily unvailable'));
            });
        } else {
            $scope.employeeForm.position.$pristine = false;
            $scope.employeeForm.department.$pristine = false;
            $scope.employeeForm.salary.$pristine = false;
        }
    };


    Candidate.one({localId: $routeParams.candidateId}, function(resp) {
        if (resp.status == 'ok') {
            $scope.pageObject.candidate = resp.object;
            $scope.pageObject.employee.candidateId.candidateId = resp.object.candidateId;
        } else {
            $location.path('/vacancies');
        }
    }, function(resp) {
        $location.path('/vacancies');
    });

    Employee.getPositionList(function(resp) {
        $scope.pageObject.positionList = resp.objects;
        $scope.pageObject.positionListAfterSearch = resp.objects;
        console.log($scope.pageObject.positionList);
    });

    Employee.getDepartmentsList(function (resp) {
        $scope.departmentsList = resp.objects;
        angular.forEach($scope.departmentsList, function(val) {
            if(val.deep == 1){
                val.name = "-- "  + val.name;
            }
            if(val.deep == 2){
                val.name = "---- "  + val.name;
            }
            if(val.deep == 3){
                val.name = "------ "  + val.name;
            }
            if(val.deep == 4){
                val.name = "-------- "  + val.name;
            }
            if(val.deep == 5){
                val.name = "---------- "  + val.name;
            }
            if(val.deep == 6){
                val.name = "------------ "  + val.name;
            }
            if(val.deep == 7){
                val.name = "-------------- "  + val.name;
            }
            if(val.deep == 8){
                val.name = "---------------- "  + val.name;
            }
        });
    });
    $scope.cancel = function() {
        $location.path("/candidates/");
    };

}
controller.controller('EmployeeAddFromCandidateController', ['$scope', '$routeParams', '$location', 'Candidate', 'Employee', '$filter','notificationService', 'Service', EmployeeAddFromCandidateControllerFunc]);
function EmployeeAddController($scope, Employee, $filter, ngTableParams, $location, Company, $rootScope) {
    $scope.searchButtonClicked = false;
    $scope.employeesFound = null;
    $scope.a = {};
    $scope.a.searchNumber = 1;
    $scope.employeesObj = {
        dataIsLoad: true,
        allDataSize: 0,
        showMassage: null,
        messageCode: 0
    };
    $scope.searchParam = {
        isClicked: true,
        state: null,
        position: null,
        department: null,
        name: null,
        page: {number: 0, count: 15}
    };
    $scope.searchStatus = [
        {name: "employed", value: "work"},
        {name: "dismiss", value: "dismiss"},
    ];


    $scope.toAddEmployee = function() {
        $location.path('/company/employee/add');
    };

    $scope.clickSearch = function() {
        $scope.searchButtonClicked = true;
        if ($scope.searchParam.state != null ||
            $scope.searchParam.position != null ||
            $scope.searchParam.departmentId != null ||
            $scope.searchParam.name != null) {
            $scope.employeesObj.dataIsLoad = true;
            if($scope.searchParam.departmentId){
                $scope.searchParam.departmentId = $scope.searchParam.departmentId.replace(/-/g, '');
            }
            $scope.tableParams.reload();
        }
    };
    Employee.getPositionList(function (resp) {
        $scope.positionList = resp.objects;
    });
    Employee.getDepartmentsList(function (resp) {
        $scope.departmentsList = resp.objects;
        angular.forEach($scope.departmentsList, function(val) {
            if(val.deep == 1){
                val.name = "-- "  + val.name;
            }
            if(val.deep == 2){
                val.name = "---- "  + val.name;
            }
            if(val.deep == 3){
                val.name = "------ "  + val.name;
            }
            if(val.deep == 4){
                val.name = "-------- "  + val.name;
            }
            if(val.deep == 5){
                val.name = "---------- "  + val.name;
            }
            if(val.deep == 6){
                val.name = "------------ "  + val.name;
            }
            if(val.deep == 7){
                val.name = "-------------- "  + val.name;
            }
            if(val.deep == 8){
                val.name = "---------------- "  + val.name;
            }
        });
    });


    $scope.tableParams = new ngTableParams({
        page: 1,
        count: $scope.searchParam.page.count
    }, {
        total: 0,
        getData: function($defer, params) {
            $scope.employeesObj.showMassage = false;
            if($scope.searchParam.state == 'null'){
                $scope.searchParam.state = null;
            }
            if($scope.searchParam.position == 'null'){
                $scope.searchParam.position = null;
            }
            if($scope.searchParam.departmentId == 'null'){
                $scope.searchParam.departmentId = null;
            }
            $scope.searchParam.page.number = (params.$params.page - 1);
            $scope.searchParam.page.count = params.$params.count;
            Employee.all($scope.searchParam, function(response) {
                if (response.status == 'error') {
                    if (response.code = 'notEnabledEmployeeFunction') {
                        $scope.employeesObj.messageCode = 1;
                        $location.path('/organizer');
                    }
                }else{
                    $rootScope.objectSize = response['objects'] != undefined ? response['total'] : undefined;
                    params.total(response['total']);
                    var data = $filter('orderBy')(response['objects'], params.orderBy());
                    if (!data && !$scope.searchButtonClicked) {
                        data = [];
                        $scope.employeesObj.messageCode = 2;
                    } else if (!data && $scope.searchButtonClicked) {
                        data = [];
                        $scope.employeesObj.messageCode = 3;
                    }
                    $defer.resolve(data);
                    $scope.employeesObj.allDataSize = response['total'];
                    if($scope.searchParam.state == null){
                        $scope.searchParam.state = 'null';
                    }
                    if($scope.searchParam.position == null){
                        $scope.searchParam.position = 'null';
                    }
                    if($scope.searchParam.departmentId == null){
                        $scope.searchParam.departmentId = 'null';
                    }
                }
                $scope.employeesObj.dataIsLoad = false;
                $scope.employeesFound = response['total'] >= 1;
                $scope.searchParam.page.count = params.$params.count;
                $scope.a.searchNumber = $scope.tableParams.page();
            });
            $scope.searchParam.isClicked = false;

        }
    });
    $scope.changeInputPage = function(params,searchNumber){
        var searchNumber = Math.round(searchNumber);
        var maxValue = $filter('roundUp')(params.settings().total/params.count());
        if(searchNumber){
            if(searchNumber >= 1 && searchNumber <= maxValue){
                params.page(searchNumber);
                $scope.a.searchNumber = searchNumber;
            }
        }
    };
    $scope.callbackAddLogo = function (photo) {
        console.log(photo);
        $rootScope.companyLogo = photo;
        $rootScope.logoLink = $scope.serverAddress + "/getapp?id=" + $rootScope.companyLogo + "&d=true";
    };
    $scope.callbackErr = function (err) {
        notificationService.error(err);
    };
    $scope.showAdvancedSearchFunc = function() {
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
    $scope.showAdvancedSearchFuncHide = function(){
        $scope.showAdvancedSearch = !$scope.showAdvancedSearch;
    };
    $scope.getFirstLetters = function(str){
        return firstLetters(str)
    };
    $(document).click(function (){
        if($(".advancedSearch").css('display') != 'none'){
            $scope.showAdvancedSearchFuncHide();
            $scope.$apply();
        }
    });

}
controller.controller('EmployeesController', ['$scope', 'Employee', '$filter', 'ngTableParams', '$location', 'Company', '$rootScope', EmployeeAddController]);
controller.controller('DepartmentCatalogController', ["$scope", "$rootScope", "$routeParams", "Service", "Person",
    "Company", "notificationService", "$filter", "$translate","Vacancy","Employee", "$filter",
    function($scope, $rootScope, $routeParams, Service, Person, Company, notificationService, $translate,
             $filter, Vacancy, Employee, $filter) {
        $scope.showCreateDepartment = false;
        $scope.showEditDepartment = false;

        $scope.departmentOnEdit = {
            name: null,
            parentEmployeeDepartmentId : null,
            editedDepartmentId : null
        };

        $scope.refreshDepartmentList = function(){
            Employee.getDepartmentsList(function (resp) {
                if(resp.status == 'ok'){
                    $scope.departmentsList = resp.objects;
                }else{
                    $location.path('/organizer');
                }
                //angular.forEach($scope.departmentsList, function(val) {
                //    if(val.deep == 1){
                //        val.name = "-- "  + val.name;
                //    };
                //    if(val.deep == 2){
                //        val.name = "---- "  + val.name;
                //    };
                //    if(val.deep == 3){
                //        val.name = "------ "  + val.name;
                //    };
                //});
            });
        };
        $scope.refreshDepartmentList();
        $scope.saveDepartment = function(){
            console.log($scope.departmentOnEdit);
                Employee.departmentAdd({
                    "name" : $scope.newName,
                    "parentEmployeeDepartmentId" : $scope.departmentOnEdit.employeeDepartmentId
                },function(resp){
                    if(resp.status == "ok"){
                        $scope.departmentOnEdit.employeeDepartmentId = null;
                        $scope.refreshDepartmentList();
                        notificationService.success($filter('translate')('Department successfully created'));
                    }
                });
        };
        $scope.deleteDepartment = function(department){
            Employee.departmentDelete({"id" : department.employeeDepartmentId},function (resp){
                if(resp.status == "ok"){
                    $scope.refreshDepartmentList();
                }
                else{
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.pasteEditDepartment = function(depart){
            if($scope.showCreateDepartment == true){
                $scope.showCreateDepartment = false;
            }
            $scope.showEditDepartment = true;
            $scope.newName = depart.name;
            console.log(depart);
            $scope.editedDepartmentId = depart.employeeDepartmentId;
            if(depart.parentName){
                console.log($scope.departmentOnEdit);
                $scope.departmentOnEdit.employeeDepartmentId = depart.parentEmployeeDepartmentId;
                $scope.parentId = depart.parentEmployeeDepartmentId;
                //$scope.departmentOnEdit.name = depart.parentName;
                console.log($scope.departmentOnEdit);
            }

        };
        $scope.editDepartment = function(){
                Employee.departmentEdit({
                    "employeeDepartmentId" : $scope.editedDepartmentId,
                    "name" : $scope.newName,
                    "parentEmployeeDepartmentId" : $scope.departmentOnEdit?$scope.departmentOnEdit.employeeDepartmentId:null
                },function(resp){
                    if(resp.status == "ok"){
                        console.log($scope.departmentOnEdit);
                        $scope.refreshDepartmentList();
                        $scope.showEditDepartment = false;
                        if($scope.departmentOnEdit){
                            $scope.departmentOnEdit.employeeDepartmentId = null;
                        }
                        $scope.newName =null;
                    }
                    else{
                        notificationService.error(resp.message);
                    }
                });
        };

}]);

function EmployeeEditControllerFunc($rootScope, $http, $scope, $translate, FileInit, $location, Service, Candidate, notificationService, $filter,
                                    $localStorage, $cookies, $window, serverAddress, Employee, $routeParams, $uibModal) {
    //Service.toAddCandidate("/candidates/");
    if ($routeParams.employeeId == undefined) {
        $location.path('/company/employees');
    }
    $location.hash('');
    $scope.pageObject = {
        contacts: {
            skype: null,
            mphone: null,
            email: null,
            linkedin: null,
            facebook: null,
            googleplus: null,
            homepage: null
        },
        variables: {
            positionList: [],
            positionListAfterSearch: [],
            currency: Service.currency(),
            industries: Service.getIndustries(),
            experience: Service.experience(),
            lang: Service.lang(),
            saveButtonIsPressed: false,
            fileForSave: [],
            employmentType: Service.employmentTypeTwo()
        }, errorMessage: {
            show: false,
            message: ""
        }
    };
    $scope.addLinkToCandidate = {
        name: '',
        url: ''
    };
    $scope.linksForSave = [];
    /** @namespace google.maps.MapTypeId.ROADMAP */
    $scope.map = {
        center: {
            latitude: 48.379433,
            longitude: 31.165579999999977
        },
        zoom: 6,
        options: {
            panControl: true,
            zoomControl: true,
            scaleControl: true,
            mapTypeControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
    };
    $scope.marker = {
        id: 1,
        title: "",
        coords: {
            latitude: null,
            longitude: null
        }
    };
    $('.select2-employmentType').select2({
            data: $scope.pageObject.variables.employmentType,
            multiple: true,
            initSelection: function(element, callback) {
                callback(Service.createArrayByEmploymentType(element.val().split(",")));
            }
        }
    );

    Employee.one({id: $routeParams.employeeId}, function(resp) {
        if (resp.status == "ok") {
            $scope.pageObject.employee = resp.object;
            $scope.candidate = $scope.pageObject.employee;
            $scope.pageObject.employee.salary=parseInt($scope.pageObject.employee.salary);
            $scope.photoLink = $scope.serverAddress + "/getapp?id=" +  $scope.pageObject.employee.candidateId.photo + "&d=true";
            convertCandidateInformationForEdit($scope.pageObject.employee.candidateId, $scope,$scope.pageObject.employee);
            createCandidatePageHashName($location, $scope.pageObject.employee.candidateId.fullName, $scope.pageObject.employee.candidateId.position, $filter);
            $scope.region = $scope.pageObject.employee.candidateId.region;
        } else {
            $location.path("/company/employees");
        }
    }, function() {

    });

    Employee.getPositionList(function(resp) {
        $scope.pageObject.positionList = resp.objects;
        $scope.pageObject.positionListAfterSearch = resp.objects;
    });
    $scope.searchPosition = function searchPosition(term) {
        $scope.pageObject.positionListAfterSearch = $filter('filter')($scope.pageObject.positionList, term.toLowerCase());
    };

    $scope.callbackAddPhoto = function(photo) {
        $scope.pageObject.employee.candidateId.photo = photo;
        $scope.photoLink = $scope.serverAddress + "/getapp?id=" + photo + "&d=true";
        $rootScope.photoUrl = "";
        $rootScope.closeModal();
    };
    FileInit.addPhotoByReference($scope, $rootScope, $scope.callbackAddPhoto);
    FileInit.initCandFileOption($scope, "candidate", "", false);

    $scope.updateErrorForPosition = function() {
        if ($scope.pageObject.employee.position != undefined &&
            $scope.pageObject.employee.position.length > 0) {
            $scope.candidateForm.position.$pristine = true;
            $scope.candidateForm.position.$invalid = false;
        } else {
            $scope.candidateForm.position.$pristine = false;
            $scope.candidateForm.position.$invalid = true;
        }
    };
    initEmploymentType(Service.employmentTypeTwo());

    $scope.serverAddress = serverAddress;
    $scope.googleMapOption = false;
    $scope.duplicatesByEmail = [];
    $scope.duplicatesByPhone = [];


    $scope.callbackFile = function(resp, names) {
        $scope.pageObject.variables.fileForSave.push({"attId": resp, "fileName": names});

    };

    $scope.removeFile = function(id) {
        angular.forEach($scope.fileForSave, function(val, ind) {
            if (val.attId === id) {
                $scope.pageObject.variables.fileForSave.splice(ind, 1);
            }
        });
    };
    $scope.cancel = function() {
        $location.path("/candidates/");
    };
    $scope.addPhoto = function() {
        $('#photoFile').click();
    };

    $scope.callbackErr = function(err) {
        notificationService.error(err);
    };
    Candidate.setPhoto($scope);

    $scope.removePhoto = function() {
        $scope.pageObject.employee.candidateId.photo = "";
        $scope.photoLink = undefined;
        $scope.progressUpdate();
    };
    $scope.saveCandidate = function() {
        $scope.errorId = false;
        if ($scope.candidateForm.name.$valid && $scope.candidateForm.position.$valid && !$scope.errorDateStartWorking && $scope.candidateForm.workingDate.$valid && $scope.candidateForm.salary.$valid && !$scope.pageObject.variables.saveButtonIsPressed) {
            getFieldWithJQuery($scope.pageObject.employee.candidateId, $scope.region);
            $scope.pageObject.employee.candidateId.position = $scope.pageObject.employee.position;
            $scope.pageObject.employee.candidateId.salary = $scope.pageObject.employee.salary;
            addContactsInCandidateObject($scope);
            Employee.editEmployee($scope.pageObject.employee, function(resp) {
                if (angular.equals(resp.status, "ok")) {
                    $scope.pageObject.variables.saveButtonIsPressed = false;
                    //notificationService.success($filter('translate')('Candidate saved'));
                    if ($scope.pageObject.variables.fileForSave.length > 0) {
                        angular.forEach($scope.pageObject.variables.fileForSave, function(valI, i) {
                            Candidate.addFile({
                                "attId": valI.attId,
                                "candidateId": resp.object.candidateId.candidateId,
                                "fileName": valI.fileName
                            }, function(resp) {
                            });
                            if ($scope.pageObject.variables.fileForSave.length - 1 == i) {
                                $location.path("/company/employees/" + resp.object.employeeId);
                            }
                        });
                    } else {
                        $location.path("/company/employees/" + resp.object.employeeId);
                    }
                    if ($scope.linksForSave.length > 0) {
                        angular.forEach($scope.linksForSave, function(valI, i) {
                            Candidate.addLink({
                                "url": valI.url,
                                "candidateId": resp.object.candidateId.candidateId,
                                "name": valI.fileName
                            }, function(resp) {
                            });
                            if ($scope.linksForSave.length - 1 == i) {
                                $location.path("/company/employees/" + resp.object.employeeId);
                            }
                        });
                    } else {
                        $location.path("/company/employees/" + resp.object.employeeId);
                    }
                } else {
                    $scope.pageObject.variables.saveButtonIsPressed = false;
                    $scope.pageObject.errorMessage.show = true;
                    $scope.pageObject.errorMessage.message = resp.message;
                    if(resp.code == 'existsEmployeeId'){
                        $scope.errorId = true;
                    }
                }
            }, function() {
                $scope.pageObject.variables.saveButtonIsPressed = false;
                //notificationService.error($filter('translate')('service temporarily unvailable'));
                $cookies.url = $location.$$url;
                $cookies.cfauth = 'false';
                $window.location.replace('/');
            });
        } else {

            $scope.dateChange($scope.candidateForm.workingDate.$modelValue);
            $scope.candidateForm.name.$pristine = false;
            $scope.candidateForm.salary.$pristine = false;
            $scope.candidateForm.department.$pristine = false;
            $scope.updateErrorForPosition();
        }
    };
    $scope.checkDuplicatesByEmail = function() {
        Candidate.checkDuplicatesByEmail($scope);
    };
    $scope.checkDuplicatesByPhone = function() {
        Candidate.checkDuplicatesByPhone($scope);
    };


    //JQuery function init===========================================================================================
    $('.ui.dropdown').dropdown();
    //$('.select2-lang-employee')
    //    .select2({
    //        tags: $scope.pageObject.variables.lang,
    //        tokenSeparators: [",", " "]
    //    }
    //);
    $(".datepickerOfBirth").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
        language: $translate.use(),
        initialDate: new Date(315550800000)
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.candidateId.db = val.date.getTime();
        }
        $('.datepickerOfBirth').blur();
    });

    $(".datepickerOfStartWorking").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateEmployee = val.date.getTime();

        }
        $('.datepickerOfStartWorking').blur();
    });
    $(".datepickerOfStartDepartment").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateDepartment = val.date.getTime();

        }
        $('.datepickerOfStartDepartment').blur();
    });
    $(".datepickerOfStartPosition").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.datePosition = val.date.getTime();

        }
        $('.datepickerOfStartPosition').blur();
    });
    $(".datepickerOfStartSalary").datetimepicker({
        format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateSalary = val.date.getTime();

        }
        $('.datepickerOfStartSalary').blur();
    });
    $(".datepickerOfFinishDate").datetimepicker({
        format: "dd/mm/yyyy",
        startView: 4,
        minView: 2,
        autoclose: true,
        language: $translate.use(),
        weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7
    }).on('hide', function(val) {
        if (val.date != undefined) {
            $scope.pageObject.employee.dateDismiss = val.date.getTime();
        }
        $('.datepickerOfFinishDate').blur();
    });

    $scope.dateChange = function checkFormDate(val)
    {
        // regular expression to match required date format
        re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;

        if(val){
            if(val != '' && !val.match(re)) {
                $scope.errorDateStartWorking = true;
                return false;
            }
        } else{
            $scope.errorDateStartWorking = true;
            return false;
        }
        $scope.errorDateStartWorking = false;
        return true;
    };

    Employee.getDepartmentsList(function (resp) {
        $scope.departmentsList = resp.objects;
        angular.forEach($scope.departmentsList, function(val) {
            if(val.deep == 1){
                val.name = "-- "  + val.name;
            }
            if(val.deep == 2){
                val.name = "---- "  + val.name;
            }
            if(val.deep == 3){
                val.name = "------ "  + val.name;
            }
            if(val.deep == 4){
                val.name = "-------- "  + val.name;
            }
            if(val.deep == 5){
                val.name = "---------- "  + val.name;
            }
            if(val.deep == 6){
                val.name = "------------ "  + val.name;
            }
            if(val.deep == 7){
                val.name = "-------------- "  + val.name;
            }
            if(val.deep == 8){
                val.name = "---------------- "  + val.name;
            }
        });
    });
    $scope.removeLink = function(id) {
        angular.forEach($scope.linksForSave, function(val, ind) {
            console.log(val);
            if (val.fileName === id) {
                $scope.linksForSave.splice(ind, 1);
            }
        });
        $scope.progressUpdate();
    };
    $scope.showAddLinkFunc = function(){
        $scope.showAddLink = true;
    };
    $scope.closeAddLinkFunc = function(){
        $scope.showAddLink = false;
        $scope.addLinkToCandidate.name = null;
        $scope.addLinkToCandidate.url = null;
        $scope.addLinkErrorShow = false;
    };
    $scope.addLinkInCandidateStart = function(){
        if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
            $scope.linksForSave.push({"url": $scope.addLinkToCandidate.url, "fileName": $scope.addLinkToCandidate.name});
            $scope.showAddLink = false;
        } else{
            $scope.addLinkErrorShow = true;
        }
    };
    $scope.showModalAddPhoto = function(){
        $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '../partials/modal/add-photo-candidate.html',
            size: '',
            resolve: function(){

            }
        });
    };
    $rootScope.closeModal = function(){
        $scope.modalInstance.close();
    };
}


controller.controller('EmployeeEditController', [
    "$rootScope",
    "$http",
    "$scope",
    "$translate",
    "FileInit",
    "$location",
    "Service",
    "Candidate",
    "notificationService",
    "$filter", "$localStorage",
    "$cookies",
    "$window",
    "serverAddress", "Employee", "$routeParams", "$uibModal", EmployeeEditControllerFunc]);


function initEmploymentType(employmentTArr) {

}

function getFieldWithJQuery(candidateObject, region2) {
    var lang = $('.select2-lang-employee').select2('val');
    var emplType = $('.select2-employmentType').select2('val');
    var db = $('.datepickerOfBirth').datetimepicker('getDate');
    candidateObject.languages = lang && lang.length > 0 ? lang.toString() : null;
    candidateObject.employmentType = emplType && emplType.length > 0 ? emplType.toString() : null;
    console.log($("#pac-input").val());
    var regionInput = $("#pac-input").val();
    console.log(regionInput);
    if (regionInput.length == 0) {
        console.log("ELSE ONE");
        candidateObject.region = null;
    } else if (regionInput.length > 0) {
        console.log("ELSE TWO!");
        candidateObject.region = region2;
        console.log(candidateObject.region);
    }
    candidateObject.db = db != null ? db.getTime() : null;
}


function createCandidatePageHashName($location, fullName, position, $filter) {
    //var name = "";
    //name = fullName != undefined ? name + fullName.replace(/\s/g, '_') : "";
    //name = position != undefined ? name + position.replace(/\s/g, '_') : "";
    //if (name.length > 0) {
    //    $location.hash($filter('transliteration')(name)).replace();
    //}
}


function convertCandidateInformationForEdit(candidate, $scope, candidateOuter) {
    if (candidate.region != undefined && candidate.region.lat != undefined && candidate.region.lng != undefined) {
        $scope.map.center.latitude = candidate.region.lat;
        $scope.map.center.longitude = candidate.region.lng;
        $scope.marker.coords.latitude = candidate.region.lat;
        $scope.marker.coords.longitude = candidate.region.lng;
        $scope.regionInput = candidate.region.displayFullName;
        $('#pac-input').val(candidate.region.displayFullName);

    }
    $scope.photoLink = $scope.serverAddress + "/getapp?id=" + candidate.photo + "&d=true";
    candidate.salary == 0 ? candidate.salary = null : null;
    $scope.objectId = candidate.candidateId;
    if (candidate.db) {
        $scope.data = new Date(candidate.db);
    }
    if (candidate.contacts) {
        angular.forEach(candidate.contacts, function(val) {
            if (angular.equals(val.type, "email")) {
                $scope.pageObject.contacts.email = val.value;
            }
            if (angular.equals(val.type, "mphone")) {
                $scope.pageObject.contacts.mphone = val.value;
            }
            if (angular.equals(val.type, "skype")) {
                $scope.pageObject.contacts.skype = val.value;
            }
            if (angular.equals(val.type, "linkedin")) {
                $scope.pageObject.contacts.linkedin = val.value;
            }
            if (angular.equals(val.type, "facebook")) {
                $scope.pageObject.contacts.facebook = val.value;
            }
            if (angular.equals(val.type, "googleplus")) {
                $scope.pageObject.contacts.googleplus = val.value;
            }
            if (angular.equals(val.type, "homepage")) {
                $scope.pageObject.contacts.homepage = val.value;
            }
        });
    }
    addJqueryDataToPage($scope, candidate, candidateOuter);
}


function addJqueryDataToPage($scope, candidate, candidateOuter) {
    $('.select2-lang-employee').val(candidate.languages);
    $('.select2-lang-employee').select2({
        tags: $scope.pageObject.variables.lang,
        tokenSeparators: [",", " "]
    });
    if (candidate.db != undefined) {
        $(".datepickerOfBirth").datetimepicker("setDate", new Date(candidate.db));
    }
    if (candidateOuter.dateEmployee != undefined) {
        $(".datepickerOfStartWorking").datetimepicker("setDate", new Date(candidateOuter.dateEmployee));
        $scope.startWorkingDate = $(".datepickerOfStartWorking").val();
    }
    if (candidateOuter.dateDepartment != undefined) {
        $(".datepickerOfStartDepartment").datetimepicker("setDate", new Date(candidateOuter.dateDepartment));
    }
    if (candidateOuter.datePosition != undefined) {
        $(".datepickerOfStartPosition").datetimepicker("setDate", new Date(candidateOuter.datePosition));
    }
    if (candidateOuter.dateSalary != undefined) {
        $(".datepickerOfStartSalary").datetimepicker("setDate", new Date(candidateOuter.dateSalary));
    }
    if (candidateOuter.dateDismiss != undefined) {
        $(".datepickerOfFinishDate").datetimepicker("setDate", new Date(candidateOuter.dateDismiss));
    }

    //$('.select2-employmentType').select2({
    //    tags: $scope.pageObject.variables.employmentType,
    //    tokenSeparators: [",", " "],
    //    initSelection: function(element, callback) {
    //        var data = {id: element.val(), text: element.val()};
    //        callback(data);
    //    }
    //});

    if (candidate.employmentType != undefined) {
        $('.select2-employmentType').select2('val', candidate.employmentType.split(","), true);
    }


}






















controller.controller('EmployeeOneController', ['$scope', 'Employee', '$routeParams', '$location', '$sce', '$rootScope',
    'Candidate', 'FileInit', 'notificationService', '$filter', '$translate', 'Service', '$uibModal', 'File',
    function($scope, Employee, $routeParams, $location, $sce, $rootScope, Candidate, FileInit, notificationService, $filter, $translate, Service, $uibModal, File) {
        $scope.pageObject = {
            employee: null,
            history:null,
            employeeStatus: [
                {value: "work"},
                {value: "dismiss"},
                //{value: "vacation"}
            ]
        };
        $scope.addLinkToCandidate = {
            name: '',
            url: ''
        };
        $rootScope.closeModal = function(){
            $scope.modalInstance.close();
        };
        $scope.onlyComments = false;
        $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
        $scope.addLinkErrorShow = false;
        $scope.showAddedLinks = false;
        $scope.showAddedFiles = false;
        $scope.showAddLink = false;
        $scope.showEditFileName = false;
        $rootScope.changeStatusOfEmployeeObject = {
            comment: "",
            oldStatus: null,
            newStatus: null,
            buttonIsClicked: false
        };
        function getEmployeeHistory(){
            Employee.getEmployeeHistory({id: $routeParams.id}, function(resp) {
                $scope.pageObject.history=resp.objects;
                angular.forEach($scope.history, function(val) {
                    if(val.type == 'vacancy_message' ||
                        val.type == 'candidate_message' ||
                        val.type == 'interview_message' ||
                        val.type == 'client_message'){
                        $scope.showComments();
                    }
                });
            });
        }
        getEmployeeHistory();

        if ($routeParams.id == undefined) {
            $location.path("/company/employees");
        }
        $scope.showModalChangeEmployeeStatus = function(status) {
            if (status != undefined) {
                $rootScope.changeStatusOfEmployeeObject.oldStatus = $scope.pageObject.employee.state;
                $rootScope.changeStatusOfEmployeeObject.newStatus = status;
                $scope.modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '../partials/modal/employee-change-status-in-employee.html',
                    resolve: {
                        items: function () {

                        }
                    }
                });
            }
        };

        $rootScope.saveNewEmployeeStatus = function() {
            if (!$rootScope.changeStatusOfEmployeeObject.buttonIsClicked) {
                $rootScope.changeStatusOfEmployeeObject.buttonIsClicked = true;
                Employee.changeState({
                    employeeId: $scope.pageObject.employee.employeeId,
                    employeeState: $rootScope.changeStatusOfEmployeeObject.newStatus,
                    comment: $rootScope.changeStatusOfEmployeeObject.comment,
                    date: $rootScope.changeStatusOfEmployeeObject.firedDate
                }, function(resp) {
                    if (resp.status == 'ok') {
                        $scope.pageObject.employee = resp.object;
                        $scope.pageObject.employee.state = resp.object.state;
                        $rootScope.changeStatusOfEmployeeObject.buttonIsClicked = false;
                        $rootScope.changeStatusOfEmployeeObject.comment = "";
                        $rootScope.closeModal();
                        getEmployeeHistory();
                    }
                }, function(error) {
                    $rootScope.changeStatusOfEmployeeObject.buttonIsClicked = false;
                    $rootScope.closeModal();
                });
            }
        };

        FileInit.initFileOption($scope, "candidate");
        $scope.callbackFile = function(resp, name) {
            if (!$scope.pageObject.employee.candidateId.files) {
                $scope.pageObject.employee.candidateId.files = [];
            }
            $scope.pageObject.employee.candidateId.files.push(resp);
            $scope.updateEmployee();
        };


        $scope.removeFile = function(fileId, elementId) {
            Candidate.removeFile({
                "candidateId": $scope.pageObject.employee.candidateId.candidateId,
                "fileId": fileId
            }, function(resp) {
                if (resp.status == 'ok') {
                    $scope.updateEmployee();
                }
            });
        };
        $scope.updateEmployee = function(){
            $scope.showAddedLinks = false;
            $scope.showAddedFiles = false;
            Employee.one({id: $routeParams.id}, function(resp) {
                if (resp.status == "ok") {
                    $rootScope.title = resp.object.candidateId.fullName + " | CleverStaff";
                    $scope.pageObject.employee = resp.object;
                    console.log($scope.pageObject.employee);
                    $('.candidateCoreSkills').html($scope.pageObject.employee.candidateId.coreSkills);
                    $scope.objectId = $scope.pageObject.employee.candidateId.candidateId;
                    $scope.relookShown = function(){
                        if($scope.pageObject.employee.candidateId.files){
                            if($scope.pageObject.employee.candidateId.files.length != undefined && $scope.pageObject.employee.candidateId.files.length != 0){
                                angular.forEach($scope.pageObject.employee.candidateId.files, function (val) {
                                    if(val.url){
                                        $scope.showAddedLinks = true;
                                    }
                                    if(!val.url){
                                        $scope.showAddedFiles = true;
                                    }
                                });
                            }
                        } else{
                            $scope.showAddedLinks = false;
                            $scope.showAddedFiles = false;
                        }
                    };
                    $scope.relookShown();
                    if ($scope.pageObject.employee.candidateId) {
                        /** @namespace $scope.pageObject.employee.candidateId.coreSkills */
                        if ($scope.pageObject.employee.candidateId.coreSkills) {
                            $scope.pageObject.employee.candidateId.coreSkills = $sce.trustAsHtml($scope.pageObject.employee.candidateId.coreSkills);
                        }
                        if ($scope.pageObject.employee.candidateId.descr) {
                            $scope.pageObject.employee.candidateId.descr = $sce.trustAsHtml($scope.pageObject.employee.candidateId.descr);
                        }
                    }
                } else {
                    $location.path("/company/employees");
                }
            });
        };
        $scope.updateEmployee();


        $scope.toEdit = function() {
            $location.path('/company/employees/edit/' + $scope.pageObject.employee.employeeId);
        };

        $('.ui.dropdown').dropdown();

        $scope.showModalAddCommentToEmployee = function () {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/add-comment-employee.html',
                size: '',
                resolve: function(){

                }
            });
            $(document).unbind("keydown").keydown(function(e) {
                if (e.ctrlKey == true && e.which == 13) {
                    $rootScope.addCommentInCandidate();
                }
            });
        };

        $rootScope.addCommentInCandidate = function () {
            if ($rootScope.commentEmployee.comment != undefined && $rootScope.commentEmployee.comment.length > 0) {
                $rootScope.commentEmployee.loading = true;
                Employee.setComment({
                    comment: $rootScope.commentEmployee.comment,
                    employeeId: $scope.pageObject.employee.employeeId
                }, function (resp) {
                    $rootScope.commentEmployee.loading = false;
                    $rootScope.closeModal();
                    $rootScope.commentEmployee.comment = null;
                    getEmployeeHistory();
                    //$scope.getLastEvent();
                }, function (error) {
                    $rootScope.commentEmployee.loading = false;
                });
            }
        };
        $scope.changeCommentEmployee = function(action){
            Employee.editComment({"comment": action.comment, "employeeHistoryId": action.employeeHistoryId}, function(resp){
                if (resp.status && angular.equals(resp.status, "error")) {
                    notificationService.error(resp.message);
                }
                else {
                    action.editCommentFlag = false;
                    action.descr = resp.object.descr;
                    action.new_komment = '';
                    action.dateEdit = resp.object.dateEdit;
                }
            });
        };

        // $scope.showDeleteCommentEmployee = function(resp) {
        //     $('.deleteCommentEmployee.modal').modal('show');
        //     $rootScope.commentRemove = resp;
        //     $rootScope.employeeHistoryId = resp.employeeHistoryId;
        // };
        $scope.showEditFileNameFunc = function(file){
            file.showEditFileName = !file.showEditFileName;
            file.showMenuEdDelFile = !file.showMenuEdDelFile;
            $scope.showMenuEdDelFile = false;
        };
        $scope.editFileName = function(data){
            File.changeFileName({
                "fileId":data.fileId,
                "name":data.fileName
            },function(resp){
                if(resp.status == 'ok'){
                    data.showEditFileName = false;
                }else{
                    notificationService.error(resp.message);
                }
            });
        };
        $scope.MenuEdDelFile = function(file){
            file.showMenuEdDelFile = true;
            $('body').mouseup(function (e) {
                var element = $(".editFileMenu");
                if ($(".editFileMenu").has(e.target).length == 0) {
                    file.showMenuEdDelFile = false;
                    $(document).off('mouseup');
                    $scope.$apply();
                }
            });
        };
        $scope.showDeleteComment = function(resp) {
            $scope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/delete-comment-candidate.html',
                resolve: {
                    items: function () {
                        return $scope.items;
                    }
                }
            });
            $rootScope.commentRemove = resp;
            $rootScope.employeeHistoryId = resp.employeeHistoryId;
        };


        $rootScope.deleteComment = function() {
            Employee.removeComment({
                employeeHistoryId: $rootScope.employeeHistoryId
            },function(resp){
                if (resp.status === "ok") {
                    notificationService.success($filter('translate')('Comment removed'));
                    getEmployeeHistory();
                } else {
                    //notificationService.error($filter('translate')('service temporarily unvailable'));
                }
                $rootScope.closeModal();
            })
        };
        $(".datepickerOfFired").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            language: $translate.use()
        }).on('hide', function(val) {
            if (val.date != undefined) {
                $rootScope.changeStatusOfEmployeeObject.firedDate = val.date.getTime();
                $scope.startFiredDate = $(".datepickerOfStartWorking").val();
            }
            $('.datepickerOfFired').blur();
        });

        $scope.showAddLinkFunc = function(){
            $scope.showAddLink = true;
        };
        $scope.closeAddLinkFunc = function(){
            $scope.showAddLink = false;
            $scope.addLinkToCandidate.name = null;
            $scope.addLinkToCandidate.url = null;
            $scope.addLinkErrorShow = false;
        };
        $scope.addLinkInCandidate = function(){
            if($scope.addLinkToCandidate.name && $scope.addLinkToCandidate.url){
                Candidate.addLink({
                    "candidateId": $scope.pageObject.employee.candidateId.candidateId,
                    "name" : $scope.addLinkToCandidate.name,
                    "url" : $scope.addLinkToCandidate.url
                }, function (resp){
                    if(resp.status === 'ok'){
                        $scope.addLinkToCandidate.name = null;
                        $scope.addLinkToCandidate.url = null;
                        $scope.addLinkErrorShow = false;
                        $scope.showAddLink = false;
                        //$scope.candidate.files.push(resp.object);
                        $scope.updateEmployee();
                    } else{
                        notificationService.error(resp.message);
                    }
                });
            } else{
                $scope.addLinkErrorShow = true;
            }
        };
        $scope.showCommentsFirstTime = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            Employee.getEmployeeHistory({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "id": $scope.pageObject.employee !== undefined ? $scope.pageObject.employee.employeeId : null,
                "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
                "onlyWithComment":true
            }, function(res) {
                $scope.pageObject.history = res.objects;
                $scope.onlyComments = true;
            });
        };
        $scope.showComments = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            Employee.getEmployeeHistory({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "id": $scope.pageObject.employee !== undefined ? $scope.pageObject.employee.employeeId : null,
                "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
                "onlyWithComment":true
            }, function(res) {
                $scope.pageObject.history = res.objects;
                $scope.onlyComments = true;
                $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
            });
        };
        $scope.showDetails = function(){
            //$scope.onlyComments = !$scope.onlyComments;
            Employee.getEmployeeHistory({
                "vacancyId": $scope.vacancy !== undefined ? $scope.vacancy.vacancyId : null,
                "id": $scope.pageObject.employee !== undefined ? $scope.pageObject.employee.employeeId : null,
                "clientId": $scope.client !== undefined ? $scope.client.clientId : null,
                "onlyWithComment":false
            }, function(res) {
                $scope.pageObject.history = res.objects;
                $scope.onlyComments = false;
                $('.showCommentSwitcher').prop("checked", !$scope.onlyComments);
            });
        };
        $scope.showCommentsSwitch = function () {
            if($scope.onlyComments) {
                $scope.showDetails();
            }  else {
                $scope.showComments();
            }
        };
    }
])
;

controller.controller('constructorReports', ["$rootScope", "$scope", "Vacancy", "Service", "$location",
    "$routeParams", "notificationService", "$filter","translateWords", "$translate", "vacancyStages","Stat", "Company", "vacancyStages", "Person", "$uibModal","CustomField",
    function($rootScope, $scope, Vacancy, Service, $location, $routeParams, notificationService, $filter,translateWords,
             $translate, vacancyStages, Stat, Company, vacancyStages, Person, $uibModal, CustomField) {

        $rootScope.loading = true;
        $scope.regions = [];
        $scope.timeMaxZone = false;
        $scope.timeMaxZone2 = false;
        $scope.updateReportBtn = false;
        $scope.firstTimeLoading = 0;
        $scope.vacancysStatusesParam =[];
        $scope.inVacancysStatusesParam =[];
        $scope.emptyAccount = true;
        $scope.build = false;
        $scope.choosenPersons = [];
        $scope.leastChosen = false;
        $scope.customStagesActive =[];
        $scope.activeInVacancyStatuses = [];
        $rootScope.modalInstance = undefined;
        $scope.withCandidates = false;
        $scope.checkListFields = ["client","salary","location","responsibles","status","dc", "daysInWork"];
        $scope.checkCustomListFields = [];
        $scope.vacancyStatuses =[
            {
                value: "open",
                added: true,
                count: 0
            },
            {
                value: "expects",
                added: false,
                count: 0
            },
            {
                value: "inwork",
                added: true,
                count: 0
            },
            {
                value: "payment",
                added: true,
                count: 0
            },
            {
                value: "completed",
                added: true,
                count: 0
            },
            {
                value: "canceled",
                added: false,
                count: 0
            }
        ];
        $scope.inVacancyStatuses =[
            {
                value: "longlist",
                added: true,
                count: 0
            },
            {
                value: "shortlist",
                added: true,
                count: 0
            },
            {
                value: "test_task",
                added: true,
                count: 0
            },
            {
                value: "interview",
                added: true,
                count: 0
            },
            {
                value: "interview_with_the_boss",
                added: true,
                count: 0
            },
            {
                value: "security_check",
                added: true,
                count: 0
            },
            {
                value: "tech_screen",
                added: true,
                count: 0
            },
            {
                value: "hr_interview",
                added: true,
                count: 0
            },
            {
                value: "tech_interview",
                added: true,
                count: 0
            },
            {
                value: "interview_with_the_client",
                added: true,
                count: 0
            },
            {
                value: "sent_offer",
                added: true,
                count: 0
            },
            {
                value: "accept_offer",
                added: true,
                count: 0
            },
            {
                value: "approved",
                added: true,
                count: 0
            },
            {
                value: "notafit",
                added: true,
                count: 0
            },
            {
                value: "declinedoffer",
                added: true,
                count: 0
            },
            {
                value: "no_response",
                added: true,
                count: 0
            },
            {
                value: "no_contacts",
                added: true,
                count: 0
            },
        ];

        function restAngularContext() {
            $rootScope.loading = false;
            $scope.$apply();
        }

        $scope.checkFields =  function (field, event) {
            var i, target = event.target;

            if($scope.checkListFieldsLength){
                $scope.checkListFieldsLength = false;
            }

            while(target.tagName !== 'UL'){
                if(target.tagName == 'LI'){
                    $(target).find('.fa').toggleClass('checkmark');
                    break;
                }
                target = target.parentNode;
            }
            if($scope.checkListFields.indexOf(field.value) == -1 && !field.id){
                field.visiable = true;
                $scope.checkListFields.push(field.value);
            }else if(!field.id){
                field.visiable = false;
                $scope.checkListFields.splice($scope.checkListFields.indexOf(field.value), 1);
            }

            if($scope.checkCustomListFields.indexOf(field.id) == -1 && field.id){
                field.visiable = true;
                $scope.checkCustomListFields.push(field.id);
            }else if(field.id){
                field.visiable = false;
                $scope.checkCustomListFields.splice($scope.checkCustomListFields.indexOf(field.id), 1);
            }

            if($scope.checkListFields.length == 0 && $scope.checkCustomListFields.length == 0) {
                $scope.checkListFieldsLength = true;
            }

            if($scope.build && !$scope.withCandidates) $scope.createReport(true);
        };


        $scope.saveCustomReport = function (reportsSave, formSaveCustomReport) {
            if(formSaveCustomReport.$valid) {
                translateWords.getTranslete("Report saved", $scope, 'reportSaved');
                var params = {
                    "from": $scope.startVacancyDate,
                    "to": $scope.endDate,
                    "types": null,
                    "vacancyId": null,
                    "vacancyStatuses": $scope.vacancysStatusesParam,
                    "interviewStatuses": $scope.inVacancysStatusesParam,
                    "interviewCreatorIds": $scope.choosenPersons,
                    "vacancyFields": $scope.checkListFields,
                    "withCandidates": $scope.withCandidates,
                    "customVacancyFields":$scope.checkCustomListFields,
                    "customReportName": reportsSave.name,
                    "descr": (reportsSave.description)? reportsSave.description : ""
                };

                Stat.requestSaveCustomVacancyReport(params)
                    .then((resp) => {
                        if(resp.status == "error"){
                            notificationService.error(resp.message);
                            $rootScope.loading = false;
                            $scope.$apply();
                            return;
                        }
                        notificationService.success($scope['reportSaved']);
                        $rootScope.closeModal();
                        $rootScope.modalInstance = undefined;
                        $location.path('/reports')
                    }, (error) => {
                        translateWords.getTranslete(error.text, $scope, 'error');
                        notificationService.error($scope.error)
                    });
            }
        };

        $scope.canselCustomReport = function () {
            $rootScope.closeModal();
        };

        $scope.btnSaveCustomVacancyReport = function () {
            $rootScope.modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '../partials/modal/save-custom-report-model.html?b1',
                backdrop: 'static',
                scope: $scope
            });
        };


        $rootScope.closeModal = function(){
            $rootScope.modalInstance.close();
        };

        angular.forEach($scope.vacancyStatuses, function(resp){
            if(resp.added){
                $scope.vacancysStatusesParam.push(resp.value);
            }
        });

        angular.forEach($scope.inVacancyStatuses, function(resp){
            if(resp.added){
                $scope.inVacancysStatusesParam.push(resp.value);
            }
        });

        vacancyStages.get(function(resp){
            var array = [];
            $scope.customStages = resp.object.interviewStates;
            angular.forEach($scope.customStages, function(res){
                res.added = false;
                res.count = 0;
                if(res.status != "D"){
                    array.push(res);
                }
            });
            $scope.customStages = array;
            $scope.customStagesFull =resp.object;
            $scope.getVacancyStages();
        });

        Person.getAllPersons(function (resp) {
            $scope.associativePerson = resp.object;
            angular.forEach($scope.associativePerson, function(res){
                res.added = false;
            });
        });

        $scope.regionIdToName = function (regionId) {
            var location = '-';
            angular.forEach($scope.regions, function(regVal){
                if(regionId == regVal.regionId){
                    location = regVal.fullName;
                }
            });

            return location;
        };
        $scope.inHover = function () {
            $('.info-content').show();
        };
        $scope.outHover = function () {
            $('.info-content').hide();
        };
        $scope.fieldsList = [
            {value:"client",visiable:true},
            {value:"salary",visiable:true},
            {value:"location",visiable:true},
            {value:"responsibles",visiable:true},
            {value:"status",visiable:true},
            {value:"dc",visiable:true},
            {value:"dateFinish",visiable:false},
            {value:"numberOfPositions",visiable:false},
            {value:"datePayment",visiable:false},
            {value:"budget",visiable:false},
            {value:"employmentType",visiable:false},
            {value:"candidatesAdded",visiable:false},
            {value:"candidatesInWork",visiable:false},
            {value:"candidatesApproved",visiable:false},
            {value:"candidatesRefused",visiable:false},
            {value:"daysInWork",visiable:true}];


        function concatCastomOrStandartFields(custom, standart) {
            custom.forEach(item => {
                standart.push({
                    value: item.title,
                    visiable: false,
                    id: item.fieldId
                })
            });
            return true;
        }

        $scope.createReport = function(ifCheck){
            if($scope.checkListFields.length == 0 && $scope.checkCustomListFields.length == 0){
                $scope.checkListFieldsLength = true;
                return;
            }

                Stat.requestGetActualVacancyStatistic2({
                    "from":$scope.startVacancyDate,
                    "to":$scope.endDate,
                    "types":null,
                    "vacancyId":null,
                    "vacancyStatuses": $scope.vacancysStatusesParam,
                    "interviewStatuses":$scope.inVacancysStatusesParam,
                    "interviewCreatorIds": $scope.choosenPersons,
                    "vacancyFields": ["client","numberOfPositions","salary","location","status","dateFinish",
                        "budget","candidatesAdded","candidatesApproved","daysInWork","responsibles","dc",
                        "datePayment","employmentType","candidatesRefused","candidatesInWork"],
                    "customVacancyFields":$scope.checkCustomListFields,
                    "withCandidates": $scope.withCandidates

                }, ifCheck)
                .then(response => {
                        $scope.regions = response.object["regions"];
                        $scope.vacancyData = response.object["entryList"].map(item => item["vacancy"]);
                        ($scope.vacancyData.length)? $scope.build = true : $scope.build = false;

                        restAngularContext();
                    });
        };

        $scope.updateReport = function(event){
            $scope.build = false;
            if($scope.timeMaxZone2){
                $rootScope.loading = false;
                return;
            }else if($scope.timeMaxZone){
                $rootScope.loading = false;
                return;
            }

            Company.requestGetInfo({
                name:'firstDateVacancy'
            })
                .then(resp => {
                    $scope.emptyAccount = false;

                    if(!resp.object){
                        $scope.emptyAccount = true;
                        return;
                    }
                    if($scope.firstTimeLoading == 0){
                        if(!$scope.startVacancyDate){
                                $scope.startVacancyDate = resp.object;
                                $(".startDate").datetimepicker("setDate", new Date(angular.copy($scope.startVacancyDate)));
                        }

                        if(!$scope.endDate){
                                var today = new Date();
                                $scope.endDate = today.getTime();
                                $(".endDate").datetimepicker("setDate", new Date(angular.copy($scope.endDate)));
                        }
                    }else{
                        var selectDate = new Date(angular.copy($scope.endDate));
                        var nowDate = new Date();

                        if(selectDate.getFullYear() == nowDate.getFullYear() && selectDate.getMonth() == nowDate.getMonth() && selectDate.getDate() == nowDate.getDate()) {
                            var today = new Date();
                            $scope.endDate = today.getTime();
                        }

                        if(!$scope.startVacancyDate || !$scope.endDate){
                            notificationService.error($filter('translate')('Please fill in all date fields'));
                        }
                    }
                    return true;
                })
                .then(resp =>{
                    if(!$scope.firstTimeLoading) return CustomField.requestGetFieldsTitles();
                    return Promise.reject();
                })
                .then(resp => concatCastomOrStandartFields(resp['objects'], $scope.fieldsList),resp => true)
                .then(resp => {
                    if($scope.startVacancyDate && $scope.endDate){
                        $scope.firstTimeLoading = $scope.firstTimeLoading + 1;
                        console.log( $scope.firstTimeLoading, ' $scope.firstTimeLoading');
                        return Stat.requestGetCountVacancyForActualVacancyStatistic({
                            "from":$scope.startVacancyDate,
                            "to":$scope.endDate,
                            "interviewCreatorIds": $scope.choosenPersons
                        })
                    }
                    return false;

                })
                .then(resp =>{
                    if(resp) {
                        var array = [];
                        $scope.totalVacancyStatusesCount = resp.object;

                        angular.forEach($scope.totalVacancyStatusesCount, function (r) {
                            angular.forEach($scope.vacancyStatuses, function (res) {
                                if (res.value == r.item) {
                                    res.count = r.count;
                                }
                            });
                        });

                        if ($scope.firstTimeLoading == 1) {
                            angular.forEach($scope.vacancyStatuses, function (res) {
                                if (res.count != 0 && (res.value != 'canceled' && res.value != 'expects')) {
                                    res.added = true;
                                    array.push(res.value);
                                } else {
                                    res.added = false
                                }
                            });

                            $scope.vacancysStatusesParam = array;

                            return Stat.requestGetCountInterviewForActualVacancyStatistic({
                                "from": $scope.startVacancyDate,
                                "to": $scope.endDate,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons
                            });
                        }
                    }
                    return false;
                })
                .then(resp =>{
                    if(resp) {
                        var arrayCustom = [];

                        angular.forEach(resp.object, function (r) {
                            angular.forEach($scope.inVacancyStatuses, function (res) {
                                if (res.value == r.item) {
                                    res.count = r.count;
                                }
                            });
                            angular.forEach($scope.customStages, function (customS) {
                                if (customS.customInterviewStateId == r.item) {
                                    customS.count = r.count;
                                }
                            });
                        });
                        angular.forEach($scope.inVacancyStatuses, function (res) {
                            if (res.count != 0) {
                                arrayCustom.push(res.value);
                                $scope.activeInVacancyStatuses.push(res);
                            } else {
                                res.added = false;
                            }
                        });
                        angular.forEach($scope.customStages, function (res) {
                            if (res.count != 0) {
                                arrayCustom.push(res.customInterviewStateId);
                                res.added = true;
                                $scope.customStagesActive.push(res);
                            } else {
                                res.added = false;
                            }
                        });
                        $scope.inVacancysStatusesParam = arrayCustom;
                    }
                    return true;

                })
                .then(resp => {
                    if($scope.firstTimeLoading != 1 && $scope.startVacancyDate && $scope.endDate){
                        Promise.all([
                            Stat.requestGetCountInterviewForActualVacancyStatistic({
                                "from":$scope.startVacancyDate,
                                "to":$scope.endDate,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons
                            }),
                            Stat.requestGetActualVacancyStatistic2({
                                "from":$scope.startVacancyDate,
                                "to":$scope.endDate,
                                "types":null,
                                "vacancyId":null,
                                "vacancyStatuses": $scope.vacancysStatusesParam,
                                "interviewStatuses":$scope.inVacancysStatusesParam,
                                "interviewCreatorIds": $scope.choosenPersons,
                                "vacancyFields": $scope.checkListFields,
                                "withCandidates": $scope.withCandidates
                            }, false),
                            CustomField.requestGetFieldsTitles()
                        ])
                            .then(resp => {
                                responseSetInView(resp);
                                $rootScope.loading  = false;
                                $scope.$apply();
                            });
                    }else{
                        $rootScope.loading  = false;
                        $scope.$apply();
                    }
                });



        };
        $scope.updateReport();

        function responseSetInView(data) {
            data.forEach(item => {
                if(item['request'] == 'stagesOrCount'){
                    angular.forEach(item.object, function(r){
                        angular.forEach($scope.inVacancyStatuses, function(res){
                            if (res.value == r.item){
                                res.count = r.count;
                            }
                        });
                        angular.forEach($scope.customStages, function(customS){
                            if (customS.customInterviewStateId == r.item){
                                customS.count = r.count;
                            }
                        });
                    });
                }else if(item['request'] == 'Statistic2') {
                    $scope.mainData = item.object['entryList'];

                    angular.forEach($scope.mainData, function (data) {
                        angular.forEach(data.info, function (res) {
                            // res.candidate.languages = Service.langTranslator(res.candidate.languages);
                            angular.forEach(item.object.persons, function (val) {
                                if (res.interview.creatorId == val.userId) {
                                    res.interview.creatorCutFullName = val.cutFullName;
                                }
                            });

                            $scope.regions = item.object.regions;
                            angular.forEach(item.object.regions, function (valRegion) {
                                if (res.candidate.regionId == valRegion.regionId) {
                                    res.candidate.regionfullName = valRegion.displayFullName;
                                }
                            });

                            angular.forEach($scope.customStagesFull.interviewStates, function (customStatus) {
                                if (res.action.stateOld == customStatus.customInterviewStateId || res.action.stateNew === customStatus.customInterviewStateId) {
                                    res.interview.state = customStatus.name;
                                }
                            });

                        });
                    });
                }
            });
        }

        $scope.loadingExcel = false;
        $scope.downloadReport = function () {
            $rootScope.loading = true;
            if($scope.loadingExcel == false){
                $scope.loadingExcel = true;
                Stat.createVacancyStatisticExcel({
                    "from":$scope.startVacancyDate,
                    "to":$scope.endDate,
                    "types":null,
                    "vacancyId":null,
                    "vacancyStatuses": $scope.vacancysStatusesParam,
                    "interviewStatuses":$scope.inVacancysStatusesParam,
                    "interviewCreatorIds": $scope.choosenPersons,
                    "vacancyFields":$scope.checkListFields,
                    "customVacancyFields":$scope.checkCustomListFields,
                    "withCandidates": $scope.withCandidates
                }, function (resp) {
                    if (resp.status == 'ok') {
                        var sr = $rootScope.frontMode == "war" ? "/hr/" : "/hrdemo/";
                        $('#downloadReport')[0].href = sr + 'getapp?id=' + resp.object;
                        $('#downloadReport')[0].click();
                    }
                    $scope.loadingExcel = false;
                    // $scope.$apply();
                    $rootScope.loading = false;
                });
            }
        };
        $scope.getPersonFullName = function (id) {
            var fullName = '';
            angular.forEach($scope.associativePerson, function (resp) {
                if(resp.userId == id) {
                    fullName = resp.cutFullName;
                }
            });
            return fullName;
        };

        $scope.changeVacancyStatuses = function(status){
            if($scope.vacancysStatusesParam.length > 1){
                if(status.added){
                    status.added = false;
                    var array =[];
                    angular.forEach($scope.vacancyStatuses, function(resp){
                        if(resp.added){
                            array.push(resp.value);
                        }
                    });
                    $scope.vacancysStatusesParam = array;
                }else{
                    status.added = true;
                    $scope.vacancysStatusesParam.push(status.value);
                }
            }else{
                if(status.added){
                    notificationService.error($filter('translate')('It is necessary to select at least one status'));
                }else{
                    status.added = true;
                    $scope.vacancysStatusesParam.push(status.value);
                }
            }
        };
        $scope.allStatuses = {
            standard: false,
            reasons: false,
            custom: false
        };
        $scope.vacancyStandardStages = [];
        $scope.vacancyReasonsForRefusal = [];
        $scope.vacancyCustomStages = [];

        $scope.getVacancyStages = function(){
            angular.forEach($scope.inVacancyStatuses, function(resp){
                if(resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                    && resp.value != 'no_response'){
                    $scope.vacancyStandardStages.push(resp);
                }
                else {
                    $scope.vacancyReasonsForRefusal.push(resp);
                }
            });
            angular.forEach($scope.customStages, function(resp){
                if(resp.type != 'refuse'){
                    $scope.vacancyCustomStages.push(resp);
                }
                else if(resp.type == 'refuse'){
                    $scope.vacancyReasonsForRefusal.push(resp);
                }
            });
        };
        $scope.checkAllChooseStatuses = function(){
            $scope.allStatuses.standard = $scope.checkStatuses($scope.vacancyStandardStages);
            $scope.allStatuses.reasons = $scope.checkStatuses($scope.vacancyReasonsForRefusal);
            $scope.allStatuses.custom = $scope.checkStatuses($scope.vacancyCustomStages);
        };
        $scope.checkStatuses = function(blockStatuses){
            var number = 0;

            angular.forEach(blockStatuses, function(resp){
                if(!resp.added){
                    number++;
                    return false;
                }
            });
            if(number == 0){
                return true;
            }
        };

        $scope.changeButtonForAllStatuses = function(status) {
            for(var key in $scope.allStatuses){
                if(key == status){
                    if($scope.allStatuses[key]){
                        $scope.allStatuses[key] = false;
                        return false;
                    } else {
                        $scope.allStatuses[key] = true;
                        return true;
                    }
                }
            }
        };
        $scope.addAll = false;
        $scope.changeAllVacancyStatuses = function(nameBlockStatuses){
            var add = $scope.changeButtonForAllStatuses(nameBlockStatuses);

            if(nameBlockStatuses == 'standard'){

                angular.forEach($scope.inVacancyStatuses,function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                        && resp.value != 'no_response' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.value != 'no_contacts' && resp.value != 'notafit' && resp.value != 'declinedoffer'
                        && resp.value != 'no_response' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                })

            } else if(nameBlockStatuses == 'reasons'){
                angular.forEach($scope.inVacancyStatuses,function(resp){
                    $scope.addAll = true;
                    if((!resp.added && add) && (resp.value == 'no_contacts' || resp.value == 'notafit' || resp.value == 'declinedoffer' || resp.value == 'no_response')){
                        $scope.changeInVacancyStatuses(resp);
                    } else if((resp.added && !add) && (resp.value == 'no_contacts' || resp.value == 'notafit' || resp.value == 'declinedoffer' || resp.value == 'no_response')){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
                angular.forEach($scope.customStages, function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.type == 'refuse' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.type == 'refuse' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
            } else if(nameBlockStatuses == 'custom'){
                angular.forEach($scope.customStages, function(resp){
                    $scope.addAll = true;
                    if(!resp.added && resp.type != 'refuse' && add){
                        $scope.changeInVacancyStatuses(resp);
                    } else if(resp.added && resp.type != 'refuse' && !add){
                        $scope.changeInVacancyStatuses(resp);
                    } else {
                        $scope.addAll = false;
                    }
                });
            }
        };

        $scope.changeInVacancyStatuses = function(status){

            if($scope.inVacancysStatusesParam.length > 1){
                if(status.added){
                    if(status.customInterviewStateId){
                        $scope.customStagesActive.splice($scope.customStagesActive.indexOf(status), 1);
                    }else{
                        $scope.activeInVacancyStatuses.splice($scope.activeInVacancyStatuses.indexOf(status), 1);
                    }
                    status.added = false;
                    var array =[];
                    angular.forEach($scope.inVacancyStatuses, function(resp){
                        if(resp.added){
                            array.push(resp.value);
                        }
                    });
                    angular.forEach($scope.customStages, function(resp){
                        if(resp.added){
                            array.push(resp.customInterviewStateId);
                        }
                    });
                    $scope.inVacancysStatusesParam = array;
                }else{
                    status.added = true;
                    if(status.customInterviewStateId){
                        $scope.inVacancysStatusesParam.push(status.customInterviewStateId);
                        $scope.customStagesActive.push(status);
                    }else{
                        $scope.inVacancysStatusesParam.push(status.value);
                        $scope.activeInVacancyStatuses.push(status);
                    }
                }
            }else{
                if(status.added){
                    notificationService.error($filter('translate')('It is necessary to select at least one stage'));
                }else{
                    status.added = true;
                    if(status.customInterviewStateId){
                        $scope.inVacancysStatusesParam.push(status.customInterviewStateId);
                        $scope.customStagesActive.push(status);
                    }else{
                        $scope.inVacancysStatusesParam.push(status.value);
                        $scope.activeInVacancyStatuses.push(status);
                    }
                }
            }
            if(!$scope.addAll){
                $scope.checkAllChooseStatuses();
            }
            $scope.addAll = false;
        };

        $scope.changePersonAdd = function(person){
            $scope.leastChosen = false;
            if(!person.added){
                person.added = true;
                $scope.choosenPersons.push(person.userId)
            }else{
                person.added = false;
                $scope.choosenPersons.splice($scope.choosenPersons.indexOf(person.userId), 1);
            }
            angular.forEach($scope.associativePerson,function(resp){
                if(resp.added){
                    $scope.leastChosen = true;
                }
            });
        };

        var now = Date.now();
            now += (2592000000 * 2);

        $(".startDate").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            endDate: new Date(now)
        }).on('changeDate', function(data) {
            $scope.startVacancyDate = data.date.getTime();
            if($scope.startVacancyDate > new Date()){
                $scope.timeMaxZone = true;
            }else{ $scope.timeMaxZone = false;}

            $scope.$apply();
        }).on('hide', function() {
            if ($('.startDate').val() == "") {
                $scope.startVacancyDate = null;
            }
        });

        $(".endDate").datetimepicker({
            format: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? "dd/mm/yyyy" : "mm/dd/yyyy",
            startView: 4,
            minView: 2,
            autoclose: true,
            weekStart: $rootScope.currentLang == 'ru' || $rootScope.currentLang == 'ua' ? 1 : 7,
            language: $translate.use(),
            endDate: new Date(now)
        }).on('changeDate', function(data) {
            $scope.endDate = data.date.getTime();
            if($scope.endDate > new Date()){
                $scope.timeMaxZone2 = true;
            }else{ $scope.timeMaxZone2 = false;}

            $scope.$apply();
        }).on('hide', function() {
            if ($('.endDate').val() == "") {
                $scope.endDate = null;
            }
        });
        $scope.showChoosingMenu = function(){
            if($('.chooseStatusMenu').css('display') == 'none'){
                $('.chooseStatusMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.chooseStatusMenu').has(e.target).length === 0) {
                        $('.chooseStatusMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.chooseStatusMenu').hide("500");
            }
        };
        $scope.showChoosingMenuStages = function(event){
            let target = event.target;

            if($('.chooseStagesMenu').css('display') == 'none'){
                $('.chooseStagesMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.chooseStagesMenu').has(e.target).length === 0) {
                        $('.chooseStagesMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.chooseStagesMenu').hide("500");
            }
        };
        $scope.showPersonMenu = function(){
            if($('.choosePersonMenu').css('display') == 'none'){
                $('.choosePersonMenu').show('500');
                $('body').mouseup(function(e) {
                    if ($('.choosePersonMenu').has(e.target).length === 0) {
                        $('.choosePersonMenu').hide("500");
                        $(document).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.choosePersonMenu').hide("500");
            }
        };

        $scope.showChoosingFields = function () {
            $scope.checkListFieldsLength = false;
            if($('.chooseListFields').css('display') == 'none'){
                $('.chooseListFields').show('500');
                $('body').mouseup(function(e) {
                    if ($('.chooseListFields').has(e.target).length === 0) {
                        $('.chooseListFields').hide("500");
                        $(this).off('mouseup');
                    }
                });
            }else{
                $('body').unbind('mouseup');
                $('.chooseListFields').hide("500");
            }
        };

        $scope.popup = function(){
            $('.commentBlog').popup({
                position : 'right center'
            });
        };
        $scope.popup();

        Vacancy.all(Vacancy.searchOptions(), function(response) {
            $rootScope.objectSize = response['objects'] != undefined ? response['total'] : 0;
        });
        $scope.getCompanyParams = function(){
            Company.getParams(function(resp){
                $scope.companyParams = resp.object;
                $rootScope.publicLink = $location.$$protocol + "://" + $location.$$host + "/i#/" + $scope.companyParams.nameAlias + "-vacancies";
            });
        };
        $scope.getCompanyParams();
    }
]);





 function CustomReportEditCtrl($rootScope, $scope, Vacancy, Service, $location, $routeParams, notificationService, $filter, translateWords,
                       $translate, vacancyStages, Stat, Company, vacancyStages, Person, $uibModal, CustomReportsService, CustomReportEditService, $uibModal) {
    try {
        CustomReportEditService.buildReport.call(this, $scope);

        this.showChoosingMenu           = CustomReportsService.showChoosingMenu;
        this.removeReport               = CustomReportsService.removeReport;
        this.remove                     = CustomReportsService.remove;
        this.closeModalOnRemove         = CustomReportsService.closeModal;
        this.inHover                    = CustomReportsService.inHover;
        this.outHover                   = CustomReportsService.outHover;
        this.data                       = CustomReportEditService.editReport;
        this.fieldsList                 = CustomReportEditService.editReport.vacancyFields;
        this.selectValue                = CustomReportEditService.selectValue;
        this.selectValueStages          = CustomReportEditService.selectValueStages;
        this.selectAllStages            = CustomReportEditService.selectAllStages;
        this.selectValueVacancyFields   = CustomReportEditService.selectValueVacancyFields;
        this.changeNameOrDescription    = CustomReportEditService.changeNameOrDescription;
        this.editNameOrDescr            = CustomReportEditService.editNameOrDescr;
        this.closeModal                 = CustomReportEditService.closeModal;
        this.saveNameOrDescr            = CustomReportEditService.saveNameOrDescr;
        this.saveCustomReport           = CustomReportEditService.saveCustomReport;
        this.showOrHideCandidates       = CustomReportEditService.showOrHideCandidates;
    }catch(error){
        console.log(error, 'error')
    }
 }
 controller
    .controller("CustomReportEditCtrl", ["$rootScope", "$scope", "Vacancy", "Service", "$location",
        "$routeParams", "notificationService", "$filter", "translateWords", "$translate",
        "vacancyStages", "Stat", "Company", "vacancyStages", "Person", "$uibModal","CustomReportsService","CustomReportEditService","$uibModal",CustomReportEditCtrl]);




    function customReports($rootScope, $scope, Vacancy, Service, $location, $routeParams, notificationService, $filter, translateWords,
                           $translate, vacancyStages, Stat, Company, vacancyStages, Person, $uibModal, CustomReportsService) {
        try {
            this.dataReport        = CustomReportsService.data;
            this.inHover           = CustomReportsService.inHover;
            this.outHover          = CustomReportsService.outHover;
            this.downloadReport    = CustomReportsService.downloadReport;
            this.getPersonFullName = CustomReportsService.getPersonFullName;
            this.regionIdToName    = CustomReportsService.regionIdToName;
            this.remove            = CustomReportsService.remove;
            this.removeReport      = CustomReportsService.removeReport;
            this.closeModal        = CustomReportsService.closeModal;
            this.timeMaxZone       = CustomReportsService.timeMaxZone;
            this.timeMaxZone2      = CustomReportsService.timeMaxZone2;
            CustomReportsService.vacancyStages.call(this);
            CustomReportsService.getAllPersons.call(this);
            CustomReportsService.getDate.call(this, this.dataReport);
            CustomReportsService.buildReport.call(this, $scope);

        }catch(erorr){
            console.log(erorr, 'erorr CustomReports')
        }
    }
    controller
        .controller("CustomReports", ["$rootScope", "$scope", "Vacancy", "Service", "$location",
            "$routeParams", "notificationService", "$filter", "translateWords", "$translate",
            "vacancyStages", "Stat", "Company", "vacancyStages", "Person", "$uibModal","CustomReportsService", customReports]);




function MyReportsCtrl($rootScope, $scope, Vacancy, Service, $location, $routeParams, notificationService, $filter, translateWords,
                       $translate, vacancyStages, Stat, Company, vacancyStages, Person, $uibModal, CustomReportsService) {
    try {

        Stat.requestGetCustomVacancyReports()
            .then((resp) => {
                this.customReports = resp['objects'];
                $rootScope.loading = false;
                $scope.$apply();
            });

        this.getReport    = CustomReportsService.getReport;
        this.remove       = CustomReportsService.remove;
        this.removeReport = CustomReportsService.removeReport;
    }catch(erorr){
        console.log('Ошибка в customReports', erorr);
    }
}
controller
    .controller("MyReportsCtrl", ["$rootScope", "$scope", "Vacancy", "Service", "$location",
        "$routeParams", "notificationService", "$filter", "translateWords", "$translate",
        "vacancyStages", "Stat", "Company", "vacancyStages", "Person", "$uibModal","CustomReportsService", MyReportsCtrl]);


